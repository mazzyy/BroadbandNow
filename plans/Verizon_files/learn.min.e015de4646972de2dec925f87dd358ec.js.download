/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define([ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}(function( $ ) {

$.ui = $.ui || {};

var version = $.ui.version = "1.12.1";


/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/



var widgetUuid = 0;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// Http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( $.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					current = $( $.unique( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		this._on( options.element, {
			"remove": "_untrackClassesElement"
		} );

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName ).off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

var widget = $.widget;


/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/


( function() {
var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[ 0 ];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div " +
				"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
				"<div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[ 0 ];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[ 0 ].clientWidth;
		}

		div.remove();

		return ( cachedScrollbarWidth = w1 - w2 );
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[ 0 ] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
			hasOffset = !isWindow && !isDocument;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: withinElement.outerWidth(),
			height: withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// Make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[ 0 ].preventDefault ) {

		// Force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;

	// Clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1 ) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// Calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// Reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	} );

	// Normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each( function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
				scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
				scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				} );
			}
		} );

		if ( options.using ) {

			// Adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	} );
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// Element is wider than within
			if ( data.collisionWidth > outerWidth ) {

				// Element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
						withinOffset;
					position.left += overLeft - newOverRight;

				// Element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;

				// Element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}

			// Too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;

			// Too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;

			// Adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// Element is taller than within
			if ( data.collisionHeight > outerHeight ) {

				// Element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
						withinOffset;
					position.top += overTop - newOverBottom;

				// Element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;

				// Element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}

			// Too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;

			// Too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;

			// Adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
					outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
					atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
					outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
					offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

} )();

var position = $.ui.position;


/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/


var data = $.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );

/*!
 * jQuery UI Disable Selection 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: disableSelection
//>>group: Core
//>>description: Disable selection of text content within the set of matched elements.
//>>docs: http://api.jqueryui.com/disableSelection/

// This file is deprecated


var disableSelection = $.fn.extend( {
	disableSelection: ( function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.on( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			} );
		};
	} )(),

	enableSelection: function() {
		return this.off( ".ui-disableSelection" );
	}
} );


/*!
 * jQuery UI Effects 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Effects Core
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/category/effects-core/
//>>demos: http://jqueryui.com/effect/



var dataSpace = "ui-effects-",
	dataSpaceStyle = "ui-effects-style",
	dataSpaceAnimated = "ui-effects-animated",

	// Create a local jQuery because jQuery Color relies on it and the
	// global may not exist with AMD and a custom build (#10199)
	jQuery = $;

$.effects = {
	effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
( function( jQuery, undefined ) {

	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " +
		"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	// Plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

	// A set of RE's that can match strings and generate color tuples.
	stringParsers = [ {
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {

			// This regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 )
				];
			}
		}, {

			// This regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		} ],

	// JQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// Element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// Colors = jQuery.Color.names
	colors,

	// Local aliases of functions called often
	each = jQuery.each;

// Determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// Define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
} );

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return ( allowEmpty || !prop.def ) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {

		// We add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return ( value + type.mod ) % type.mod;
	}

	// For now all property types without mod have min and max
	return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// If this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// Exit each( stringParsers ) here because we matched
			return false;
		}
	} );

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// If this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// Named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = jQuery.type( red ),
			rgba = this._rgba = [];

		// More than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			} );
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				} );
			} else {
				each( spaces, function( spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// If the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// If the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// This is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					} );

					// Everything defined but alpha?
					if ( inst[ cache ] &&
							jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {

						// Use the default of 1
						inst[ cache ][ 3 ] = 1;
						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				} );
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if ( isCache ) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				} );
			}
			return same;
		} );
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		} );
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// If null, don't override start value
			if ( endValue === null ) {
				return;
			}

			// If null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		} );
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {

		// If we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		} ) );
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				return v == null ? ( i > 2 ? 1 : 0 ) : v;
			} );

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// Catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			} );

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// Default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		} ).join( "" );
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
} );
color.fn.parse.prototype = color.fn;

// Hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + ( q - p ) * h * 6;
	}
	if ( h * 2 < 1 ) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
	}
	return p;
}

spaces.hsla.to = function( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};

each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// Makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// Generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = jQuery.type( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		} );

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// Makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {

		// Alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var vtype = jQuery.type( value ),
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
				local = this[ fn ](),
				cur = local[ prop.idx ],
				match;

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = jQuery.type( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	} );
} );

// Add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" ||
						( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							( backgroundColor === "" || backgroundColor === "transparent" ) &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch ( e ) {

					// Wrapped to prevent IE from throwing errors on "invalid" values like
					// 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	} );

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		} );
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {

	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};

} )( jQuery );

/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
( function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

$.each(
	[ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ],
	function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	}
);

function getElementStyles( elem ) {
	var key, len,
		style = elem.ownerDocument.defaultView ?
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
			elem.currentStyle,
		styles = {};

	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
		len = style.length;
		while ( len-- ) {
			key = style[ len ];
			if ( typeof style[ key ] === "string" ) {
				styles[ $.camelCase( key ) ] = style[ key ];
			}
		}

	// Support: Opera, IE <9
	} else {
		for ( key in style ) {
			if ( typeof style[ key ] === "string" ) {
				styles[ key ] = style[ key ];
			}
		}
	}

	return styles;
}

function styleDifference( oldStyle, newStyle ) {
	var diff = {},
		name, value;

	for ( name in newStyle ) {
		value = newStyle[ name ];
		if ( oldStyle[ name ] !== value ) {
			if ( !shorthandStyles[ name ] ) {
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
					diff[ name ] = value;
				}
			}
		}
	}

	return diff;
}

// Support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

$.effects.animateClass = function( value, duration, easing, callback ) {
	var o = $.speed( duration, easing, callback );

	return this.queue( function() {
		var animated = $( this ),
			baseClass = animated.attr( "class" ) || "",
			applyClassChange,
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

		// Map the animated objects to store the original styles.
		allAnimations = allAnimations.map( function() {
			var el = $( this );
			return {
				el: el,
				start: getElementStyles( this )
			};
		} );

		// Apply class change
		applyClassChange = function() {
			$.each( classAnimationActions, function( i, action ) {
				if ( value[ action ] ) {
					animated[ action + "Class" ]( value[ action ] );
				}
			} );
		};
		applyClassChange();

		// Map all animated objects again - calculate new styles and diff
		allAnimations = allAnimations.map( function() {
			this.end = getElementStyles( this.el[ 0 ] );
			this.diff = styleDifference( this.start, this.end );
			return this;
		} );

		// Apply original class
		animated.attr( "class", baseClass );

		// Map all animated objects again - this time collecting a promise
		allAnimations = allAnimations.map( function() {
			var styleInfo = this,
				dfd = $.Deferred(),
				opts = $.extend( {}, o, {
					queue: false,
					complete: function() {
						dfd.resolve( styleInfo );
					}
				} );

			this.el.animate( this.diff, opts );
			return dfd.promise();
		} );

		// Once all animations have completed:
		$.when.apply( $, allAnimations.get() ).done( function() {

			// Set the final class
			applyClassChange();

			// For each animated element,
			// clear all css properties that were animated
			$.each( arguments, function() {
				var el = this.el;
				$.each( this.diff, function( key ) {
					el.css( key, "" );
				} );
			} );

			// This is guarnteed to be there if you use jQuery.speed()
			// it also handles dequeuing the next anim...
			o.complete.call( animated[ 0 ] );
		} );
	} );
};

$.fn.extend( {
	addClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.addClass ),

	removeClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return arguments.length > 1 ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.removeClass ),

	toggleClass: ( function( orig ) {
		return function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {

					// Without speed parameter
					return orig.apply( this, arguments );
				} else {
					return $.effects.animateClass.call( this,
						( force ? { add: classNames } : { remove: classNames } ),
						speed, easing, callback );
				}
			} else {

				// Without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		};
	} )( $.fn.toggleClass ),

	switchClass: function( remove, add, speed, easing, callback ) {
		return $.effects.animateClass.call( this, {
			add: add,
			remove: remove
		}, speed, easing, callback );
	}
} );

} )();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

( function() {

if ( $.expr && $.expr.filters && $.expr.filters.animated ) {
	$.expr.filters.animated = ( function( orig ) {
		return function( elem ) {
			return !!$( elem ).data( dataSpaceAnimated ) || orig( elem );
		};
	} )( $.expr.filters.animated );
}

if ( $.uiBackCompat !== false ) {
	$.extend( $.effects, {

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			var i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if ( mode === "toggle" ) {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// If the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				return element.parent();
			}

			// Wrap the element
			var props = {
					width: element.outerWidth( true ),
					height: element.outerHeight( true ),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css( {
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					} ),

				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// Support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch ( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).trigger( "focus" );
			}

			// Hotfix for jQuery 1.4 since some change in wrap() seems to actually
			// lose the reference to the wrapped element
			wrapper = element.parent();

			// Transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css( { position: "relative" } );
				element.css( { position: "relative" } );
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				} );
				$.each( [ "top", "left", "bottom", "right" ], function( i, pos ) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				} );
				element.css( {
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				} );
			}
			element.css( size );

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).trigger( "focus" );
				}
			}

			return element;
		}
	} );
}

$.extend( $.effects, {
	version: "1.12.1",

	define: function( name, mode, effect ) {
		if ( !effect ) {
			effect = mode;
			mode = "effect";
		}

		$.effects.effect[ name ] = effect;
		$.effects.effect[ name ].mode = mode;

		return effect;
	},

	scaledDimensions: function( element, percent, direction ) {
		if ( percent === 0 ) {
			return {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};
		}

		var x = direction !== "horizontal" ? ( ( percent || 100 ) / 100 ) : 1,
			y = direction !== "vertical" ? ( ( percent || 100 ) / 100 ) : 1;

		return {
			height: element.height() * y,
			width: element.width() * x,
			outerHeight: element.outerHeight() * y,
			outerWidth: element.outerWidth() * x
		};

	},

	clipToBox: function( animation ) {
		return {
			width: animation.clip.right - animation.clip.left,
			height: animation.clip.bottom - animation.clip.top,
			left: animation.clip.left,
			top: animation.clip.top
		};
	},

	// Injects recently queued functions to be first in line (after "inprogress")
	unshift: function( element, queueLength, count ) {
		var queue = element.queue();

		if ( queueLength > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queueLength, count ) ) );
		}
		element.dequeue();
	},

	saveStyle: function( element ) {
		element.data( dataSpaceStyle, element[ 0 ].style.cssText );
	},

	restoreStyle: function( element ) {
		element[ 0 ].style.cssText = element.data( dataSpaceStyle ) || "";
		element.removeData( dataSpaceStyle );
	},

	mode: function( element, mode ) {
		var hidden = element.is( ":hidden" );

		if ( mode === "toggle" ) {
			mode = hidden ? "show" : "hide";
		}
		if ( hidden ? mode === "hide" : mode === "show" ) {
			mode = "none";
		}
		return mode;
	},

	// Translates a [top,left] array into a baseline value
	getBaseline: function( origin, original ) {
		var y, x;

		switch ( origin[ 0 ] ) {
		case "top":
			y = 0;
			break;
		case "middle":
			y = 0.5;
			break;
		case "bottom":
			y = 1;
			break;
		default:
			y = origin[ 0 ] / original.height;
		}

		switch ( origin[ 1 ] ) {
		case "left":
			x = 0;
			break;
		case "center":
			x = 0.5;
			break;
		case "right":
			x = 1;
			break;
		default:
			x = origin[ 1 ] / original.width;
		}

		return {
			x: x,
			y: y
		};
	},

	// Creates a placeholder element so that the original element can be made absolute
	createPlaceholder: function( element ) {
		var placeholder,
			cssPosition = element.css( "position" ),
			position = element.position();

		// Lock in margins first to account for form elements, which
		// will change margin if you explicitly set height
		// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
		// Support: Safari
		element.css( {
			marginTop: element.css( "marginTop" ),
			marginBottom: element.css( "marginBottom" ),
			marginLeft: element.css( "marginLeft" ),
			marginRight: element.css( "marginRight" )
		} )
		.outerWidth( element.outerWidth() )
		.outerHeight( element.outerHeight() );

		if ( /^(static|relative)/.test( cssPosition ) ) {
			cssPosition = "absolute";

			placeholder = $( "<" + element[ 0 ].nodeName + ">" ).insertAfter( element ).css( {

				// Convert inline to inline block to account for inline elements
				// that turn to inline block based on content (like img)
				display: /^(inline|ruby)/.test( element.css( "display" ) ) ?
					"inline-block" :
					"block",
				visibility: "hidden",

				// Margins need to be set to account for margin collapse
				marginTop: element.css( "marginTop" ),
				marginBottom: element.css( "marginBottom" ),
				marginLeft: element.css( "marginLeft" ),
				marginRight: element.css( "marginRight" ),
				"float": element.css( "float" )
			} )
			.outerWidth( element.outerWidth() )
			.outerHeight( element.outerHeight() )
			.addClass( "ui-effects-placeholder" );

			element.data( dataSpace + "placeholder", placeholder );
		}

		element.css( {
			position: cssPosition,
			left: position.left,
			top: position.top
		} );

		return placeholder;
	},

	removePlaceholder: function( element ) {
		var dataKey = dataSpace + "placeholder",
				placeholder = element.data( dataKey );

		if ( placeholder ) {
			placeholder.remove();
			element.removeData( dataKey );
		}
	},

	// Removes a placeholder if it exists and restores
	// properties that were modified during placeholder creation
	cleanUp: function( element ) {
		$.effects.restoreStyle( element );
		$.effects.removePlaceholder( element );
	},

	setTransition: function( element, list, factor, value ) {
		value = value || {};
		$.each( list, function( i, x ) {
			var unit = element.cssUnit( x );
			if ( unit[ 0 ] > 0 ) {
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
			}
		} );
		return value;
	}
} );

// Return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

	// Allow passing all options as the first parameter
	if ( $.isPlainObject( effect ) ) {
		options = effect;
		effect = effect.effect;
	}

	// Convert to an object
	effect = { effect: effect };

	// Catch (effect, null, ...)
	if ( options == null ) {
		options = {};
	}

	// Catch (effect, callback)
	if ( $.isFunction( options ) ) {
		callback = options;
		speed = null;
		options = {};
	}

	// Catch (effect, speed, ?)
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
		callback = speed;
		speed = options;
		options = {};
	}

	// Catch (effect, options, callback)
	if ( $.isFunction( speed ) ) {
		callback = speed;
		speed = null;
	}

	// Add options to effect
	if ( options ) {
		$.extend( effect, options );
	}

	speed = speed || options.duration;
	effect.duration = $.fx.off ? 0 :
		typeof speed === "number" ? speed :
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
		$.fx.speeds._default;

	effect.complete = callback || options.complete;

	return effect;
}

function standardAnimationOption( option ) {

	// Valid standard speeds (nothing, number, named speed)
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
		return true;
	}

	// Invalid strings - treat as "normal" speed
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
		return true;
	}

	// Complete callback
	if ( $.isFunction( option ) ) {
		return true;
	}

	// Options hash (but not naming an effect)
	if ( typeof option === "object" && !option.effect ) {
		return true;
	}

	// Didn't match any standard API
	return false;
}

$.fn.extend( {
	effect: function( /* effect, options, speed, callback */ ) {
		var args = _normalizeArguments.apply( this, arguments ),
			effectMethod = $.effects.effect[ args.effect ],
			defaultMode = effectMethod.mode,
			queue = args.queue,
			queueName = queue || "fx",
			complete = args.complete,
			mode = args.mode,
			modes = [],
			prefilter = function( next ) {
				var el = $( this ),
					normalizedMode = $.effects.mode( el, mode ) || defaultMode;

				// Sentinel for duck-punching the :animated psuedo-selector
				el.data( dataSpaceAnimated, true );

				// Save effect mode for later use,
				// we can't just call $.effects.mode again later,
				// as the .show() below destroys the initial state
				modes.push( normalizedMode );

				// See $.uiBackCompat inside of run() for removal of defaultMode in 1.13
				if ( defaultMode && ( normalizedMode === "show" ||
						( normalizedMode === defaultMode && normalizedMode === "hide" ) ) ) {
					el.show();
				}

				if ( !defaultMode || normalizedMode !== "none" ) {
					$.effects.saveStyle( el );
				}

				if ( $.isFunction( next ) ) {
					next();
				}
			};

		if ( $.fx.off || !effectMethod ) {

			// Delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args.duration, complete );
			} else {
				return this.each( function() {
					if ( complete ) {
						complete.call( this );
					}
				} );
			}
		}

		function run( next ) {
			var elem = $( this );

			function cleanup() {
				elem.removeData( dataSpaceAnimated );

				$.effects.cleanUp( elem );

				if ( args.mode === "hide" ) {
					elem.hide();
				}

				done();
			}

			function done() {
				if ( $.isFunction( complete ) ) {
					complete.call( elem[ 0 ] );
				}

				if ( $.isFunction( next ) ) {
					next();
				}
			}

			// Override mode option on a per element basis,
			// as toggle can be either show or hide depending on element state
			args.mode = modes.shift();

			if ( $.uiBackCompat !== false && !defaultMode ) {
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, done );
				}
			} else {
				if ( args.mode === "none" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, cleanup );
				}
			}
		}

		// Run prefilter on all elements first to ensure that
		// any showing or hiding happens before placeholder creation,
		// which ensures that any layout changes are correctly captured.
		return queue === false ?
			this.each( prefilter ).each( run ) :
			this.queue( queueName, prefilter ).queue( queueName, run );
	},

	show: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.show ),

	hide: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.hide ),

	toggle: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.toggle ),

	cssUnit: function( key ) {
		var style = this.css( key ),
			val = [];

		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
			if ( style.indexOf( unit ) > 0 ) {
				val = [ parseFloat( style ), unit ];
			}
		} );
		return val;
	},

	cssClip: function( clipObj ) {
		if ( clipObj ) {
			return this.css( "clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
				clipObj.bottom + "px " + clipObj.left + "px)" );
		}
		return parseClip( this.css( "clip" ), this );
	},

	transfer: function( options, done ) {
		var element = $( this ),
			target = $( options.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $( "body" ),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop,
				left: endPosition.left - fixLeft,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = element.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( "body" )
				.addClass( options.className )
				.css( {
					top: startPosition.top - fixTop,
					left: startPosition.left - fixLeft,
					height: element.innerHeight(),
					width: element.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				} )
				.animate( animation, options.duration, options.easing, function() {
					transfer.remove();
					if ( $.isFunction( done ) ) {
						done();
					}
				} );
	}
} );

function parseClip( str, element ) {
		var outerWidth = element.outerWidth(),
			outerHeight = element.outerHeight(),
			clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
			values = clipRegex.exec( str ) || [ "", 0, outerWidth, outerHeight, 0 ];

		return {
			top: parseFloat( values[ 1 ] ) || 0,
			right: values[ 2 ] === "auto" ? outerWidth : parseFloat( values[ 2 ] ),
			bottom: values[ 3 ] === "auto" ? outerHeight : parseFloat( values[ 3 ] ),
			left: parseFloat( values[ 4 ] ) || 0
		};
}

$.fx.step.clip = function( fx ) {
	if ( !fx.clipInit ) {
		fx.start = $( fx.elem ).cssClip();
		if ( typeof fx.end === "string" ) {
			fx.end = parseClip( fx.end, fx.elem );
		}
		fx.clipInit = true;
	}

	$( fx.elem ).cssClip( {
		top: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,
		right: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,
		bottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,
		left: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left
	} );
};

} )();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

( function() {

// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
} );

$.extend( baseEasings, {
	Sine: function( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
} );

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
} );

} )();

var effect = $.effects;


/*!
 * jQuery UI Effects Blind 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Blind Effect
//>>group: Effects
//>>description: Blinds the element.
//>>docs: http://api.jqueryui.com/blind-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBlind = $.effects.define( "blind", "hide", function( options, done ) {
	var map = {
			up: [ "bottom", "top" ],
			vertical: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			horizontal: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		element = $( this ),
		direction = options.direction || "up",
		start = element.cssClip(),
		animate = { clip: $.extend( {}, start ) },
		placeholder = $.effects.createPlaceholder( element );

	animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animate ) );
		}

		animate.clip = start;
	}

	if ( placeholder ) {
		placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Bounce 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Bounce Effect
//>>group: Effects
//>>description: Bounces an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/bounce-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBounce = $.effects.define( "bounce", function( options, done ) {
	var upAnim, downAnim, refValue,
		element = $( this ),

		// Defaults:
		mode = options.mode,
		hide = mode === "hide",
		show = mode === "show",
		direction = options.direction || "up",
		distance = options.distance,
		times = options.times || 5,

		// Number of internal animations
		anims = times * 2 + ( show || hide ? 1 : 0 ),
		speed = options.duration / anims,
		easing = options.easing,

		// Utility:
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ),
		i = 0,

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	refValue = element.css( ref );

	// Default distance for the BIGGEST bounce is the outer Distance / 3
	if ( !distance ) {
		distance = element[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
	}

	if ( show ) {
		downAnim = { opacity: 1 };
		downAnim[ ref ] = refValue;

		// If we are showing, force opacity 0 and set the initial position
		// then do the "first" animation
		element
			.css( "opacity", 0 )
			.css( ref, motion ? -distance * 2 : distance * 2 )
			.animate( downAnim, speed, easing );
	}

	// Start at the smallest distance if we are hiding
	if ( hide ) {
		distance = distance / Math.pow( 2, times - 1 );
	}

	downAnim = {};
	downAnim[ ref ] = refValue;

	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for ( ; i < times; i++ ) {
		upAnim = {};
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element
			.animate( upAnim, speed, easing )
			.animate( downAnim, speed, easing );

		distance = hide ? distance * 2 : distance / 2;
	}

	// Last Bounce when Hiding
	if ( hide ) {
		upAnim = { opacity: 0 };
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element.animate( upAnim, speed, easing );
	}

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Clip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Clip Effect
//>>group: Effects
//>>description: Clips the element on and off like an old TV.
//>>docs: http://api.jqueryui.com/clip-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectClip = $.effects.define( "clip", "hide", function( options, done ) {
	var start,
		animate = {},
		element = $( this ),
		direction = options.direction || "vertical",
		both = direction === "both",
		horizontal = both || direction === "horizontal",
		vertical = both || direction === "vertical";

	start = element.cssClip();
	animate.clip = {
		top: vertical ? ( start.bottom - start.top ) / 2 : start.top,
		right: horizontal ? ( start.right - start.left ) / 2 : start.right,
		bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,
		left: horizontal ? ( start.right - start.left ) / 2 : start.left
	};

	$.effects.createPlaceholder( element );

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		animate.clip = start;
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );

} );


/*!
 * jQuery UI Effects Drop 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Drop Effect
//>>group: Effects
//>>description: Moves an element in one direction and hides it at the same time.
//>>docs: http://api.jqueryui.com/drop-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectDrop = $.effects.define( "drop", "hide", function( options, done ) {

	var distance,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ) ? "-=" : "+=",
		oppositeMotion = ( motion === "+=" ) ? "-=" : "+=",
		animation = {
			opacity: 0
		};

	$.effects.createPlaceholder( element );

	distance = options.distance ||
		element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

	animation[ ref ] = motion + distance;

	if ( show ) {
		element.css( animation );

		animation[ ref ] = oppositeMotion + distance;
		animation.opacity = 1;
	}

	// Animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Explode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Explode Effect
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/explode-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectExplode = $.effects.define( "explode", "hide", function( options, done ) {

	var i, j, left, top, mx, my,
		rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
		cells = rows,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",

		// Show and then visibility:hidden the element before calculating offset
		offset = element.show().css( "visibility", "hidden" ).offset(),

		// Width and height of a piece
		width = Math.ceil( element.outerWidth() / cells ),
		height = Math.ceil( element.outerHeight() / rows ),
		pieces = [];

	// Children animate complete:
	function childComplete() {
		pieces.push( this );
		if ( pieces.length === rows * cells ) {
			animComplete();
		}
	}

	// Clone the element for each row and cell.
	for ( i = 0; i < rows; i++ ) { // ===>
		top = offset.top + i * height;
		my = i - ( rows - 1 ) / 2;

		for ( j = 0; j < cells; j++ ) { // |||
			left = offset.left + j * width;
			mx = j - ( cells - 1 ) / 2;

			// Create a clone of the now hidden main element that will be absolute positioned
			// within a wrapper div off the -left and -top equal to size of our pieces
			element
				.clone()
				.appendTo( "body" )
				.wrap( "<div></div>" )
				.css( {
					position: "absolute",
					visibility: "visible",
					left: -j * width,
					top: -i * height
				} )

				// Select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
				.parent()
					.addClass( "ui-effects-explode" )
					.css( {
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					} )
					.animate( {
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, options.duration || 500, options.easing, childComplete );
		}
	}

	function animComplete() {
		element.css( {
			visibility: "visible"
		} );
		$( pieces ).remove();
		done();
	}
} );


/*!
 * jQuery UI Effects Fade 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fade Effect
//>>group: Effects
//>>description: Fades the element.
//>>docs: http://api.jqueryui.com/fade-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFade = $.effects.define( "fade", "toggle", function( options, done ) {
	var show = options.mode === "show";

	$( this )
		.css( "opacity", show ? 0 : 1 )
		.animate( {
			opacity: show ? 1 : 0
		}, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Fold 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fold Effect
//>>group: Effects
//>>description: Folds an element first horizontally and then vertically.
//>>docs: http://api.jqueryui.com/fold-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFold = $.effects.define( "fold", "hide", function( options, done ) {

	// Create element
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		size = options.size || 15,
		percent = /([0-9]+)%/.exec( size ),
		horizFirst = !!options.horizFirst,
		ref = horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ],
		duration = options.duration / 2,

		placeholder = $.effects.createPlaceholder( element ),

		start = element.cssClip(),
		animation1 = { clip: $.extend( {}, start ) },
		animation2 = { clip: $.extend( {}, start ) },

		distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],

		queuelen = element.queue().length;

	if ( percent ) {
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
	}
	animation1.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 1 ] ] = 0;

	if ( show ) {
		element.cssClip( animation2.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animation2 ) );
		}

		animation2.clip = start;
	}

	// Animate
	element
		.queue( function( next ) {
			if ( placeholder ) {
				placeholder
					.animate( $.effects.clipToBox( animation1 ), duration, options.easing )
					.animate( $.effects.clipToBox( animation2 ), duration, options.easing );
			}

			next();
		} )
		.animate( animation1, duration, options.easing )
		.animate( animation2, duration, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, 4 );
} );


/*!
 * jQuery UI Effects Highlight 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Highlight Effect
//>>group: Effects
//>>description: Highlights the background of an element in a defined color for a custom duration.
//>>docs: http://api.jqueryui.com/highlight-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectHighlight = $.effects.define( "highlight", "show", function( options, done ) {
	var element = $( this ),
		animation = {
			backgroundColor: element.css( "backgroundColor" )
		};

	if ( options.mode === "hide" ) {
		animation.opacity = 0;
	}

	$.effects.saveStyle( element );

	element
		.css( {
			backgroundImage: "none",
			backgroundColor: options.color || "#ffff99"
		} )
		.animate( animation, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Size 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Size Effect
//>>group: Effects
//>>description: Resize an element to a specified width and height.
//>>docs: http://api.jqueryui.com/size-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSize = $.effects.define( "size", function( options, done ) {

	// Create element
	var baseline, factor, temp,
		element = $( this ),

		// Copy for children
		cProps = [ "fontSize" ],
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

		// Set options
		mode = options.mode,
		restore = mode !== "effect",
		scale = options.scale || "both",
		origin = options.origin || [ "middle", "center" ],
		position = element.css( "position" ),
		pos = element.position(),
		original = $.effects.scaledDimensions( element ),
		from = options.from || original,
		to = options.to || $.effects.scaledDimensions( element, 0 );

	$.effects.createPlaceholder( element );

	if ( mode === "show" ) {
		temp = from;
		from = to;
		to = temp;
	}

	// Set scaling factor
	factor = {
		from: {
			y: from.height / original.height,
			x: from.width / original.width
		},
		to: {
			y: to.height / original.height,
			x: to.width / original.width
		}
	};

	// Scale the css box
	if ( scale === "box" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, vProps, factor.from.y, from );
			to = $.effects.setTransition( element, vProps, factor.to.y, to );
		}

		// Horizontal props scaling
		if ( factor.from.x !== factor.to.x ) {
			from = $.effects.setTransition( element, hProps, factor.from.x, from );
			to = $.effects.setTransition( element, hProps, factor.to.x, to );
		}
	}

	// Scale the content
	if ( scale === "content" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, cProps, factor.from.y, from );
			to = $.effects.setTransition( element, cProps, factor.to.y, to );
		}
	}

	// Adjust the position properties based on the provided origin points
	if ( origin ) {
		baseline = $.effects.getBaseline( origin, original );
		from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;
		from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;
		to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;
		to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;
	}
	element.css( from );

	// Animate the children if desired
	if ( scale === "content" || scale === "both" ) {

		vProps = vProps.concat( [ "marginTop", "marginBottom" ] ).concat( cProps );
		hProps = hProps.concat( [ "marginLeft", "marginRight" ] );

		// Only animate children with width attributes specified
		// TODO: is this right? should we include anything with css width specified as well
		element.find( "*[width]" ).each( function() {
			var child = $( this ),
				childOriginal = $.effects.scaledDimensions( child ),
				childFrom = {
					height: childOriginal.height * factor.from.y,
					width: childOriginal.width * factor.from.x,
					outerHeight: childOriginal.outerHeight * factor.from.y,
					outerWidth: childOriginal.outerWidth * factor.from.x
				},
				childTo = {
					height: childOriginal.height * factor.to.y,
					width: childOriginal.width * factor.to.x,
					outerHeight: childOriginal.height * factor.to.y,
					outerWidth: childOriginal.width * factor.to.x
				};

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );
				childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );
				childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );
			}

			if ( restore ) {
				$.effects.saveStyle( child );
			}

			// Animate children
			child.css( childFrom );
			child.animate( childTo, options.duration, options.easing, function() {

				// Restore children
				if ( restore ) {
					$.effects.restoreStyle( child );
				}
			} );
		} );
	}

	// Animate
	element.animate( to, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: function() {

			var offset = element.offset();

			if ( to.opacity === 0 ) {
				element.css( "opacity", from.opacity );
			}

			if ( !restore ) {
				element
					.css( "position", position === "static" ? "relative" : position )
					.offset( offset );

				// Need to save style here so that automatic style restoration
				// doesn't restore to the original styles from before the animation.
				$.effects.saveStyle( element );
			}

			done();
		}
	} );

} );


/*!
 * jQuery UI Effects Scale 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Scale Effect
//>>group: Effects
//>>description: Grows or shrinks an element and its content.
//>>docs: http://api.jqueryui.com/scale-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectScale = $.effects.define( "scale", function( options, done ) {

	// Create element
	var el = $( this ),
		mode = options.mode,
		percent = parseInt( options.percent, 10 ) ||
			( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== "effect" ? 0 : 100 ) ),

		newOptions = $.extend( true, {
			from: $.effects.scaledDimensions( el ),
			to: $.effects.scaledDimensions( el, percent, options.direction || "both" ),
			origin: options.origin || [ "middle", "center" ]
		}, options );

	// Fade option to support puff
	if ( options.fade ) {
		newOptions.from.opacity = 1;
		newOptions.to.opacity = 0;
	}

	$.effects.effect.size.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Puff 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Puff Effect
//>>group: Effects
//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
//>>docs: http://api.jqueryui.com/puff-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPuff = $.effects.define( "puff", "hide", function( options, done ) {
	var newOptions = $.extend( true, {}, options, {
		fade: true,
		percent: parseInt( options.percent, 10 ) || 150
	} );

	$.effects.effect.scale.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Pulsate 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Pulsate Effect
//>>group: Effects
//>>description: Pulsates an element n times by changing the opacity to zero and back.
//>>docs: http://api.jqueryui.com/pulsate-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPulsate = $.effects.define( "pulsate", "show", function( options, done ) {
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		showhide = show || hide,

		// Showing or hiding leaves off the "last" animation
		anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
		duration = options.duration / anims,
		animateTo = 0,
		i = 1,
		queuelen = element.queue().length;

	if ( show || !element.is( ":visible" ) ) {
		element.css( "opacity", 0 ).show();
		animateTo = 1;
	}

	// Anims - 1 opacity "toggles"
	for ( ; i < anims; i++ ) {
		element.animate( { opacity: animateTo }, duration, options.easing );
		animateTo = 1 - animateTo;
	}

	element.animate( { opacity: animateTo }, duration, options.easing );

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Shake 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Shake Effect
//>>group: Effects
//>>description: Shakes an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/shake-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectShake = $.effects.define( "shake", function( options, done ) {

	var i = 1,
		element = $( this ),
		direction = options.direction || "left",
		distance = options.distance || 20,
		times = options.times || 3,
		anims = times * 2 + 1,
		speed = Math.round( options.duration / anims ),
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		animation = {},
		animation1 = {},
		animation2 = {},

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	// Animation
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

	// Animate
	element.animate( animation, speed, options.easing );

	// Shakes
	for ( ; i < times; i++ ) {
		element
			.animate( animation1, speed, options.easing )
			.animate( animation2, speed, options.easing );
	}

	element
		.animate( animation1, speed, options.easing )
		.animate( animation, speed / 2, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Slide 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slide Effect
//>>group: Effects
//>>description: Slides an element in and out of the viewport.
//>>docs: http://api.jqueryui.com/slide-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSlide = $.effects.define( "slide", "show", function( options, done ) {
	var startClip, startRef,
		element = $( this ),
		map = {
			up: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		mode = options.mode,
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		distance = options.distance ||
			element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ),
		animation = {};

	$.effects.createPlaceholder( element );

	startClip = element.cssClip();
	startRef = element.position()[ ref ];

	// Define hide animation
	animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;
	animation.clip = element.cssClip();
	animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];

	// Reverse the animation if we're showing
	if ( mode === "show" ) {
		element.cssClip( animation.clip );
		element.css( ref, animation[ ref ] );
		animation.clip = startClip;
		animation[ ref ] = startRef;
	}

	// Actually animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Transfer 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Transfer Effect
//>>group: Effects
//>>description: Displays a transfer effect from one element to another.
//>>docs: http://api.jqueryui.com/transfer-effect/
//>>demos: http://jqueryui.com/effect/



var effect;
if ( $.uiBackCompat !== false ) {
	effect = $.effects.define( "transfer", function( options, done ) {
		$( this ).transfer( options, done );
	} );
}
var effectsEffectTransfer = effect;


/*!
 * jQuery UI Focusable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :focusable Selector
//>>group: Core
//>>description: Selects elements which can be focused.
//>>docs: http://api.jqueryui.com/focusable-selector/



// Selectors
$.ui.focusable = function( element, hasTabindex ) {
	var map, mapName, img, focusableIfVisible, fieldset,
		nodeName = element.nodeName.toLowerCase();

	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" );
		return img.length > 0 && img.is( ":visible" );
	}

	if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
		focusableIfVisible = !element.disabled;

		if ( focusableIfVisible ) {

			// Form controls within a disabled fieldset are disabled.
			// However, controls within the fieldset's legend do not get disabled.
			// Since controls generally aren't placed inside legends, we skip
			// this portion of the check.
			fieldset = $( element ).closest( "fieldset" )[ 0 ];
			if ( fieldset ) {
				focusableIfVisible = !fieldset.disabled;
			}
		}
	} else if ( "a" === nodeName ) {
		focusableIfVisible = element.href || hasTabindex;
	} else {
		focusableIfVisible = hasTabindex;
	}

	return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
};

// Support: IE 8 only
// IE 8 doesn't resolve inherit to visible/hidden for computed values
function visible( element ) {
	var visibility = element.css( "visibility" );
	while ( visibility === "inherit" ) {
		element = element.parent();
		visibility = element.css( "visibility" );
	}
	return visibility !== "hidden";
}

$.extend( $.expr[ ":" ], {
	focusable: function( element ) {
		return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
	}
} );

var focusable = $.ui.focusable;




// Support: IE8 Only
// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
// with a string, so we need to find the proper form.
var form = $.fn.form = function() {
	return typeof this[ 0 ].form === "string" ? this.closest( "form" ) : $( this[ 0 ].form );
};


/*!
 * jQuery UI Form Reset Mixin 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Form Reset Mixin
//>>group: Core
//>>description: Refresh input widgets when their form is reset
//>>docs: http://api.jqueryui.com/form-reset-mixin/



var formResetMixin = $.ui.formResetMixin = {
	_formResetHandler: function() {
		var form = $( this );

		// Wait for the form reset to actually happen before refreshing
		setTimeout( function() {
			var instances = form.data( "ui-form-reset-instances" );
			$.each( instances, function() {
				this.refresh();
			} );
		} );
	},

	_bindFormResetHandler: function() {
		this.form = this.element.form();
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" ) || [];
		if ( !instances.length ) {

			// We don't use _on() here because we use a single event handler per form
			this.form.on( "reset.ui-form-reset", this._formResetHandler );
		}
		instances.push( this );
		this.form.data( "ui-form-reset-instances", instances );
	},

	_unbindFormResetHandler: function() {
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" );
		instances.splice( $.inArray( this, instances ), 1 );
		if ( instances.length ) {
			this.form.data( "ui-form-reset-instances", instances );
		} else {
			this.form
				.removeData( "ui-form-reset-instances" )
				.off( "reset.ui-form-reset" );
		}
	}
};


/*!
 * jQuery UI Support for jQuery core 1.7.x 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */

//>>label: jQuery 1.7 Support
//>>group: Core
//>>description: Support version 1.7.x of jQuery core



// Support: jQuery 1.7 only
// Not a great way to check versions, but since we only support 1.7+ and only
// need to detect <1.8, this is a simple check that should suffice. Checking
// for "1.7." would be a bit safer, but the version string is 1.7, not 1.7.0
// and we'll never reach 1.70.0 (if we do, we certainly won't be supporting
// 1.7 anymore). See #11197 for why we're not using feature detection.
if ( $.fn.jquery.substring( 0, 3 ) === "1.7" ) {

	// Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()
	// Unlike jQuery Core 1.8+, these only support numeric values to set the
	// dimensions in pixels
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			} );
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each( function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			} );
		};

		$.fn[ "outer" + name ] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each( function() {
				$( this ).css( type, reduce( this, size, true, margin ) + "px" );
			} );
		};
	} );

	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

;
/*!
 * jQuery UI Keycode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/


var keycode = $.ui.keyCode = {
	BACKSPACE: 8,
	COMMA: 188,
	DELETE: 46,
	DOWN: 40,
	END: 35,
	ENTER: 13,
	ESCAPE: 27,
	HOME: 36,
	LEFT: 37,
	PAGE_DOWN: 34,
	PAGE_UP: 33,
	PERIOD: 190,
	RIGHT: 39,
	SPACE: 32,
	TAB: 9,
	UP: 38
};




// Internal use only
var escapeSelector = $.ui.escapeSelector = ( function() {
	var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
	return function( selector ) {
		return selector.replace( selectorEscape, "\\$1" );
	};
} )();


/*!
 * jQuery UI Labels 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: labels
//>>group: Core
//>>description: Find all the labels associated with a given input
//>>docs: http://api.jqueryui.com/labels/



var labels = $.fn.labels = function() {
	var ancestor, selector, id, labels, ancestors;

	// Check control.labels first
	if ( this[ 0 ].labels && this[ 0 ].labels.length ) {
		return this.pushStack( this[ 0 ].labels );
	}

	// Support: IE <= 11, FF <= 37, Android <= 2.3 only
	// Above browsers do not support control.labels. Everything below is to support them
	// as well as document fragments. control.labels does not work on document fragments
	labels = this.eq( 0 ).parents( "label" );

	// Look for the label based on the id
	id = this.attr( "id" );
	if ( id ) {

		// We don't search against the document in case the element
		// is disconnected from the DOM
		ancestor = this.eq( 0 ).parents().last();

		// Get a full set of top level ancestors
		ancestors = ancestor.add( ancestor.length ? ancestor.siblings() : this.siblings() );

		// Create a selector for the label based on the id
		selector = "label[for='" + $.ui.escapeSelector( id ) + "']";

		labels = labels.add( ancestors.find( selector ).addBack( selector ) );

	}

	// Return whatever we have found for labels
	return this.pushStack( labels );
};


/*!
 * jQuery UI Scroll Parent 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/



var scrollParent = $.fn.scrollParent = function( includeHidden ) {
	var position = this.css( "position" ),
		excludeStaticParent = position === "absolute",
		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
		scrollParent = this.parents().filter( function() {
			var parent = $( this );
			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
				return false;
			}
			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
				parent.css( "overflow-x" ) );
		} ).eq( 0 );

	return position === "fixed" || !scrollParent.length ?
		$( this[ 0 ].ownerDocument || document ) :
		scrollParent;
};


/*!
 * jQuery UI Tabbable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :tabbable Selector
//>>group: Core
//>>description: Selects elements which can be tabbed to.
//>>docs: http://api.jqueryui.com/tabbable-selector/



var tabbable = $.extend( $.expr[ ":" ], {
	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			hasTabindex = tabIndex != null;
		return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
	}
} );


/*!
 * jQuery UI Unique ID 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/



var uniqueId = $.fn.extend( {
	uniqueId: ( function() {
		var uuid = 0;

		return function() {
			return this.each( function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			} );
		};
	} )(),

	removeUniqueId: function() {
		return this.each( function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		} );
	}
} );


/*!
 * jQuery UI Accordion 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Accordion
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/accordion/
//>>demos: http://jqueryui.com/accordion/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/accordion.css
//>>css.theme: ../../themes/base/theme.css



var widgetsAccordion = $.widget( "ui.accordion", {
	version: "1.12.1",
	options: {
		active: 0,
		animate: {},
		classes: {
			"ui-accordion-header": "ui-corner-top",
			"ui-accordion-header-collapsed": "ui-corner-all",
			"ui-accordion-content": "ui-corner-bottom"
		},
		collapsible: false,
		event: "click",
		header: "> li > :first-child, > :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "ui-icon-triangle-1-s",
			header: "ui-icon-triangle-1-e"
		},

		// Callbacks
		activate: null,
		beforeActivate: null
	},

	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},

	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},

	_create: function() {
		var options = this.options;

		this.prevShow = this.prevHide = $();
		this._addClass( "ui-accordion", "ui-widget ui-helper-reset" );
		this.element.attr( "role", "tablist" );

		// Don't allow collapsible: false and active: false / null
		if ( !options.collapsible && ( options.active === false || options.active == null ) ) {
			options.active = 0;
		}

		this._processPanels();

		// handle negative values
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var icon, children,
			icons = this.options.icons;

		if ( icons ) {
			icon = $( "<span>" );
			this._addClass( icon, "ui-accordion-header-icon", "ui-icon " + icons.header );
			icon.prependTo( this.headers );
			children = this.active.children( ".ui-accordion-header-icon" );
			this._removeClass( children, icons.header )
				._addClass( children, null, icons.activeHeader )
				._addClass( this.headers, "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this._removeClass( this.headers, "ui-accordion-icons" );
		this.headers.children( ".ui-accordion-header-icon" ).remove();
	},

	_destroy: function() {
		var contents;

		// Clean up main element
		this.element.removeAttr( "role" );

		// Clean up headers
		this.headers
			.removeAttr( "role aria-expanded aria-selected aria-controls tabIndex" )
			.removeUniqueId();

		this._destroyIcons();

		// Clean up content panels
		contents = this.headers.next()
			.css( "display", "" )
			.removeAttr( "role aria-hidden aria-labelledby" )
			.removeUniqueId();

		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		// Setting collapsible: false while collapsed; open first panel
		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );

		// Support: IE8 Only
		// #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		this._toggleClass( null, "ui-state-disabled", !!value );
		this._toggleClass( this.headers.add( this.headers.next() ), null, "ui-state-disabled",
			!!value );
	},

	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
		case keyCode.RIGHT:
		case keyCode.DOWN:
			toFocus = this.headers[ ( currentIndex + 1 ) % length ];
			break;
		case keyCode.LEFT:
		case keyCode.UP:
			toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
			break;
		case keyCode.SPACE:
		case keyCode.ENTER:
			this._eventHandler( event );
			break;
		case keyCode.HOME:
			toFocus = this.headers[ 0 ];
			break;
		case keyCode.END:
			toFocus = this.headers[ length - 1 ];
			break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			$( toFocus ).trigger( "focus" );
			event.preventDefault();
		}
	},

	_panelKeyDown: function( event ) {
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().trigger( "focus" );
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		// Was collapsed or no panel
		if ( ( options.active === false && options.collapsible === true ) ||
				!this.headers.length ) {
			options.active = false;
			this.active = $();

		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );

		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {

			// all remaining panel are disabled
			if ( this.headers.length === this.headers.find( ".ui-state-disabled" ).length ) {
				options.active = false;
				this.active = $();

			// activate previous panel
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}

		// was active, active panel still exists
		} else {

			// make sure active index is correct
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		var prevHeaders = this.headers,
			prevPanels = this.panels;

		this.headers = this.element.find( this.options.header );
		this._addClass( this.headers, "ui-accordion-header ui-accordion-header-collapsed",
			"ui-state-default" );

		this.panels = this.headers.next().filter( ":not(.ui-accordion-content-active)" ).hide();
		this._addClass( this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevPanels ) {
			this._off( prevHeaders.not( this.headers ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	_refresh: function() {
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();

		this.active = this._findActive( options.active );
		this._addClass( this.active, "ui-accordion-header-active", "ui-state-active" )
			._removeClass( this.active, "ui-accordion-header-collapsed" );
		this._addClass( this.active.next(), "ui-accordion-content-active" );
		this.active.next().show();

		this.headers
			.attr( "role", "tab" )
			.each( function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			} )
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
				.attr( {
					"aria-selected": "false",
					"aria-expanded": "false",
					tabIndex: -1
				} )
				.next()
					.attr( {
						"aria-hidden": "true"
					} )
					.hide();

		// Make sure at least one header is in the tab order
		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr( {
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			} )
				.next()
					.attr( {
						"aria-hidden": "false"
					} );
		}

		this._createIcons();

		this._setupEvents( options.event );

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.headers.each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.headers.next()
				.each( function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.headers.next()
				.each( function() {
					var isVisible = $( this ).is( ":visible" );
					if ( !isVisible ) {
						$( this ).show();
					}
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					if ( !isVisible ) {
						$( this ).hide();
					}
				} )
				.height( maxHeight );
		}
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		// Trying to activate the already active panel
		if ( active === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the currently active header
		active = active || this.active[ 0 ];

		this._eventHandler( {
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		} );
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" } );
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},

	_eventHandler: function( event ) {
		var activeChildren, clickedChildren,
			options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : clicked.next(),
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow
			};

		event.preventDefault();

		if (

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );

		// When the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $() : clicked;
		this._toggle( eventData );

		// Switch classes
		// corner classes on the previously active header stay after the animation
		this._removeClass( active, "ui-accordion-header-active", "ui-state-active" );
		if ( options.icons ) {
			activeChildren = active.children( ".ui-accordion-header-icon" );
			this._removeClass( activeChildren, null, options.icons.activeHeader )
				._addClass( activeChildren, null, options.icons.header );
		}

		if ( !clickedIsActive ) {
			this._removeClass( clicked, "ui-accordion-header-collapsed" )
				._addClass( clicked, "ui-accordion-header-active", "ui-state-active" );
			if ( options.icons ) {
				clickedChildren = clicked.children( ".ui-accordion-header-icon" );
				this._removeClass( clickedChildren, null, options.icons.header )
					._addClass( clickedChildren, null, options.icons.activeHeader );
			}

			this._addClass( clicked.next(), "ui-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// Handle activating a panel during the animation for another activation
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;

		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {
			toHide.hide();
			toShow.show();
			this._toggleComplete( data );
		}

		toHide.attr( {
			"aria-hidden": "true"
		} );
		toHide.prev().attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// if we're switching panels, remove the old header from the tab order
		// if we're opening from collapsed state, remove the previous header from the tab order
		// if we're collapsing, then keep the collapsing header in the tab order
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr( {
				"tabIndex": -1,
				"aria-expanded": "false"
			} );
		} else if ( toShow.length ) {
			this.headers.filter( function() {
				return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			boxSizing = toShow.css( "box-sizing" ),
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}

		// fall back from options to animation in case of partial down settings
		easing = easing || options.easing || animate.easing;
		duration = duration || options.duration || animate.duration;

		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		} );
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						if ( boxSizing === "content-box" ) {
							adjust += fx.now;
						}
					} else if ( that.options.heightStyle !== "content" ) {
						fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			} );
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel,
			prev = toHide.prev();

		this._removeClass( toHide, "ui-accordion-content-active" );
		this._removeClass( prev, "ui-accordion-header-active" )
			._addClass( prev, "ui-accordion-header-collapsed" );

		// Work around for rendering bug in IE (#5421)
		if ( toHide.length ) {
			toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
		}
		this._trigger( "activate", null, data );
	}
} );



var safeActiveElement = $.ui.safeActiveElement = function( document ) {
	var activeElement;

	// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try {
		activeElement = document.activeElement;
	} catch ( error ) {
		activeElement = document.body;
	}

	// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if ( !activeElement ) {
		activeElement = document.body;
	}

	// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if ( !activeElement.nodeName ) {
		activeElement = document.body;
	}

	return activeElement;
};


/*!
 * jQuery UI Menu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css



var widgetsMenu = $.widget( "ui.menu", {
	version: "1.12.1",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-caret-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// Callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.attr( {
				role: this.options.role,
				tabIndex: 0
			} );

		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
		this._on( {

			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) &&
							active.closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {

				// Ignore mouse events while typeahead is active, see #10458.
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
				// is over an item in the menu
				if ( this.previousFilter ) {
					return;
				}

				var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
					target = $( event.currentTarget );

				// Ignore bubbled events on parent items, see #11641
				if ( actualTarget[ 0 ] !== target[ 0 ] ) {
					return;
				}

				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				this._removeClass( target.siblings().children( ".ui-state-active" ),
					null, "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {

				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.find( this.options.items ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay( function() {
					var notContained = !$.contains(
						this.element[ 0 ],
						$.ui.safeActiveElement( this.document[ 0 ] )
					);
					if ( notContained ) {
						this.collapseAll( event );
					}
				} );
			},
			keydown: "_keydown"
		} );

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		} );
	},

	_destroy: function() {
		var items = this.element.find( ".ui-menu-item" )
				.removeAttr( "role aria-disabled" ),
			submenus = items.children( ".ui-menu-item-wrapper" )
				.removeUniqueId()
				.removeAttr( "tabIndex role aria-haspopup" );

		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
					"tabIndex" )
				.removeUniqueId()
				.show();

		submenus.children().each( function() {
			var elem = $( this );
			if ( elem.data( "ui-menu-submenu-caret" ) ) {
				elem.remove();
			}
		} );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			skip = false;

			// Support number pad values
			character = event.keyCode >= 96 && event.keyCode <= 105 ?
				( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay( function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items, newSubmenus, newItems, newWrappers,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		newSubmenus = submenus.filter( ":not(.ui-menu)" )
			.hide()
			.attr( {
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			} )
			.each( function() {
				var menu = $( this ),
					item = menu.prev(),
					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCaret );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			} );

		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each( function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
			}
		} );

		// Don't refresh list items that are already adapted
		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
		newWrappers = newItems.children()
			.not( ".ui-menu" )
				.uniqueId()
				.attr( {
					tabIndex: -1,
					role: this._itemRole()
				} );
		this._addClass( newItems, "ui-menu-item" )
			._addClass( newWrappers, "ui-menu-item-wrapper" );

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icons = this.element.find( ".ui-menu-icon" );
			this._removeClass( icons, null, this.options.icons.submenu )
				._addClass( icons, null, value.submenu );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", String( value ) );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	focus: function( event, item ) {
		var nested, focused, activeParent;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();

		focused = this.active.children( ".ui-menu-item-wrapper" );
		this._addClass( focused, null, "ui-state-active" );

		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		activeParent = this.active
			.parent()
				.closest( ".ui-menu-item" )
					.children( ".ui-menu-item-wrapper" );
		this._addClass( activeParent, null, "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay( function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening( nested );
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
			null, "ui-state-active" );

		this._trigger( "blur", event, { item: this.active } );
		this.active = null;
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the caret icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay( function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend( {
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay( function() {

			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all
			// sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );

			// Work around active item staying active after menu is blurred
			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu.find( ".ui-menu" )
			.hide()
			.attr( "aria-hidden", "true" )
			.attr( "aria-expanded", "false" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
					.find( this.options.items )
						.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay( function() {
				this.focus( event, newItem );
			} );
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.find( this.options.items )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {

		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function( character ) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
					.filter( function() {
						return regex.test(
							$.trim( $( this ).children( ".ui-menu-item-wrapper" ).text() ) );
					} );
	}
} );


/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.autocomplete", {
	version: "1.12.1",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {

		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		// Textareas are always multi-line
		// Inputs are always single-line, even if inside a contentEditable element
		// IE also treats inputs as contentEditable
		// All other element types are determined by whether or not they're contentEditable
		this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this._addClass( "ui-autocomplete-input" );
		this.element.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:

					// when menu is open and has focus
					if ( this.menu.active ) {

						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );

						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;

					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// Replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		} );

		this._initSource();
		this.menu = $( "<ul>" )
			.appendTo( this._appendTo() )
			.menu( {

				// disable ARIA support, the live region takes care of that
				role: null
			} )
			.hide()
			.menu( "instance" );

		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
		this._on( this.menu.element, {
			mousedown: function( event ) {

				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay( function() {
					delete this.cancelBlur;

					// Support: IE 8 only
					// Right clicking a menu item or selecting text from the menu items will
					// result in focus moving out of the input. However, we've already received
					// and ignored the blur event because of the cancelBlur flag set above. So
					// we restore focus to ensure that the menu closes properly based on the user's
					// next actions.
					if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
						this.element.trigger( "focus" );
					}
				} );
			},
			menufocus: function( event, ui ) {
				var label, item;

				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						} );

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// Only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay( function() {
						this.previous = previous;
						this.selectedItem = item;
					} );
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}

				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		} );

		this.liveRegion = $( "<div>", {
			role: "status",
			"aria-live": "assertive",
			"aria-relevant": "additions"
		} )
			.appendTo( this.document[ 0 ].body );

		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_isEventTargetInWidget: function( event ) {
		var menuElement = this.menu.element[ 0 ];

		return event.target === this.element[ 0 ] ||
			event.target === menuElement ||
			$.contains( menuElement, event.target );
	},

	_closeOnClickOutside: function( event ) {
		if ( !this._isEventTargetInWidget( event ) ) {
			this.close();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax( {
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				} );
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay( function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// Always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this._addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy( function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this._removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {

			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {

		// Remove the handler that closes the menu on outside clicks
		this._off( this.document, "mousedown" );

		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {

		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			} );
		} );
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// Size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend( {
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}

		// Listen for interactions outside of the widget (#6642)
		this._on( this.document, {
			mousedown: "_closeOnClickOutside"
		} );
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(

			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<div>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// Prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},

	// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable: function( element ) {
		if ( !element.length ) {
			return false;
		}

		var editable = element.prop( "contentEditable" );

		if ( editable === "inherit" ) {
		  return this._isContentEditable( element.parent() );
		}

		return editable === "true";
	}
} );

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		} );
	}
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
} );

var widgetsAutocomplete = $.ui.autocomplete;


/*!
 * jQuery UI Controlgroup 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Controlgroup
//>>group: Widgets
//>>description: Visually groups form control widgets
//>>docs: http://api.jqueryui.com/controlgroup/
//>>demos: http://jqueryui.com/controlgroup/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/controlgroup.css
//>>css.theme: ../../themes/base/theme.css


var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

var widgetsControlgroup = $.widget( "ui.controlgroup", {
	version: "1.12.1",
	defaultElement: "<div>",
	options: {
		direction: "horizontal",
		disabled: null,
		onlyVisible: true,
		items: {
			"button": "input[type=button], input[type=submit], input[type=reset], button, a",
			"controlgroupLabel": ".ui-controlgroup-label",
			"checkboxradio": "input[type='checkbox'], input[type='radio']",
			"selectmenu": "select",
			"spinner": ".ui-spinner-input"
		}
	},

	_create: function() {
		this._enhance();
	},

	// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
	_enhance: function() {
		this.element.attr( "role", "toolbar" );
		this.refresh();
	},

	_destroy: function() {
		this._callChildMethod( "destroy" );
		this.childWidgets.removeData( "ui-controlgroup-data" );
		this.element.removeAttr( "role" );
		if ( this.options.items.controlgroupLabel ) {
			this.element
				.find( this.options.items.controlgroupLabel )
				.find( ".ui-controlgroup-label-contents" )
				.contents().unwrap();
		}
	},

	_initWidgets: function() {
		var that = this,
			childWidgets = [];

		// First we iterate over each of the items options
		$.each( this.options.items, function( widget, selector ) {
			var labels;
			var options = {};

			// Make sure the widget has a selector set
			if ( !selector ) {
				return;
			}

			if ( widget === "controlgroupLabel" ) {
				labels = that.element.find( selector );
				labels.each( function() {
					var element = $( this );

					if ( element.children( ".ui-controlgroup-label-contents" ).length ) {
						return;
					}
					element.contents()
						.wrapAll( "<span class='ui-controlgroup-label-contents'></span>" );
				} );
				that._addClass( labels, null, "ui-widget ui-widget-content ui-state-default" );
				childWidgets = childWidgets.concat( labels.get() );
				return;
			}

			// Make sure the widget actually exists
			if ( !$.fn[ widget ] ) {
				return;
			}

			// We assume everything is in the middle to start because we can't determine
			// first / last elements until all enhancments are done.
			if ( that[ "_" + widget + "Options" ] ) {
				options = that[ "_" + widget + "Options" ]( "middle" );
			} else {
				options = { classes: {} };
			}

			// Find instances of this widget inside controlgroup and init them
			that.element
				.find( selector )
				.each( function() {
					var element = $( this );
					var instance = element[ widget ]( "instance" );

					// We need to clone the default options for this type of widget to avoid
					// polluting the variable options which has a wider scope than a single widget.
					var instanceOptions = $.widget.extend( {}, options );

					// If the button is the child of a spinner ignore it
					// TODO: Find a more generic solution
					if ( widget === "button" && element.parent( ".ui-spinner" ).length ) {
						return;
					}

					// Create the widget if it doesn't exist
					if ( !instance ) {
						instance = element[ widget ]()[ widget ]( "instance" );
					}
					if ( instance ) {
						instanceOptions.classes =
							that._resolveClassesValues( instanceOptions.classes, instance );
					}
					element[ widget ]( instanceOptions );

					// Store an instance of the controlgroup to be able to reference
					// from the outermost element for changing options and refresh
					var widgetElement = element[ widget ]( "widget" );
					$.data( widgetElement[ 0 ], "ui-controlgroup-data",
						instance ? instance : element[ widget ]( "instance" ) );

					childWidgets.push( widgetElement[ 0 ] );
				} );
		} );

		this.childWidgets = $( $.unique( childWidgets ) );
		this._addClass( this.childWidgets, "ui-controlgroup-item" );
	},

	_callChildMethod: function( method ) {
		this.childWidgets.each( function() {
			var element = $( this ),
				data = element.data( "ui-controlgroup-data" );
			if ( data && data[ method ] ) {
				data[ method ]();
			}
		} );
	},

	_updateCornerClass: function( element, position ) {
		var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
		var add = this._buildSimpleOptions( position, "label" ).classes.label;

		this._removeClass( element, null, remove );
		this._addClass( element, null, add );
	},

	_buildSimpleOptions: function( position, key ) {
		var direction = this.options.direction === "vertical";
		var result = {
			classes: {}
		};
		result.classes[ key ] = {
			"middle": "",
			"first": "ui-corner-" + ( direction ? "top" : "left" ),
			"last": "ui-corner-" + ( direction ? "bottom" : "right" ),
			"only": "ui-corner-all"
		}[ position ];

		return result;
	},

	_spinnerOptions: function( position ) {
		var options = this._buildSimpleOptions( position, "ui-spinner" );

		options.classes[ "ui-spinner-up" ] = "";
		options.classes[ "ui-spinner-down" ] = "";

		return options;
	},

	_buttonOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-button" );
	},

	_checkboxradioOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-checkboxradio-label" );
	},

	_selectmenuOptions: function( position ) {
		var direction = this.options.direction === "vertical";
		return {
			width: direction ? "auto" : false,
			classes: {
				middle: {
					"ui-selectmenu-button-open": "",
					"ui-selectmenu-button-closed": ""
				},
				first: {
					"ui-selectmenu-button-open": "ui-corner-" + ( direction ? "top" : "tl" ),
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "top" : "left" )
				},
				last: {
					"ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "bottom" : "right" )
				},
				only: {
					"ui-selectmenu-button-open": "ui-corner-top",
					"ui-selectmenu-button-closed": "ui-corner-all"
				}

			}[ position ]
		};
	},

	_resolveClassesValues: function( classes, instance ) {
		var result = {};
		$.each( classes, function( key ) {
			var current = instance.options.classes[ key ] || "";
			current = $.trim( current.replace( controlgroupCornerRegex, "" ) );
			result[ key ] = ( current + " " + classes[ key ] ).replace( /\s+/g, " " );
		} );
		return result;
	},

	_setOption: function( key, value ) {
		if ( key === "direction" ) {
			this._removeClass( "ui-controlgroup-" + this.options.direction );
		}

		this._super( key, value );
		if ( key === "disabled" ) {
			this._callChildMethod( value ? "disable" : "enable" );
			return;
		}

		this.refresh();
	},

	refresh: function() {
		var children,
			that = this;

		this._addClass( "ui-controlgroup ui-controlgroup-" + this.options.direction );

		if ( this.options.direction === "horizontal" ) {
			this._addClass( null, "ui-helper-clearfix" );
		}
		this._initWidgets();

		children = this.childWidgets;

		// We filter here because we need to track all childWidgets not just the visible ones
		if ( this.options.onlyVisible ) {
			children = children.filter( ":visible" );
		}

		if ( children.length ) {

			// We do this last because we need to make sure all enhancment is done
			// before determining first and last
			$.each( [ "first", "last" ], function( index, value ) {
				var instance = children[ value ]().data( "ui-controlgroup-data" );

				if ( instance && that[ "_" + instance.widgetName + "Options" ] ) {
					var options = that[ "_" + instance.widgetName + "Options" ](
						children.length === 1 ? "only" : value
					);
					options.classes = that._resolveClassesValues( options.classes, instance );
					instance.element[ instance.widgetName ]( options );
				} else {
					that._updateCornerClass( children[ value ](), value );
				}
			} );

			// Finally call the refresh method on each of the child widgets.
			this._callChildMethod( "refresh" );
		}
	}
} );

/*!
 * jQuery UI Checkboxradio 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Checkboxradio
//>>group: Widgets
//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
//>>docs: http://api.jqueryui.com/checkboxradio/
//>>demos: http://jqueryui.com/checkboxradio/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.structure: ../../themes/base/checkboxradio.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.checkboxradio", [ $.ui.formResetMixin, {
	version: "1.12.1",
	options: {
		disabled: null,
		label: null,
		icon: true,
		classes: {
			"ui-checkboxradio-label": "ui-corner-all",
			"ui-checkboxradio-icon": "ui-corner-all"
		}
	},

	_getCreateOptions: function() {
		var disabled, labels;
		var that = this;
		var options = this._super() || {};

		// We read the type here, because it makes more sense to throw a element type error first,
		// rather then the error for lack of a label. Often if its the wrong type, it
		// won't have a label (e.g. calling on a div, btn, etc)
		this._readType();

		labels = this.element.labels();

		// If there are multiple labels, use the last one
		this.label = $( labels[ labels.length - 1 ] );
		if ( !this.label.length ) {
			$.error( "No label found for checkboxradio widget" );
		}

		this.originalLabel = "";

		// We need to get the label text but this may also need to make sure it does not contain the
		// input itself.
		this.label.contents().not( this.element[ 0 ] ).each( function() {

			// The label contents could be text, html, or a mix. We concat each element to get a
			// string representation of the label, without the input as part of it.
			that.originalLabel += this.nodeType === 3 ? $( this ).text() : this.outerHTML;
		} );

		// Set the label option if we found label text
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}
		return options;
	},

	_create: function() {
		var checked = this.element[ 0 ].checked;

		this._bindFormResetHandler();

		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled;
		}

		this._setOption( "disabled", this.options.disabled );
		this._addClass( "ui-checkboxradio", "ui-helper-hidden-accessible" );
		this._addClass( this.label, "ui-checkboxradio-label", "ui-button ui-widget" );

		if ( this.type === "radio" ) {
			this._addClass( this.label, "ui-checkboxradio-radio-label" );
		}

		if ( this.options.label && this.options.label !== this.originalLabel ) {
			this._updateLabel();
		} else if ( this.originalLabel ) {
			this.options.label = this.originalLabel;
		}

		this._enhance();

		if ( checked ) {
			this._addClass( this.label, "ui-checkboxradio-checked", "ui-state-active" );
			if ( this.icon ) {
				this._addClass( this.icon, null, "ui-state-hover" );
			}
		}

		this._on( {
			change: "_toggleClasses",
			focus: function() {
				this._addClass( this.label, null, "ui-state-focus ui-visual-focus" );
			},
			blur: function() {
				this._removeClass( this.label, null, "ui-state-focus ui-visual-focus" );
			}
		} );
	},

	_readType: function() {
		var nodeName = this.element[ 0 ].nodeName.toLowerCase();
		this.type = this.element[ 0 ].type;
		if ( nodeName !== "input" || !/radio|checkbox/.test( this.type ) ) {
			$.error( "Can't create checkboxradio on element.nodeName=" + nodeName +
				" and element.type=" + this.type );
		}
	},

	// Support jQuery Mobile enhanced option
	_enhance: function() {
		this._updateIcon( this.element[ 0 ].checked );
	},

	widget: function() {
		return this.label;
	},

	_getRadioGroup: function() {
		var group;
		var name = this.element[ 0 ].name;
		var nameSelector = "input[name='" + $.ui.escapeSelector( name ) + "']";

		if ( !name ) {
			return $( [] );
		}

		if ( this.form.length ) {
			group = $( this.form[ 0 ].elements ).filter( nameSelector );
		} else {

			// Not inside a form, check all inputs that also are not inside a form
			group = $( nameSelector ).filter( function() {
				return $( this ).form().length === 0;
			} );
		}

		return group.not( this.element );
	},

	_toggleClasses: function() {
		var checked = this.element[ 0 ].checked;
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );

		if ( this.options.icon && this.type === "checkbox" ) {
			this._toggleClass( this.icon, null, "ui-icon-check ui-state-checked", checked )
				._toggleClass( this.icon, null, "ui-icon-blank", !checked );
		}

		if ( this.type === "radio" ) {
			this._getRadioGroup()
				.each( function() {
					var instance = $( this ).checkboxradio( "instance" );

					if ( instance ) {
						instance._removeClass( instance.label,
							"ui-checkboxradio-checked", "ui-state-active" );
					}
				} );
		}
	},

	_destroy: function() {
		this._unbindFormResetHandler();

		if ( this.icon ) {
			this.icon.remove();
			this.iconSpace.remove();
		}
	},

	_setOption: function( key, value ) {

		// We don't allow the value to be set to nothing
		if ( key === "label" && !value ) {
			return;
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( this.label, null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;

			// Don't refresh when setting disabled
			return;
		}
		this.refresh();
	},

	_updateIcon: function( checked ) {
		var toAdd = "ui-icon ui-icon-background ";

		if ( this.options.icon ) {
			if ( !this.icon ) {
				this.icon = $( "<span>" );
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-checkboxradio-icon-space" );
			}

			if ( this.type === "checkbox" ) {
				toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
				this._removeClass( this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check" );
			} else {
				toAdd += "ui-icon-blank";
			}
			this._addClass( this.icon, "ui-checkboxradio-icon", toAdd );
			if ( !checked ) {
				this._removeClass( this.icon, null, "ui-icon-check ui-state-checked" );
			}
			this.icon.prependTo( this.label ).after( this.iconSpace );
		} else if ( this.icon !== undefined ) {
			this.icon.remove();
			this.iconSpace.remove();
			delete this.icon;
		}
	},

	_updateLabel: function() {

		// Remove the contents of the label ( minus the icon, icon space, and input )
		var contents = this.label.contents().not( this.element[ 0 ] );
		if ( this.icon ) {
			contents = contents.not( this.icon[ 0 ] );
		}
		if ( this.iconSpace ) {
			contents = contents.not( this.iconSpace[ 0 ] );
		}
		contents.remove();

		this.label.append( this.options.label );
	},

	refresh: function() {
		var checked = this.element[ 0 ].checked,
			isDisabled = this.element[ 0 ].disabled;

		this._updateIcon( checked );
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );
		if ( this.options.label !== null ) {
			this._updateLabel();
		}

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { "disabled": isDisabled } );
		}
	}

} ] );

var widgetsCheckboxradio = $.ui.checkboxradio;


/*!
 * jQuery UI Button 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Button
//>>group: Widgets
//>>description: Enhances a form with themeable buttons.
//>>docs: http://api.jqueryui.com/button/
//>>demos: http://jqueryui.com/button/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.button", {
	version: "1.12.1",
	defaultElement: "<button>",
	options: {
		classes: {
			"ui-button": "ui-corner-all"
		},
		disabled: null,
		icon: null,
		iconPosition: "beginning",
		label: null,
		showLabel: true
	},

	_getCreateOptions: function() {
		var disabled,

			// This is to support cases like in jQuery Mobile where the base widget does have
			// an implementation of _getCreateOptions
			options = this._super() || {};

		this.isInput = this.element.is( "input" );

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}

		this.originalLabel = this.isInput ? this.element.val() : this.element.html();
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		return options;
	},

	_create: function() {
		if ( !this.option.showLabel & !this.options.icon ) {
			this.options.showLabel = true;
		}

		// We have to check the option again here even though we did in _getCreateOptions,
		// because null may have been passed on init which would override what was set in
		// _getCreateOptions
		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled || false;
		}

		this.hasTitle = !!this.element.attr( "title" );

		// Check to see if the label needs to be set or if its already correct
		if ( this.options.label && this.options.label !== this.originalLabel ) {
			if ( this.isInput ) {
				this.element.val( this.options.label );
			} else {
				this.element.html( this.options.label );
			}
		}
		this._addClass( "ui-button", "ui-widget" );
		this._setOption( "disabled", this.options.disabled );
		this._enhance();

		if ( this.element.is( "a" ) ) {
			this._on( {
				"keyup": function( event ) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						event.preventDefault();

						// Support: PhantomJS <= 1.9, IE 8 Only
						// If a native click is available use it so we actually cause navigation
						// otherwise just trigger a click event
						if ( this.element[ 0 ].click ) {
							this.element[ 0 ].click();
						} else {
							this.element.trigger( "click" );
						}
					}
				}
			} );
		}
	},

	_enhance: function() {
		if ( !this.element.is( "button" ) ) {
			this.element.attr( "role", "button" );
		}

		if ( this.options.icon ) {
			this._updateIcon( "icon", this.options.icon );
			this._updateTooltip();
		}
	},

	_updateTooltip: function() {
		this.title = this.element.attr( "title" );

		if ( !this.options.showLabel && !this.title ) {
			this.element.attr( "title", this.options.label );
		}
	},

	_updateIcon: function( option, value ) {
		var icon = option !== "iconPosition",
			position = icon ? this.options.iconPosition : value,
			displayBlock = position === "top" || position === "bottom";

		// Create icon
		if ( !this.icon ) {
			this.icon = $( "<span>" );

			this._addClass( this.icon, "ui-button-icon", "ui-icon" );

			if ( !this.options.showLabel ) {
				this._addClass( "ui-button-icon-only" );
			}
		} else if ( icon ) {

			// If we are updating the icon remove the old icon class
			this._removeClass( this.icon, null, this.options.icon );
		}

		// If we are updating the icon add the new icon class
		if ( icon ) {
			this._addClass( this.icon, null, value );
		}

		this._attachIcon( position );

		// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
		// the iconSpace if there is one.
		if ( displayBlock ) {
			this._addClass( this.icon, null, "ui-widget-icon-block" );
			if ( this.iconSpace ) {
				this.iconSpace.remove();
			}
		} else {

			// Position is beginning or end so remove the ui-widget-icon-block class and add the
			// space if it does not exist
			if ( !this.iconSpace ) {
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-button-icon-space" );
			}
			this._removeClass( this.icon, null, "ui-wiget-icon-block" );
			this._attachIconSpace( position );
		}
	},

	_destroy: function() {
		this.element.removeAttr( "role" );

		if ( this.icon ) {
			this.icon.remove();
		}
		if ( this.iconSpace ) {
			this.iconSpace.remove();
		}
		if ( !this.hasTitle ) {
			this.element.removeAttr( "title" );
		}
	},

	_attachIconSpace: function( iconPosition ) {
		this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
	},

	_attachIcon: function( iconPosition ) {
		this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
	},

	_setOptions: function( options ) {
		var newShowLabel = options.showLabel === undefined ?
				this.options.showLabel :
				options.showLabel,
			newIcon = options.icon === undefined ? this.options.icon : options.icon;

		if ( !newShowLabel && !newIcon ) {
			options.showLabel = true;
		}
		this._super( options );
	},

	_setOption: function( key, value ) {
		if ( key === "icon" ) {
			if ( value ) {
				this._updateIcon( key, value );
			} else if ( this.icon ) {
				this.icon.remove();
				if ( this.iconSpace ) {
					this.iconSpace.remove();
				}
			}
		}

		if ( key === "iconPosition" ) {
			this._updateIcon( key, value );
		}

		// Make sure we can't end up with a button that has neither text nor icon
		if ( key === "showLabel" ) {
				this._toggleClass( "ui-button-icon-only", null, !value );
				this._updateTooltip();
		}

		if ( key === "label" ) {
			if ( this.isInput ) {
				this.element.val( value );
			} else {

				// If there is an icon, append it, else nothing then append the value
				// this avoids removal of the icon when setting label text
				this.element.html( value );
				if ( this.icon ) {
					this._attachIcon( this.options.iconPosition );
					this._attachIconSpace( this.options.iconPosition );
				}
			}
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;
			if ( value ) {
				this.element.blur();
			}
		}
	},

	refresh: function() {

		// Make sure to only check disabled if its an element that supports this otherwise
		// check for the disabled class to determine state
		var isDisabled = this.element.is( "input, button" ) ?
			this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { disabled: isDisabled } );
		}

		this._updateTooltip();
	}
} );

// DEPRECATED
if ( $.uiBackCompat !== false ) {

	// Text and Icons options
	$.widget( "ui.button", $.ui.button, {
		options: {
			text: true,
			icons: {
				primary: null,
				secondary: null
			}
		},

		_create: function() {
			if ( this.options.showLabel && !this.options.text ) {
				this.options.showLabel = this.options.text;
			}
			if ( !this.options.showLabel && this.options.text ) {
				this.options.text = this.options.showLabel;
			}
			if ( !this.options.icon && ( this.options.icons.primary ||
					this.options.icons.secondary ) ) {
				if ( this.options.icons.primary ) {
					this.options.icon = this.options.icons.primary;
				} else {
					this.options.icon = this.options.icons.secondary;
					this.options.iconPosition = "end";
				}
			} else if ( this.options.icon ) {
				this.options.icons.primary = this.options.icon;
			}
			this._super();
		},

		_setOption: function( key, value ) {
			if ( key === "text" ) {
				this._super( "showLabel", value );
				return;
			}
			if ( key === "showLabel" ) {
				this.options.text = value;
			}
			if ( key === "icon" ) {
				this.options.icons.primary = value;
			}
			if ( key === "icons" ) {
				if ( value.primary ) {
					this._super( "icon", value.primary );
					this._super( "iconPosition", "beginning" );
				} else if ( value.secondary ) {
					this._super( "icon", value.secondary );
					this._super( "iconPosition", "end" );
				}
			}
			this._superApply( arguments );
		}
	} );

	$.fn.button = ( function( orig ) {
		return function() {
			if ( !this.length || ( this.length && this[ 0 ].tagName !== "INPUT" ) ||
					( this.length && this[ 0 ].tagName === "INPUT" && (
						this.attr( "type" ) !== "checkbox" && this.attr( "type" ) !== "radio"
					) ) ) {
				return orig.apply( this, arguments );
			}
			if ( !$.ui.checkboxradio ) {
				$.error( "Checkboxradio widget missing" );
			}
			if ( arguments.length === 0 ) {
				return this.checkboxradio( {
					"icon": false
				} );
			}
			return this.checkboxradio.apply( this, arguments );
		};
	} )( $.fn.button );

	$.fn.buttonset = function() {
		if ( !$.ui.controlgroup ) {
			$.error( "Controlgroup widget missing" );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
			return this.controlgroup.apply( this,
				[ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
			return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
		}
		if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
			arguments[ 0 ].items = {
				button: arguments[ 0 ].items
			};
		}
		return this.controlgroup.apply( this, arguments );
	};
}

var widgetsButton = $.ui.button;


// jscs:disable maximumLineLength
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
/*!
 * jQuery UI Datepicker 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/datepicker.css
//>>css.theme: ../../themes/base/theme.css



$.extend( $.ui, { datepicker: { version: "1.12.1" } } );

var datepicker_instActive;

function datepicker_getZindex( elem ) {
	var position, value;
	while ( elem.length && elem[ 0 ] !== document ) {

		// Ignore z-index if position is set to a value where z-index is ignored by the browser
		// This makes behavior of this function consistent across browsers
		// WebKit always returns auto if the element is positioned
		position = elem.css( "position" );
		if ( position === "absolute" || position === "relative" || position === "fixed" ) {

			// IE returns 0 when zIndex is not specified
			// other browsers return a string
			// we ignore the case of nested elements with an explicit value of 0
			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
			value = parseInt( elem.css( "zIndex" ), 10 );
			if ( !isNaN( value ) && value !== 0 ) {
				return value;
			}
		}
		elem = elem.parent();
	}

	return 0;
}
/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[ "" ] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: [ "January","February","March","April","May","June",
			"July","August","September","October","November","December" ], // Names of months for drop-down and formatting
		monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
		dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
		dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
		dayNamesMin: [ "Su","Mo","Tu","We","Th","Fr","Sa" ], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend( this._defaults, this.regional[ "" ] );
	this.regional.en = $.extend( true, {}, this.regional[ "" ] );
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
	this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
}

$.extend( Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function( settings ) {
		datepicker_extendRemove( this._defaults, settings || {} );
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function( target, settings ) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = ( nodeName === "div" || nodeName === "span" );
		if ( !target.id ) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst( $( target ), inline );
		inst.settings = $.extend( {}, settings || {} );
		if ( nodeName === "input" ) {
			this._connectDatepicker( target, inst );
		} else if ( inline ) {
			this._inlineDatepicker( target, inst );
		}
	},

	/* Create a new instance object. */
	_newInst: function( target, inline ) {
		var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
		return { id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: ( !inline ? this.dpDiv : // presentation div
			datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function( target, inst ) {
		var input = $( target );
		inst.append = $( [] );
		inst.trigger = $( [] );
		if ( input.hasClass( this.markerClassName ) ) {
			return;
		}
		this._attachments( input, inst );
		input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
			on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
		this._autoSize( inst );
		$.data( target, "datepicker", inst );

		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function( input, inst ) {
		var showOn, buttonText, buttonImage,
			appendText = this._get( inst, "appendText" ),
			isRTL = this._get( inst, "isRTL" );

		if ( inst.append ) {
			inst.append.remove();
		}
		if ( appendText ) {
			inst.append = $( "<span class='" + this._appendClass + "'>" + appendText + "</span>" );
			input[ isRTL ? "before" : "after" ]( inst.append );
		}

		input.off( "focus", this._showDatepicker );

		if ( inst.trigger ) {
			inst.trigger.remove();
		}

		showOn = this._get( inst, "showOn" );
		if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
			input.on( "focus", this._showDatepicker );
		}
		if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
			buttonText = this._get( inst, "buttonText" );
			buttonImage = this._get( inst, "buttonImage" );
			inst.trigger = $( this._get( inst, "buttonImageOnly" ) ?
				$( "<img/>" ).addClass( this._triggerClass ).
					attr( { src: buttonImage, alt: buttonText, title: buttonText } ) :
				$( "<button type='button'></button>" ).addClass( this._triggerClass ).
					html( !buttonImage ? buttonText : $( "<img/>" ).attr(
					{ src:buttonImage, alt:buttonText, title:buttonText } ) ) );
			input[ isRTL ? "before" : "after" ]( inst.trigger );
			inst.trigger.on( "click", function() {
				if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
					$.datepicker._hideDatepicker();
				} else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker( input[ 0 ] );
				} else {
					$.datepicker._showDatepicker( input[ 0 ] );
				}
				return false;
			} );
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function( inst ) {
		if ( this._get( inst, "autoSize" ) && !inst.inline ) {
			var findMax, max, maxI, i,
				date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
				dateFormat = this._get( inst, "dateFormat" );

			if ( dateFormat.match( /[DM]/ ) ) {
				findMax = function( names ) {
					max = 0;
					maxI = 0;
					for ( i = 0; i < names.length; i++ ) {
						if ( names[ i ].length > max ) {
							max = names[ i ].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
					"monthNames" : "monthNamesShort" ) ) ) );
				date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
					"dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
			}
			inst.input.attr( "size", this._formatDate( inst, date ).length );
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function( target, inst ) {
		var divSpan = $( target );
		if ( divSpan.hasClass( this.markerClassName ) ) {
			return;
		}
		divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
		$.data( target, "datepicker", inst );
		this._setDate( inst, this._getDefaultDate( inst ), true );
		this._updateDatepicker( inst );
		this._updateAlternate( inst );

		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}

		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function( input, date, onSelect, settings, pos ) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if ( !inst ) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $( "<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>" );
			this._dialogInput.on( "keydown", this._doKeyDown );
			$( "body" ).append( this._dialogInput );
			inst = this._dialogInst = this._newInst( this._dialogInput, false );
			inst.settings = {};
			$.data( this._dialogInput[ 0 ], "datepicker", inst );
		}
		datepicker_extendRemove( inst.settings, settings || {} );
		date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
		this._dialogInput.val( date );

		this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
		if ( !this._pos ) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
		}

		// Move input on screen for focus, but hidden behind dialog
		this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass( this._dialogClass );
		this._showDatepicker( this._dialogInput[ 0 ] );
		if ( $.blockUI ) {
			$.blockUI( this.dpDiv );
		}
		$.data( this._dialogInput[ 0 ], "datepicker", inst );
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function( target ) {
		var nodeName,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData( target, "datepicker" );
		if ( nodeName === "input" ) {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass( this.markerClassName ).
				off( "focus", this._showDatepicker ).
				off( "keydown", this._doKeyDown ).
				off( "keypress", this._doKeyPress ).
				off( "keyup", this._doKeyUp );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			$target.removeClass( this.markerClassName ).empty();
		}

		if ( datepicker_instActive === inst ) {
			datepicker_instActive = null;
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = false;
			inst.trigger.filter( "button" ).
				each( function() { this.disabled = false; } ).end().
				filter( "img" ).css( { opacity: "1.0", cursor: "" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().removeClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", false );
		}
		this._disabledInputs = $.map( this._disabledInputs,
			function( value ) { return ( value === target ? null : value ); } ); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = true;
			inst.trigger.filter( "button" ).
				each( function() { this.disabled = true; } ).end().
				filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().addClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", true );
		}
		this._disabledInputs = $.map( this._disabledInputs,
			function( value ) { return ( value === target ? null : value ); } ); // delete entry
		this._disabledInputs[ this._disabledInputs.length ] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function( target ) {
		if ( !target ) {
			return false;
		}
		for ( var i = 0; i < this._disabledInputs.length; i++ ) {
			if ( this._disabledInputs[ i ] === target ) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function( target ) {
		try {
			return $.data( target, "datepicker" );
		}
		catch ( err ) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function( target, name, value ) {
		var settings, date, minDate, maxDate,
			inst = this._getInst( target );

		if ( arguments.length === 2 && typeof name === "string" ) {
			return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
				( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
				this._get( inst, name ) ) : null ) );
		}

		settings = name || {};
		if ( typeof name === "string" ) {
			settings = {};
			settings[ name ] = value;
		}

		if ( inst ) {
			if ( this._curInst === inst ) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker( target, true );
			minDate = this._getMinMaxDate( inst, "min" );
			maxDate = this._getMinMaxDate( inst, "max" );
			datepicker_extendRemove( inst.settings, settings );

			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
				inst.settings.minDate = this._formatDate( inst, minDate );
			}
			if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
				inst.settings.maxDate = this._formatDate( inst, maxDate );
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker( target );
				} else {
					this._enableDatepicker( target );
				}
			}
			this._attachments( $( target ), inst );
			this._autoSize( inst );
			this._setDate( inst, date );
			this._updateAlternate( inst );
			this._updateDatepicker( inst );
		}
	},

	// Change method deprecated
	_changeDatepicker: function( target, name, value ) {
		this._optionDatepicker( target, name, value );
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function( target ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._updateDatepicker( inst );
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function( target, date ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._setDate( inst, date );
			this._updateDatepicker( inst );
			this._updateAlternate( inst );
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function( target, noDefault ) {
		var inst = this._getInst( target );
		if ( inst && !inst.inline ) {
			this._setDateFromField( inst, noDefault );
		}
		return ( inst ? this._getDate( inst ) : null );
	},

	/* Handle keystrokes. */
	_doKeyDown: function( event ) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst( event.target ),
			handled = true,
			isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );

		inst._keyEvent = true;
		if ( $.datepicker._datepickerShowing ) {
			switch ( event.keyCode ) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv );
						if ( sel[ 0 ] ) {
							$.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
						}

						onSelect = $.datepicker._get( inst, "onSelect" );
						if ( onSelect ) {
							dateStr = $.datepicker._formatDate( inst );

							// Trigger custom callback
							onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							-$.datepicker._get( inst, "stepBigMonths" ) :
							-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							+$.datepicker._get( inst, "stepBigMonths" ) :
							+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // next month/year on page down/+ ctrl
				case 35: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._clearDate( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._gotoToday( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// -1 day on ctrl or command +left
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								-$.datepicker._get( inst, "stepBigMonths" ) :
								-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +left on Mac
						break;
				case 38: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, -7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// +1 day on ctrl or command +right
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								+$.datepicker._get( inst, "stepBigMonths" ) :
								+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +right
						break;
				case 40: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, +7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker( this );
		} else {
			handled = false;
		}

		if ( handled ) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function( event ) {
		var chars, chr,
			inst = $.datepicker._getInst( event.target );

		if ( $.datepicker._get( inst, "constrainInput" ) ) {
			chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
			chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
			return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function( event ) {
		var date,
			inst = $.datepicker._getInst( event.target );

		if ( inst.input.val() !== inst.lastVal ) {
			try {
				date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
					( inst.input ? inst.input.val() : null ),
					$.datepicker._getFormatConfig( inst ) );

				if ( date ) { // only if valid
					$.datepicker._setDateFromField( inst );
					$.datepicker._updateAlternate( inst );
					$.datepicker._updateDatepicker( inst );
				}
			}
			catch ( err ) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function( input ) {
		input = input.target || input;
		if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
			input = $( "input", input.parentNode )[ 0 ];
		}

		if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst( input );
		if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
			$.datepicker._curInst.dpDiv.stop( true, true );
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
			}
		}

		beforeShow = $.datepicker._get( inst, "beforeShow" );
		beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
		if ( beforeShowSettings === false ) {
			return;
		}
		datepicker_extendRemove( inst.settings, beforeShowSettings );

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField( inst );

		if ( $.datepicker._inDialog ) { // hide cursor
			input.value = "";
		}
		if ( !$.datepicker._pos ) { // position below input
			$.datepicker._pos = $.datepicker._findPos( input );
			$.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$( input ).parents().each( function() {
			isFixed |= $( this ).css( "position" ) === "fixed";
			return !isFixed;
		} );

		offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
		$.datepicker._pos = null;

		//to avoid flashes on Firefox
		inst.dpDiv.empty();

		// determine sizing offscreen
		inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
		$.datepicker._updateDatepicker( inst );

		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset( inst, offset, isFixed );
		inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
			"static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
			left: offset.left + "px", top: offset.top + "px" } );

		if ( !inst.inline ) {
			showAnim = $.datepicker._get( inst, "showAnim" );
			duration = $.datepicker._get( inst, "duration" );
			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
			} else {
				inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.trigger( "focus" );
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function( inst ) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append( this._generateHTML( inst ) );
		this._attachHandlers( inst );

		var origyearshtml,
			numMonths = this._getNumberOfMonths( inst ),
			cols = numMonths[ 1 ],
			width = 17,
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

		if ( activeCell.length > 0 ) {
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
		}

		inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
		if ( cols > 1 ) {
			inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
		}
		inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-multi" );
		inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-rtl" );

		if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.trigger( "focus" );
		}

		// Deffered render of the years select (to avoid flashes on Firefox)
		if ( inst.yearshtml ) {
			origyearshtml = inst.yearshtml;
			setTimeout( function() {

				//assure that inst.yearshtml didn't change.
				if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
					inst.dpDiv.find( "select.ui-datepicker-year:first" ).replaceWith( inst.yearshtml );
				}
				origyearshtml = inst.yearshtml = null;
			}, 0 );
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function( inst, offset, isFixed ) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
			viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );

		offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
		offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
		offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;

		// Now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
			Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
		offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
			Math.abs( dpHeight + inputHeight ) : 0 );

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function( obj ) {
		var position,
			inst = this._getInst( obj ),
			isRTL = this._get( inst, "isRTL" );

		while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden( obj ) ) ) {
			obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
		}

		position = $( obj ).offset();
		return [ position.left, position.top ];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function( input ) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
			return;
		}

		if ( this._datepickerShowing ) {
			showAnim = this._get( inst, "showAnim" );
			duration = this._get( inst, "duration" );
			postProcess = function() {
				$.datepicker._tidyDialog( inst );
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
			} else {
				inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
					( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
			}

			if ( !showAnim ) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get( inst, "onClose" );
			if ( onClose ) {
				onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
			}

			this._lastInput = null;
			if ( this._inDialog ) {
				this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
				if ( $.blockUI ) {
					$.unblockUI();
					$( "body" ).append( this.dpDiv );
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function( inst ) {
		inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function( event ) {
		if ( !$.datepicker._curInst ) {
			return;
		}

		var $target = $( event.target ),
			inst = $.datepicker._getInst( $target[ 0 ] );

		if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
				$target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
				!$target.hasClass( $.datepicker.markerClassName ) &&
				!$target.closest( "." + $.datepicker._triggerClass ).length &&
				$.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
			( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function( id, offset, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}
		this._adjustInstDate( inst, offset +
			( period === "M" ? this._get( inst, "showCurrentAtPos" ) : 0 ), // undo positioning
			period );
		this._updateDatepicker( inst );
	},

	/* Action for current link. */
	_gotoToday: function( id ) {
		var date,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function( id, select, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
		inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
			parseInt( select.options[ select.selectedIndex ].value, 10 );

		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a day. */
	_selectDay: function( id, month, year, td ) {
		var inst,
			target = $( id );

		if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}

		inst = this._getInst( target[ 0 ] );
		inst.selectedDay = inst.currentDay = $( "a", td ).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate( id, this._formatDate( inst,
			inst.currentDay, inst.currentMonth, inst.currentYear ) );
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function( id ) {
		var target = $( id );
		this._selectDate( target, "" );
	},

	/* Update the input field with the selected date. */
	_selectDate: function( id, dateStr ) {
		var onSelect,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
		if ( inst.input ) {
			inst.input.val( dateStr );
		}
		this._updateAlternate( inst );

		onSelect = this._get( inst, "onSelect" );
		if ( onSelect ) {
			onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
		} else if ( inst.input ) {
			inst.input.trigger( "change" ); // fire the change event
		}

		if ( inst.inline ) {
			this._updateDatepicker( inst );
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[ 0 ];
			if ( typeof( inst.input[ 0 ] ) !== "object" ) {
				inst.input.trigger( "focus" ); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function( inst ) {
		var altFormat, date, dateStr,
			altField = this._get( inst, "altField" );

		if ( altField ) { // update alternate field too
			altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
			date = this._getDate( inst );
			dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
			$( altField ).val( dateStr );
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function( date ) {
		var day = date.getDay();
		return [ ( day > 0 && day < 6 ), "" ];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function( date ) {
		var time,
			checkDate = new Date( date.getTime() );

		// Find Thursday of this week starting on Monday
		checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );

		time = checkDate.getTime();
		checkDate.setMonth( 0 ); // Compare with Jan 1
		checkDate.setDate( 1 );
		return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function( format, value, settings ) {
		if ( format == null || value == null ) {
			throw "Invalid arguments";
		}

		value = ( typeof value === "object" ? value.toString() : value + "" );
		if ( value === "" ) {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
			shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Extract a number from the string value
			getNumber = function( match ) {
				var isDoubled = lookAhead( match ),
					size = ( match === "@" ? 14 : ( match === "!" ? 20 :
					( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
					minSize = ( match === "y" ? size : 1 ),
					digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
					num = value.substring( iValue ).match( digits );
				if ( !num ) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[ 0 ].length;
				return parseInt( num[ 0 ], 10 );
			},

			// Extract a name from the string value and convert to an index
			getName = function( match, shortNames, longNames ) {
				var index = -1,
					names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
						return [ [ k, v ] ];
					} ).sort( function( a, b ) {
						return -( a[ 1 ].length - b[ 1 ].length );
					} );

				$.each( names, function( i, pair ) {
					var name = pair[ 1 ];
					if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
						index = pair[ 0 ];
						iValue += name.length;
						return false;
					}
				} );
				if ( index !== -1 ) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},

			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d":
						day = getNumber( "d" );
						break;
					case "D":
						getName( "D", dayNamesShort, dayNames );
						break;
					case "o":
						doy = getNumber( "o" );
						break;
					case "m":
						month = getNumber( "m" );
						break;
					case "M":
						month = getName( "M", monthNamesShort, monthNames );
						break;
					case "y":
						year = getNumber( "y" );
						break;
					case "@":
						date = new Date( getNumber( "@" ) );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if ( lookAhead( "'" ) ) {
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if ( iValue < value.length ) {
			extra = value.substr( iValue );
			if ( !/^\s+/.test( extra ) ) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if ( year === -1 ) {
			year = new Date().getFullYear();
		} else if ( year < 100 ) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				( year <= shortYearCutoff ? 0 : -100 );
		}

		if ( doy > -1 ) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth( year, month - 1 );
				if ( day <= dim ) {
					break;
				}
				month++;
				day -= dim;
			} while ( true );
		}

		date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
		if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
		Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function( format, date, settings ) {
		if ( !date ) {
			return "";
		}

		var iFormat,
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Format a number, with leading zero if necessary
			formatNumber = function( match, value, len ) {
				var num = "" + value;
				if ( lookAhead( match ) ) {
					while ( num.length < len ) {
						num = "0" + num;
					}
				}
				return num;
			},

			// Format a name, short or long as requested
			formatName = function( match, value, shortNames, longNames ) {
				return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
			},
			output = "",
			literal = false;

		if ( date ) {
			for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
				if ( literal ) {
					if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
						literal = false;
					} else {
						output += format.charAt( iFormat );
					}
				} else {
					switch ( format.charAt( iFormat ) ) {
						case "d":
							output += formatNumber( "d", date.getDate(), 2 );
							break;
						case "D":
							output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
							break;
						case "o":
							output += formatNumber( "o",
								Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
							break;
						case "m":
							output += formatNumber( "m", date.getMonth() + 1, 2 );
							break;
						case "M":
							output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
							break;
						case "y":
							output += ( lookAhead( "y" ) ? date.getFullYear() :
								( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if ( lookAhead( "'" ) ) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt( iFormat );
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function( format ) {
		var iFormat,
			chars = "",
			literal = false,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					chars += format.charAt( iFormat );
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if ( lookAhead( "'" ) ) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt( iFormat );
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function( inst, name ) {
		return inst.settings[ name ] !== undefined ?
			inst.settings[ name ] : this._defaults[ name ];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function( inst, noDefault ) {
		if ( inst.input.val() === inst.lastVal ) {
			return;
		}

		var dateFormat = this._get( inst, "dateFormat" ),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate( inst ),
			date = defaultDate,
			settings = this._getFormatConfig( inst );

		try {
			date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
		} catch ( event ) {
			dates = ( noDefault ? "" : dates );
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = ( dates ? date.getDate() : 0 );
		inst.currentMonth = ( dates ? date.getMonth() : 0 );
		inst.currentYear = ( dates ? date.getFullYear() : 0 );
		this._adjustInstDate( inst );
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function( inst ) {
		return this._restrictMinMax( inst,
			this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function( inst, date, defaultDate ) {
		var offsetNumeric = function( offset ) {
				var date = new Date();
				date.setDate( date.getDate() + offset );
				return date;
			},
			offsetString = function( offset ) {
				try {
					return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
						offset, $.datepicker._getFormatConfig( inst ) );
				}
				catch ( e ) {

					// Ignore
				}

				var date = ( offset.toLowerCase().match( /^c/ ) ?
					$.datepicker._getDate( inst ) : null ) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec( offset );

				while ( matches ) {
					switch ( matches[ 2 ] || "d" ) {
						case "d" : case "D" :
							day += parseInt( matches[ 1 ], 10 ); break;
						case "w" : case "W" :
							day += parseInt( matches[ 1 ], 10 ) * 7; break;
						case "m" : case "M" :
							month += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
						case "y": case "Y" :
							year += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
					}
					matches = pattern.exec( offset );
				}
				return new Date( year, month, day );
			},
			newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
				( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );

		newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
		if ( newDate ) {
			newDate.setHours( 0 );
			newDate.setMinutes( 0 );
			newDate.setSeconds( 0 );
			newDate.setMilliseconds( 0 );
		}
		return this._daylightSavingAdjust( newDate );
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function( date ) {
		if ( !date ) {
			return null;
		}
		date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function( inst, date, noChange ) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
			this._notifyChange( inst );
		}
		this._adjustInstDate( inst );
		if ( inst.input ) {
			inst.input.val( clear ? "" : this._formatDate( inst ) );
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function( inst ) {
		var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
			this._daylightSavingAdjust( new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function( inst ) {
		var stepMonths = this._get( inst, "stepMonths" ),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find( "[data-handler]" ).map( function() {
			var handler = {
				prev: function() {
					$.datepicker._adjustDate( id, -stepMonths, "M" );
				},
				next: function() {
					$.datepicker._adjustDate( id, +stepMonths, "M" );
				},
				hide: function() {
					$.datepicker._hideDatepicker();
				},
				today: function() {
					$.datepicker._gotoToday( id );
				},
				selectDay: function() {
					$.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
					return false;
				},
				selectMonth: function() {
					$.datepicker._selectMonthYear( id, this, "M" );
					return false;
				},
				selectYear: function() {
					$.datepicker._selectMonthYear( id, this, "Y" );
					return false;
				}
			};
			$( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
		} );
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function( inst ) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
			isRTL = this._get( inst, "isRTL" ),
			showButtonPanel = this._get( inst, "showButtonPanel" ),
			hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
			navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
			numMonths = this._getNumberOfMonths( inst ),
			showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
			stepMonths = this._get( inst, "stepMonths" ),
			isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
			currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
				new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if ( drawMonth < 0 ) {
			drawMonth += 12;
			drawYear--;
		}
		if ( maxDate ) {
			maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
				maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
			maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
			while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
				drawMonth--;
				if ( drawMonth < 0 ) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get( inst, "prevText" );
		prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		prev = ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" :
			( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" ) );

		nextText = this._get( inst, "nextText" );
		nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		next = ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" :
			( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" ) );

		currentText = this._get( inst, "currentText" );
		gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
		currentText = ( !navigationAsDateFormat ? currentText :
			this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );

		controls = ( !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get( inst, "closeText" ) + "</button>" : "" );

		buttonPanel = ( showButtonPanel ) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + ( isRTL ? controls : "" ) +
			( this._isInRange( inst, gotoDate ) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "" ) + ( isRTL ? "" : controls ) + "</div>" : "";

		firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
		firstDay = ( isNaN( firstDay ) ? 0 : firstDay );

		showWeek = this._get( inst, "showWeek" );
		dayNames = this._get( inst, "dayNames" );
		dayNamesMin = this._get( inst, "dayNamesMin" );
		monthNames = this._get( inst, "monthNames" );
		monthNamesShort = this._get( inst, "monthNamesShort" );
		beforeShowDay = this._get( inst, "beforeShowDay" );
		showOtherMonths = this._get( inst, "showOtherMonths" );
		selectOtherMonths = this._get( inst, "selectOtherMonths" );
		defaultDate = this._getDefaultDate( inst );
		html = "";

		for ( row = 0; row < numMonths[ 0 ]; row++ ) {
			group = "";
			this.maxRows = 4;
			for ( col = 0; col < numMonths[ 1 ]; col++ ) {
				selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
				cornerClass = " ui-corner-all";
				calender = "";
				if ( isMultiMonth ) {
					calender += "<div class='ui-datepicker-group";
					if ( numMonths[ 1 ] > 1 ) {
						switch ( col ) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
							case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
					( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
					this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
				for ( dow = 0; dow < 7; dow++ ) { // days of the week
					day = ( dow + firstDay ) % 7;
					thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
						"<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
				if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
					inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
				}
				leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
				curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
				numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
				for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
					calender += "<tr>";
					tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
					for ( dow = 0; dow < 7; dow++ ) { // create date picker days
						daySettings = ( beforeShowDay ?
							beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
						otherMonth = ( printDate.getMonth() !== drawMonth );
						unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
							( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
						tbody += "<td class='" +
							( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
							( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
							( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
							( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?

							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "" ) + // highlight selected day
							( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
							( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
							( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
							( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
							( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
							( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
							( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
							( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
							( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
						printDate.setDate( printDate.getDate() + 1 );
						printDate = this._daylightSavingAdjust( printDate );
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if ( drawMonth > 11 ) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
							( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort ) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get( inst, "changeMonth" ),
			changeYear = this._get( inst, "changeYear" ),
			showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// Month selection
		if ( secondary || !changeMonth ) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
		} else {
			inMinYear = ( minDate && minDate.getFullYear() === drawYear );
			inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++ ) {
				if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
					monthHtml += "<option value='" + month + "'" +
						( month === drawMonth ? " selected='selected'" : "" ) +
						">" + monthNamesShort[ month ] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if ( !showMonthAfterYear ) {
			html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
		}

		// Year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if ( secondary || !changeYear ) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {

				// determine range of years to display
				years = this._get( inst, "yearRange" ).split( ":" );
				thisYear = new Date().getFullYear();
				determineYear = function( value ) {
					var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
						( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
						parseInt( value, 10 ) ) );
					return ( isNaN( year ) ? thisYear : year );
				};
				year = determineYear( years[ 0 ] );
				endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
				year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
				endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for ( ; year <= endYear; year++ ) {
					inst.yearshtml += "<option value='" + year + "'" +
						( year === drawYear ? " selected='selected'" : "" ) +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get( inst, "yearSuffix" );
		if ( showMonthAfterYear ) {
			html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function( inst, offset, period ) {
		var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
			month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
			day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
			date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if ( period === "M" || period === "Y" ) {
			this._notifyChange( inst );
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function( inst, date ) {
		var minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			newDate = ( minDate && date < minDate ? minDate : date );
		return ( maxDate && newDate > maxDate ? maxDate : newDate );
	},

	/* Notify change of month/year. */
	_notifyChange: function( inst ) {
		var onChange = this._get( inst, "onChangeMonthYear" );
		if ( onChange ) {
			onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
				[ inst.selectedYear, inst.selectedMonth + 1, inst ] );
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function( inst ) {
		var numMonths = this._get( inst, "numberOfMonths" );
		return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function( inst, minMax ) {
		return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function( year, month ) {
		return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function( year, month ) {
		return new Date( year, month, 1 ).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function( inst, offset, curYear, curMonth ) {
		var numMonths = this._getNumberOfMonths( inst ),
			date = this._daylightSavingAdjust( new Date( curYear,
			curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );

		if ( offset < 0 ) {
			date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
		}
		return this._isInRange( inst, date );
	},

	/* Is the given date in the accepted range? */
	_isInRange: function( inst, date ) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			minYear = null,
			maxYear = null,
			years = this._get( inst, "yearRange" );
			if ( years ) {
				yearSplit = years.split( ":" );
				currentYear = new Date().getFullYear();
				minYear = parseInt( yearSplit[ 0 ], 10 );
				maxYear = parseInt( yearSplit[ 1 ], 10 );
				if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
					minYear += currentYear;
				}
				if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
					maxYear += currentYear;
				}
			}

		return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
			( !maxDate || date.getTime() <= maxDate.getTime() ) &&
			( !minYear || date.getFullYear() >= minYear ) &&
			( !maxYear || date.getFullYear() <= maxYear ) );
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function( inst ) {
		var shortYearCutoff = this._get( inst, "shortYearCutoff" );
		shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
		return { shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
			monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
	},

	/* Format the given date for display. */
	_formatDate: function( inst, day, month, year ) {
		if ( !day ) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = ( day ? ( typeof day === "object" ? day :
			this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
			this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
		return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
	}
} );

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover( dpDiv ) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.on( "mouseout", selector, function() {
			$( this ).removeClass( "ui-state-hover" );
			if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-prev-hover" );
			}
			if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-next-hover" );
			}
		} )
		.on( "mouseover", selector, datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
	if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
		$( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
		$( this ).addClass( "ui-state-hover" );
		if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-prev-hover" );
		}
		if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-next-hover" );
		}
	}
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove( target, props ) {
	$.extend( target, props );
	for ( var name in props ) {
		if ( props[ name ] == null ) {
			target[ name ] = props[ name ];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function( options ) {

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if ( !$.datepicker.initialized ) {
		$( document ).on( "mousedown", $.datepicker._checkExternalClick );
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
		$( "body" ).append( $.datepicker.dpDiv );
	}

	var otherArgs = Array.prototype.slice.call( arguments, 1 );
	if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	return this.each( function() {
		typeof options === "string" ?
			$.datepicker[ "_" + options + "Datepicker" ].
				apply( $.datepicker, [ this ].concat( otherArgs ) ) :
			$.datepicker._attachDatepicker( this, options );
	} );
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.12.1";

var widgetsDatepicker = $.datepicker;




// This file is deprecated
var ie = $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

/*!
 * jQuery UI Mouse 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/



var mouseHandled = false;
$( document ).on( "mouseup", function() {
	mouseHandled = false;
} );

var widgetsMouse = $.widget( "ui.mouse", {
	version: "1.12.1",
	options: {
		cancel: "input, textarea, button, select, option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.on( "mousedown." + this.widgetName, function( event ) {
				return that._mouseDown( event );
			} )
			.on( "click." + this.widgetName, function( event ) {
				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
					event.stopImmediatePropagation();
					return false;
				}
			} );

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.off( "." + this.widgetName );
		if ( this._mouseMoveDelegate ) {
			this.document
				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
		}
	},

	_mouseDown: function( event ) {

		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// We may have missed mouseup (out of window)
		( this._mouseStarted && this._mouseUp( event ) );

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = ( event.which === 1 ),

			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
				$( event.target ).closest( this.options.cancel ).length : false );
		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if ( !this.mouseDelayMet ) {
			this._mouseDelayTimer = setTimeout( function() {
				that.mouseDelayMet = true;
			}, this.options.delay );
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted = ( this._mouseStart( event ) !== false );
			if ( !this._mouseStarted ) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
		}

		// These delegates are required to keep context
		this._mouseMoveDelegate = function( event ) {
			return that._mouseMove( event );
		};
		this._mouseUpDelegate = function( event ) {
			return that._mouseUp( event );
		};

		this.document
			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function( event ) {

		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {

			// IE mouseup check - mouseup happened when mouse was out of window
			if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
					!event.button ) {
				return this._mouseUp( event );

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {

				// Support: Safari <=8 - 9
				// Safari sets which to 0 if you press any of the following keys
				// during a drag (#14461)
				if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
						event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
					this.ignoreMissingWhich = true;
				} else if ( !this.ignoreMissingWhich ) {
					return this._mouseUp( event );
				}
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if ( this._mouseStarted ) {
			this._mouseDrag( event );
			return event.preventDefault();
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted =
				( this._mouseStart( this._mouseDownEvent, event ) !== false );
			( this._mouseStarted ? this._mouseDrag( event ) : this._mouseUp( event ) );
		}

		return !this._mouseStarted;
	},

	_mouseUp: function( event ) {
		this.document
			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if ( this._mouseStarted ) {
			this._mouseStarted = false;

			if ( event.target === this._mouseDownEvent.target ) {
				$.data( event.target, this.widgetName + ".preventClickEvent", true );
			}

			this._mouseStop( event );
		}

		if ( this._mouseDelayTimer ) {
			clearTimeout( this._mouseDelayTimer );
			delete this._mouseDelayTimer;
		}

		this.ignoreMissingWhich = false;
		mouseHandled = false;
		event.preventDefault();
	},

	_mouseDistanceMet: function( event ) {
		return ( Math.max(
				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
				Math.abs( this._mouseDownEvent.pageY - event.pageY )
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function( /* event */ ) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function( /* event */ ) {},
	_mouseDrag: function( /* event */ ) {},
	_mouseStop: function( /* event */ ) {},
	_mouseCapture: function( /* event */ ) { return true; }
} );




// $.ui.plugin is deprecated. Use $.widget() extensions instead.
var plugin = $.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
				instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};



var safeBlur = $.ui.safeBlur = function( element ) {

	// Support: IE9 - 10 only
	// If the <body> is blurred, IE will switch windows, see #9420
	if ( element && element.nodeName.toLowerCase() !== "body" ) {
		$( element ).trigger( "blur" );
	}
};


/*!
 * jQuery UI Draggable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css



$.widget( "ui.draggable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// Callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if ( this.options.addClasses ) {
			this._addClass( "ui-draggable" );
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var o = this.options;

		// Among others, prevent a drag on a resizable-handle
		if ( this.helper || o.disabled ||
				$( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle( event );
		if ( !this.handle ) {
			return false;
		}

		this._blurActiveElement( event );

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
			target = $( event.target );

		// Don't blur if the event occurred on an element that is within
		// the currently focused element
		// See #10527, #12472
		if ( target.closest( activeElement ).length ) {
			return;
		}

		// Blur any element that currently has focus, see #4261
		$.ui.safeBlur( activeElement );
	},

	_mouseStart: function( event ) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		this._addClass( this.helper, "ui-draggable-dragging" );

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter( function() {
				return $( this ).css( "position" ) === "fixed";
			} ).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if ( this._trigger( "start", event ) === false ) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		// Execute the drag once - this causes the helper not to be visible before getting its
		// correct position
		this._mouseDrag( event, true );

		// If the ddmanager is used for droppables, inform the manager that dragging has started
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart( this, event );
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function( event, noPropagation ) {

		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Call plugins and callbacks and use the resulting position if something is returned
		if ( !noPropagation ) {
			var ui = this._uiHash();
			if ( this._trigger( "drag", event, ui ) === false ) {
				this._mouseUp( new $.Event( "mouseup", event ) );
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		return false;
	},

	_mouseStop: function( event ) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			dropped = $.ui.ddmanager.drop( this, event );
		}

		//if a drop comes from outside (a sortable)
		if ( this.dropped ) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ( ( this.options.revert === "invalid" && !dropped ) ||
				( this.options.revert === "valid" && dropped ) ||
				this.options.revert === true || ( $.isFunction( this.options.revert ) &&
				this.options.revert.call( this.element, dropped ) )
		) {
			$( this.helper ).animate(
				this.originalPosition,
				parseInt( this.options.revertDuration, 10 ),
				function() {
					if ( that._trigger( "stop", event ) !== false ) {
						that._clear();
					}
				}
			);
		} else {
			if ( this._trigger( "stop", event ) !== false ) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		// If the ddmanager is used for droppables, inform the manager that dragging has stopped
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop( this, event );
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {

			// The interaction is over; whether or not the click resulted in a drag,
			// focus the element
			this.element.trigger( "focus" );
		}

		return $.ui.mouse.prototype._mouseUp.call( this, event );
	},

	cancel: function() {

		if ( this.helper.is( ".ui-draggable-dragging" ) ) {
			this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function( event ) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this._addClass( this.handleElement, "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this._removeClass( this.handleElement, "ui-draggable-handle" );
	},

	_createHelper: function( event ) {

		var o = this.options,
			helperIsFunction = $.isFunction( o.helper ),
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if ( !helper.parents( "body" ).length ) {
			helper.appendTo( ( o.appendTo === "parent" ?
				this.element[ 0 ].parentNode :
				o.appendTo ) );
		}

		// Http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if ( helper[ 0 ] !== this.element[ 0 ] &&
				!( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
			helper.css( "position", "absolute" );
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
			right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
			bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() -
					this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() +
					( $( window ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document" ) {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ) {
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
					pageX = containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
					pageY = containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
					pageX = containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
					pageY = containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {

				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
				// argument errors in IE (see ticket #6950)
				top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
					this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
				pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
					top - this.offset.click.top > containment[ 3 ] ) ?
						top :
						( ( top - this.offset.click.top >= containment[ 1 ] ) ?
							top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

				left = o.grid[ 0 ] ? this.originalPageX +
					Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
					this.originalPageX;
				pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
					left - this.offset.click.left > containment[ 2 ] ) ?
						left :
						( ( left - this.offset.click.left >= containment[ 0 ] ) ?
							left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this._removeClass( this.helper, "ui-draggable-dragging" );
		if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

} );

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each( function() {
			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// RefreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger( "activate", event, uiSortable );
			}
		} );
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop( event );

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {

				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		} );
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {

					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				} );
			}

			if ( innermostIntersecting ) {

				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					// Store draggable's parent in case we need to reappend to it later.
					draggable._parent = ui.helper.parent();

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					// Hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );

					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {

				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// Restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					ui.helper.appendTo( draggable._parent );
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );
				}
			}
		} );
	}
} );

$.ui.plugin.add( "draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if ( t.css( "cursor" ) ) {
			o._cursor = t.css( "cursor" );
		}
		t.css( "cursor", o.cursor );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._cursor ) {
			$( "body" ).css( "cursor", o._cursor );
		}
	}
} );

$.ui.plugin.add( "draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if ( t.css( "opacity" ) ) {
			o._opacity = t.css( "opacity" );
		}
		t.css( "opacity", o.opacity );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._opacity ) {
			$( ui.helper ).css( "opacity", o._opacity );
		}
	}
} );

$.ui.plugin.add( "draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
				i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
						o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
						o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if ( !o.axis || o.axis !== "x" ) {
				if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
				} else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() - o.scrollSpeed
					);
				} else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() + o.scrollSpeed
					);
				}
			}

		}

		if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( i, event );
		}

	}
} );

$.ui.plugin.add( "draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
			.each( function() {
				var $t = $( this ),
					$o = $t.offset();
				if ( this !== i.element[ 0 ] ) {
					i.snapElements.push( {
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					} );
				}
			} );

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

			l = inst.snapElements[ i ].left - inst.margins.left;
			r = l + inst.snapElements[ i ].width;
			t = inst.snapElements[ i ].top - inst.margins.top;
			b = t + inst.snapElements[ i ].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
					!$.contains( inst.snapElements[ i ].item.ownerDocument,
					inst.snapElements[ i ].item ) ) {
				if ( inst.snapElements[ i ].snapping ) {
					( inst.options.snap.release &&
						inst.options.snap.release.call(
							inst.element,
							event,
							$.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
						) );
				}
				inst.snapElements[ i ].snapping = false;
				continue;
			}

			if ( o.snapMode !== "inner" ) {
				ts = Math.abs( t - y2 ) <= d;
				bs = Math.abs( b - y1 ) <= d;
				ls = Math.abs( l - x2 ) <= d;
				rs = Math.abs( r - x1 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l - inst.helperProportions.width
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r
					} ).left;
				}
			}

			first = ( ts || bs || ls || rs );

			if ( o.snapMode !== "outer" ) {
				ts = Math.abs( t - y1 ) <= d;
				bs = Math.abs( b - y2 ) <= d;
				ls = Math.abs( l - x1 ) <= d;
				rs = Math.abs( r - x2 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r - inst.helperProportions.width
					} ).left;
				}
			}

			if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
				( inst.options.snap.snap &&
					inst.options.snap.snap.call(
						inst.element,
						event,
						$.extend( inst._uiHash(), {
							snapItem: inst.snapElements[ i ].item
						} ) ) );
			}
			inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

		}

	}
} );

$.ui.plugin.add( "draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
				return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
					( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
			} );

		if ( !group.length ) { return; }

		min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
		$( group ).each( function( i ) {
			$( this ).css( "zIndex", min + i );
		} );
		this.css( "zIndex", ( min + group.length ) );
	}
} );

$.ui.plugin.add( "draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if ( t.css( "zIndex" ) ) {
			o._zIndex = t.css( "zIndex" );
		}
		t.css( "zIndex", o.zIndex );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if ( o._zIndex ) {
			$( ui.helper ).css( "zIndex", o._zIndex );
		}
	}
} );

var widgetsDraggable = $.ui.draggable;


/*!
 * jQuery UI Resizable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Resizable
//>>group: Interactions
//>>description: Enables resize functionality for any element.
//>>docs: http://api.jqueryui.com/resizable/
//>>demos: http://jqueryui.com/resizable/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/resizable.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.resizable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		classes: {
			"ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
		},
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,

		// See #7960
		zIndex: 90,

		// Callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseFloat( value ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseFloat( value ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden" ) {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},

	_create: function() {

		var margins,
			o = this.options,
			that = this;
		this._addClass( "ui-resizable" );

		$.extend( this, {
			_aspectRatio: !!( o.aspectRatio ),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		} );

		// Wrap the element if it cannot hold child nodes
		if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

			this.element.wrap(
				$( "<div class='ui-wrapper' style='overflow: hidden;'></div>" ).css( {
					position: this.element.css( "position" ),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css( "top" ),
					left: this.element.css( "left" )
				} )
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			margins = {
				marginTop: this.originalElement.css( "marginTop" ),
				marginRight: this.originalElement.css( "marginRight" ),
				marginBottom: this.originalElement.css( "marginBottom" ),
				marginLeft: this.originalElement.css( "marginLeft" )
			};

			this.element.css( margins );
			this.originalElement.css( "margin", 0 );

			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css( "resize" );
			this.originalElement.css( "resize", "none" );

			this._proportionallyResizeElements.push( this.originalElement.css( {
				position: "static",
				zoom: 1,
				display: "block"
			} ) );

			// Support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css( margins );

			this._proportionallyResize();
		}

		this._setupHandles();

		if ( o.autoHide ) {
			$( this.element )
				.on( "mouseenter", function() {
					if ( o.disabled ) {
						return;
					}
					that._removeClass( "ui-resizable-autohide" );
					that._handles.show();
				} )
				.on( "mouseleave", function() {
					if ( o.disabled ) {
						return;
					}
					if ( !that.resizing ) {
						that._addClass( "ui-resizable-autohide" );
						that._handles.hide();
					}
				} );
		}

		this._mouseInit();
	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function( exp ) {
				$( exp )
					.removeData( "resizable" )
					.removeData( "ui-resizable" )
					.off( ".resizable" )
					.find( ".ui-resizable-handle" )
						.remove();
			};

		// TODO: Unwrap at same DOM position
		if ( this.elementIsWrapper ) {
			_destroy( this.element );
			wrapper = this.element;
			this.originalElement.css( {
				position: wrapper.css( "position" ),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css( "top" ),
				left: wrapper.css( "left" )
			} ).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css( "resize", this.originalResizeStyle );
		_destroy( this.originalElement );

		return this;
	},

	_setOption: function( key, value ) {
		this._super( key, value );

		switch ( key ) {
		case "handles":
			this._removeHandles();
			this._setupHandles();
			break;
		default:
			break;
		}
	},

	_setupHandles: function() {
		var o = this.options, handle, i, n, hname, axis, that = this;
		this.handles = o.handles ||
			( !$( ".ui-resizable-handle", this.element ).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		this._handles = $();
		if ( this.handles.constructor === String ) {

			if ( this.handles === "all" ) {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split( "," );
			this.handles = {};

			for ( i = 0; i < n.length; i++ ) {

				handle = $.trim( n[ i ] );
				hname = "ui-resizable-" + handle;
				axis = $( "<div>" );
				this._addClass( axis, "ui-resizable-handle " + hname );

				axis.css( { zIndex: o.zIndex } );

				this.handles[ handle ] = ".ui-resizable-" + handle;
				this.element.append( axis );
			}

		}

		this._renderAxis = function( target ) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for ( i in this.handles ) {

				if ( this.handles[ i ].constructor === String ) {
					this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
					this.handles[ i ] = $( this.handles[ i ] );
					this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
				}

				if ( this.elementIsWrapper &&
						this.originalElement[ 0 ]
							.nodeName
							.match( /^(textarea|input|select|button)$/i ) ) {
					axis = $( this.handles[ i ], this.element );

					padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
						axis.outerHeight() :
						axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test( i ) ? "Top" :
						/se|sw|s/.test( i ) ? "Bottom" :
						/^e$/.test( i ) ? "Right" : "Left" ].join( "" );

					target.css( padPos, padWrapper );

					this._proportionallyResize();
				}

				this._handles = this._handles.add( this.handles[ i ] );
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis( this.element );

		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
		this._handles.disableSelection();

		this._handles.on( "mouseover", function() {
			if ( !that.resizing ) {
				if ( this.className ) {
					axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
				}
				that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
			}
		} );

		if ( o.autoHide ) {
			this._handles.hide();
			this._addClass( "ui-resizable-autohide" );
		}
	},

	_removeHandles: function() {
		this._handles.remove();
	},

	_mouseCapture: function( event ) {
		var i, handle,
			capture = false;

		for ( i in this.handles ) {
			handle = $( this.handles[ i ] )[ 0 ];
			if ( handle === event.target || $.contains( handle, event.target ) ) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function( event ) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num( this.helper.css( "left" ) );
		curtop = this._num( this.helper.css( "top" ) );

		if ( o.containment ) {
			curleft += $( o.containment ).scrollLeft() || 0;
			curtop += $( o.containment ).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
			o.aspectRatio :
			( ( this.originalSize.width / this.originalSize.height ) || 1 );

		cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
		$( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

		this._addClass( "ui-resizable-resizing" );
		this._propagate( "start", event );
		return true;
	},

	_mouseDrag: function( event ) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = ( event.pageX - smp.left ) || 0,
			dy = ( event.pageY - smp.top ) || 0,
			trigger = this._change[ a ];

		this._updatePrevProperties();

		if ( !trigger ) {
			return false;
		}

		data = trigger.apply( this, [ event, dx, dy ] );

		this._updateVirtualBoundaries( event.shiftKey );
		if ( this._aspectRatio || event.shiftKey ) {
			data = this._updateRatio( data, event );
		}

		data = this._respectSize( data, event );

		this._updateCache( data );

		this._propagate( "resize", event );

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function( event ) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if ( this._helper ) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
			soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: ( that.helper.width()  - soffsetw ),
				height: ( that.helper.height() - soffseth )
			};
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null;
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

			if ( !o.animate ) {
				this.element.css( $.extend( s, { top: top, left: left } ) );
			}

			that.helper.height( that.size.height );
			that.helper.width( that.size.width );

			if ( this._helper && !o.animate ) {
				this._proportionallyResize();
			}
		}

		$( "body" ).css( "cursor", "auto" );

		this._removeClass( "ui-resizable-resizing" );

		this._propagate( "stop", event );

		if ( this._helper ) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function( forceAspectRatio ) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
			maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
			minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
			maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
		};

		if ( this._aspectRatio || forceAspectRatio ) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if ( pMinWidth > b.minWidth ) {
				b.minWidth = pMinWidth;
			}
			if ( pMinHeight > b.minHeight ) {
				b.minHeight = pMinHeight;
			}
			if ( pMaxWidth < b.maxWidth ) {
				b.maxWidth = pMaxWidth;
			}
			if ( pMaxHeight < b.maxHeight ) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function( data ) {
		this.offset = this.helper.offset();
		if ( this._isNumber( data.left ) ) {
			this.position.left = data.left;
		}
		if ( this._isNumber( data.top ) ) {
			this.position.top = data.top;
		}
		if ( this._isNumber( data.height ) ) {
			this.size.height = data.height;
		}
		if ( this._isNumber( data.width ) ) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if ( this._isNumber( data.height ) ) {
			data.width = ( data.height * this.aspectRatio );
		} else if ( this._isNumber( data.width ) ) {
			data.height = ( data.width / this.aspectRatio );
		}

		if ( a === "sw" ) {
			data.left = cpos.left + ( csize.width - data.width );
			data.top = null;
		}
		if ( a === "nw" ) {
			data.top = cpos.top + ( csize.height - data.height );
			data.left = cpos.left + ( csize.width - data.width );
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
			ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
			isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
			isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.originalPosition.top + this.originalSize.height,
			cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
		if ( isminw ) {
			data.width = o.minWidth;
		}
		if ( isminh ) {
			data.height = o.minHeight;
		}
		if ( ismaxw ) {
			data.width = o.maxWidth;
		}
		if ( ismaxh ) {
			data.height = o.maxHeight;
		}

		if ( isminw && cw ) {
			data.left = dw - o.minWidth;
		}
		if ( ismaxw && cw ) {
			data.left = dw - o.maxWidth;
		}
		if ( isminh && ch ) {
			data.top = dh - o.minHeight;
		}
		if ( ismaxh && ch ) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if ( !data.width && !data.height && !data.left && data.top ) {
			data.top = null;
		} else if ( !data.width && !data.height && !data.top && data.left ) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
			widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if ( !this._proportionallyResizeElements.length ) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++ ) {

			prel = this._proportionallyResizeElements[ i ];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if ( !this.outerDimensions ) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css( {
				height: ( element.height() - this.outerDimensions.height ) || 0,
				width: ( element.width() - this.outerDimensions.width ) || 0
			} );

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if ( this._helper ) {

			this.helper = this.helper || $( "<div style='overflow:hidden;'></div>" );

			this._addClass( this.helper, this._helper );
			this.helper.css( {
				width: this.element.outerWidth(),
				height: this.element.outerHeight(),
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			} );

			this.helper
				.appendTo( "body" )
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function( event, dx ) {
			return { width: this.originalSize.width + dx };
		},
		w: function( event, dx ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function( event, dx, dy ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function( event, dx, dy ) {
			return { height: this.originalSize.height + dy };
		},
		se: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		sw: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		},
		ne: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		nw: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		}
	},

	_propagate: function( n, event ) {
		$.ui.plugin.call( this, n, [ event, this.ui() ] );
		( n !== "resize" && this._trigger( n, event, this.ui() ) );
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

} );

/*
 * Resizable Extensions
 */

$.ui.plugin.add( "resizable", "animate", {

	stop: function( event ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
			soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = {
				width: ( that.size.width - soffsetw ),
				height: ( that.size.height - soffseth )
			},
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null,
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

		that.element.animate(
			$.extend( style, top && left ? { top: top, left: left } : {} ), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseFloat( that.element.css( "width" ) ),
						height: parseFloat( that.element.css( "height" ) ),
						top: parseFloat( that.element.css( "top" ) ),
						left: parseFloat( that.element.css( "left" ) )
					};

					if ( pr && pr.length ) {
						$( pr[ 0 ] ).css( { width: data.width, height: data.height } );
					}

					// Propagating resize, and updating values for each animation step
					that._updateCache( data );
					that._propagate( "resize", event );

				}
			}
		);
	}

} );

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ?
				oc.get( 0 ) :
				( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			} );

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			( that._helper ?
				that.offset.left - cop.left :
				( that.offset.left - co.left ) ) );

		hoset = Math.abs( that.sizeDiff.height +
			( that._helper ?
				that.offset.top - cop.top :
				( that.offset.top - co.top ) ) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ) {
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}
	}
} );

$.ui.plugin.add( "resizable", "alsoResize", {

	start: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options;

		$( o.alsoResize ).each( function() {
			var el = $( this );
			el.data( "ui-resizable-alsoresize", {
				width: parseFloat( el.width() ), height: parseFloat( el.height() ),
				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
			} );
		} );
	},

	resize: function( event, ui ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: ( that.size.height - os.height ) || 0,
				width: ( that.size.width - os.width ) || 0,
				top: ( that.position.top - op.top ) || 0,
				left: ( that.position.left - op.left ) || 0
			};

			$( o.alsoResize ).each( function() {
				var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
					css = el.parents( ui.originalElement[ 0 ] ).length ?
							[ "width", "height" ] :
							[ "width", "height", "top", "left" ];

				$.each( css, function( i, prop ) {
					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
					if ( sum && sum >= 0 ) {
						style[ prop ] = sum || null;
					}
				} );

				el.css( style );
			} );
	},

	stop: function() {
		$( this ).removeData( "ui-resizable-alsoresize" );
	}
} );

$.ui.plugin.add( "resizable", "ghost", {

	start: function() {

		var that = $( this ).resizable( "instance" ), cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost.css( {
			opacity: 0.25,
			display: "block",
			position: "relative",
			height: cs.height,
			width: cs.width,
			margin: 0,
			left: 0,
			top: 0
		} );

		that._addClass( that.ghost, "ui-resizable-ghost" );

		// DEPRECATED
		// TODO: remove after 1.12
		if ( $.uiBackCompat !== false && typeof that.options.ghost === "string" ) {

			// Ghost option
			that.ghost.addClass( this.options.ghost );
		}

		that.ghost.appendTo( that.helper );

	},

	resize: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost ) {
			that.ghost.css( {
				position: "relative",
				height: that.size.height,
				width: that.size.width
			} );
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost && that.helper ) {
			that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
		}
	}

} );

$.ui.plugin.add( "resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = ( grid[ 0 ] || 1 ),
			gridY = ( grid[ 1 ] || 1 ),
			ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
			oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
			isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
			isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
			isMinHeight = o.minHeight && ( o.minHeight > newHeight );

		o.grid = grid;

		if ( isMinWidth ) {
			newWidth += gridX;
		}
		if ( isMinHeight ) {
			newHeight += gridY;
		}
		if ( isMaxWidth ) {
			newWidth -= gridX;
		}
		if ( isMaxHeight ) {
			newHeight -= gridY;
		}

		if ( /^(se|s|e)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if ( /^(ne)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if ( /^(sw)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridX - outerDimensions.width;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

} );

var widgetsResizable = $.ui.resizable;


/*!
 * jQuery UI Dialog 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Dialog
//>>group: Widgets
//>>description: Displays customizable dialog windows.
//>>docs: http://api.jqueryui.com/dialog/
//>>demos: http://jqueryui.com/dialog/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/dialog.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.dialog", {
	version: "1.12.1",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		classes: {
			"ui-dialog": "ui-corner-all",
			"ui-dialog-titlebar": "ui-corner-all"
		},
		closeOnEscape: true,
		closeText: "Close",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",

			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// Callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	sizeRelatedOptions: {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},

	resizableRelatedOptions: {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},

	_create: function() {
		this.originalCss = {
			display: this.element[ 0 ].style.display,
			width: this.element[ 0 ].style.width,
			minHeight: this.element[ 0 ].style.minHeight,
			maxHeight: this.element[ 0 ].style.maxHeight,
			height: this.element[ 0 ].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr( "title" );
		if ( this.options.title == null && this.originalTitle != null ) {
			this.options.title = this.originalTitle;
		}

		// Dialogs can't be disabled
		if ( this.options.disabled ) {
			this.options.disabled = false;
		}

		this._createWrapper();

		this.element
			.show()
			.removeAttr( "title" )
			.appendTo( this.uiDialog );

		this._addClass( "ui-dialog-content", "ui-widget-content" );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;

		this._trackFocus();
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && ( element.jquery || element.nodeType ) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._untrackInstance();
		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.css( this.originalCss )

			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );

		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._focusedElement = null;
		this._destroyOverlay();
		this._untrackInstance();

		if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

			// Hiding a focused element doesn't trigger blur in WebKit
			// so in case we have nothing to focus on, explicitly blur the active element
			// https://bugs.webkit.org/show_bug.cgi?id=47182
			$.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		} );
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = false,
			zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
				return +$( this ).css( "z-index" );
			} ).get(),
			zIndexMax = Math.max.apply( null, zIndices );

		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
			this.uiDialog.css( "z-index", zIndexMax + 1 );
			moved = true;
		}

		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );

		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if ( this.overlay ) {
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
		}

		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger( "focus" );
		} );

		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();

		this._trigger( "open" );
	},

	_focusTabbable: function() {

		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		var hasFocus = this._focusedElement;
		if ( !hasFocus ) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.element.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).trigger( "focus" );
	},

	_keepFocus: function( event ) {
		function checkFocus() {
			var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
				isActive = this.uiDialog[ 0 ] === activeElement ||
					$.contains( this.uiDialog[ 0 ], activeElement );
			if ( !isActive ) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call( this );

		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( checkFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $( "<div>" )
			.hide()
			.attr( {

				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			} )
			.appendTo( this._appendTo() );

		this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// Prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
					return;
				}
				var tabbables = this.uiDialog.find( ":tabbable" ),
					first = tabbables.filter( ":first" ),
					last = tabbables.filter( ":last" );

				if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
						!event.shiftKey ) {
					this._delay( function() {
						first.trigger( "focus" );
					} );
					event.preventDefault();
				} else if ( ( event.target === first[ 0 ] ||
						event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
					this._delay( function() {
						last.trigger( "focus" );
					} );
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		} );

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find( "[aria-describedby]" ).length ) {
			this.uiDialog.attr( {
				"aria-describedby": this.element.uniqueId().attr( "id" )
			} );
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $( "<div>" );
		this._addClass( this.uiDialogTitlebar,
			"ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {

				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.trigger( "focus" );
				}
			}
		} );

		// Support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button( {
				label: $( "<a>" ).text( this.options.closeText ).html(),
				icon: "ui-icon-closethick",
				showLabel: false
			} )
			.appendTo( this.uiDialogTitlebar );

		this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		} );

		uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
		this._addClass( uiDialogTitle, "ui-dialog-title" );
		this._title( uiDialogTitle );

		this.uiDialogTitlebar.prependTo( this.uiDialog );

		this.uiDialog.attr( {
			"aria-labelledby": uiDialogTitle.attr( "id" )
		} );
	},

	_title: function( title ) {
		if ( this.options.title ) {
			title.text( this.options.title );
		} else {
			title.html( "&#160;" );
		}
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $( "<div>" );
		this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
			"ui-widget-content ui-helper-clearfix" );

		this.uiButtonSet = $( "<div>" )
			.appendTo( this.uiDialogButtonPane );
		this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// If we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ( $.isArray( buttons ) && !buttons.length ) ) {
			this._removeClass( this.uiDialog, "ui-dialog-buttons" );
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = $.isFunction( props ) ?
				{ click: props, text: name } :
				props;

			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );

			// Change the context for the click callback to be the main element
			click = props.click;
			buttonOptions = {
				icon: props.icon,
				iconPosition: props.iconPosition,
				showLabel: props.showLabel,

				// Deprecated options
				icons: props.icons,
				text: props.text
			};

			delete props.click;
			delete props.icon;
			delete props.iconPosition;
			delete props.showLabel;

			// Deprecated options
			delete props.icons;
			if ( typeof props.text === "boolean" ) {
				delete props.text;
			}

			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet )
				.on( "click", function() {
					click.apply( that.element[ 0 ], arguments );
				} );
		} );
		this._addClass( this.uiDialog, "ui-dialog-buttons" );
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable( {
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-dragging" );
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();

				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-dragging" );
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		} );
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,

			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css( "position" ),
			resizeHandles = typeof handles === "string" ?
				handles :
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable( {
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-resizing" );
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();

				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-resizing" );
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		} )
			.css( "position", position );
	},

	_trackFocus: function() {
		this._on( this.widget(), {
			focusin: function( event ) {
				this._makeFocusTarget();
				this._focusedElement = $( event.target );
			}
		} );
	},

	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},

	_untrackInstance: function() {
		var instances = this._trackingInstances(),
			exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},

	_trackingInstances: function() {
		var instances = this.document.data( "ui-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "ui-dialog-instances", instances );
		}
		return instances;
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {

		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is( ":visible" );
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in that.sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in that.resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		} );

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button( {

				// Ensure that we always pass a string
				label: $( "<a>" ).text( "" + this.options.closeText ).html()
			} );
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is( ":data(ui-draggable)" );
			if ( isDraggable && !value ) {
				uiDialog.draggable( "destroy" );
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {

			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is( ":data(ui-resizable)" );
			if ( isResizable && !value ) {
				uiDialog.resizable( "destroy" );
			}

			// Currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// Currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
		}
	},

	_size: function() {

		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css( {
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		} );

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// Reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css( {
			height: "auto",
			width: options.width
		} )
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css( {
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			} );
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( {
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				} )
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest( ".ui-datepicker" ).length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay( function() {
			isOpening = false;
		} );

		if ( !this.document.data( "ui-dialog-overlays" ) ) {

			// Prevent use of anchors and inputs
			// Using _on() for an event handler shared across many instances is
			// safe because the dialogs stack and must be closed in reverse order
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}

					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						this._trackingInstances()[ 0 ]._focusTabbable();
					}
				}
			} );
		}

		this.overlay = $( "<div>" )
			.appendTo( this._appendTo() );

		this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		} );
		this.document.data( "ui-dialog-overlays",
			( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

			if ( !overlays ) {
				this._off( this.document, "focusin" );
				this.document.removeData( "ui-dialog-overlays" );
			} else {
				this.document.data( "ui-dialog-overlays", overlays );
			}

			this.overlay.remove();
			this.overlay = null;
		}
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for dialogClass option
	$.widget( "ui.dialog", $.ui.dialog, {
		options: {
			dialogClass: ""
		},
		_createWrapper: function() {
			this._super();
			this.uiDialog.addClass( this.options.dialogClass );
		},
		_setOption: function( key, value ) {
			if ( key === "dialogClass" ) {
				this.uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}
			this._superApply( arguments );
		}
	} );
}

var widgetsDialog = $.ui.dialog;


/*!
 * jQuery UI Droppable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Droppable
//>>group: Interactions
//>>description: Enables drop targets for draggable elements.
//>>docs: http://api.jqueryui.com/droppable/
//>>demos: http://jqueryui.com/droppable/



$.widget( "ui.droppable", {
	version: "1.12.1",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",
		addClasses: true,
		greedy: false,
		scope: "default",
		tolerance: "intersect",

		// Callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction( accept ) ? accept : function( d ) {
			return d.is( accept );
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {

				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {

				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		this._addToManager( o.scope );

		o.addClasses && this._addClass( "ui-droppable" );

	},

	_addToManager: function( scope ) {

		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
		$.ui.ddmanager.droppables[ scope ].push( this );
	},

	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[ i ] === this ) {
				drop.splice( i, 1 );
			}
		}
	},

	_destroy: function() {
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );
	},

	_setOption: function( key, value ) {

		if ( key === "accept" ) {
			this.accept = $.isFunction( value ) ? value : function( d ) {
				return d.is( value );
			};
		} else if ( key === "scope" ) {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

			this._splice( drop );
			this._addToManager( value );
		}

		this._super( key, value );
	},

	_activate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._addActiveClass();
		if ( draggable ) {
			this._trigger( "activate", event, this.ui( draggable ) );
		}
	},

	_deactivate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._removeActiveClass();
		if ( draggable ) {
			this._trigger( "deactivate", event, this.ui( draggable ) );
		}
	},

	_over: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._addHoverClass();
			this._trigger( "over", event, this.ui( draggable ) );
		}

	},

	_out: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._removeHoverClass();
			this._trigger( "out", event, this.ui( draggable ) );
		}

	},

	_drop: function( event, custom ) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return false;
		}

		this.element
			.find( ":data(ui-droppable)" )
			.not( ".ui-draggable-dragging" )
			.each( function() {
				var inst = $( this ).droppable( "instance" );
				if (
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(
						inst.element[ 0 ], ( draggable.currentItem || draggable.element )
					) &&
					intersect(
						draggable,
						$.extend( inst, { offset: inst.element.offset() } ),
						inst.options.tolerance, event
					)
				) {
					childrenIntersection = true;
					return false; }
			} );
		if ( childrenIntersection ) {
			return false;
		}

		if ( this.accept.call( this.element[ 0 ],
				( draggable.currentItem || draggable.element ) ) ) {
			this._removeActiveClass();
			this._removeHoverClass();

			this._trigger( "drop", event, this.ui( draggable ) );
			return this.element;
		}

		return false;

	},

	ui: function( c ) {
		return {
			draggable: ( c.currentItem || c.element ),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	},

	// Extension points just to make backcompat sane and avoid duplicating logic
	// TODO: Remove in 1.13 along with call to it below
	_addHoverClass: function() {
		this._addClass( "ui-droppable-hover" );
	},

	_removeHoverClass: function() {
		this._removeClass( "ui-droppable-hover" );
	},

	_addActiveClass: function() {
		this._addClass( "ui-droppable-active" );
	},

	_removeActiveClass: function() {
		this._removeClass( "ui-droppable-active" );
	}
} );

var intersect = $.ui.intersect = ( function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs ||
				draggable.position.absolute ).left + draggable.margins.left,
			y1 = ( draggable.positionAbs ||
				draggable.position.absolute ).top + draggable.margins.top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) &&
				isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
} )();

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function( t, event ) {

		var i, j,
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
			type = event ? event.type : null, // workaround for #2317
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

			// No disabled and non-accepted
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],
					( t.currentItem || t.element ) ) ) ) {
				continue;
			}

			// Filter out elements in the current dragged item
			for ( j = 0; j < list.length; j++ ) {
				if ( list[ j ] === m[ i ].element[ 0 ] ) {
					m[ i ].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
			if ( !m[ i ].visible ) {
				continue;
			}

			// Activate the droppable if used directly from draggables
			if ( type === "mousedown" ) {
				m[ i ]._activate.call( m[ i ], event );
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions( {
				width: m[ i ].element[ 0 ].offsetWidth,
				height: m[ i ].element[ 0 ].offsetHeight
			} );

		}

	},
	drop: function( draggable, event ) {

		var dropped = false;

		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

			if ( !this.options ) {
				return;
			}
			if ( !this.options.disabled && this.visible &&
					intersect( draggable, this, this.options.tolerance, event ) ) {
				dropped = this._drop.call( this, event ) || dropped;
			}

			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],
					( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call( this, event );
			}

		} );
		return dropped;

	},
	dragStart: function( draggable, event ) {

		// Listen for scrolling so that if the dragging causes scrolling the position of the
		// droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() {
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		} );
	},
	drag: function( draggable, event ) {

		// If you have a highly dynamic page, you might try this option. It renders positions
		// every time you move the mouse.
		if ( draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}

		// Run through all droppables and check their positions based on specific tolerance options
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

			if ( this.options.disabled || this.greedyChild || !this.visible ) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = intersect( draggable, this, this.options.tolerance, event ),
				c = !intersects && this.isover ?
					"isout" :
					( intersects && !this.isover ? "isover" : null );
			if ( !c ) {
				return;
			}

			if ( this.options.greedy ) {

				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents( ":data(ui-droppable)" ).filter( function() {
					return $( this ).droppable( "instance" ).options.scope === scope;
				} );

				if ( parent.length ) {
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
					parentInstance.greedyChild = ( c === "isover" );
				}
			}

			// We just moved into a greedy child
			if ( parentInstance && c === "isover" ) {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call( parentInstance, event );
			}

			this[ c ] = true;
			this[ c === "isout" ? "isover" : "isout" ] = false;
			this[ c === "isover" ? "_over" : "_out" ].call( this, event );

			// We just moved out of a greedy child
			if ( parentInstance && c === "isout" ) {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call( parentInstance, event );
			}
		} );

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).off( "scroll.droppable" );

		// Call prepareOffsets one final time since IE does not fire return scroll events when
		// overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for activeClass and hoverClass options
	$.widget( "ui.droppable", $.ui.droppable, {
		options: {
			hoverClass: false,
			activeClass: false
		},
		_addActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.addClass( this.options.activeClass );
			}
		},
		_removeActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
		},
		_addHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.addClass( this.options.hoverClass );
			}
		},
		_removeHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
		}
	} );
}

var widgetsDroppable = $.ui.droppable;


/*!
 * jQuery UI Progressbar 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Progressbar
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/progressbar/
//>>demos: http://jqueryui.com/progressbar/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/progressbar.css
//>>css.theme: ../../themes/base/theme.css



var widgetsProgressbar = $.widget( "ui.progressbar", {
	version: "1.12.1",
	options: {
		classes: {
			"ui-progressbar": "ui-corner-all",
			"ui-progressbar-value": "ui-corner-left",
			"ui-progressbar-complete": "ui-corner-right"
		},
		max: 100,
		value: 0,

		change: null,
		complete: null
	},

	min: 0,

	_create: function() {

		// Constrain initial value
		this.oldValue = this.options.value = this._constrainedValue();

		this.element.attr( {

			// Only set static values; aria-valuenow and aria-valuemax are
			// set inside _refreshValue()
			role: "progressbar",
			"aria-valuemin": this.min
		} );
		this._addClass( "ui-progressbar", "ui-widget ui-widget-content" );

		this.valueDiv = $( "<div>" ).appendTo( this.element );
		this._addClass( this.valueDiv, "ui-progressbar-value", "ui-widget-header" );
		this._refreshValue();
	},

	_destroy: function() {
		this.element.removeAttr( "role aria-valuemin aria-valuemax aria-valuenow" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		// Sanitize value
		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}

		return this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) );
	},

	_setOptions: function( options ) {

		// Ensure "value" option is set after other values (like max)
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {

			// Don't allow a max less than min
			value = Math.max( this.min, value );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	_percentage: function() {
		return this.indeterminate ?
			100 :
			100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage();

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.width( percentage.toFixed( 0 ) + "%" );

		this
			._toggleClass( this.valueDiv, "ui-progressbar-complete", null,
				value === this.options.max )
			._toggleClass( "ui-progressbar-indeterminate", null, this.indeterminate );

		if ( this.indeterminate ) {
			this.element.removeAttr( "aria-valuenow" );
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div>" ).appendTo( this.valueDiv );
				this._addClass( this.overlayDiv, "ui-progressbar-overlay" );
			}
		} else {
			this.element.attr( {
				"aria-valuemax": this.options.max,
				"aria-valuenow": value
			} );
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}
		if ( value === this.options.max ) {
			this._trigger( "complete" );
		}
	}
} );


/*!
 * jQuery UI Selectable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectable
//>>group: Interactions
//>>description: Allows groups of elements to be selected with the mouse.
//>>docs: http://api.jqueryui.com/selectable/
//>>demos: http://jqueryui.com/selectable/
//>>css.structure: ../../themes/base/selectable.css



var widgetsSelectable = $.widget( "ui.selectable", $.ui.mouse, {
	version: "1.12.1",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// Callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var that = this;

		this._addClass( "ui-selectable" );

		this.dragged = false;

		// Cache selectee children based on filter
		this.refresh = function() {
			that.elementPos = $( that.element[ 0 ] ).offset();
			that.selectees = $( that.options.filter, that.element[ 0 ] );
			that._addClass( that.selectees, "ui-selectee" );
			that.selectees.each( function() {
				var $this = $( this ),
					selecteeOffset = $this.offset(),
					pos = {
						left: selecteeOffset.left - that.elementPos.left,
						top: selecteeOffset.top - that.elementPos.top
					};
				$.data( this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass( "ui-selected" ),
					selecting: $this.hasClass( "ui-selecting" ),
					unselecting: $this.hasClass( "ui-unselecting" )
				} );
			} );
		};
		this.refresh();

		this._mouseInit();

		this.helper = $( "<div>" );
		this._addClass( this.helper, "ui-selectable-helper" );
	},

	_destroy: function() {
		this.selectees.removeData( "selectable-item" );
		this._mouseDestroy();
	},

	_mouseStart: function( event ) {
		var that = this,
			options = this.options;

		this.opos = [ event.pageX, event.pageY ];
		this.elementPos = $( this.element[ 0 ] ).offset();

		if ( this.options.disabled ) {
			return;
		}

		this.selectees = $( options.filter, this.element[ 0 ] );

		this._trigger( "start", event );

		$( options.appendTo ).append( this.helper );

		// position helper (lasso)
		this.helper.css( {
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		} );

		if ( options.autoRefresh ) {
			this.refresh();
		}

		this.selectees.filter( ".ui-selected" ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			selectee.startselected = true;
			if ( !event.metaKey && !event.ctrlKey ) {
				that._removeClass( selectee.$element, "ui-selected" );
				selectee.selected = false;
				that._addClass( selectee.$element, "ui-unselecting" );
				selectee.unselecting = true;

				// selectable UNSELECTING callback
				that._trigger( "unselecting", event, {
					unselecting: selectee.element
				} );
			}
		} );

		$( event.target ).parents().addBack().each( function() {
			var doSelect,
				selectee = $.data( this, "selectable-item" );
			if ( selectee ) {
				doSelect = ( !event.metaKey && !event.ctrlKey ) ||
					!selectee.$element.hasClass( "ui-selected" );
				that._removeClass( selectee.$element, doSelect ? "ui-unselecting" : "ui-selected" )
					._addClass( selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting" );
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;

				// selectable (UN)SELECTING callback
				if ( doSelect ) {
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				} else {
					that._trigger( "unselecting", event, {
						unselecting: selectee.element
					} );
				}
				return false;
			}
		} );

	},

	_mouseDrag: function( event ) {

		this.dragged = true;

		if ( this.options.disabled ) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[ 0 ],
			y1 = this.opos[ 1 ],
			x2 = event.pageX,
			y2 = event.pageY;

		if ( x1 > x2 ) { tmp = x2; x2 = x1; x1 = tmp; }
		if ( y1 > y2 ) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );

		this.selectees.each( function() {
			var selectee = $.data( this, "selectable-item" ),
				hit = false,
				offset = {};

			//prevent helper from being selected if appendTo: selectable
			if ( !selectee || selectee.element === that.element[ 0 ] ) {
				return;
			}

			offset.left   = selectee.left   + that.elementPos.left;
			offset.right  = selectee.right  + that.elementPos.left;
			offset.top    = selectee.top    + that.elementPos.top;
			offset.bottom = selectee.bottom + that.elementPos.top;

			if ( options.tolerance === "touch" ) {
				hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||
                    offset.bottom < y1 ) );
			} else if ( options.tolerance === "fit" ) {
				hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&
                    offset.bottom < y2 );
			}

			if ( hit ) {

				// SELECT
				if ( selectee.selected ) {
					that._removeClass( selectee.$element, "ui-selected" );
					selectee.selected = false;
				}
				if ( selectee.unselecting ) {
					that._removeClass( selectee.$element, "ui-unselecting" );
					selectee.unselecting = false;
				}
				if ( !selectee.selecting ) {
					that._addClass( selectee.$element, "ui-selecting" );
					selectee.selecting = true;

					// selectable SELECTING callback
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				}
			} else {

				// UNSELECT
				if ( selectee.selecting ) {
					if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						that._addClass( selectee.$element, "ui-selected" );
						selectee.selected = true;
					} else {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						if ( selectee.startselected ) {
							that._addClass( selectee.$element, "ui-unselecting" );
							selectee.unselecting = true;
						}

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
				if ( selectee.selected ) {
					if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selected" );
						selectee.selected = false;

						that._addClass( selectee.$element, "ui-unselecting" );
						selectee.unselecting = true;

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
			}
		} );

		return false;
	},

	_mouseStop: function( event ) {
		var that = this;

		this.dragged = false;

		$( ".ui-unselecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-unselecting" );
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger( "unselected", event, {
				unselected: selectee.element
			} );
		} );
		$( ".ui-selecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-selecting" )
				._addClass( selectee.$element, "ui-selected" );
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger( "selected", event, {
				selected: selectee.element
			} );
		} );
		this._trigger( "stop", event );

		this.helper.remove();

		return false;
	}

} );


/*!
 * jQuery UI Selectmenu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectmenu
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/selectmenu/
//>>demos: http://jqueryui.com/selectmenu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSelectmenu = $.widget( "ui.selectmenu", [ $.ui.formResetMixin, {
	version: "1.12.1",
	defaultElement: "<select>",
	options: {
		appendTo: null,
		classes: {
			"ui-selectmenu-button-open": "ui-corner-top",
			"ui-selectmenu-button-closed": "ui-corner-all"
		},
		disabled: null,
		icons: {
			button: "ui-icon-triangle-1-s"
		},
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		width: false,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		select: null
	},

	_create: function() {
		var selectmenuId = this.element.uniqueId().attr( "id" );
		this.ids = {
			element: selectmenuId,
			button: selectmenuId + "-button",
			menu: selectmenuId + "-menu"
		};

		this._drawButton();
		this._drawMenu();
		this._bindFormResetHandler();

		this._rendered = false;
		this.menuItems = $();
	},

	_drawButton: function() {
		var icon,
			that = this,
			item = this._parseOption(
				this.element.find( "option:selected" ),
				this.element[ 0 ].selectedIndex
			);

		// Associate existing label with the new button
		this.labels = this.element.labels().attr( "for", this.ids.button );
		this._on( this.labels, {
			click: function( event ) {
				this.button.focus();
				event.preventDefault();
			}
		} );

		// Hide original select element
		this.element.hide();

		// Create button
		this.button = $( "<span>", {
			tabindex: this.options.disabled ? -1 : 0,
			id: this.ids.button,
			role: "combobox",
			"aria-expanded": "false",
			"aria-autocomplete": "list",
			"aria-owns": this.ids.menu,
			"aria-haspopup": "true",
			title: this.element.attr( "title" )
		} )
			.insertAfter( this.element );

		this._addClass( this.button, "ui-selectmenu-button ui-selectmenu-button-closed",
			"ui-button ui-widget" );

		icon = $( "<span>" ).appendTo( this.button );
		this._addClass( icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button );
		this.buttonItem = this._renderButtonItem( item )
			.appendTo( this.button );

		if ( this.options.width !== false ) {
			this._resizeButton();
		}

		this._on( this.button, this._buttonEvents );
		this.button.one( "focusin", function() {

			// Delay rendering the menu items until the button receives focus.
			// The menu may have already been rendered via a programmatic open.
			if ( !that._rendered ) {
				that._refreshMenu();
			}
		} );
	},

	_drawMenu: function() {
		var that = this;

		// Create menu
		this.menu = $( "<ul>", {
			"aria-hidden": "true",
			"aria-labelledby": this.ids.button,
			id: this.ids.menu
		} );

		// Wrap menu
		this.menuWrap = $( "<div>" ).append( this.menu );
		this._addClass( this.menuWrap, "ui-selectmenu-menu", "ui-front" );
		this.menuWrap.appendTo( this._appendTo() );

		// Initialize menu widget
		this.menuInstance = this.menu
			.menu( {
				classes: {
					"ui-menu": "ui-corner-bottom"
				},
				role: "listbox",
				select: function( event, ui ) {
					event.preventDefault();

					// Support: IE8
					// If the item was selected via a click, the text selection
					// will be destroyed in IE
					that._setSelection();

					that._select( ui.item.data( "ui-selectmenu-item" ), event );
				},
				focus: function( event, ui ) {
					var item = ui.item.data( "ui-selectmenu-item" );

					// Prevent inital focus from firing and check if its a newly focused item
					if ( that.focusIndex != null && item.index !== that.focusIndex ) {
						that._trigger( "focus", event, { item: item } );
						if ( !that.isOpen ) {
							that._select( item, event );
						}
					}
					that.focusIndex = item.index;

					that.button.attr( "aria-activedescendant",
						that.menuItems.eq( item.index ).attr( "id" ) );
				}
			} )
			.menu( "instance" );

		// Don't close the menu on mouseleave
		this.menuInstance._off( this.menu, "mouseleave" );

		// Cancel the menu's collapseAll on document click
		this.menuInstance._closeOnDocumentClick = function() {
			return false;
		};

		// Selects often contain empty items, but never contain dividers
		this.menuInstance._isDivider = function() {
			return false;
		};
	},

	refresh: function() {
		this._refreshMenu();
		this.buttonItem.replaceWith(
			this.buttonItem = this._renderButtonItem(

				// Fall back to an empty object in case there are no options
				this._getSelectedItem().data( "ui-selectmenu-item" ) || {}
			)
		);
		if ( this.options.width === null ) {
			this._resizeButton();
		}
	},

	_refreshMenu: function() {
		var item,
			options = this.element.find( "option" );

		this.menu.empty();

		this._parseOptions( options );
		this._renderMenu( this.menu, this.items );

		this.menuInstance.refresh();
		this.menuItems = this.menu.find( "li" )
			.not( ".ui-selectmenu-optgroup" )
				.find( ".ui-menu-item-wrapper" );

		this._rendered = true;

		if ( !options.length ) {
			return;
		}

		item = this._getSelectedItem();

		// Update the menu to have the correct item focused
		this.menuInstance.focus( null, item );
		this._setAria( item.data( "ui-selectmenu-item" ) );

		// Set disabled state
		this._setOption( "disabled", this.element.prop( "disabled" ) );
	},

	open: function( event ) {
		if ( this.options.disabled ) {
			return;
		}

		// If this is the first time the menu is being opened, render the items
		if ( !this._rendered ) {
			this._refreshMenu();
		} else {

			// Menu clears focus on close, reset focus to selected item
			this._removeClass( this.menu.find( ".ui-state-active" ), null, "ui-state-active" );
			this.menuInstance.focus( null, this._getSelectedItem() );
		}

		// If there are no options, don't open the menu
		if ( !this.menuItems.length ) {
			return;
		}

		this.isOpen = true;
		this._toggleAttr();
		this._resizeMenu();
		this._position();

		this._on( this.document, this._documentClick );

		this._trigger( "open", event );
	},

	_position: function() {
		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
	},

	close: function( event ) {
		if ( !this.isOpen ) {
			return;
		}

		this.isOpen = false;
		this._toggleAttr();

		this.range = null;
		this._off( this.document );

		this._trigger( "close", event );
	},

	widget: function() {
		return this.button;
	},

	menuWidget: function() {
		return this.menu;
	},

	_renderButtonItem: function( item ) {
		var buttonItem = $( "<span>" );

		this._setText( buttonItem, item.label );
		this._addClass( buttonItem, "ui-selectmenu-text" );

		return buttonItem;
	},

	_renderMenu: function( ul, items ) {
		var that = this,
			currentOptgroup = "";

		$.each( items, function( index, item ) {
			var li;

			if ( item.optgroup !== currentOptgroup ) {
				li = $( "<li>", {
					text: item.optgroup
				} );
				that._addClass( li, "ui-selectmenu-optgroup", "ui-menu-divider" +
					( item.element.parent( "optgroup" ).prop( "disabled" ) ?
						" ui-state-disabled" :
						"" ) );

				li.appendTo( ul );

				currentOptgroup = item.optgroup;
			}

			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
	},

	_renderItem: function( ul, item ) {
		var li = $( "<li>" ),
			wrapper = $( "<div>", {
				title: item.element.attr( "title" )
			} );

		if ( item.disabled ) {
			this._addClass( li, null, "ui-state-disabled" );
		}
		this._setText( wrapper, item.label );

		return li.append( wrapper ).appendTo( ul );
	},

	_setText: function( element, value ) {
		if ( value ) {
			element.text( value );
		} else {
			element.html( "&#160;" );
		}
	},

	_move: function( direction, event ) {
		var item, next,
			filter = ".ui-menu-item";

		if ( this.isOpen ) {
			item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		} else {
			item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
			filter += ":not(.ui-state-disabled)";
		}

		if ( direction === "first" || direction === "last" ) {
			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
		} else {
			next = item[ direction + "All" ]( filter ).eq( 0 );
		}

		if ( next.length ) {
			this.menuInstance.focus( event, next );
		}
	},

	_getSelectedItem: function() {
		return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
	},

	_toggle: function( event ) {
		this[ this.isOpen ? "close" : "open" ]( event );
	},

	_setSelection: function() {
		var selection;

		if ( !this.range ) {
			return;
		}

		if ( window.getSelection ) {
			selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange( this.range );

		// Support: IE8
		} else {
			this.range.select();
		}

		// Support: IE
		// Setting the text selection kills the button focus in IE, but
		// restoring the focus doesn't kill the selection.
		this.button.focus();
	},

	_documentClick: {
		mousedown: function( event ) {
			if ( !this.isOpen ) {
				return;
			}

			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" +
					$.ui.escapeSelector( this.ids.button ) ).length ) {
				this.close( event );
			}
		}
	},

	_buttonEvents: {

		// Prevent text selection from being reset when interacting with the selectmenu (#10144)
		mousedown: function() {
			var selection;

			if ( window.getSelection ) {
				selection = window.getSelection();
				if ( selection.rangeCount ) {
					this.range = selection.getRangeAt( 0 );
				}

			// Support: IE8
			} else {
				this.range = document.selection.createRange();
			}
		},

		click: function( event ) {
			this._setSelection();
			this._toggle( event );
		},

		keydown: function( event ) {
			var preventDefault = true;
			switch ( event.keyCode ) {
			case $.ui.keyCode.TAB:
			case $.ui.keyCode.ESCAPE:
				this.close( event );
				preventDefault = false;
				break;
			case $.ui.keyCode.ENTER:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				}
				break;
			case $.ui.keyCode.UP:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "prev", event );
				}
				break;
			case $.ui.keyCode.DOWN:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "next", event );
				}
				break;
			case $.ui.keyCode.SPACE:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				} else {
					this._toggle( event );
				}
				break;
			case $.ui.keyCode.LEFT:
				this._move( "prev", event );
				break;
			case $.ui.keyCode.RIGHT:
				this._move( "next", event );
				break;
			case $.ui.keyCode.HOME:
			case $.ui.keyCode.PAGE_UP:
				this._move( "first", event );
				break;
			case $.ui.keyCode.END:
			case $.ui.keyCode.PAGE_DOWN:
				this._move( "last", event );
				break;
			default:
				this.menu.trigger( event );
				preventDefault = false;
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		}
	},

	_selectFocusedItem: function( event ) {
		var item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		if ( !item.hasClass( "ui-state-disabled" ) ) {
			this._select( item.data( "ui-selectmenu-item" ), event );
		}
	},

	_select: function( item, event ) {
		var oldIndex = this.element[ 0 ].selectedIndex;

		// Change native select element
		this.element[ 0 ].selectedIndex = item.index;
		this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );
		this._setAria( item );
		this._trigger( "select", event, { item: item } );

		if ( item.index !== oldIndex ) {
			this._trigger( "change", event, { item: item } );
		}

		this.close( event );
	},

	_setAria: function( item ) {
		var id = this.menuItems.eq( item.index ).attr( "id" );

		this.button.attr( {
			"aria-labelledby": id,
			"aria-activedescendant": id
		} );
		this.menu.attr( "aria-activedescendant", id );
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icon = this.button.find( "span.ui-icon" );
			this._removeClass( icon, null, this.options.icons.button )
				._addClass( icon, null, value.button );
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.menuWrap.appendTo( this._appendTo() );
		}

		if ( key === "width" ) {
			this._resizeButton();
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.menuInstance.option( "disabled", value );
		this.button.attr( "aria-disabled", value );
		this._toggleClass( this.button, null, "ui-state-disabled", value );

		this.element.prop( "disabled", value );
		if ( value ) {
			this.button.attr( "tabindex", -1 );
			this.close();
		} else {
			this.button.attr( "tabindex", 0 );
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_toggleAttr: function() {
		this.button.attr( "aria-expanded", this.isOpen );

		// We can't use two _toggleClass() calls here, because we need to make sure
		// we always remove classes first and add them second, otherwise if both classes have the
		// same theme class, it will be removed after we add it.
		this._removeClass( this.button, "ui-selectmenu-button-" +
			( this.isOpen ? "closed" : "open" ) )
			._addClass( this.button, "ui-selectmenu-button-" +
				( this.isOpen ? "open" : "closed" ) )
			._toggleClass( this.menuWrap, "ui-selectmenu-open", null, this.isOpen );

		this.menu.attr( "aria-hidden", !this.isOpen );
	},

	_resizeButton: function() {
		var width = this.options.width;

		// For `width: false`, just remove inline style and stop
		if ( width === false ) {
			this.button.css( "width", "" );
			return;
		}

		// For `width: null`, match the width of the original element
		if ( width === null ) {
			width = this.element.show().outerWidth();
			this.element.hide();
		}

		this.button.outerWidth( width );
	},

	_resizeMenu: function() {
		this.menu.outerWidth( Math.max(
			this.button.outerWidth(),

			// Support: IE10
			// IE10 wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping
			this.menu.width( "" ).outerWidth() + 1
		) );
	},

	_getCreateOptions: function() {
		var options = this._super();

		options.disabled = this.element.prop( "disabled" );

		return options;
	},

	_parseOptions: function( options ) {
		var that = this,
			data = [];
		options.each( function( index, item ) {
			data.push( that._parseOption( $( item ), index ) );
		} );
		this.items = data;
	},

	_parseOption: function( option, index ) {
		var optgroup = option.parent( "optgroup" );

		return {
			element: option,
			index: index,
			value: option.val(),
			label: option.text(),
			optgroup: optgroup.attr( "label" ) || "",
			disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
		};
	},

	_destroy: function() {
		this._unbindFormResetHandler();
		this.menuWrap.remove();
		this.button.remove();
		this.element.show();
		this.element.removeUniqueId();
		this.labels.attr( "for", this.ids.element );
	}
} ] );


/*!
 * jQuery UI Slider 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slider
//>>group: Widgets
//>>description: Displays a flexible slider with ranges and accessibility via keyboard.
//>>docs: http://api.jqueryui.com/slider/
//>>demos: http://jqueryui.com/slider/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/slider.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSlider = $.widget( "ui.slider", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "slide",

	options: {
		animate: false,
		classes: {
			"ui-slider": "ui-corner-all",
			"ui-slider-handle": "ui-corner-all",

			// Note: ui-widget-header isn't the most fittingly semantic framework class for this
			// element, but worked best visually with a variety of themes
			"ui-slider-range": "ui-corner-all ui-widget-header"
		},
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// Callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// Number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this._addClass( "ui-slider ui-slider-" + this.orientation,
			"ui-widget ui-widget-content" );

		this._refresh();

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ),
			handle = "<span tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this._addClass( this.handles, "ui-slider-handle", "ui-state-default" );

		this.handle = this.handles.eq( 0 );

		this.handles.each( function( i ) {
			$( this )
				.data( "ui-slider-handle-index", i )
				.attr( "tabIndex", 0 );
		} );
	},

	_createRange: function() {
		var options = this.options;

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[ 0 ], options.values[ 0 ] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice( 0 );
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div>" )
					.appendTo( this.element );

				this._addClass( this.range, "ui-slider-range" );
			} else {
				this._removeClass( this.range, "ui-slider-range-min ui-slider-range-max" );

				// Handle range switching from true to min/max
				this.range.css( {
					"left": "",
					"bottom": ""
				} );
			}
			if ( options.range === "min" || options.range === "max" ) {
				this._addClass( this.range, "ui-slider-range-" + options.range );
			}
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each( function( i ) {
			var thisDistance = Math.abs( normValue - that.values( i ) );
			if ( ( distance > thisDistance ) ||
				( distance === thisDistance &&
					( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		} );

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		this._addClass( closestHandle, null, "ui-state-active" );
		closestHandle.trigger( "focus" );

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css( "borderTopWidth" ), 10 ) || 0 ) -
				( parseInt( closestHandle.css( "borderBottomWidth" ), 10 ) || 0 ) +
				( parseInt( closestHandle.css( "marginTop" ), 10 ) || 0 )
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this._removeClass( this.handles, null, "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left -
				( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top -
				( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_uiHash: function( index, value, values ) {
		var uiHash = {
			handle: this.handles[ index ],
			handleIndex: index,
			value: value !== undefined ? value : this.value()
		};

		if ( this._hasMultipleValues() ) {
			uiHash.value = value !== undefined ? value : this.values( index );
			uiHash.values = values || this.values();
		}

		return uiHash;
	},

	_hasMultipleValues: function() {
		return this.options.values && this.options.values.length;
	},

	_start: function( event, index ) {
		return this._trigger( "start", event, this._uiHash( index ) );
	},

	_slide: function( event, index, newVal ) {
		var allowed, otherVal,
			currentValue = this.value(),
			newValues = this.values();

		if ( this._hasMultipleValues() ) {
			otherVal = this.values( index ? 0 : 1 );
			currentValue = this.values( index );

			if ( this.options.values.length === 2 && this.options.range === true ) {
				newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );
			}

			newValues[ index ] = newVal;
		}

		if ( newVal === currentValue ) {
			return;
		}

		allowed = this._trigger( "slide", event, this._uiHash( index, newVal, newValues ) );

		// A slide can be canceled by returning false from the slide callback
		if ( allowed === false ) {
			return;
		}

		if ( this._hasMultipleValues() ) {
			this.values( index, newVal );
		} else {
			this.value( newVal );
		}
	},

	_stop: function( event, index ) {
		this._trigger( "stop", event, this._uiHash( index ) );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;
			this._trigger( "change", event, this._uiHash( index ) );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this._hasMultipleValues() ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this._removeClass( "ui-slider-horizontal ui-slider-vertical" )
					._addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				if ( this.options.range ) {
					this._refreshRange( value );
				}

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();

				// Start from the last handle to prevent unreachable handles (#9046)
				for ( i = valsLength - 1; i >= 0; i-- ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this._hasMultipleValues() ) {

			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1 ) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// Returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = ( val - this._valueMin() ) % step,
			alignValue = val - valModStep;

		if ( Math.abs( valModStep ) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed( 5 ) );
	},

	_calculateNewMax: function() {
		var max = this.options.max,
			min = this._valueMin(),
			step = this.options.step,
			aboveMin = Math.round( ( max - min ) / step ) * step;
		max = aboveMin + min;
		if ( max > this.options.max ) {

			//If max is not divisible by step, rounding off may increase its value
			max -= step;
		}
		this.max = parseFloat( max.toFixed( this._precision() ) );
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshRange: function( orientation ) {
		if ( orientation === "vertical" ) {
			this.range.css( { "width": "", "left": "" } );
		}
		if ( orientation === "horizontal" ) {
			this.range.css( { "height": "", "bottom": "" } );
		}
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this._hasMultipleValues() ) {
			this.handles.each( function( i ) {
				valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -
					that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								left: valPercent + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								width: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								bottom: ( valPercent ) + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								height: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					}
				}
				lastValPercent = valPercent;
			} );
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "ui-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_UP:
				case $.ui.keyCode.PAGE_DOWN:
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						this._addClass( $( event.target ), null, "ui-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this._hasMultipleValues() ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.ui.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.ui.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.ui.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "ui-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				this._removeClass( $( event.target ), null, "ui-state-active" );
			}
		}
	}
} );


/*!
 * jQuery UI Sortable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Sortable
//>>group: Interactions
//>>description: Enables items in a list to be sorted using the mouse.
//>>docs: http://api.jqueryui.com/sortable/
//>>demos: http://jqueryui.com/sortable/
//>>css.structure: ../../themes/base/sortable.css



var widgetsSortable = $.widget( "ui.sortable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// Callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return ( /left|right/ ).test( item.css( "float" ) ) ||
			( /inline|table-cell/ ).test( item.css( "display" ) );
	},

	_create: function() {
		this.containerCache = {};
		this._addClass( "ui-sortable" );

		//Get the items
		this.refresh();

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		var that = this;
		this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
		$.each( this.items, function() {
			that._addClass(
				this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) :
					this.item,
				"ui-sortable-handle"
			);
		} );
	},

	_destroy: function() {
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[ i ].item.removeData( this.widgetName + "-item" );
		}

		return this;
	},

	_mouseCapture: function( event, overrideHandle ) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if ( this.reverting ) {
			return false;
		}

		if ( this.options.disabled || this.options.type === "static" ) {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems( event );

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$( event.target ).parents().each( function() {
			if ( $.data( this, that.widgetName + "-item" ) === that ) {
				currentItem = $( this );
				return false;
			}
		} );
		if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
			currentItem = $( event.target );
		}

		if ( !currentItem ) {
			return false;
		}
		if ( this.options.handle && !overrideHandle ) {
			$( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
				if ( this === event.target ) {
					validHandle = true;
				}
			} );
			if ( !validHandle ) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function( event, overrideHandle, noActivation ) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to
		// mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend( this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),

			// This is a relative to absolute position minus the actual position calculation -
			// only used for relative positioned helper
			relative: this._getRelativeOffset()
		} );

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css( "position", "absolute" );
		this.cssPosition = this.helper.css( "position" );

		//Generate the original position
		this.originalPosition = this._generatePosition( event );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Cache the former DOM position
		this.domPosition = {
			prev: this.currentItem.prev()[ 0 ],
			parent: this.currentItem.parent()[ 0 ]
		};

		// If the helper is not the original, hide the original so it's not playing any role during
		// the drag, won't cause anything bad this way
		if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if ( o.containment ) {
			this._setContainment();
		}

		if ( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// Support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet =
				$( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
		}

		if ( o.opacity ) { // opacity option
			if ( this.helper.css( "opacity" ) ) {
				this._storedOpacity = this.helper.css( "opacity" );
			}
			this.helper.css( "opacity", o.opacity );
		}

		if ( o.zIndex ) { // zIndex option
			if ( this.helper.css( "zIndex" ) ) {
				this._storedZIndex = this.helper.css( "zIndex" );
			}
			this.helper.css( "zIndex", o.zIndex );
		}

		//Prepare scrolling
		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger( "start", event, this._uiHash() );

		//Recache the helper size
		if ( !this._preserveHelperProportions ) {
			this._cacheHelperProportions();
		}

		//Post "activate" events to possible containers
		if ( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		this.dragging = true;

		this._addClass( this.helper, "ui-sortable-helper" );

		// Execute the drag once - this causes the helper not to be visiblebefore getting its
		// correct position
		this._mouseDrag( event );
		return true;

	},

	_mouseDrag: function( event ) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition( event );
		this.positionAbs = this._convertPositionTo( "absolute" );

		if ( !this.lastPositionAbs ) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if ( this.options.scroll ) {
			if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
					this.scrollParent[ 0 ].tagName !== "HTML" ) {

				if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
						event.pageY < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollTop =
						scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
				} else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollTop =
						scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
				}

				if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
						event.pageX < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollLeft = scrolled =
						this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollLeft = scrolled =
						this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
				}

			} else {

				if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
					scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
				} else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
				}

				if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
					scrolled = this.document.scrollLeft(
						this.document.scrollLeft() - o.scrollSpeed
					);
				} else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = this.document.scrollLeft(
						this.document.scrollLeft() + o.scrollSpeed
					);
				}

			}

			if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
				$.ui.ddmanager.prepareOffsets( this, event );
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Set the helper position
		if ( !this.options.axis || this.options.axis !== "y" ) {
			this.helper[ 0 ].style.left = this.position.left + "px";
		}
		if ( !this.options.axis || this.options.axis !== "x" ) {
			this.helper[ 0 ].style.top = this.position.top + "px";
		}

		//Rearrange
		for ( i = this.items.length - 1; i >= 0; i-- ) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[ i ];
			itemElement = item.item[ 0 ];
			intersection = this._intersectsWithPointer( item );
			if ( !intersection ) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if ( item.instance !== this.currentContainer ) {
				continue;
			}

			// Cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if ( itemElement !== this.currentItem[ 0 ] &&
				this.placeholder[ intersection === 1 ? "next" : "prev" ]()[ 0 ] !== itemElement &&
				!$.contains( this.placeholder[ 0 ], itemElement ) &&
				( this.options.type === "semi-dynamic" ?
					!$.contains( this.element[ 0 ], itemElement ) :
					true
				)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if ( this.options.tolerance === "pointer" || this._intersectsWithSides( item ) ) {
					this._rearrange( event, item );
				} else {
					break;
				}

				this._trigger( "change", event, this._uiHash() );
				break;
			}
		}

		//Post events to containers
		this._contactContainers( event );

		//Interconnect with droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		//Call callbacks
		this._trigger( "sort", event, this._uiHash() );

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function( event, noPropagation ) {

		if ( !event ) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			$.ui.ddmanager.drop( this, event );
		}

		if ( this.options.revert ) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollLeft
					);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollTop
					);
			}
			this.reverting = true;
			$( this.helper ).animate(
				animation,
				parseInt( this.options.revert, 10 ) || 500,
				function() {
					that._clear( event );
				}
			);
		} else {
			this._clear( event, noPropagation );
		}

		return false;

	},

	cancel: function() {

		if ( this.dragging ) {

			this._mouseUp( new $.Event( "mouseup", { target: null } ) );

			if ( this.options.helper === "original" ) {
				this.currentItem.css( this._storedCSS );
				this._removeClass( this.currentItem, "ui-sortable-helper" );
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for ( var i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		if ( this.placeholder ) {

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
			// it unbinds ALL events from the original node!
			if ( this.placeholder[ 0 ].parentNode ) {
				this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
			}
			if ( this.options.helper !== "original" && this.helper &&
					this.helper[ 0 ].parentNode ) {
				this.helper.remove();
			}

			$.extend( this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			} );

			if ( this.domPosition.prev ) {
				$( this.domPosition.prev ).after( this.currentItem );
			} else {
				$( this.domPosition.parent ).prepend( this.currentItem );
			}
		}

		return this;

	},

	serialize: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			str = [];
		o = o || {};

		$( items ).each( function() {
			var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
				.match( o.expression || ( /(.+)[\-=_](.+)/ ) );
			if ( res ) {
				str.push(
					( o.key || res[ 1 ] + "[]" ) +
					"=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
			}
		} );

		if ( !str.length && o.key ) {
			str.push( o.key + "=" );
		}

		return str.join( "&" );

	},

	toArray: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			ret = [];

		o = o || {};

		items.each( function() {
			ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
		} );
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function( item ) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
				( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
				( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			( this.options.tolerance !== "pointer" &&
				this.helperProportions[ this.floating ? "width" : "height" ] >
				item[ this.floating ? "width" : "height" ] )
		) {
			return isOverElement;
		} else {

			return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
				x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function( item ) {
		var verticalDirection, horizontalDirection,
			isOverElementHeight = ( this.options.axis === "x" ) ||
				this._isOverAxis(
					this.positionAbs.top + this.offset.click.top, item.top, item.height ),
			isOverElementWidth = ( this.options.axis === "y" ) ||
				this._isOverAxis(
					this.positionAbs.left + this.offset.click.left, item.left, item.width ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( !isOverElement ) {
			return false;
		}

		verticalDirection = this._getDragVerticalDirection();
		horizontalDirection = this._getDragHorizontalDirection();

		return this.floating ?
			( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 )
			: ( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

	},

	_intersectsWithSides: function( item ) {

		var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
				this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
			isOverRightHalf = this._isOverAxis( this.positionAbs.left +
				this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if ( this.floating && horizontalDirection ) {
			return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
				( horizontalDirection === "left" && !isOverRightHalf ) );
		} else {
			return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
				( verticalDirection === "up" && !isOverBottomHalf ) );
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && ( delta > 0 ? "down" : "up" );
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && ( delta > 0 ? "right" : "left" );
	},

	refresh: function( event ) {
		this._refreshItems( event );
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ?
			[ options.connectWith ] :
			options.connectWith;
	},

	_getItemsAsjQuery: function( connected ) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if ( connectWith && connected ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ $.isFunction( inst.options.items ) ?
							inst.options.items.call( inst.element ) :
							$( inst.options.items, inst.element )
								.not( ".ui-sortable-helper" )
								.not( ".ui-sortable-placeholder" ), inst ] );
					}
				}
			}
		}

		queries.push( [ $.isFunction( this.options.items ) ?
			this.options.items
				.call( this.element, null, { options: this.options, item: this.currentItem } ) :
			$( this.options.items, this.element )
				.not( ".ui-sortable-helper" )
				.not( ".ui-sortable-placeholder" ), this ] );

		function addItems() {
			items.push( this );
		}
		for ( i = queries.length - 1; i >= 0; i-- ) {
			queries[ i ][ 0 ].each( addItems );
		}

		return $( items );

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

		this.items = $.grep( this.items, function( item ) {
			for ( var j = 0; j < list.length; j++ ) {
				if ( list[ j ] === item.item[ 0 ] ) {
					return false;
				}
			}
			return true;
		} );

	},

	_refreshItems: function( event ) {

		this.items = [];
		this.containers = [ this ];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [ [ $.isFunction( this.options.items ) ?
				this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
				$( this.options.items, this.element ), this ] ],
			connectWith = this._connectWith();

		//Shouldn't be run the first time through due to massive slow-down
		if ( connectWith && this.ready ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ $.isFunction( inst.options.items ) ?
							inst.options.items
								.call( inst.element[ 0 ], event, { item: this.currentItem } ) :
							$( inst.options.items, inst.element ), inst ] );
						this.containers.push( inst );
					}
				}
			}
		}

		for ( i = queries.length - 1; i >= 0; i-- ) {
			targetData = queries[ i ][ 1 ];
			_queries = queries[ i ][ 0 ];

			for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
				item = $( _queries[ j ] );

				// Data for target checking (mouse manager)
				item.data( this.widgetName + "-item", targetData );

				items.push( {
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				} );
			}
		}

	},

	refreshPositions: function( fast ) {

		// Determine whether items are being displayed horizontally
		this.floating = this.items.length ?
			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
			false;

		//This has to be redone because due to the item being moved out/into the offsetParent,
		// the offsetParent's position will change
		if ( this.offsetParent && this.helper ) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for ( i = this.items.length - 1; i >= 0; i-- ) {
			item = this.items[ i ];

			//We ignore calculating positions of all connected containers when we're not over them
			if ( item.instance !== this.currentContainer && this.currentContainer &&
					item.item[ 0 ] !== this.currentItem[ 0 ] ) {
				continue;
			}

			t = this.options.toleranceElement ?
				$( this.options.toleranceElement, item.item ) :
				item.item;

			if ( !fast ) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if ( this.options.custom && this.options.custom.refreshContainers ) {
			this.options.custom.refreshContainers.call( this );
		} else {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				p = this.containers[ i ].element.offset();
				this.containers[ i ].containerCache.left = p.left;
				this.containers[ i ].containerCache.top = p.top;
				this.containers[ i ].containerCache.width =
					this.containers[ i ].element.outerWidth();
				this.containers[ i ].containerCache.height =
					this.containers[ i ].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function( that ) {
		that = that || this;
		var className,
			o = that.options;

		if ( !o.placeholder || o.placeholder.constructor === String ) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[ 0 ].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[ 0 ] );

						that._addClass( element, "ui-sortable-placeholder",
								className || that.currentItem[ 0 ].className )
							._removeClass( element, "ui-sortable-helper" );

					if ( nodeName === "tbody" ) {
						that._createTrPlaceholder(
							that.currentItem.find( "tr" ).eq( 0 ),
							$( "<tr>", that.document[ 0 ] ).appendTo( element )
						);
					} else if ( nodeName === "tr" ) {
						that._createTrPlaceholder( that.currentItem, element );
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function( container, p ) {

					// 1. If a className is set as 'placeholder option, we don't force sizes -
					// the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
					// class name is specified
					if ( className && !o.forcePlaceholderSize ) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming
					// from a stylesheet), it receives the inline height from the dragged item
					if ( !p.height() ) {
						p.height(
							that.currentItem.innerHeight() -
							parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
					}
					if ( !p.width() ) {
						p.width(
							that.currentItem.innerWidth() -
							parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
					}
				}
			};
		}

		//Create the placeholder
		that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

		//Append it after the actual current item
		that.currentItem.after( that.placeholder );

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update( that, that.placeholder );

	},

	_createTrPlaceholder: function( sourceTr, targetTr ) {
		var that = this;

		sourceTr.children().each( function() {
			$( "<td>&#160;</td>", that.document[ 0 ] )
				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
				.appendTo( targetTr );
		} );
	},

	_contactContainers: function( event ) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
			floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// Get innermost container that intersects with item
		for ( i = this.containers.length - 1; i >= 0; i-- ) {

			// Never consider a container that's located within the item itself
			if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
				continue;
			}

			if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

				// If we've already found a container and it's more "inner" than this, then continue
				if ( innermostContainer &&
						$.contains(
							this.containers[ i ].element[ 0 ],
							innermostContainer.element[ 0 ] ) ) {
					continue;
				}

				innermostContainer = this.containers[ i ];
				innermostIndex = i;

			} else {

				// container doesn't intersect. trigger "out" event if necessary
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		// If no intersecting containers found, return
		if ( !innermostContainer ) {
			return;
		}

		// Move the item into the container if it's not there already
		if ( this.containers.length === 1 ) {
			if ( !this.containers[ innermostIndex ].containerCache.over ) {
				this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
				this.containers[ innermostIndex ].containerCache.over = 1;
			}
		} else {

			// When entering a new container, we will find the item with the least distance and
			// append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating( this.currentItem );
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "pageX" : "pageY";

			for ( j = this.items.length - 1; j >= 0; j-- ) {
				if ( !$.contains(
						this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
				) {
					continue;
				}
				if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
					continue;
				}

				cur = this.items[ j ].item.offset()[ posProperty ];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up" : "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
				return;
			}

			if ( this.currentContainer === this.containers[ innermostIndex ] ) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			itemWithLeastDistance ?
				this._rearrange( event, itemWithLeastDistance, null, true ) :
				this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
			this._trigger( "change", event, this._uiHash() );
			this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
			this.currentContainer = this.containers[ innermostIndex ];

			//Update the placeholder
			this.options.placeholder.update( this.currentContainer, this.placeholder );

			this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
			this.containers[ innermostIndex ].containerCache.over = 1;
		}

	},

	_createHelper: function( event ) {

		var o = this.options,
			helper = $.isFunction( o.helper ) ?
				$( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
				( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

		//Add the helper to the DOM if that didn't happen already
		if ( !helper.parents( "body" ).length ) {
			$( o.appendTo !== "parent" ?
				o.appendTo :
				this.currentItem[ 0 ].parentNode )[ 0 ].appendChild( helper[ 0 ] );
		}

		if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
			this._storedCSS = {
				width: this.currentItem[ 0 ].style.width,
				height: this.currentItem[ 0 ].style.height,
				position: this.currentItem.css( "position" ),
				top: this.currentItem.css( "top" ),
				left: this.currentItem.css( "left" )
			};
		}

		if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
			helper.width( this.currentItem.width() );
		}
		if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
			helper.height( this.currentItem.height() );
		}

		return helper;

	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this
		// information with an ugly IE fix
		if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
				( this.offsetParent[ 0 ].tagName &&
				this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {

		if ( this.cssPosition === "relative" ) {
			var p = this.currentItem.position();
			return {
				top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
					this.scrollParent.scrollTop(),
				left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
					this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}
		if ( o.containment === "document" || o.containment === "window" ) {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				o.containment === "document" ?
					this.document.width() :
					this.window.width() - this.helperProportions.width - this.margins.left,
				( o.containment === "document" ?
					( this.document.height() || document.body.parentNode.scrollHeight ) :
					this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
				) - this.helperProportions.height - this.margins.top
			];
		}

		if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
			ce = $( o.containment )[ 0 ];
			co = $( o.containment ).offset();
			over = ( $( ce ).css( "overflow" ) !== "hidden" );

			this.containment = [
				co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
				co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
				co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
					( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
					this.helperProportions.width - this.margins.left,
				co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
					( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
					this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
			scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
					scroll.scrollLeft() ) * mod )
			)
		};

	},

	_generatePosition: function( event ) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
				scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

			if ( this.containment ) {
				if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
					pageX = this.containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
					pageY = this.containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
					pageX = this.containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
					pageY = this.containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {
				top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
					o.grid[ 1 ] ) * o.grid[ 1 ];
				pageY = this.containment ?
					( ( top - this.offset.click.top >= this.containment[ 1 ] &&
						top - this.offset.click.top <= this.containment[ 3 ] ) ?
							top :
							( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
								top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
								top;

				left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
					o.grid[ 0 ] ) * o.grid[ 0 ];
				pageX = this.containment ?
					( ( left - this.offset.click.left >= this.containment[ 0 ] &&
						left - this.offset.click.left <= this.containment[ 2 ] ) ?
							left :
							( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
								left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
								left;
			}

		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() :
					scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
			)
		};

	},

	_rearrange: function( event, i, a, hardRefresh ) {

		a ? a[ 0 ].appendChild( this.placeholder[ 0 ] ) :
			i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
				( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout,
		// if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay( function() {
			if ( counter === this.counter ) {

				//Precompute after each DOM insertion, NOT on mousemove
				this.refreshPositions( !hardRefresh );
			}
		} );

	},

	_clear: function( event, noPropagation ) {

		this.reverting = false;

		// We delay all events that have to be triggered to after the point where the placeholder
		// has been removed and everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets
		// reappended (see #4088)
		if ( !this._noFinalSort && this.currentItem.parent().length ) {
			this.placeholder.before( this.currentItem );
		}
		this._noFinalSort = null;

		if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
			for ( i in this._storedCSS ) {
				if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
					this._storedCSS[ i ] = "";
				}
			}
			this.currentItem.css( this._storedCSS );
			this._removeClass( this.currentItem, "ui-sortable-helper" );
		} else {
			this.currentItem.show();
		}

		if ( this.fromOutside && !noPropagation ) {
			delayedTriggers.push( function( event ) {
				this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
			} );
		}
		if ( ( this.fromOutside ||
				this.domPosition.prev !==
				this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
				this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

			// Trigger update callback if the DOM position has changed
			delayedTriggers.push( function( event ) {
				this._trigger( "update", event, this._uiHash() );
			} );
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if ( this !== this.currentContainer ) {
			if ( !noPropagation ) {
				delayedTriggers.push( function( event ) {
					this._trigger( "remove", event, this._uiHash() );
				} );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "receive", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "update", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
			}
		}

		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for ( i = this.containers.length - 1; i >= 0; i-- ) {
			if ( !noPropagation ) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if ( this.containers[ i ].containerCache.over ) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[ i ].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if ( this._storedOpacity ) {
			this.helper.css( "opacity", this._storedOpacity );
		}
		if ( this._storedZIndex ) {
			this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
		}

		this.dragging = false;

		if ( !noPropagation ) {
			this._trigger( "beforeStop", event, this._uiHash() );
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
		// it unbinds ALL events from the original node!
		this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if ( !noPropagation ) {
			for ( i = 0; i < delayedTriggers.length; i++ ) {

				// Trigger all delayed events
				delayedTriggers[ i ].call( this, event );
			}
			this._trigger( "stop", event, this._uiHash() );
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
			this.cancel();
		}
	},

	_uiHash: function( _inst ) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $( [] ),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

} );


/*!
 * jQuery UI Spinner 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Spinner
//>>group: Widgets
//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
//>>docs: http://api.jqueryui.com/spinner/
//>>demos: http://jqueryui.com/spinner/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/spinner.css
//>>css.theme: ../../themes/base/theme.css



function spinnerModifer( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.12.1",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		classes: {
			"ui-spinner": "ui-corner-all",
			"ui-spinner-down": "ui-corner-br",
			"ui-spinner-up": "ui-corner-tr"
		},
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {

		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {

			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_getCreateOptions: function() {
		var options = this._super();
		var element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value != null && value.length ) {
				options[ option ] = value;
			}
		} );

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay( function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );
				if ( !isActive ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay( function() {
						this.previous = previous;
					} );
				}
			}

			// Ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// Support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay( function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			} );

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {

			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},

		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	// Support mobile enhanced option and make backcompat more sane
	_enhance: function() {
		this.uiSpinner = this.element
			.attr( "autocomplete", "off" )
			.wrap( "<span>" )
			.parent()

				// Add buttons
				.append(
					"<a></a><a></a>"
				);
	},

	_draw: function() {
		this._enhance();

		this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
		this._addClass( "ui-spinner-input" );

		this.element.attr( "role", "spinbutton" );

		// Button bindings
		this.buttons = this.uiSpinner.children( "a" )
			.attr( "tabIndex", -1 )
			.attr( "aria-hidden", true )
			.button( {
				classes: {
					"ui-button": ""
				}
			} );

		// TODO: Right now button does not support classes this is already updated in button PR
		this._removeClass( this.buttons, "ui-corner-all" );

		this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
		this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
		this.buttons.first().button( {
			"icon": this.options.icons.up,
			"showLabel": false
		} );
		this.buttons.last().button( {
			"icon": this.options.icons.down,
			"showLabel": false
		} );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
				this.uiSpinner.height() > 0 ) {
			this.uiSpinner.height( this.uiSpinner.height() );
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay( function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// Make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;

		// - round to the nearest step
		aboveMin = Math.round( aboveMin / options.step ) * options.step;

		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// Fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// Clamp the value
		if ( options.max !== null && value > options.max ) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		var prevValue, first, last;

		if ( key === "culture" || key === "numberFormat" ) {
			prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			first = this.buttons.first().find( ".ui-icon" );
			this._removeClass( first, null, this.options.icons.up );
			this._addClass( first, null, value.up );
			last = this.buttons.last().find( ".ui-icon" );
			this._removeClass( last, null, this.options.icons.down );
			this._addClass( last, null, value.down );
		}

		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
		this.element.prop( "disabled", !!value );
		this.buttons.button( value ? "disable" : "enable" );
	},

	_setOptions: spinnerModifer( function( options ) {
		this._super( options );
	} ),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr( {
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,

			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		} );
	},

	isValid: function() {
		var value = this.value();

		// Null is invalid
		if ( value === null ) {
			return false;
		}

		// If value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// Update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.prop( "disabled", false )
			.removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: spinnerModifer( function( steps ) {
		this._stepUp( steps );
	} ),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinnerModifer( function( steps ) {
		this._stepDown( steps );
	} ),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinnerModifer( function( pages ) {
		this._stepUp( ( pages || 1 ) * this.options.page );
	} ),

	pageDown: spinnerModifer( function( pages ) {
		this._stepDown( ( pages || 1 ) * this.options.page );
	} ),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinnerModifer( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for spinner html extension points
	$.widget( "ui.spinner", $.ui.spinner, {
		_enhance: function() {
			this.uiSpinner = this.element
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()

					// Add buttons
					.append( this._buttonHtml() );
		},
		_uiSpinnerHtml: function() {
			return "<span>";
		},

		_buttonHtml: function() {
			return "<a></a><a></a>";
		}
	} );
}

var widgetsSpinner = $.ui.spinner;


/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tabs
//>>group: Widgets
//>>description: Transforms a set of container elements into a tab structure.
//>>docs: http://api.jqueryui.com/tabs/
//>>demos: http://jqueryui.com/tabs/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tabs.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tabs", {
	version: "1.12.1",
	delay: 300,
	options: {
		active: null,
		classes: {
			"ui-tabs": "ui-corner-all",
			"ui-tabs-nav": "ui-corner-all",
			"ui-tabs-panel": "ui-corner-bottom",
			"ui-tabs-tab": "ui-corner-top"
		},
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// Callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_isLocal: ( function() {
		var rhash = /#.*$/;

		return function( anchor ) {
			var anchorUrl, locationUrl;

			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// Decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	} )(),

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
		this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				} )
			) ).sort();
		}

		// Check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {

			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each( function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				} );
			}

			// Check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// No active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// Handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// Don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
		case $.ui.keyCode.RIGHT:
		case $.ui.keyCode.DOWN:
			selectedIndex++;
			break;
		case $.ui.keyCode.UP:
		case $.ui.keyCode.LEFT:
			goingForward = false;
			selectedIndex--;
			break;
		case $.ui.keyCode.END:
			selectedIndex = this.anchors.length - 1;
			break;
		case $.ui.keyCode.HOME:
			selectedIndex = 0;
			break;
		case $.ui.keyCode.SPACE:

			// Activate only, no collapsing
			event.preventDefault();
			clearTimeout( this.activating );
			this._activate( selectedIndex );
			return;
		case $.ui.keyCode.ENTER:

			// Toggle (cancel delayed activation, allow collapsing)
			event.preventDefault();
			clearTimeout( this.activating );

			// Determine if we should collapse or activate
			this._activate( selectedIndex === this.options.active ? false : selectedIndex );
			return;
		default:
			return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control/command key will prevent automatic activation
		if ( !event.ctrlKey && !event.metaKey ) {

			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay( function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.trigger( "focus" );
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).trigger( "focus" );
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		this._super( key, value );

		if ( key === "collapsible" ) {
			this._toggleClass( "ui-tabs-collapsible", null, value );

			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// Get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		} );

		this._processTabs();

		// Was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();

		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();

			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}

		// was active, active tab still exists
		} else {

			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setOptionDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr( {
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		} );
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr( {
				"aria-hidden": "true"
			} );

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
			this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
			this._getPanelForTab( this.active )
				.show()
				.attr( {
					"aria-hidden": "false"
				} );
		}
	},

	_processTabs: function() {
		var that = this,
			prevTabs = this.tabs,
			prevAnchors = this.anchors,
			prevPanels = this.panels;

		this.tablist = this._getList().attr( "role", "tablist" );
		this._addClass( this.tablist, "ui-tabs-nav",
			"ui-helper-reset ui-helper-clearfix ui-widget-header" );

		// Prevent users from focusing disabled tabs via click
		this.tablist
			.on( "mousedown" + this.eventNamespace, "> li", function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			} )

			// Support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.on( "focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			} );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.attr( {
				role: "tab",
				tabIndex: -1
			} );
		this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

		this.anchors = this.tabs.map( function() {
			return $( "a", this )[ 0 ];
		} )
			.attr( {
				role: "presentation",
				tabIndex: -1
			} );
		this._addClass( this.anchors, "ui-tabs-anchor" );

		this.panels = $();

		this.anchors.each( function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// Inline tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );

			// remote tab
			} else {

				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length ) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr( {
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			} );
			panel.attr( "aria-labelledby", anchorId );
		} );

		this.panels.attr( "role", "tabpanel" );
		this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevTabs ) {
			this._off( prevTabs.not( this.tabs ) );
			this._off( prevAnchors.not( this.anchors ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	// Allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.data( "ui-tabs-destroy", true );
	},

	_setOptionDisabled: function( disabled ) {
		var currentItem, li, i;

		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// Disable tabs
		for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
			currentItem = $( li );
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				currentItem.attr( "aria-disabled", "true" );
				this._addClass( currentItem, null, "ui-state-disabled" );
			} else {
				currentItem.removeAttr( "aria-disabled" );
				this._removeClass( currentItem, null, "ui-state-disabled" );
			}
		}

		this.options.disabled = disabled;

		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
			disabled === true );
	},

	_setupEvents: function( event ) {
		var events = {};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );

		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		} );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.element.children().not( this.panels ).each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.panels.each( function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each( function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			} ).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||

				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||

				// can't switch durning an animation
				this.running ||

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// Handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// Start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				that._removeClass( eventData.oldTab.closest( "li" ),
					"ui-tabs-active", "ui-state-active" );
				show();
			} );
		} else {
			this._removeClass( eventData.oldTab.closest( "li" ),
				"ui-tabs-active", "ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter( function() {
				return $( this ).attr( "tabIndex" ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr( {
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		} );
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// Trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler( {
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		} );
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {

		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" +
				$.ui.escapeSelector( index ) + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.tablist
			.removeAttr( "role" )
			.off( this.eventNamespace );

		this.anchors
			.removeAttr( "role tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each( function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeAttr( "role tabIndex " +
					"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
			}
		} );

		this.tabs.each( function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		} );

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				} );
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				} );
			}
		}
		this._setOptionDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setOptionDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			},
			complete = function( jqXHR, status ) {
				if ( status === "abort" ) {
					that.panels.stop( false, true );
				}

				that._removeClass( tab, "ui-tabs-loading" );
				panel.removeAttr( "aria-busy" );

				if ( jqXHR === that.xhr ) {
					delete that.xhr;
				}
			};

		// Not remote
		if ( this._isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// Support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			this._addClass( tab, "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.done( function( response, status, jqXHR ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						panel.html( response );
						that._trigger( "load", event, eventData );

						complete( jqXHR, status );
					}, 1 );
				} )
				.fail( function( jqXHR, status ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						complete( jqXHR, status );
					}, 1 );
				} );
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {

			// Support: IE <11 only
			// Strip any hash that exists to prevent errors with the Ajax request
			url: anchor.attr( "href" ).replace( /#.*$/, "" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for ui-tab class (now ui-tabs-tab)
	$.widget( "ui.tabs", $.ui.tabs, {
		_processTabs: function() {
			this._superApply( arguments );
			this._addClass( this.tabs, "ui-tab" );
		}
	} );
}

var widgetsTabs = $.ui.tabs;


/*!
 * jQuery UI Tooltip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tooltip
//>>group: Widgets
//>>description: Shows additional information for any element on hover or focus.
//>>docs: http://api.jqueryui.com/tooltip/
//>>demos: http://jqueryui.com/tooltip/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tooltip.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tooltip", {
	version: "1.12.1",
	options: {
		classes: {
			"ui-tooltip": "ui-corner-all ui-widget-shadow"
		},
		content: function() {

			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";

			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,

		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		track: false,

		// Callbacks
		close: null,
		open: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on( {
			mouseover: "open",
			focusin: "open"
		} );

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};

		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr( {
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			} )
			.appendTo( this.document[ 0 ].body );
		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		this.disabledTitles = $( [] );
	},

	_setOption: function( key, value ) {
		var that = this;

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, tooltipData ) {
				that._updateContent( tooltipData.element );
			} );
		}
	},

	_setOptionDisabled: function( value ) {
		this[ value ? "_disable" : "_enable" ]();
	},

	_disable: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = tooltipData.element[ 0 ];
			that.close( event, true );
		} );

		// Remove title attributes to prevent native tooltips
		this.disabledTitles = this.disabledTitles.add(
			this.element.find( this.options.items ).addBack()
				.filter( function() {
					var element = $( this );
					if ( element.is( "[title]" ) ) {
						return element
							.data( "ui-tooltip-title", element.attr( "title" ) )
							.removeAttr( "title" );
					}
				} )
		);
	},

	_enable: function() {

		// restore title attributes
		this.disabledTitles.each( function() {
			var element = $( this );
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
			}
		} );
		this.disabledTitles = $( [] );
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )

				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "ui-tooltip-title", target.attr( "title" ) );
		}

		target.data( "ui-tooltip-open", true );

		// Kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each( function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "ui-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			} );
		}

		this._registerCloseHandlers( event, target );
		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" || contentOption.nodeType ||
				contentOption.jquery ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[ 0 ], function( response ) {

			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay( function() {

				// Ignore async response if tooltip was closed already
				if ( !target.data( "ui-tooltip-open" ) ) {
					return;
				}

				// JQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			} );
		} );
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltipData, tooltip, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltipData = this._find( target );
		if ( tooltipData ) {
			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
			return;
		}

		// If we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltipData = this._tooltip( target );
		tooltip = tooltipData.tooltip;
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".ui-tooltip-content" ).html( content );

		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		a11yContent = $( "<div>" ).html( tooltip.find( ".ui-tooltip-content" ).html() );
		a11yContent.removeAttr( "name" ).find( "[name]" ).removeAttr( "name" );
		a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		a11yContent.appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			} );

			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend( {
				of: target
			}, this.options.position ) );
		}

		tooltip.hide();

		this._show( tooltip, this.options.show );

		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		// Adds the check to add the timers only when both delay and track options are set (#14682)
		if ( this.options.track && this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval( function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "open", event, { tooltip: tooltip } );
	},

	_registerCloseHandlers: function( event, target ) {
		var events = {
			keyup: function( event ) {
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
					var fakeEvent = $.Event( event );
					fakeEvent.currentTarget = target[ 0 ];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				this._removeTooltip( this._find( target ).tooltip );
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var tooltip,
			that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltipData = this._find( target );

		// The tooltip may already be closed
		if ( !tooltipData ) {

			// We set ui-tooltip-open immediately upon open (in open()), but only set the
			// additional data once there's actually content to show (in _open()). So even if the
			// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
			// the period between open() and _open().
			target.removeData( "ui-tooltip-open" );
			return;
		}

		tooltip = tooltipData.tooltip;

		// Disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( tooltipData.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// Only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "ui-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		tooltipData.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
		} );

		target.removeData( "ui-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			} );
		}

		tooltipData.closing = true;
		this._trigger( "close", event, { tooltip: tooltip } );
		if ( !tooltipData.hiding ) {
			tooltipData.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" ).attr( "role", "tooltip" ),
			content = $( "<div>" ).appendTo( tooltip ),
			id = tooltip.uniqueId().attr( "id" );

		this._addClass( content, "ui-tooltip-content" );
		this._addClass( tooltip, "ui-tooltip", "ui-widget ui-widget-content" );

		tooltip.appendTo( this._appendTo( element ) );

		return this.tooltips[ id ] = {
			element: element,
			tooltip: tooltip
		};
	},

	_find: function( target ) {
		var id = target.data( "ui-tooltip-id" );
		return id ? this.tooltips[ id ] : null;
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_appendTo: function( target ) {
		var element = target.closest( ".ui-front, dialog" );

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_destroy: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {

			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" ),
				element = tooltipData.element;
			event.target = event.currentTarget = element[ 0 ];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "ui-tooltip-title" ) ) {

				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
				element.removeData( "ui-tooltip-title" );
			}
		} );
		this.liveRegion.remove();
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for tooltipClass option
	$.widget( "ui.tooltip", $.ui.tooltip, {
		options: {
			tooltipClass: null
		},
		_tooltip: function() {
			var tooltipData = this._superApply( arguments );
			if ( this.options.tooltipClass ) {
				tooltipData.tooltip.addClass( this.options.tooltipClass );
			}
			return tooltipData;
		}
	} );
}

var widgetsTooltip = $.ui.tooltip;




}));
/*!
 * jQuery JavaScript Library v2.2.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-04-05T19:26Z
 */

(function (global, factory) {

	if (typeof module === "object" && typeof module.exports === "object") {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory(global, true) :
			function (w) {
				if (!w.document) {
					throw new Error("jQuery requires a window with a document");
				}
				return factory(w);
			};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.3",

		// Define a local copy of jQuery
		jQuery = function (selector, context) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init(selector, context);
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function (all, letter) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function () {
			return slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function (num) {
			return num != null ?

				// Return just the one element from the set
				(num < 0 ? this[num + this.length] : this[num]) :

				// Return all the elements in a clean array
				slice.call(this);
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function (elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function (callback) {
			return jQuery.each(this, callback);
		},

		map: function (callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function () {
			return this.pushStack(slice.apply(this, arguments));
		},

		first: function () {
			return this.eq(0);
		},

		last: function () {
			return this.eq(-1);
		},

		eq: function (i) {
			var len = this.length,
				j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function () {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if (typeof target !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) ||
						(copyIsArray = jQuery.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function (msg) {
			throw new Error(msg);
		},

		noop: function () { },

		isFunction: function (obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function (obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function (obj) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray(obj) && (realStringObj - parseFloat(realStringObj) + 1) >= 0;
		},

		isPlainObject: function (obj) {
			var key;

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			// Not own constructor property must be Object
			if (obj.constructor &&
					!hasOwn.call(obj, "constructor") &&
					!hasOwn.call(obj.constructor.prototype || {}, "isPrototypeOf")) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for (key in obj) { }

			return key === undefined || hasOwn.call(obj, key);
		},

		isEmptyObject: function (obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function (obj) {
			if (obj == null) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[toString.call(obj)] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function (code) {
			var script,
				indirect = eval;

			code = jQuery.trim(code);

			if (code) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if (code.indexOf("use strict") === 1) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild(script).parentNode.removeChild(script);
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect(code);
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function (string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function (elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function (obj, callback) {
			var length, i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
					for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				}

			return obj;
		},

		// Support: Android<4.1
		trim: function (text) {
			return text == null ?
				"" :
				(text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function (arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret,
						typeof arr === "string" ?
						[arr] : arr
					);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function (elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		merge: function (first, second) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function (elems, callback, invert) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function (elems, callback, arg) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function (fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = slice.call(arguments, 2);
			proxy = function () {
				return fn.apply(context || this, args.concat(slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
	function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && (length - 1) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function (window) {

		var i,
			support,
			Expr,
			getText,
			isXML,
			tokenize,
			compile,
			select,
			outermostContext,
			sortInput,
			hasDuplicate,

			// Local document vars
			setDocument,
			document,
			docElem,
			documentIsHTML,
			rbuggyQSA,
			rbuggyMatches,
			matches,
			contains,

			// Instance-specific data
			expando = "sizzle" + 1 * new Date(),
			preferredDoc = window.document,
			dirruns = 0,
			done = 0,
			classCache = createCache(),
			tokenCache = createCache(),
			compilerCache = createCache(),
			sortOrder = function (a, b) {
				if (a === b) {
					hasDuplicate = true;
				}
				return 0;
			},

			// General-purpose constants
			MAX_NEGATIVE = 1 << 31,

			// Instance methods
			hasOwn = ({}).hasOwnProperty,
			arr = [],
			pop = arr.pop,
			push_native = arr.push,
			push = arr.push,
			slice = arr.slice,
			// Use a stripped-down indexOf as it's faster than native
			// http://jsperf.com/thor-indexof-vs-for/5
			indexOf = function (list, elem) {
				var i = 0,
					len = list.length;
				for (; i < len; i++) {
					if (list[i] === elem) {
						return i;
					}
				}
				return -1;
			},

			booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

			// Regular expressions

			// http://www.w3.org/TR/css3-selectors/#whitespace
			whitespace = "[\\x20\\t\\r\\n\\f]",

			// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
			identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

			// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
			attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
				// Operator (capture 2)
				"*([*^$|!~]?=)" + whitespace +
				// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
				"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
				"*\\]",

			pseudos = ":(" + identifier + ")(?:\\((" +
				// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
				// 1. quoted (capture 3; capture 4 or capture 5)
				"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
				// 2. simple (capture 6)
				"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
				// 3. anything else (capture 2)
				".*" +
				")\\)|)",

			// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
			rwhitespace = new RegExp(whitespace + "+", "g"),
			rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

			rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

			rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

			rpseudo = new RegExp(pseudos),
			ridentifier = new RegExp("^" + identifier + "$"),

			matchExpr = {
				"ID": new RegExp("^#(" + identifier + ")"),
				"CLASS": new RegExp("^\\.(" + identifier + ")"),
				"TAG": new RegExp("^(" + identifier + "|[*])"),
				"ATTR": new RegExp("^" + attributes),
				"PSEUDO": new RegExp("^" + pseudos),
				"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
					"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
					"*(\\d+)|))" + whitespace + "*\\)|)", "i"),
				"bool": new RegExp("^(?:" + booleans + ")$", "i"),
				// For use in libraries implementing .is()
				// We use this for POS matching in `select`
				"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
					whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
			},

			rinputs = /^(?:input|select|textarea|button)$/i,
			rheader = /^h\d$/i,

			rnative = /^[^{]+\{\s*\[native \w/,

			// Easily-parseable/retrievable ID or TAG or CLASS selectors
			rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

			rsibling = /[+~]/,
			rescape = /'|\\/g,

			// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
			runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
			funescape = function (_, escaped, escapedWhitespace) {
				var high = "0x" + escaped - 0x10000;
				// NaN means non-codepoint
				// Support: Firefox<24
				// Workaround erroneous numeric interpretation of +"0x"
				return high !== high || escapedWhitespace ?
					escaped :
					high < 0 ?
						// BMP codepoint
						String.fromCharCode(high + 0x10000) :
						// Supplemental Plane codepoint (surrogate pair)
						String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
			},

			// Used for iframes
			// See setDocument()
			// Removing the function wrapper causes a "Permission Denied"
			// error in IE
			unloadHandler = function () {
				setDocument();
			};

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(
				(arr = slice.call(preferredDoc.childNodes)),
				preferredDoc.childNodes
			);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = {
				apply: arr.length ?

					// Leverage slice if possible
					function (target, els) {
						push_native.apply(target, slice.call(els));
					} :

					// Support: IE<9
					// Otherwise append directly
					function (target, els) {
						var j = target.length,
							i = 0;
						// Can't trust NodeList.length
						while ((target[j++] = els[i++])) { }
						target.length = j - 1;
					}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m, i, elem, nid, nidselect, match, groups, newSelector,
				newContext = context && context.ownerDocument,

				// nodeType defaults to 9, since context defaults to document
				nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector ||
				nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
				if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
					if ((m = match[1])) {

							// Document context
						if (nodeType === 9) {
								if ((elem = context.getElementById(m))) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}

								// Element context
						} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) &&
									contains(context, elem) &&
									elem.id === m) {

								results.push(elem);
								return results;
							}
						}

							// Type selector
					} else if (match[2]) {
						push.apply(results, context.getElementsByTagName(selector));
						return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName &&
							context.getElementsByClassName) {

						push.apply(results, context.getElementsByClassName(m));
						return results;
					}
				}

					// Take advantage of querySelectorAll
					if (support.qsa &&
						!compilerCache[selector + " "] &&
						(!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
					newContext = context;
							newSelector = selector;

							// qSA looks outside Element context, which is not what we want
							// Thanks to Andrew Dupont for this workaround technique
							// Support: IE <=8
							// Exclude object elements
						} else if (context.nodeName.toLowerCase() !== "object") {

							// Capture the context ID, setting it first if necessary
							if ((nid = context.getAttribute("id"))) {
								nid = nid.replace(rescape, "\\$&");
						} else {
								context.setAttribute("id", (nid = expando));
						}

							// Prefix every selector in the list
							groups = tokenize(selector);
						i = groups.length;
							nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
						while (i--) {
								groups[i] = nidselect + " " + toSelector(groups[i]);
						}
						newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) ||
								context;
					}

					if (newSelector) {
						try {
							push.apply(results,
								newContext.querySelectorAll(newSelector)
							);
							return results;
						} catch (qsaError) {
						} finally {
								if (nid === expando) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
		 * Create key-value caches of limited size
		 * @returns {function(string, object)} Returns the Object data after storing it on itself with
		 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
		 *	deleting the oldest entry
		 */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return (cache[key + " "] = value);
			}
			return cache;
		}

		/**
		 * Mark a function for special use by Sizzle
		 * @param {Function} fn The function to mark
		 */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
		 * Support testing using an element
		 * @param {Function} fn Passed the created div and expects a boolean result
		 */
		function assert(fn) {
			var div = document.createElement("div");

			try {
				return !!fn(div);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (div.parentNode) {
					div.parentNode.removeChild(div);
				}
				// release memory in IE
				div = null;
			}
		}

		/**
		 * Adds the same handler for all of the specified attrs
		 * @param {String} attrs Pipe-separated list of attributes
		 * @param {Function} handler The method that will be applied
		 */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
				i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
		 * Checks document order of two siblings
		 * @param {Element} a
		 * @param {Element} b
		 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
		 */
		function siblingCheck(a, b) {
			var cur = b && a,
				diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
					(~b.sourceIndex || MAX_NEGATIVE) -
					(~a.sourceIndex || MAX_NEGATIVE);

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while ((cur = cur.nextSibling)) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
		 * Returns a function to use in pseudos for input types
		 * @param {String} type
		 */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
		 * Returns a function to use in pseudos for buttons
		 * @param {String} type
		 */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
		 * Returns a function to use in pseudos for positionals
		 * @param {Function} fn
		 */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
						matchIndexes = fn([], seed.length, argument),
						i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[(j = matchIndexes[i])]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
		 * Checks a node for validity as a Sizzle context
		 * @param {Element|Object=} context
		 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
		 */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
		 * Detects XML nodes
		 * @param {Element|Object} elem An element or a document
		 * @returns {Boolean} True iff elem is a non-HTML XML node
		 */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
		 * Sets document-related variables once based on the current document
		 * @param {Element|Object} [doc] An element or document object to use to set the document
		 * @returns {Object} Returns the current document
		 */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare, parent,
				doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if ((parent = document.defaultView) && parent.top !== parent) {
				// Support: IE 11
				if (parent.addEventListener) {
					parent.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (parent.attachEvent) {
					parent.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
			---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (div) {
				div.className = "i";
				return !div.getAttribute("className");
			});

			/* getElement(s)By*
			---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (div) {
				div.appendChild(document.createComment(""));
				return !div.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (div) {
				docElem.appendChild(div).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID find and filter
			if (support.getById) {
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var m = context.getElementById(id);
						return m ? [m] : [];
					}
				};
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
			} else {
				// Support: IE6/7
				// getElementById is not reliable as a find shortcut
				delete Expr.find["ID"];

				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" &&
							elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ?
				function (tag, context) {
					if (typeof context.getElementsByTagName !== "undefined") {
						return context.getElementsByTagName(tag);

						// DocumentFragment nodes don't have gEBTN
					} else if (support.qsa) {
						return context.querySelectorAll(tag);
					}
				} :

				function (tag, context) {
					var elem,
						tmp = [],
						i = 0,
						// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
						results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						while ((elem = results[i++])) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
			---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See http://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if ((support.qsa = rnative.test(document.querySelectorAll))) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (div) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// http://bugs.jquery.com/ticket/12359
					docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" +
						"<select id='" + expando + "-\r\\' msallowcapture=''>" +
						"<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (div.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibing-combinator selector` fails
					if (!div.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (div) {
					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					div.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (div.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					div.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
				docElem.webkitMatchesSelector ||
				docElem.mozMatchesSelector ||
				docElem.oMatchesSelector ||
				docElem.msMatchesSelector)))) {

				assert(function (div) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(div, "div");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(div, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
			---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ?
				function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
						bup = b && b.parentNode;
					return a === bup || !!(bup && bup.nodeType === 1 && (
						adown.contains ?
							adown.contains(bup) :
							a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
					));
				} :
				function (a, b) {
					if (b) {
						while ((b = b.parentNode)) {
							if (b === a) {
								return true;
							}
						}
					}
					return false;
				};

			/* Sorting
			---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ?
			function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
					a.compareDocumentPosition(b) :

					// Otherwise we know they are disconnected
					1;

				// Disconnected nodes
				if (compare & 1 ||
					(!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ?
						(indexOf(sortInput, a) - indexOf(sortInput, b)) :
						0;
				}

				return compare & 4 ? -1 : 1;
			} :
			function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
					i = 0,
					aup = a.parentNode,
					bup = b.parentNode,
					ap = [a],
					bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 :
						b === document ? 1 :
						aup ? -1 :
						bup ? 1 :
						sortInput ?
						(indexOf(sortInput, a) - indexOf(sortInput, b)) :
						0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while ((cur = cur.parentNode)) {
					ap.unshift(cur);
				}
				cur = b;
				while ((cur = cur.parentNode)) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
					// Do a sibling check if the nodes have a common ancestor
					siblingCheck(ap[i], bp[i]) :

					// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 :
					bp[i] === preferredDoc ? 1 :
					0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML &&
				!compilerCache[expr + " "] &&
				(!rbuggyMatches || !rbuggyMatches.test(expr)) &&
				(!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
							elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) { }
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],
				// Don't get fooled by Object.prototype properties (jQuery #13807)
				val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
					fn(elem, name, !documentIsHTML) :
					undefined;

			return val !== undefined ?
				val :
				support.attributes || !documentIsHTML ?
					elem.getAttribute(name) :
					(val = elem.getAttributeNode(name)) && val.specified ?
						val.value :
						null;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
		 * Document sorting and removing duplicates
		 * @param {ArrayLike} results
		 */
		Sizzle.uniqueSort = function (results) {
			var elem,
				duplicates = [],
				j = 0,
				i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while ((elem = results[i++])) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
		 * Utility function for retrieving the text value of an array of DOM nodes
		 * @param {Array|Element} elem
		 */
		getText = Sizzle.getText = function (elem) {
			var node,
				ret = "",
				i = 0,
				nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while ((node = elem[i++])) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function (match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function (match) {
					/* matches from matchExpr["CHILD"]
						1 type (only|nth|...)
						2 what (child|of-type)
						3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
						4 xn-component of xn+y argument ([+-]?\d*n|)
						5 sign of xn-component
						6 x of xn-component
						7 sign of y-component
						8 y of y-component
					*/
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +((match[7] + match[8]) || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function (match) {
					var excess,
						unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) &&
						// Get excess from tokenize (recursively)
						(excess = tokenize(unquoted, true)) &&
						// advance to the next closing parenthesis
						(excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function (nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ?
						function () { return true; } :
						function (elem) {
							return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
						};
				},

				"CLASS": function (className) {
					var pattern = classCache[className + " "];

					return pattern ||
						(pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
						classCache(className, function (elem) {
							return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
						});
				},

				"ATTR": function (name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check :
							operator === "!=" ? result !== check :
							operator === "^=" ? check && result.indexOf(check) === 0 :
							operator === "*=" ? check && result.indexOf(check) > -1 :
							operator === "$=" ? check && result.slice(-check.length) === check :
							operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
							operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
							false;
					};
				},

				"CHILD": function (type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
						forward = type.slice(-4) !== "last",
						ofType = what === "of-type";

					return first === 1 && last === 0 ?

						// Shortcut for :nth-*(n)
						function (elem) {
							return !!elem.parentNode;
						} :

						function (elem, context, xml) {
							var cache, uniqueCache, outerCache, node, nodeIndex, start,
								dir = simple !== forward ? "nextSibling" : "previousSibling",
								parent = elem.parentNode,
								name = ofType && elem.nodeName.toLowerCase(),
								useCache = !xml && !ofType,
								diff = false;

							if (parent) {

								// :(first|last|only)-(child|of-type)
								if (simple) {
									while (dir) {
										node = elem;
										while ((node = node[dir])) {
											if (ofType ?
												node.nodeName.toLowerCase() === name :
												node.nodeType === 1) {

												return false;
											}
										}
										// Reverse direction for :only-* (if we haven't yet done so)
										start = dir = type === "only" && !start && "nextSibling";
									}
									return true;
								}

								start = [forward ? parent.firstChild : parent.lastChild];

								// non-xml :nth-child(...) stores cache data on `parent`
								if (forward && useCache) {

									// Seek `elem` from a previously-cached index

									// ...in a gzip-friendly way
									node = parent;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] ||
										(outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex && cache[2];
									node = nodeIndex && parent.childNodes[nodeIndex];

									while ((node = ++nodeIndex && node && node[dir] ||

										// Fallback to seeking `elem` from the start
										(diff = nodeIndex = 0) || start.pop())) {

										// When found, cache indexes on `parent` and break
										if (node.nodeType === 1 && ++diff && node === elem) {
											uniqueCache[type] = [dirruns, nodeIndex, diff];
											break;
										}
									}

								} else {
									// Use previously-cached element index if available
									if (useCache) {
										// ...in a gzip-friendly way
										node = elem;
										outerCache = node[expando] || (node[expando] = {});

										// Support: IE <9 only
										// Defend against cloned attroperties (jQuery gh-1709)
										uniqueCache = outerCache[node.uniqueID] ||
											(outerCache[node.uniqueID] = {});

										cache = uniqueCache[type] || [];
										nodeIndex = cache[0] === dirruns && cache[1];
										diff = nodeIndex;
									}

									// xml :nth-child(...)
									// or :nth-last-child(...) or :nth(-last)?-of-type(...)
									if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while ((node = ++nodeIndex && node && node[dir] ||
										(diff = nodeIndex = 0) || start.pop())) {

											if ((ofType ?
												node.nodeName.toLowerCase() === name :
												node.nodeType === 1) &&
												++diff) {

											// Cache the index of each encountered element
											if (useCache) {
													outerCache = node[expando] || (node[expando] = {});

													// Support: IE <9 only
													// Defend against cloned attroperties (jQuery gh-1709)
													uniqueCache = outerCache[node.uniqueID] ||
														(outerCache[node.uniqueID] = {});

													uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
								}

								// Incorporate the offset, then check against cycle size
								diff -= last;
								return diff === first || (diff % first === 0 && diff / first >= 0);
							}
						};
				},

				"PSEUDO": function (pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
						fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
							Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
							markFunction(function (seed, matches) {
								var idx,
									matched = fn(seed, argument),
									i = matched.length;
								while (i--) {
									idx = indexOf(seed, matched[i]);
									seed[idx] = !(matches[idx] = matched[i]);
								}
							}) :
							function (elem) {
								return fn(elem, 0, args);
							};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
						results = [],
						matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ?
						markFunction(function (seed, matches, context, xml) {
							var elem,
								unmatched = matcher(seed, null, xml, []),
								i = seed.length;

							// Match elements unmatched by `matcher`
							while (i--) {
								if ((elem = unmatched[i])) {
									seed[i] = !(matches[i] = elem);
								}
							}
						}) :
						function (elem, context, xml) {
							input[0] = elem;
							matcher(input, null, xml, results);
							// Don't keep the element (issue #299)
							input[0] = null;
							return !results.pop();
						};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if ((elemLang = documentIsHTML ?
								elem.lang :
								elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function (elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function (elem) {
					return elem === docElem;
				},

				"focus": function (elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": function (elem) {
					return elem.disabled === false;
				},

				"disabled": function (elem) {
					return elem.disabled === true;
				},

				"checked": function (elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
				},

				"selected": function (elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function (elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function (elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function (elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function (elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function (elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" &&
						elem.type === "text" &&

						// Support: IE<8
						// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
						((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() { }
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched, match, tokens, type,
				soFar, groups, preFilters,
				cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push((tokens = []));
				}

				matched = false;

				// Combinators
				if ((match = rcombinators.exec(soFar))) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
						(match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ?
				soFar.length :
				soFar ?
					Sizzle.error(selector) :
					// Cache the tokens
					tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
				len = tokens.length,
				selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
				checkNonElements = base && dir === "parentNode",
				doneName = done++;

			return combinator.first ?
				// Check against closest ancestor/preceding element
				function (elem, context, xml) {
					while ((elem = elem[dir])) {
						if (elem.nodeType === 1 || checkNonElements) {
							return matcher(elem, context, xml);
						}
					}
				} :

				// Check against all ancestor/preceding elements
				function (elem, context, xml) {
					var oldCache, uniqueCache, outerCache,
						newCache = [dirruns, doneName];

					// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
					if (xml) {
						while ((elem = elem[dir])) {
							if (elem.nodeType === 1 || checkNonElements) {
								if (matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					} else {
						while ((elem = elem[dir])) {
							if (elem.nodeType === 1 || checkNonElements) {
								outerCache = elem[expando] || (elem[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

								if ((oldCache = uniqueCache[dir]) &&
									oldCache[0] === dirruns && oldCache[1] === doneName) {

									// Assign to newCache so results back-propagate to previous elements
									return (newCache[2] = oldCache[2]);
								} else {
									// Reuse newcache so results back-propagate to previous elements
									uniqueCache[dir] = newCache;

									// A match means we're done; a fail means we have to keep checking
									if ((newCache[2] = matcher(elem, context, xml))) {
										return true;
									}
								}
							}
						}
					}
				};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ?
				function (elem, context, xml) {
					var i = matchers.length;
					while (i--) {
						if (!matchers[i](elem, context, xml)) {
							return false;
						}
					}
					return true;
				} :
				matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
				len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
				newUnmatched = [],
				i = 0,
				len = unmatched.length,
				mapped = map != null;

			for (; i < len; i++) {
				if ((elem = unmatched[i])) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp, i, elem,
					preMap = [],
					postMap = [],
					preexisting = results.length,

					// Get initial elements from seed or context
					elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

					// Prefilter to get matcher input, preserving a map for seed-results synchronization
					matcherIn = preFilter && (seed || !selector) ?
						condense(elems, preMap, preFilter, context, xml) :
						elems,

					matcherOut = matcher ?
						// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
						postFinder || (seed ? preFilter : preexisting || postFilter) ?

							// ...intermediate processing is necessary
							[] :

							// ...otherwise use results directly
					results :
						matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if ((elem = temp[i])) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i])) {
									// Restore matcherIn since elem is not yet a final match
									temp.push((matcherIn[i] = elem));
								}
							}
							postFinder(null, (matcherOut = []), temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) &&
								(temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(
						matcherOut === results ?
							matcherOut.splice(preexisting, matcherOut.length) :
							matcherOut
					);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext, matcher, j,
				len = tokens.length,
				leadingRelative = Expr.relative[tokens[0].type],
				implicitRelative = leadingRelative || Expr.relative[" "],
				i = leadingRelative ? 1 : 0,

				// The foundational matcher ensures that elements are reachable from top-level context(s)
				matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
				matchAnyContext = addCombinator(function (elem) {
					return indexOf(checkContext, elem) > -1;
				}, implicitRelative, true),
				matchers = [function (elem, context, xml) {
					var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
						(checkContext = context).nodeType ?
							matchContext(elem, context, xml) :
							matchAnyContext(elem, context, xml));
					// Avoid hanging onto element (issue #299)
					checkContext = null;
					return ret;
				}];

			for (; i < len; i++) {
				if ((matcher = Expr.relative[tokens[i].type])) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(
							i > 1 && elementMatcher(matchers),
							i > 1 && toSelector(
								// If the preceding token was a descendant combinator, insert an implicit any-element `*`
								tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })
							).replace(rtrim, "$1"),
							matcher,
							i < j && matcherFromTokens(tokens.slice(i, j)),
							j < len && matcherFromTokens((tokens = tokens.slice(j))),
							j < len && toSelector(tokens)
						);
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
				byElement = elementMatchers.length > 0,
				superMatcher = function (seed, context, xml, results, outermost) {
					var elem, j, matcher,
						matchedCount = 0,
						i = "0",
						unmatched = seed && [],
						setMatched = [],
						contextBackup = outermostContext,
						// We must always have either seed elements or outermost context
						elems = seed || byElement && Expr.find["TAG"]("*", outermost),
						// Use integer dirruns iff this is the outermost matcher
						dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
						len = elems.length;

					if (outermost) {
						outermostContext = context === document || context || outermost;
					}

					// Add elements passing elementMatchers directly to results
					// Support: IE<9, Safari
					// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
					for (; i !== len && (elem = elems[i]) != null; i++) {
						if (byElement && elem) {
							j = 0;
							if (!context && elem.ownerDocument !== document) {
								setDocument(elem);
								xml = !documentIsHTML;
							}
							while ((matcher = elementMatchers[j++])) {
								if (matcher(elem, context || document, xml)) {
									results.push(elem);
									break;
								}
							}
							if (outermost) {
								dirruns = dirrunsUnique;
							}
						}

						// Track unmatched elements for set filters
						if (bySet) {
							// They will have gone through all possible matchers
							if ((elem = !matcher && elem)) {
								matchedCount--;
							}

							// Lengthen the array for every element, matched or not
							if (seed) {
								unmatched.push(elem);
							}
						}
					}

					// `i` is now the count of elements visited above, and adding it to `matchedCount`
					// makes the latter nonnegative.
					matchedCount += i;

					// Apply set filters to unmatched elements
					// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
					// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
					// no element matchers and no seed.
					// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
					// case, which will result in a "00" `matchedCount` that differs from `i` but is also
					// numerically zero.
					if (bySet && i !== matchedCount) {
						j = 0;
						while ((matcher = setMatchers[j++])) {
							matcher(unmatched, setMatched, context, xml);
						}

						if (seed) {
							// Reintegrate element matches to eliminate the need for sorting
							if (matchedCount > 0) {
								while (i--) {
									if (!(unmatched[i] || setMatched[i])) {
										setMatched[i] = pop.call(results);
									}
								}
							}

							// Discard index placeholder values to get only actual matches
							setMatched = condense(setMatched);
						}

						// Add matches to results
						push.apply(results, setMatched);

						// Seedless set matches succeeding multiple successful matchers stipulate sorting
						if (outermost && !seed && setMatched.length > 0 &&
							(matchedCount + setMatchers.length) > 1) {

							Sizzle.uniqueSort(results);
						}
					}

					// Override manipulation of globals by nested matchers
					if (outermost) {
						dirruns = dirrunsUnique;
						outermostContext = contextBackup;
					}

					return unmatched;
				};

			return bySet ?
				markFunction(superMatcher) :
				superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
				setMatchers = [],
				elementMatchers = [],
				cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
		 * A low-level selection function that works with Sizzle's compiled
		 *  selector functions
		 * @param {String|Function} selector A selector or a pre-compiled
		 *  selector function built with Sizzle.compile
		 * @param {Element} context
		 * @param {Array} [results]
		 * @param {Array} [seed] A set of elements to match against
		 */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i, tokens, token, type, find,
				compiled = typeof selector === "function" && selector,
				match = !seed && tokenize((selector = compiled.selector || selector));

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
						support.getById && context.nodeType === 9 && documentIsHTML &&
						Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[(type = token.type)]) {
						break;
					}
					if ((find = Expr.find[type])) {
						// Search, expanding context for leading sibling combinators
						if ((seed = find(
							token.matches[0].replace(runescape, funescape),
							rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
						))) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(
				seed,
				context,
				!documentIsHTML,
				results,
				!context || rsibling.test(selector) && testContext(context.parentNode) || context
			);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (div1) {
			// Should return 1, but returns 4 (following)
			return div1.compareDocumentPosition(document.createElement("div")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (div) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (div) {
			div.innerHTML = "<input/>";
			div.firstChild.setAttribute("value", "");
			return div.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (div) {
			return div.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() :
							(val = elem.getAttributeNode(name)) && val.specified ?
							val.value :
						null;
				}
			});
		}

		return Sizzle;

	})(window);



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function (elem, dir, until) {
		var matched = [],
			truncate = until !== undefined;

		while ((elem = elem[dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};


	var siblings = function (n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = (/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/);



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				/* jshint -W018 */
				return !!qualifier.call(elem, i, elem) !== not;
			});

		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return (elem === qualifier) !== not;
			});

		}

		if (typeof qualifier === "string") {
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			qualifier = jQuery.filter(qualifier, elements);
		}

		return jQuery.grep(elements, function (elem) {
			return (indexOf.call(qualifier, elem) > -1) !== not;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
			jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
				return elem.nodeType === 1;
			}));
	};

	jQuery.fn.extend({
		find: function (selector) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function (selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function (selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function (selector) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test(selector) ?
					jQuery(selector) :
					selector || [],
				false
			).length;
		}
	});


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function (selector, context, root) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector[0] === "<" &&
					selector[selector.length - 1] === ">" &&
					selector.length >= 3) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];

				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge(this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						));

						// HANDLE: $(html, props)
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							for (match in context) {

								// Properties of context are called as methods if possible
								if (jQuery.isFunction(this[match])) {
									this[match](context[match]);

									// ...and otherwise set as attributes
								} else {
									this.attr(match, context[match]);
								}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
						elem = document.getElementById(match[2]);

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if (elem && elem.parentNode) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
					return (context || root).find(selector);

					// HANDLE: $(expr, context)
					// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor(context).find(selector);
				}

				// HANDLE: $(DOMElement)
			} else if (selector.nodeType) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

				// HANDLE: $(function)
				// Shortcut for document ready
			} else if (jQuery.isFunction(selector)) {
				return root.ready !== undefined ?
					root.ready(selector) :

					// Execute immediately if ready is not present
					selector(jQuery);
			}

			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray(selector, this);
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend({
		has: function (target) {
			var targets = jQuery(target, this),
				l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function (selectors, context) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
					jQuery(selectors, context || this.context) :
					0;

			for (; i < l; i++) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

					// Always skip document fragments
					if (cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors))) {

						matched.push(cur);
						break;
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function (elem) {

			// No argument, return index in parent
			if (!elem) {
				return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem
			);
		},

		add: function (selector, context) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge(this.get(), jQuery(selector, context))
				)
			);
		},

		addBack: function (selector) {
			return this.add(selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) { }
		return cur;
	}

	jQuery.each({
		parent: function (elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function (elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function (elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function (elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function (elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function (elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function (elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function (elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function (elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function (elem) {
			return siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function (elem) {
			return siblings(elem.firstChild);
		},
		contents: function (elem) {
			return elem.contentDocument || jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnotwhite = (/\S+/g);



	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions(options) :
			jQuery.extend({}, options);

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function () {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for (; queue.length; firingIndex = -1) {
					memory = queue.shift();
					while (++firingIndex < list.length) {

						// Run callback and check for early termination
						if (list[firingIndex].apply(memory[0], memory[1]) === false &&
							options.stopOnFalse) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
					}
				}
						}

				// Forget the data if we're done with it
				if (!options.memory) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if (locked) {

					// Keep an empty list if we have data for future add calls
					if (memory) {
						list = [];

						// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function () {
					if (list) {

						// If we have memory from a past run, we should fire after adding
						if (memory && !firing) {
							firingIndex = list.length - 1;
							queue.push(memory);
						}

						(function add(args) {
							jQuery.each(args, function (_, arg) {
								if (jQuery.isFunction(arg)) {
									if (!options.unique || !self.has(arg)) {
										list.push(arg);
									}
								} else if (arg && arg.length && jQuery.type(arg) !== "string") {

									// Inspect recursively
									add(arg);
								}
							});
						})(arguments);

						if (memory && !firing) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function () {
						jQuery.each(arguments, function (_, arg) {
							var index;
							while ((index = jQuery.inArray(arg, list, index)) > -1) {
								list.splice(index, 1);

								// Handle firing indexes
									if (index <= firingIndex) {
										firingIndex--;
									}
								}
						});
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function (fn) {
					return fn ?
						jQuery.inArray(fn, list) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function () {
					if (list) {
					list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function () {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function () {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function () {
					locked = queue = [];
					if (!memory) {
						list = memory = "";
					}
					return this;
				},
				locked: function () {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function (context, args) {
					if (!locked) {
						args = args || [];
						args = [context, args.slice ? args.slice() : args];
						queue.push(args);
						if (!firing) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function () {
					self.fireWith(this, arguments);
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function () {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend({

		Deferred: function (func) {
			var tuples = [

					// action, add listener, listener list, final state
					["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
					["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
					["notify", "progress", jQuery.Callbacks("memory")]
			],
				state = "pending",
				promise = {
					state: function () {
						return state;
					},
					always: function () {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					then: function ( /* fnDone, fnFail, fnProgress */) {
						var fns = arguments;
						return jQuery.Deferred(function (newDefer) {
							jQuery.each(tuples, function (i, tuple) {
								var fn = jQuery.isFunction(fns[i]) && fns[i];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[tuple[1]](function () {
									var returned = fn && fn.apply(this, arguments);
									if (returned && jQuery.isFunction(returned.promise)) {
										returned.promise()
											.progress(newDefer.notify)
											.done(newDefer.resolve)
											.fail(newDefer.reject);
									} else {
										newDefer[tuple[0] + "With"](
											this === promise ? newDefer.promise() : this,
											fn ? [returned] : arguments
										);
									}
								});
							});
							fns = null;
						}).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function (obj) {
						return obj != null ? jQuery.extend(obj, promise) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
					stateString = tuple[3];

				// promise[ done | fail | progress ] = list.add
				promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = [ resolved | rejected ]
						state = stateString;

						// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				// deferred[ resolve | reject | notify ]
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
					return this;
				};
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function (subordinate /* , ..., subordinateN */) {
			var i = 0,
				resolveValues = slice.call(arguments),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					(subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function (i, contexts, values) {
					return function (value) {
						contexts[i] = this;
						values[i] = arguments.length > 1 ? slice.call(arguments) : value;
						if (values === progressValues) {
							deferred.notifyWith(contexts, values);
						} else if (!(--remaining)) {
							deferred.resolveWith(contexts, values);
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise()
							.progress(updateFunc(i, progressContexts, progressValues))
							.done(updateFunc(i, resolveContexts, resolveValues))
							.fail(deferred.reject);
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function (fn) {

		// Add the callback
		jQuery.ready.promise().done(fn);

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function (hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		// Handle when the DOM is ready
		ready: function (wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);

			// Trigger any bound ready events
			if (jQuery.fn.triggerHandler) {
				jQuery(document).triggerHandler("ready");
				jQuery(document).off("ready");
			}
		}
	});

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if (document.readyState === "complete" ||
				(document.readyState !== "loading" && !document.documentElement.doScroll)) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout(jQuery.ready);

			} else {

				// Use the handy event callback
				document.addEventListener("DOMContentLoaded", completed);

				// A fallback to window.onload, that will always work
				window.addEventListener("load", completed);
			}
		}
		return readyList.promise(obj);
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function (elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(
						elems[i], key, raw ?
						value :
						value.call(elems[i], i, fn(elems[i], key))
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call(elems) :
				len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function (owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function (owner, initial) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if (owner.nodeType) {
				owner[this.expando] = value;

				// Otherwise secure it in a non-enumerable, non-writable property
				// configurability must be true to allow the property to be
				// deleted with the delete operator
			} else {
				Object.defineProperty(owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				});
			}
			return owner[this.expando];
		},
		cache: function (owner) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if (!acceptData(owner)) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
				}
			}
			}

			return value;
		},
		set: function (owner, data, value) {
			var prop,
				cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			if (typeof data === "string") {
				cache[data] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
					for (prop in data) {
						cache[prop] = data[prop];
					}
				}
			return cache;
		},
		get: function (owner, key) {
			return key === undefined ?
				this.cache(owner) :
				owner[this.expando] && owner[this.expando][key];
		},
		access: function (owner, key, value) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined ||
					((key && typeof key === "string") && value === undefined)) {

				stored = this.get(owner, key);

				return stored !== undefined ?
					stored : this.get(owner, jQuery.camelCase(key));
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function (owner, key) {
			var i, name, camel,
				cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key === undefined) {
				this.register(owner);

			} else {

				// Support array or space separated string of keys
				if (jQuery.isArray(key)) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat(key.map(jQuery.camelCase));
				} else {
					camel = jQuery.camelCase(key);

					// Try the string as a key before any manipulation
					if (key in cache) {
						name = [key, camel];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[name] : (name.match(rnotwhite) || []);
					}
				}

				i = name.length;

				while (i--) {
					delete cache[name[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function (owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test(data) ? jQuery.parseJSON(data) :
						data;
				} catch (e) { }

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function (elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function (elem, name, data) {
			return dataUser.access(elem, name, data);
		},

		removeData: function (elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function (elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function (elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function (key, value) {
			var i, name, data,
				elem = this[0],
				attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if (typeof key === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get(elem, key) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

					if (data !== undefined) {
						return data;
					}

					camelKey = jQuery.camelCase(key);

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get(elem, camelKey);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, camelKey, undefined);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase(key);
				this.each(function () {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get(this, camelKey);

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set(this, camelKey, value);

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if (key.indexOf("-") > -1 && data !== undefined) {
						dataUser.set(this, key, value);
					}
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function (key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});


	jQuery.extend({
		queue: function (elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function (elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks(elem, type),
				next = function () {
					jQuery.dequeue(elem, type);
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function (elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function (type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ?
				this :
				this.each(function () {
					var queue = jQuery.queue(this, type, data);

					// Ensure a hooks for this queue
					jQuery._queueHooks(this, type);

					if (type === "fx" && queue[0] !== "inprogress") {
						jQuery.dequeue(this, type);
					}
				});
		},
		dequeue: function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function (type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function (type, obj) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function () {
					if (!(--count)) {
						defer.resolveWith(elements, [elements]);
					}
				};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");


	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHidden = function (elem, el) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" ||
			!jQuery.contains(elem.ownerDocument, elem);
	};



	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function () { return tween.cur(); } :
				function () { return jQuery.css(elem, prop, ""); },
			initial = currentValue(),
			unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
				rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

				// Update scale, tolerating zero or NaN from tween.cur()
				// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations
			);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ?
				initialInUnit + (valueParts[1] + 1) * valueParts[2] :
				+valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = (/^(?:checkbox|radio)$/i);

	var rtagName = (/<([\w:-]+)/);

	var rscriptType = (/^$|\/(?:java|ecma)script/i);



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll(context, tag) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName(tag || "*") :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll(tag || "*") :
				[];

		return tag === undefined || tag && jQuery.nodeName(context, tag) ?
			jQuery.merge([context], ret) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
			l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(
				elems[i],
				"globalEval",
				!refElements || dataPriv.get(refElements[i], "globalEval")
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (jQuery.type(elem) === "object") {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ((elem = nodes[i++])) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (contains) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while ((elem = tmp[j++])) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}


	(function () {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild(document.createElement("div")),
			input = document.createElement("input");

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) { }
	}

	function on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if (typeof types === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function (event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function (elem, types, handler, data, selector) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup ||
						special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function (elem, types, handler, selector, mappedTypes) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] &&
					new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) &&
						(!handler || handler.guid === handleObj.guid) &&
						(!tmp || tmp.test(handleObj.namespace)) &&
						(!selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown ||
						special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function (event) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix(event);

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call(arguments),
				handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
				special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) &&
					!event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
							handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function (event, handlers) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if (delegateCount && cur.nodeType &&
				(event.type !== "click" || isNaN(event.button) || event.button < 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matches[sel] === undefined) {
								matches[sel] = handleObj.needsContext ?
									jQuery(sel, this).index(cur) > -1 :
									jQuery.find(sel, this, null, [cur]).length;
							}
							if (matches[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if (delegateCount < handlers.length) {
				handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function (event, original) {

				// Add which for key events
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ("button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement").split(" "),
			filter: function (event, original) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						(doc && doc.scrollLeft || body && body.scrollLeft || 0) -
						(doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY +
						(doc && doc.scrollTop || body && body.scrollTop || 0) -
						(doc && doc.clientTop || body && body.clientTop || 0);
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if (!event.which && button !== undefined) {
					event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
				}

				return event;
			}
		},

		fix: function (event) {
			if (event[jQuery.expando]) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[type];

			if (!fixHook) {
				this.fixHooks[type] = fixHook =
					rmouseEvent.test(type) ? this.mouseHooks :
					rkeyEvent.test(type) ? this.keyHooks :
				{};
			}
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = new jQuery.Event(originalEvent);

			i = copy.length;
			while (i--) {
				prop = copy[i];
				event[prop] = originalEvent[prop];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if (!event.target) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function () {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function () {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function () {
					if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function (event) {
					return jQuery.nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function (event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
			}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function () {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e) {
				e.preventDefault();
			}
		},
		stopPropagation: function () {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function () {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function (event) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || (related !== target && !jQuery.contains(target, related))) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({
		on: function (types, selector, data, fn) {
			return on(this, types, selector, data, fn);
		},
		one: function (types, selector, data, fn) {
			return on(this, types, selector, data, fn, 1);
		},
		off: function (types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if (typeof types === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Manipulating tables requires a tbody
	function manipulationTarget(elem, content) {
		return jQuery.nodeName(elem, "table") &&
			jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ?

			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild(elem.ownerDocument.createElement("tbody")) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
	}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (isFunction ||
				(l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test(value))) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
	}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") &&
							!dataPriv.access(node, "globalEval") &&
							jQuery.contains(doc, node)) {

							if (node.src) {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove(elem, selector, keepData) {
		var node,
			nodes = selector ? jQuery.filter(selector, elem) : elem,
			i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function (html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function (elem, dataAndEvents, deepDataAndEvents) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode(true),
				inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
					!jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function (elems) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if ((data = elem[dataPriv.expando])) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
						}
					if (elem[dataUser.expando]) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function (selector) {
			return remove(this, selector, true);
		},

		remove: function (selector) {
			return remove(this, selector);
		},

		text: function (value) {
			return access(this, function (value) {
				return value === undefined ?
					jQuery.text(this) :
					this.empty().each(function () {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							this.textContent = value;
						}
					});
			}, null, value, arguments.length);
		},

		append: function () {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function () {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function () {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function () {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function () {
			var elem,
				i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function (dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function (value) {
			return access(this, function (value) {
				var elem = this[0] || {},
					i = 0,
					l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) &&
					!wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) { }
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function () {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
				jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
				}
					}

				// Force callback invocation
			}, ignored);
				}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
				ret = [],
				insert = jQuery(selector),
				last = insert.length - 1,
				i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay(name, doc) {
		var elem = jQuery(doc.createElement(name)).appendTo(doc.body),

			display = jQuery.css(elem[0], "display");

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay(nodeName) {
		var doc = document,
			display = elemdisplay[nodeName];

		if (!display) {
			display = actualDisplay(nodeName, doc);

			// If the simple way fails, read from inside an iframe
			if (display === "none" || !display) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>"))
					.appendTo(doc.documentElement);

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[0].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay(nodeName, doc);
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[nodeName] = display;
		}

		return display;
	}
	var rmargin = (/^margin/);

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function (elem) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	var swap = function (elem, options, callback, args) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
			}

		return ret;
	};


	var documentElement = document.documentElement;



	(function () {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement("div"),
			div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);
		}

			jQuery.extend(support, {
				pixelPosition: function () {

					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
				computeStyleTests();
					return pixelPositionVal;
				},
				boxSizingReliable: function () {
					if (boxSizingReliableVal == null) {
					computeStyleTests();
					}
					return boxSizingReliableVal;
				},
			pixelMarginRight: function () {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function () {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
				reliableMarginRight: function () {

					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
						marginDiv = div.appendChild(document.createElement("div"));

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
						// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
				documentElement.appendChild(container);

				ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);

				documentElement.removeChild(container);
					div.removeChild(marginDiv);

					return ret;
				}
			});
	})();


	function curCSS(elem, name, computed) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles(elem);
		ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
			ret = jQuery.style(elem, name);
		}

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if (computed) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
		}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function () {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
	};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = ["Webkit", "O", "Moz", "ms"],
		emptyStyle = document.createElement("div").style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name) {

		// Shortcut for names that are not vendor prefixed
		if (name in emptyStyle) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
			i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") :
			value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i = extra === (isBorderBox ? "border" : "content") ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for (; i < 4; i += 2) {

			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles(elem),
			isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if (document.msFullscreenElement && window.top !== window) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if (elem.getClientRects().length) {
				val = Math.round(elem.getBoundingClientRect()[name] * 100);
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if (val <= 0 || val == null) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS(elem, name, styles);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				(support.boxSizingReliable() || val === elem.style[name]);

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return (val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || (isBorderBox ? "border" : "content"),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide(elements, show) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			values[index] = dataPriv.get(elem, "olddisplay");
			display = elem.style.display;
			if (show) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if (!values[index] && display === "none") {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay(elem.nodeName)
					);
				}
			} else {
				hidden = isHidden(elem);

				if (display !== "none" || !hidden) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css(elem, "display")
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function (elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function (elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase(name),
				style = elem.style;

			name = jQuery.cssProps[origName] ||
				(jQuery.cssProps[origName] = vendorPropName(origName) || origName);

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) ||
					(value = hooks.set(elem, value, extra)) !== undefined) {

					style[name] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks &&
					(ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function (elem, name, extra, styles) {
			var val, num, hooks,
				origName = jQuery.camelCase(name);

			// Make sure that we're working with the right name
			name = jQuery.cssProps[origName] ||
				(jQuery.cssProps[origName] = vendorPropName(origName) || origName);

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function (elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) &&
						elem.offsetWidth === 0 ?
							swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						}) :
						getWidthOrHeight(elem, name, extra);
				}
			},

			set: function (elem, value, extra) {
				var matches,
					styles = extra && getStyles(elem),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css(elem, "boxSizing", false, styles) === "border-box",
						styles
				);

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) &&
					(matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
			}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
		function (elem, computed) {
			if (computed) {
				return (parseFloat(curCSS(elem, "marginLeft")) ||
					elem.getBoundingClientRect().left -
						swap(elem, { marginLeft: 0 }, function () {
							return elem.getBoundingClientRect().left;
						})
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,
		function (elem, computed) {
			if (computed) {
				return swap(elem, { "display": "inline-block" },
					curCSS, [elem, "marginRight"]);
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function (value) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] =
						parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function (name, value) {
			return access(this, function (elem, name, value) {
				var styles, len,
					map = {},
					i = 0;

				if (jQuery.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style(elem, name, value) :
					jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function () {
			return showHide(this, true);
		},
		hide: function () {
			return showHide(this);
		},
		toggle: function (state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});


	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function (elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function () {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ?
				hooks.get(this) :
				Tween.propHooks._default.get(this);
		},
		run: function (percent) {
			var eased,
				hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function (tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 ||
					tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function (tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 &&
					(tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
						jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function (tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function (p) {
			return p;
		},
		swing: function (p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return (fxNow = jQuery.now());
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4 ; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
			collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
			index = 0,
			length = collection.length;
		for (; index < length; index++) {
			if ((tween = collection[index].call(animation, prop, value))) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden(elem),
			dataShow = dataPriv.get(elem, "fxshow");

		// Handle queue: false promises
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Height/width overflow pass
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css(elem, "display");

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

			if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
				style.display = "inline-block";
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// show/hide pass
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.exec(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

				// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if (!jQuery.isEmptyObject(orig)) {
			if (dataShow) {
				if ("hidden" in dataShow) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access(elem, "fxshow", {});
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;

				dataPriv.remove(elem, "fxshow");
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (prop in orig) {
				tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

			// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
			style.display = display;
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always(function () {

				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function () {
				if (stopped) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for (; index < length ; index++) {
					animation.tweens[index].run(percent);
				}

				deferred.notifyWith(elem, [animation, percent, remaining]);

				if (percent < 1 && length) {
					return remaining;
				} else {
					deferred.resolveWith(elem, [animation]);
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function (prop, end) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end,
							animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function (gotoEnd) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if (stopped) {
						return this;
					}
					stopped = true;
					for (; index < length ; index++) {
						animation.tweens[index].run(1);
					}

					// Resolve when we played the last frame; otherwise, reject
					if (gotoEnd) {
						deferred.notifyWith(elem, [animation, 1, 0]);
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
			props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length ; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
						jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(
			jQuery.extend(tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);

		// attach callbacks from options
		return animation.progress(animation.opts.progress)
			.done(animation.opts.done, animation.opts.complete)
			.fail(animation.opts.fail)
			.always(animation.opts.always);
	}

	jQuery.Animation = jQuery.extend(Animation, {
		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function (props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnotwhite);
			}

			var prop,
				index = 0,
				length = props.length;

			for (; index < length ; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function (callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function (speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHidden).css("opacity", 0).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function (prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
				optall = jQuery.speed(speed, easing, callback),
				doAnimation = function () {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation(this, jQuery.extend({}, prop), optall);

					// Empty animations, or finishing resolves immediately
					if (empty || dataPriv.get(this, "finish")) {
						anim.stop(true);
					}
				};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each(doAnimation) :
				this.queue(optall.queue, doAnimation);
		},
		stop: function (type, clearQueue, gotoEnd) {
			var stopQueue = function (hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this &&
						(type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function (type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
					data = dataPriv.get(this),
					queue = data[type + "queue"],
					hooks = data[type + "queueHooks"],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply(this, arguments) :
				this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Checks the timer has not already been removed
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		if (timer()) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (!timerId) {
			timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.stop = function () {
		window.clearInterval(timerId);

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};


	(function () {
		var input = document.createElement("input"),
			select = document.createElement("select"),
			opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function (name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function (name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function (elem, name, value) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] ||
					(jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks &&
					(ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

					elem.setAttribute(name, value + "");
					return value;
				}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function (elem, value) {
					if (!support.radioValue && value === "radio" &&
						jQuery.nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
			}
						return value;
					}
				}
			}
		},

		removeAttr: function (elem, value) {
			var name, propName,
				i = 0,
				attrNames = value && value.match(rnotwhite);

			if (attrNames && elem.nodeType === 1) {
				while ((name = attrNames[i++])) {
					propName = jQuery.propFix[name] || name;

					// Boolean attributes get special treatment (#10870)
					if (jQuery.expr.match.bool.test(name)) {

						// Set corresponding property to false
						elem[propName] = false;
					}

					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function (elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};
	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret, handle;
			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[name];
				attrHandle[name] = ret;
				ret = getter(elem, name, isXML) != null ?
					name.toLowerCase() :
					null;
				attrHandle[name] = handle;
			}
			return ret;
		};
	});




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function (name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function (name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function (elem, name, value) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks &&
					(ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return (elem[name] = value);
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function (elem) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					return tabindex ?
						parseInt(tabindex, 10) :
						rfocusable.test(elem.nodeName) ||
							rclickable.test(elem.nodeName) && elem.href ?
								0 :
						-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function (elem) {
				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function (elem) {
				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});




	var rclass = /[\t\r\n\f]/g;

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function (value) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnotwhite) || [];

				while ((elem = this[i++])) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 &&
						(" " + curValue + " ").replace(rclass, " ");

					if (cur) {
						j = 0;
						while ((clazz = classes[j++])) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function (value) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnotwhite) || [];

				while ((elem = this[i++])) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						(" " + curValue + " ").replace(rclass, " ");

					if (cur) {
						j = 0;
						while ((clazz = classes[j++])) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function (value, stateVal) {
			var type = typeof value;

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(
						value.call(this, i, getClass(this), stateVal),
						stateVal
					);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
						classNames = value.match(rnotwhite) || [];

					while ((className = classNames[i++])) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class",
							className || value === false ?
							"" :
							dataPriv.get(this, "__className__") || ""
						);
					}
				}
			});
		},

		hasClass: function (selector) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ((elem = this[i++])) {
				if (elem.nodeType === 1 &&
					(" " + getClass(elem) + " ").replace(rclass, " ")
						.indexOf(className) > -1
				) {
					return true;
				}
			}

			return false;
		}
	});




	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend({
		val: function (value) {
			var hooks, ret, isFunction,
				elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] ||
						jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks &&
						"get" in hooks &&
						(ret = hooks.get(elem, "value")) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace(rreturn, "") :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";

				} else if (typeof val === "number") {
					val += "";

				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function (elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim(jQuery.text(elem)).replace(rspaces, " ");
				}
			},
			select: {
				get: function (elem) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
						max :
							one ? index : 0;

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

							// Don't return options that are disabled or in a disabled optgroup
								(support.optDisabled ?
									!option.disabled : option.getAttribute("disabled") === null) &&
								(!option.parentNode.disabled ||
									!jQuery.nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function (elem, value) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray(value),
						i = options.length;

					while (i--) {
						option = options[i];
						if (option.selected =
							jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function (elem, value) {
				if (jQuery.isArray(value)) {
					return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function (event, data, elem, onlyHandlers) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [elem || document],
				type = hasOwn.call(event, "type") ? event.type : event,
				namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ?
				event :
				new jQuery.Event(type, typeof event === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ?
				new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[event] :
				jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] &&
					dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default ||
					special._default.apply(eventPath.pop(), data) === false) &&
					acceptData(elem)) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function (type, elem, event) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the 1.x branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger(e, null, elem);

			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		}

	});

	jQuery.fn.extend({

		trigger: function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function (type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});


	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "),
		function (i, name) {

			// Handle event binding
			jQuery.fn[name] = function (data, fn) {
				return arguments.length > 0 ?
					this.on(name, null, data, fn) :
					this.trigger(name);
			};
		});

	jQuery.fn.extend({
		hover: function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function (event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function () {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
		},
				teardown: function () {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);

					} else {
						dataPriv.access(doc, fix, attaches);
					}
		}
			};
	});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = (/\?/);



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function (data) {
		return JSON.parse(data + "");
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE9
		try {
			xml = (new window.DOMParser()).parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*"),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

			if (jQuery.isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while ((dataType = dataTypes[i++])) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
			seekingTransport = (structure === transports);

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] ||
									converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function (target, settings) {
			return settings ?

				// Building a settings object
				ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

				// Extending ajaxSettings
				ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function (url, options) {

			// If url is an object, simulate pre-1.5 signature
			if (typeof url === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup({}, options),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					(callbackContext.nodeType || callbackContext.jquery) ?
					jQuery(callbackContext) :
					jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function (key) {
						var match;
						if (state === 2) {
							if (!responseHeaders) {
								responseHeaders = {};
								while ((match = rheaders.exec(responseHeadersString))) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function () {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function (name, value) {
						var lname = name.toLowerCase();
						if (!state) {
							name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
							requestHeaders[name] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function (type) {
						if (!state) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function (map) {
						var code;
						if (map) {
							if (state < 2) {
								for (code in map) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[code] = [statusCode[code], map[code]];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always(map[jqXHR.status]);
							}
						}
						return this;
					},

					// Cancel the request
					abort: function (statusText) {
						var finalText = statusText || strAbort;
						if (transport) {
							transport.abort(finalText);
						}
						done(0, finalText);
						return this;
					}
				};

			// Attach deferreds
			deferred.promise(jqXHR).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rhash, "")
				.replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (state === 2) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if (!s.hasContent) {

				// If data is available, append data to url
				if (s.data) {
					cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if (s.cache === false) {
					s.url = rts.test(cacheURL) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace(rts, "$1_=" + nonce++) :

						// Otherwise add one to the end
						cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
					s.accepts[s.dataTypes[0]] +
						(s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
					s.accepts["*"]
			);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend &&
				(s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for (i in { success: 1, error: 1, complete: 1 }) {
				jqXHR[i](s[i]);
			}

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (state === 2) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Propagate exception as error if not done
					if (state < 2) {
						done(-1, e);

						// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if (state === 2) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(statusCode);
				statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError",
						[jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (!(--jQuery.active)) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function (url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function (url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});


	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};


	jQuery.fn.extend({
		wrapAll: function (html) {
			var wrap;

			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
					contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);

				} else {
					self.append(html);
				}
			});
		},

		wrap: function (html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function () {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		}
	});


	jQuery.expr.filters.hidden = function (elem) {
		return !jQuery.expr.filters.visible(elem);
	};
	jQuery.expr.filters.visible = function (elem) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
						v,
						traditional,
						add
					);
				}
			});

		} else if (!traditional && jQuery.type(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}

		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
			s = [],
			add = function (key, value) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	};

	jQuery.fn.extend({
		serialize: function () {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function () {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			})
			.filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") &&
					rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
					(this.checked || !rcheckableType.test(type));
			})
			.map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ?
					null :
					jQuery.isArray(val) ?
						jQuery.map(val, function (val) {
							return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
						}) :
					{ name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});


	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) { }
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function (headers, complete) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					callback = function (type) {
						return function () {
							if (callback) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
									complete(

											// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
									}
								} else {
									complete(
										xhrSuccessStatus[xhr.status] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										(xhr.responseType || "text") !== "text" ||
										typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback("error");

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					callback = callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (callback) {
							throw e;
						}
					}
				},

				abort: function () {
					if (callback) {
						callback();
					}
				}
			};
		}
	});




	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function (text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, callback;
			return {
				send: function (_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on(
						"load error",
						callback = function (evt) {
							script.remove();
							callback = null;
							if (evt) {
								complete(evt.type === "error" ? 404 : 200, evt.type);
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function () {
					if (callback) {
						callback();
					}
				}
			};
		}
	});




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
				"url" :
				typeof s.data === "string" &&
					(s.contentType || "")
						.indexOf("application/x-www-form-urlencoded") === 0 &&
					rjsonp.test(s.data) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
				window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});




	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (!data || typeof data !== "string") {
			return null;
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec(data),
			scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		var selector, type, response,
			self = this,
			off = url.indexOf(" ");

		if (off > -1) {
			selector = jQuery.trim(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && typeof params === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

					// Otherwise use the full result
					responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each([
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});




	jQuery.expr.filters.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function (elem, options, i) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css(elem, "position"),
				curElem = jQuery(elem),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") &&
				(curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = (options.top - curOffset.top) + curTop;
			}
			if (options.left != null) {
				props.left = (options.left - curOffset.left) + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);

			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function (options) {
			if (arguments.length) {
				return options === undefined ?
					this :
					this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
					});
			}

			var docElem, win,
				elem = this[0],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if (!doc) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if (!jQuery.contains(docElem, elem)) {
				return box;
			}

				box = elem.getBoundingClientRect();
			win = getWindow(doc);
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function () {
			if (!this[0]) {
				return;
			}

			var offsetParent, offset,
				elem = this[0],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!jQuery.nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
				parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function () {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
			function (elem, computed) {
				if (computed) {
					computed = curCSS(elem, prop);

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test(computed) ?
						jQuery(elem).position()[prop] + "px" :
						computed;
				}
			}
		);
	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name },
			function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
					extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body["scroll" + name], doc["scroll" + name],
							elem.body["offset" + name], doc["offset" + name],
							doc["client" + name]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css(elem, type, extra) :

						// Set width or height on the element
						jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});


	jQuery.fn.extend({

		bind: function (types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function (types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function (selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function (selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off(selector, "**") :
				this.off(types, selector || "**", fn);
		},
		size: function () {
		return this.length;
		}
	});

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
}));


///////////////////////////////// VZRF CODE BELOW /////////////////////////////////////////
// Immediately call noConflict and make $vf jQuery Alias for VZRF.
var $vf = jQuery.noConflict();


'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Flickity PACKAGED v2.0.9
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * http://flickity.metafizzy.co
 * Copyright 2017 Metafizzy
 */

/**
 * Bridget makes jQuery widgets
 * v2.0.1
 * MIT license
 */

/* jshint browser: true, strict: true, undef: true, unused: true */

;(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /* globals define, module, require */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('jquery-bridget/jquery-bridget', ['jquery'], function (jQuery) {
      return factory(window, jQuery);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('jquery'));
  } else {
    // browser global
    window.jQueryBridget = factory(window, window.jQuery);
  }
})(window, function factory(window, jQuery) {
  'use strict';

  // ----- utils ----- //

  var arraySlice = Array.prototype.slice;

  // helper function for logging errors
  // $.error breaks jQuery chaining
  var console = window.console;
  var logError = typeof console == 'undefined' ? function () {} : function (message) {
    console.error(message);
  };

  // ----- jQueryBridget ----- //

  function jQueryBridget(namespace, PluginClass, $) {
    $ = $ || jQuery || window.jQuery;
    if (!$) {
      return;
    }

    // add option method -> $().plugin('option', {...})
    if (!PluginClass.prototype.option) {
      // option setter
      PluginClass.prototype.option = function (opts) {
        // bail out if not an object
        if (!$.isPlainObject(opts)) {
          return;
        }
        this.options = $.extend(true, this.options, opts);
      };
    }

    // make jQuery plugin
    $.fn[namespace] = function (arg0 /*, arg1 */) {
      if (typeof arg0 == 'string') {
        // method call $().plugin( 'methodName', { options } )
        // shift arguments by 1
        var args = arraySlice.call(arguments, 1);
        return methodCall(this, arg0, args);
      }
      // just $().plugin({ options })
      plainCall(this, arg0);
      return this;
    };

    // $().plugin('methodName')
    function methodCall($elems, methodName, args) {
      var returnValue;
      var pluginMethodStr = '$().' + namespace + '("' + methodName + '")';

      $elems.each(function (i, elem) {
        // get instance
        var instance = $.data(elem, namespace);
        if (!instance) {
          logError(namespace + ' not initialized. Cannot call methods, i.e. ' + pluginMethodStr);
          return;
        }

        var method = instance[methodName];
        if (!method || methodName.charAt(0) == '_') {
          logError(pluginMethodStr + ' is not a valid method');
          return;
        }

        // apply method, get return value
        var value = method.apply(instance, args);
        // set return value if value is returned, use only first value
        returnValue = returnValue === undefined ? value : returnValue;
      });

      return returnValue !== undefined ? returnValue : $elems;
    }

    function plainCall($elems, options) {
      $elems.each(function (i, elem) {
        var instance = $.data(elem, namespace);
        if (instance) {
          // set options & init
          instance.option(options);
          instance._init();
        } else {
          // initialize new instance
          instance = new PluginClass(elem, options);
          $.data(elem, namespace, instance);
        }
      });
    }

    updateJQuery($);
  }

  // ----- updateJQuery ----- //

  // set $.bridget for v1 backwards compatibility
  function updateJQuery($) {
    if (!$ || $ && $.bridget) {
      return;
    }
    $.bridget = jQueryBridget;
  }

  updateJQuery(jQuery || window.jQuery);

  // -----  ----- //

  return jQueryBridget;
})

/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

;(function (global, factory) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, window */
  if (typeof define == 'function' && define.amd) {
    // AMD - RequireJS
    define('ev-emitter/ev-emitter', factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }
})(typeof window != 'undefined' ? window : undefined, function () {
  function EvEmitter() {}

  var proto = EvEmitter.prototype;

  proto.on = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    }
    // set events hash
    var events = this._events = this._events || {};
    // set listeners array
    var listeners = events[eventName] = events[eventName] || [];
    // only add once
    if (listeners.indexOf(listener) == -1) {
      listeners.push(listener);
    }

    return this;
  };

  proto.once = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    }
    // add event
    this.on(eventName, listener);
    // set once flag
    // set onceEvents hash
    var onceEvents = this._onceEvents = this._onceEvents || {};
    // set onceListeners object
    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
    // set flag
    onceListeners[listener] = true;

    return this;
  };

  proto.off = function (eventName, listener) {
    var listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) {
      return;
    }
    var index = listeners.indexOf(listener);
    if (index != -1) {
      listeners.splice(index, 1);
    }

    return this;
  };

  proto.emitEvent = function (eventName, args) {
    var listeners = this._events && this._events[eventName];
    if (!listeners || !listeners.length) {
      return;
    }
    // copy over to avoid interference if .off() in listener
    listeners = listeners.slice(0);
    args = args || [];
    // once stuff
    var onceListeners = this._onceEvents && this._onceEvents[eventName];

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      var isOnce = onceListeners && onceListeners[listener];
      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener);
        // unset once flag
        delete onceListeners[listener];
      }
      // trigger listener
      listener.apply(this, args);
    }

    return this;
  };

  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
  };

  return EvEmitter;
})

/*!
 * getSize v2.0.2
 * measure size of elements
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, module: false, console: false */

;(function (window, factory) {
  'use strict';

  if (typeof define == 'function' && define.amd) {
    // AMD
    define('get-size/get-size', [], function () {
      return factory();
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.getSize = factory();
  }
})(window, function factory() {
  'use strict';

  // -------------------------- helpers -------------------------- //

  // get a number from a string, not a percentage

  function getStyleSize(value) {
    var num = parseFloat(value);
    // not a percent like '100%', and a number
    var isValid = value.indexOf('%') == -1 && !isNaN(num);
    return isValid && num;
  }

  function noop() {}

  var logError = typeof console == 'undefined' ? noop : function (message) {
    console.error(message);
  };

  // -------------------------- measurements -------------------------- //

  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];

  var measurementsLength = measurements.length;

  function getZeroSize() {
    var size = {
      width: 0,
      height: 0,
      innerWidth: 0,
      innerHeight: 0,
      outerWidth: 0,
      outerHeight: 0
    };
    for (var i = 0; i < measurementsLength; i++) {
      var measurement = measurements[i];
      size[measurement] = 0;
    }
    return size;
  }

  // -------------------------- getStyle -------------------------- //

  /**
  * getStyle, get style of element, check for Firefox bug
  * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  */
  function getStyle(elem) {
    var style = getComputedStyle(elem);
    if (!style) {
      logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See http://bit.ly/getsizebug1');
    }
    return style;
  }

  // -------------------------- setup -------------------------- //

  var isSetup = false;

  var isBoxSizeOuter;

  /**
  * setup
  * check isBoxSizerOuter
  * do on first getSize() rather than on page load for Firefox bug
  */
  function setup() {
    // setup once
    if (isSetup) {
      return;
    }
    isSetup = true;

    // -------------------------- box sizing -------------------------- //

    /**
    * WebKit measures the outer-width on style.width on border-box elems
    * IE & Firefox<29 measures the inner-width
    */
    var div = document.createElement('div');
    div.style.width = '200px';
    div.style.padding = '1px 2px 3px 4px';
    div.style.borderStyle = 'solid';
    div.style.borderWidth = '1px 2px 3px 4px';
    div.style.boxSizing = 'border-box';

    var body = document.body || document.documentElement;
    body.appendChild(div);
    var style = getStyle(div);

    getSize.isBoxSizeOuter = isBoxSizeOuter = getStyleSize(style.width) == 200;
    body.removeChild(div);
  }

  // -------------------------- getSize -------------------------- //

  function getSize(elem) {
    setup();

    // use querySeletor if elem is string
    if (typeof elem == 'string') {
      elem = document.querySelector(elem);
    }

    // do not proceed on non-objects
    if (!elem || (typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) != 'object' || !elem.nodeType) {
      return;
    }

    var style = getStyle(elem);

    // if hidden, everything is 0
    if (style.display == 'none') {
      return getZeroSize();
    }

    var size = {};
    size.width = elem.offsetWidth;
    size.height = elem.offsetHeight;

    var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';

    // get all measurements
    for (var i = 0; i < measurementsLength; i++) {
      var measurement = measurements[i];
      var value = style[measurement];
      var num = parseFloat(value);
      // any 'auto', 'medium' value will be 0
      size[measurement] = !isNaN(num) ? num : 0;
    }

    var paddingWidth = size.paddingLeft + size.paddingRight;
    var paddingHeight = size.paddingTop + size.paddingBottom;
    var marginWidth = size.marginLeft + size.marginRight;
    var marginHeight = size.marginTop + size.marginBottom;
    var borderWidth = size.borderLeftWidth + size.borderRightWidth;
    var borderHeight = size.borderTopWidth + size.borderBottomWidth;

    var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

    // overwrite width and height if we can get it from style
    var styleWidth = getStyleSize(style.width);
    if (styleWidth !== false) {
      size.width = styleWidth + (
      // add padding and border unless it's already including it
      isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
    }

    var styleHeight = getStyleSize(style.height);
    if (styleHeight !== false) {
      size.height = styleHeight + (
      // add padding and border unless it's already including it
      isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
    }

    size.innerWidth = size.width - (paddingWidth + borderWidth);
    size.innerHeight = size.height - (paddingHeight + borderHeight);

    size.outerWidth = size.width + marginWidth;
    size.outerHeight = size.height + marginHeight;

    return size;
  }

  return getSize;
})

/**
 * matchesSelector v2.0.2
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */

;(function (window, factory) {
  /*global define: false, module: false */
  'use strict';
  // universal module definition

  if (typeof define == 'function' && define.amd) {
    // AMD
    define('desandro-matches-selector/matches-selector', factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.matchesSelector = factory();
  }
})(window, function factory() {
  'use strict';

  var matchesMethod = function () {
    var ElemProto = window.Element.prototype;
    // check for the standard method name first
    if (ElemProto.matches) {
      return 'matches';
    }
    // check un-prefixed
    if (ElemProto.matchesSelector) {
      return 'matchesSelector';
    }
    // check vendor prefixes
    var prefixes = ['webkit', 'moz', 'ms', 'o'];

    for (var i = 0; i < prefixes.length; i++) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';
      if (ElemProto[method]) {
        return method;
      }
    }
  }();

  return function matchesSelector(elem, selector) {
    return elem[matchesMethod](selector);
  };
})

/**
 * Fizzy UI utils v2.0.5
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

;(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if (typeof define == 'function' && define.amd) {
    // AMD
    define('fizzy-ui-utils/utils', ['desandro-matches-selector/matches-selector'], function (matchesSelector) {
      return factory(window, matchesSelector);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('desandro-matches-selector'));
  } else {
    // browser global
    window.fizzyUIUtils = factory(window, window.matchesSelector);
  }
})(window, function factory(window, matchesSelector) {
  var utils = {};

  // ----- extend ----- //

  // extends objects
  utils.extend = function (a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }
    return a;
  };

  // ----- modulo ----- //

  utils.modulo = function (num, div) {
    return (num % div + div) % div;
  };

  // ----- makeArray ----- //

  // turn element or nodeList into an array
  utils.makeArray = function (obj) {
    var ary = [];
    if (Array.isArray(obj)) {
      // use object if already an array
      ary = obj;
    } else if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && typeof obj.length == 'number') {
      // convert nodeList to array
      for (var i = 0; i < obj.length; i++) {
        ary.push(obj[i]);
      }
    } else {
      // array of single index
      ary.push(obj);
    }
    return ary;
  };

  // ----- removeFrom ----- //

  utils.removeFrom = function (ary, obj) {
    var index = ary.indexOf(obj);
    if (index != -1) {
      ary.splice(index, 1);
    }
  };

  // ----- getParent ----- //

  utils.getParent = function (elem, selector) {
    while (elem.parentNode && elem != document.body) {
      elem = elem.parentNode;
      if (matchesSelector(elem, selector)) {
        return elem;
      }
    }
  };

  // ----- getQueryElement ----- //

  // use element as selector string
  utils.getQueryElement = function (elem) {
    if (typeof elem == 'string') {
      return document.querySelector(elem);
    }
    return elem;
  };

  // ----- handleEvent ----- //

  // enable .ontype to trigger from .addEventListener( elem, 'type' )
  utils.handleEvent = function (event) {
    var method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };

  // ----- filterFindElements ----- //

  utils.filterFindElements = function (elems, selector) {
    // make array of elems
    elems = utils.makeArray(elems);
    var ffElems = [];

    elems.forEach(function (elem) {
      // check that elem is an actual element
      if (!(elem instanceof HTMLElement)) {
        return;
      }
      // add elem if no selector
      if (!selector) {
        ffElems.push(elem);
        return;
      }
      // filter & find items if we have a selector
      // filter
      if (matchesSelector(elem, selector)) {
        ffElems.push(elem);
      }
      // find children
      var childElems = elem.querySelectorAll(selector);
      // concat childElems to filterFound array
      for (var i = 0; i < childElems.length; i++) {
        ffElems.push(childElems[i]);
      }
    });

    return ffElems;
  };

  // ----- debounceMethod ----- //

  utils.debounceMethod = function (_class, methodName, threshold) {
    // original method
    var method = _class.prototype[methodName];
    var timeoutName = methodName + 'Timeout';

    _class.prototype[methodName] = function () {
      var timeout = this[timeoutName];
      if (timeout) {
        clearTimeout(timeout);
      }
      var args = arguments;

      var _this = this;
      this[timeoutName] = setTimeout(function () {
        method.apply(_this, args);
        delete _this[timeoutName];
      }, threshold || 100);
    };
  };

  // ----- docReady ----- //

  utils.docReady = function (callback) {
    var readyState = document.readyState;
    if (readyState == 'complete' || readyState == 'interactive') {
      // do async to allow for other scripts to run. metafizzy/flickity#441
      setTimeout(callback);
    } else {
      document.addEventListener('DOMContentLoaded', callback);
    }
  };

  // ----- htmlInit ----- //

  // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
  utils.toDashed = function (str) {
    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {
      return $1 + '-' + $2;
    }).toLowerCase();
  };

  var console = window.console;
  /**
  * allow user to initialize classes via [data-namespace] or .js-namespace class
  * htmlInit( Widget, 'widgetName' )
  * options are parsed from data-namespace-options
  */
  utils.htmlInit = function (WidgetClass, namespace) {
    utils.docReady(function () {
      var dashedNamespace = utils.toDashed(namespace);
      var dataAttr = 'data-' + dashedNamespace;
      var dataAttrElems = document.querySelectorAll('[' + dataAttr + ']');
      var jsDashElems = document.querySelectorAll('.js-' + dashedNamespace);
      var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));
      var dataOptionsAttr = dataAttr + '-options';
      var jQuery = window.jQuery;

      elems.forEach(function (elem) {
        var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);
        var options;
        try {
          options = attr && JSON.parse(attr);
        } catch (error) {
          // log error, do not initialize
          if (console) {
            console.error('Error parsing ' + dataAttr + ' on ' + elem.className + ': ' + error);
          }
          return;
        }
        // initialize
        var instance = new WidgetClass(elem, options);
        // make available via $().data('namespace')
        if (jQuery) {
          jQuery.data(elem, namespace, instance);
        }
      });
    });
  };

  // -----  ----- //

  return utils;
})

// Flickity.Cell
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/cell', ['get-size/get-size'], function (getSize) {
      return factory(window, getSize);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('get-size'));
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.Cell = factory(window, window.getSize);
  }
})(window, function factory(window, getSize) {
  function Cell(elem, parent) {
    this.element = elem;
    this.parent = parent;

    this.create();
  }

  var proto = Cell.prototype;

  proto.create = function () {
    this.element.style.position = 'absolute';
    this.x = 0;
    this.shift = 0;
  };

  proto.destroy = function () {
    // reset style
    this.element.style.position = '';
    var side = this.parent.originSide;
    this.element.style[side] = '';
  };

  proto.getSize = function () {
    this.size = getSize(this.element);
  };

  proto.setPosition = function (x) {
    this.x = x;
    this.updateTarget();
    this.renderPosition(x);
  };

  // setDefaultTarget v1 method, backwards compatibility, remove in v3
  proto.updateTarget = proto.setDefaultTarget = function () {
    var marginProperty = this.parent.originSide == 'left' ? 'marginLeft' : 'marginRight';
    this.target = this.x + this.size[marginProperty] + this.size.width * this.parent.cellAlign;
  };

  proto.renderPosition = function (x) {
    // render position of cell with in slider
    var side = this.parent.originSide;
    this.element.style[side] = this.parent.getPositionValue(x);
  };

  /**
  * @param {Integer} factor - 0, 1, or -1
  **/
  proto.wrapShift = function (shift) {
    this.shift = shift;
    this.renderPosition(this.x + this.parent.slideableWidth * shift);
  };

  proto.remove = function () {
    this.element.parentNode.removeChild(this.element);
  };

  return Cell;
})

// slide
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/slide', factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.Slide = factory();
  }
})(window, function factory() {
  'use strict';

  function Slide(parent) {
    this.parent = parent;
    this.isOriginLeft = parent.originSide == 'left';
    this.cells = [];
    this.outerWidth = 0;
    this.height = 0;
  }

  var proto = Slide.prototype;

  proto.addCell = function (cell) {
    this.cells.push(cell);
    this.outerWidth += cell.size.outerWidth;
    this.height = Math.max(cell.size.outerHeight, this.height);
    // first cell stuff
    if (this.cells.length == 1) {
      this.x = cell.x; // x comes from first cell
      var beginMargin = this.isOriginLeft ? 'marginLeft' : 'marginRight';
      this.firstMargin = cell.size[beginMargin];
    }
  };

  proto.updateTarget = function () {
    var endMargin = this.isOriginLeft ? 'marginRight' : 'marginLeft';
    var lastCell = this.getLastCell();
    var lastMargin = lastCell ? lastCell.size[endMargin] : 0;
    var slideWidth = this.outerWidth - (this.firstMargin + lastMargin);
    this.target = this.x + this.firstMargin + slideWidth * this.parent.cellAlign;
  };

  proto.getLastCell = function () {
    return this.cells[this.cells.length - 1];
  };

  proto.select = function () {
    this.changeSelectedClass('add');
  };

  proto.unselect = function () {
    this.changeSelectedClass('remove');
  };

  proto.changeSelectedClass = function (method) {
    this.cells.forEach(function (cell) {
      cell.element.classList[method]('is-selected');
    });
  };

  proto.getCellElements = function () {
    return this.cells.map(function (cell) {
      return cell.element;
    });
  };

  return Slide;
})

// animate
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/animate', ['fizzy-ui-utils/utils'], function (utils) {
      return factory(window, utils);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('fizzy-ui-utils'));
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.animatePrototype = factory(window, window.fizzyUIUtils);
  }
})(window, function factory(window, utils) {
  // -------------------------- requestAnimationFrame -------------------------- //

  // get rAF, prefixed, if present
  var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;

  // fallback to setTimeout
  var lastTime = 0;
  if (!requestAnimationFrame) {
    requestAnimationFrame = function requestAnimationFrame(callback) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = setTimeout(callback, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  // -------------------------- animate -------------------------- //

  var proto = {};

  proto.startAnimation = function () {
    if (this.isAnimating) {
      return;
    }

    this.isAnimating = true;
    this.restingFrames = 0;
    this.animate();
  };

  proto.animate = function () {
    this.applyDragForce();
    this.applySelectedAttraction();

    var previousX = this.x;

    this.integratePhysics();
    this.positionSlider();
    this.settle(previousX);
    // animate next frame
    if (this.isAnimating) {
      var _this = this;
      requestAnimationFrame(function animateFrame() {
        _this.animate();
      });
    }
  };

  var transformProperty = function () {
    var style = document.documentElement.style;
    if (typeof style.transform == 'string') {
      return 'transform';
    }
    return 'WebkitTransform';
  }();

  proto.positionSlider = function () {
    var x = this.x;
    // wrap position around
    if (this.options.wrapAround && this.cells.length > 1) {
      x = utils.modulo(x, this.slideableWidth);
      x = x - this.slideableWidth;
      this.shiftWrapCells(x);
    }

    x = x + this.cursorPosition;
    // reverse if right-to-left and using transform
    x = this.options.rightToLeft && transformProperty ? -x : x;
    var value = this.getPositionValue(x);
    // use 3D tranforms for hardware acceleration on iOS
    // but use 2D when settled, for better font-rendering
    this.slider.style[transformProperty] = this.isAnimating ? 'translate3d(' + value + ',0,0)' : 'translateX(' + value + ')';

    // scroll event
    var firstSlide = this.slides[0];
    if (firstSlide) {
      var positionX = -this.x - firstSlide.target;
      var progress = positionX / this.slidesWidth;
      this.dispatchEvent('scroll', null, [progress, positionX]);
    }
  };

  proto.positionSliderAtSelected = function () {
    if (!this.cells.length) {
      return;
    }
    this.x = -this.selectedSlide.target;
    this.positionSlider();
  };

  proto.getPositionValue = function (position) {
    if (this.options.percentPosition) {
      // percent position, round to 2 digits, like 12.34%
      return Math.round(position / this.size.innerWidth * 10000) * 0.01 + '%';
    } else {
      // pixel positioning
      return Math.round(position) + 'px';
    }
  };

  proto.settle = function (previousX) {
    // keep track of frames where x hasn't moved
    if (!this.isPointerDown && Math.round(this.x * 100) == Math.round(previousX * 100)) {
      this.restingFrames++;
    }
    // stop animating if resting for 3 or more frames
    if (this.restingFrames > 2) {
      this.isAnimating = false;
      delete this.isFreeScrolling;
      // render position with translateX when settled
      this.positionSlider();
      this.dispatchEvent('settle');
    }
  };

  proto.shiftWrapCells = function (x) {
    // shift before cells
    var beforeGap = this.cursorPosition + x;
    this._shiftCells(this.beforeShiftCells, beforeGap, -1);
    // shift after cells
    var afterGap = this.size.innerWidth - (x + this.slideableWidth + this.cursorPosition);
    this._shiftCells(this.afterShiftCells, afterGap, 1);
  };

  proto._shiftCells = function (cells, gap, shift) {
    for (var i = 0; i < cells.length; i++) {
      var cell = cells[i];
      var cellShift = gap > 0 ? shift : 0;
      cell.wrapShift(cellShift);
      gap -= cell.size.outerWidth;
    }
  };

  proto._unshiftCells = function (cells) {
    if (!cells || !cells.length) {
      return;
    }
    for (var i = 0; i < cells.length; i++) {
      cells[i].wrapShift(0);
    }
  };

  // -------------------------- physics -------------------------- //

  proto.integratePhysics = function () {
    this.x += this.velocity;
    this.velocity *= this.getFrictionFactor();
  };

  proto.applyForce = function (force) {
    this.velocity += force;
  };

  proto.getFrictionFactor = function () {
    return 1 - this.options[this.isFreeScrolling ? 'freeScrollFriction' : 'friction'];
  };

  proto.getRestingPosition = function () {
    // my thanks to Steven Wittens, who simplified this math greatly
    return this.x + this.velocity / (1 - this.getFrictionFactor());
  };

  proto.applyDragForce = function () {
    if (!this.isPointerDown) {
      return;
    }
    // change the position to drag position by applying force
    var dragVelocity = this.dragX - this.x;
    var dragForce = dragVelocity - this.velocity;
    this.applyForce(dragForce);
  };

  proto.applySelectedAttraction = function () {
    // do not attract if pointer down or no cells
    if (this.isPointerDown || this.isFreeScrolling || !this.cells.length) {
      return;
    }
    var distance = this.selectedSlide.target * -1 - this.x;
    var force = distance * this.options.selectedAttraction;
    this.applyForce(force);
  };

  return proto;
})

// Flickity main
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/flickity', ['ev-emitter/ev-emitter', 'get-size/get-size', 'fizzy-ui-utils/utils', './cell', './slide', './animate'], function (EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {
      return factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./cell'), require('./slide'), require('./animate'));
  } else {
    // browser global
    var _Flickity = window.Flickity;

    window.Flickity = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, _Flickity.Cell, _Flickity.Slide, _Flickity.animatePrototype);
  }
})(window, function factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {
  // vars
  var jQuery = window.jQuery;
  var getComputedStyle = window.getComputedStyle;
  var console = window.console;

  function moveElements(elems, toElem) {
    elems = utils.makeArray(elems);
    while (elems.length) {
      toElem.appendChild(elems.shift());
    }
  }

  // -------------------------- Flickity -------------------------- //

  // globally unique identifiers
  var GUID = 0;
  // internal store of all Flickity intances
  var instances = {};

  function Flickity(element, options) {
    var queryElement = utils.getQueryElement(element);
    if (!queryElement) {
      if (console) {
       // console.error('Bad element for Flickity: ' + (queryElement || element));
      }
      return;
    }
    this.element = queryElement;
    // do not initialize twice on same element
    if (this.element.flickityGUID) {
      var instance = instances[this.element.flickityGUID];
      instance.option(options);
      return instance;
    }

    // add jQuery
    if (jQuery) {
      this.$element = jQuery(this.element);
    }
    // options
    this.options = utils.extend({}, this.constructor.defaults);
    this.option(options);

    // kick things off
    this._create();
  }

  Flickity.defaults = {
    accessibility: true,
    // adaptiveHeight: false,
    cellAlign: 'center',
    // cellSelector: undefined,
    // contain: false,
    freeScrollFriction: 0.075, // friction when free-scrolling
    friction: 0.28, // friction when selecting
    namespaceJQueryEvents: true,
    // initialIndex: 0,
    percentPosition: true,
    resize: true,
    selectedAttraction: 0.025,
    setGallerySize: true
    // watchCSS: false,
    // wrapAround: false


    // hash of methods triggered on _create()
  };Flickity.createMethods = [];

  var proto = Flickity.prototype;
  // inherit EventEmitter
  utils.extend(proto, EvEmitter.prototype);

  proto._create = function () {
    // add id for Flickity.data
    var id = this.guid = ++GUID;
    this.element.flickityGUID = id; // expando
    instances[id] = this; // associate via id
    // initial properties
    this.selectedIndex = 0;
    // how many frames slider has been in same position
    this.restingFrames = 0;
    // initial physics properties
    this.x = 0;
    this.velocity = 0;
    this.originSide = this.options.rightToLeft ? 'right' : 'left';
    // create viewport & slider
    this.viewport = document.createElement('div');
    this.viewport.className = 'flickity-viewport';
    this._createSlider();

    if (this.options.resize || this.options.watchCSS) {
      window.addEventListener('resize', this);
    }

    Flickity.createMethods.forEach(function (method) {
      this[method]();
    }, this);

    if (this.options.watchCSS) {
      this.watchCSS();
    } else {
      this.activate();
    }
  };

  /**
  * set options
  * @param {Object} opts
  */
  proto.option = function (opts) {
    utils.extend(this.options, opts);
  };

  proto.activate = function () {
    if (this.isActive) {
      return;
    }
    this.isActive = true;
    this.element.classList.add('flickity-enabled');
    if (this.options.rightToLeft) {
      this.element.classList.add('flickity-rtl');
    }

    this.getSize();
    // move initial cell elements so they can be loaded as cells
    var cellElems = this._filterFindCellElements(this.element.children);
    moveElements(cellElems, this.slider);
    this.viewport.appendChild(this.slider);
    this.element.appendChild(this.viewport);
    // get cells from children
    this.reloadCells();

    if (this.options.accessibility) {
      // allow element to focusable only for mobile & tablet
    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
 			this.element.tabIndex = 0;
    }
      // listen for key presses
      this.element.addEventListener('keydown', this);
    }

    this.emitEvent('activate');

    var index;
    var initialIndex = this.options.initialIndex;
    if (this.isInitActivated) {
      index = this.selectedIndex;
    } else if (initialIndex !== undefined) {
      index = this.cells[initialIndex] ? initialIndex : 0;
    } else {
      index = 0;
    }
    // select instantly
    this.select(index, false, true);
    // flag for initial activation, for using initialIndex
    this.isInitActivated = true;
  };

  // slider positions the cells
  proto._createSlider = function () {
    // slider element does all the positioning
    var slider = document.createElement('div');
    slider.className = 'flickity-slider';
    slider.style[this.originSide] = 0;
    this.slider = slider;
  };

  proto._filterFindCellElements = function (elems) {
    return utils.filterFindElements(elems, this.options.cellSelector);
  };

  // goes through all children
  proto.reloadCells = function () {
    // collection of item elements
    this.cells = this._makeCells(this.slider.children);
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
  };

  /**
  * turn elements into Flickity.Cells
  * @param {Array or NodeList or HTMLElement} elems
  * @returns {Array} items - collection of new Flickity Cells
  */
  proto._makeCells = function (elems) {
    var cellElems = this._filterFindCellElements(elems);

    // create new Flickity for collection
    var cells = cellElems.map(function (cellElem) {
      return new Cell(cellElem, this);
    }, this);

    return cells;
  };

  proto.getLastCell = function () {
    return this.cells[this.cells.length - 1];
  };

  proto.getLastSlide = function () {
    return this.slides[this.slides.length - 1];
  };

  // positions all cells
  proto.positionCells = function () {
    // size all cells
    this._sizeCells(this.cells);
    // position all cells
    this._positionCells(0);
  };

  /**
  * position certain cells
  * @param {Integer} index - which cell to start with
  */
  proto._positionCells = function (index) {
    index = index || 0;
    // also measure maxCellHeight
    // start 0 if positioning all cells
    this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;
    var cellX = 0;
    // get cellX
    if (index > 0) {
      var startCell = this.cells[index - 1];
      cellX = startCell.x + startCell.size.outerWidth;
    }
    var len = this.cells.length;
    for (var i = index; i < len; i++) {
      var cell = this.cells[i];
      cell.setPosition(cellX);
      cellX += cell.size.outerWidth;
      this.maxCellHeight = Math.max(cell.size.outerHeight, this.maxCellHeight);
    }
    // keep track of cellX for wrap-around
    this.slideableWidth = cellX;
    // slides
    this.updateSlides();
    // contain slides target
    this._containSlides();
    // update slidesWidth
    this.slidesWidth = len ? this.getLastSlide().target - this.slides[0].target : 0;
  };

  /**
  * cell.getSize() on multiple cells
  * @param {Array} cells
  */
  proto._sizeCells = function (cells) {
    cells.forEach(function (cell) {
      cell.getSize();
    });
  };

  // --------------------------  -------------------------- //

  proto.updateSlides = function () {
    this.slides = [];
    if (!this.cells.length) {
      return;
    }

    var slide = new Slide(this);
    this.slides.push(slide);
    var isOriginLeft = this.originSide == 'left';
    var nextMargin = isOriginLeft ? 'marginRight' : 'marginLeft';

    var canCellFit = this._getCanCellFit();

    this.cells.forEach(function (cell, i) {
      // just add cell if first cell in slide
      if (!slide.cells.length) {
        slide.addCell(cell);
        return;
      }

      var slideWidth = slide.outerWidth - slide.firstMargin + (cell.size.outerWidth - cell.size[nextMargin]);

      if (canCellFit.call(this, i, slideWidth)) {
        slide.addCell(cell);
      } else {
        // doesn't fit, new slide
        slide.updateTarget();

        slide = new Slide(this);
        this.slides.push(slide);
        slide.addCell(cell);
      }
    }, this);
    // last slide
    slide.updateTarget();
    // update .selectedSlide
    this.updateSelectedSlide();
  };

  proto._getCanCellFit = function () {
    var groupCells = this.options.groupCells;
    if (!groupCells) {
      return function () {
        return false;
      };
    } else if (typeof groupCells == 'number') {
      // group by number. 3 -> [0,1,2], [3,4,5], ...
      var number = parseInt(groupCells, 10);
      return function (i) {
        return i % number !== 0;
      };
    }
    // default, group by width of slide
    // parse '75%
    var percentMatch = typeof groupCells == 'string' && groupCells.match(/^(\d+)%$/);
    var percent = percentMatch ? parseInt(percentMatch[1], 10) / 100 : 1;
    return function (i, slideWidth) {
      return slideWidth <= (this.size.innerWidth + 1) * percent;
    };
  };

  // alias _init for jQuery plugin .flickity()
  proto._init = proto.reposition = function () {
    this.positionCells();
    this.positionSliderAtSelected();
  };

  proto.getSize = function () {
    this.size = getSize(this.element);
    this.setCellAlign();
    this.cursorPosition = this.size.innerWidth * this.cellAlign;
  };

  var cellAlignShorthands = {
    // cell align, then based on origin side
    center: {
      left: 0.5,
      right: 0.5
    },
    left: {
      left: 0,
      right: 1
    },
    right: {
      right: 0,
      left: 1
    }
  };

  proto.setCellAlign = function () {
    var shorthand = cellAlignShorthands[this.options.cellAlign];
    this.cellAlign = shorthand ? shorthand[this.originSide] : this.options.cellAlign;
  };

  proto.setGallerySize = function () {
    if (this.options.setGallerySize) {
      var height = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;
      //this.viewport.style.height = height +  10 + 'px';
      this.viewport.style.height = height  + 'px';

    }
  };

  proto._getWrapShiftCells = function () {
    // only for wrap-around
    if (!this.options.wrapAround) {
      return;
    }
    // unshift previous cells
    this._unshiftCells(this.beforeShiftCells);
    this._unshiftCells(this.afterShiftCells);
    // get before cells
    // initial gap
    var gapX = this.cursorPosition;
    var cellIndex = this.cells.length - 1;
    this.beforeShiftCells = this._getGapCells(gapX, cellIndex, -1);
    // get after cells
    // ending gap between last cell and end of gallery viewport
    gapX = this.size.innerWidth - this.cursorPosition;
    // start cloning at first cell, working forwards
    this.afterShiftCells = this._getGapCells(gapX, 0, 1);
  };

  proto._getGapCells = function (gapX, cellIndex, increment) {
    // keep adding cells until the cover the initial gap
    var cells = [];
    while (gapX > 0) {
      var cell = this.cells[cellIndex];
      if (!cell) {
        break;
      }
      cells.push(cell);
      cellIndex += increment;
      gapX -= cell.size.outerWidth;
    }
    return cells;
  };

  // ----- contain ----- //

  // contain cell targets so no excess sliding
  proto._containSlides = function () {
    if (!this.options.contain || this.options.wrapAround || !this.cells.length) {
      return;
    }
    var isRightToLeft = this.options.rightToLeft;
    var beginMargin = isRightToLeft ? 'marginRight' : 'marginLeft';
    var endMargin = isRightToLeft ? 'marginLeft' : 'marginRight';
    var contentWidth = this.slideableWidth - this.getLastCell().size[endMargin];
    // content is less than gallery size
    var isContentSmaller = contentWidth < this.size.innerWidth;
    // bounds
    var beginBound = this.cursorPosition + this.cells[0].size[beginMargin];
    var endBound = contentWidth - this.size.innerWidth * (1 - this.cellAlign);
    // contain each cell target
    this.slides.forEach(function (slide) {
      if (isContentSmaller) {
        // all cells fit inside gallery
        slide.target = contentWidth * this.cellAlign;
      } else {
        // contain to bounds
        slide.target = Math.max(slide.target, beginBound);
        slide.target = Math.min(slide.target, endBound);
      }
    }, this);
  };

  // -----  ----- //

  /**
  * emits events via eventEmitter and jQuery events
  * @param {String} type - name of event
  * @param {Event} event - original event
  * @param {Array} args - extra arguments
  */
  proto.dispatchEvent = function (type, event, args) {
    var emitArgs = event ? [event].concat(args) : args;
    this.emitEvent(type, emitArgs);

    if (jQuery && this.$element) {
      // default trigger with type if no event
      type += this.options.namespaceJQueryEvents ? '.flickity' : '';
      var $event = type;
      if (event) {
        // create jQuery event
        var jQEvent = jQuery.Event(event);
        jQEvent.type = type;
        $event = jQEvent;
      }
      this.$element.trigger($event, args);
    }
  };

  // -------------------------- select -------------------------- //

  /**
  * @param {Integer} index - index of the slide
  * @param {Boolean} isWrap - will wrap-around to last/first if at the end
  * @param {Boolean} isInstant - will immediately set position at selected cell
  */
  proto.select = function (index, isWrap, isInstant) {
    if (!this.isActive) {
      return;
    }
    index = parseInt(index, 10);
    this._wrapSelect(index);

    if (this.options.wrapAround || isWrap) {
      index = utils.modulo(index, this.slides.length);
    }
    // bail if invalid index
    if (!this.slides[index]) {
      return;
    }
    this.selectedIndex = index;
    this.updateSelectedSlide();
    if (isInstant) {
      this.positionSliderAtSelected();
    } else {
      this.startAnimation();
    }
    if (this.options.adaptiveHeight) {
      this.setGallerySize();
    }

    this.dispatchEvent('select');
    // old v1 event name, remove in v3
    this.dispatchEvent('cellSelect');
  };

  // wraps position for wrapAround, to move to closest slide. #113
  proto._wrapSelect = function (index) {
    var len = this.slides.length;
    var isWrapping = this.options.wrapAround && len > 1;
    if (!isWrapping) {
      return index;
    }
    var wrapIndex = utils.modulo(index, len);
    // go to shortest
    var delta = Math.abs(wrapIndex - this.selectedIndex);
    var backWrapDelta = Math.abs(wrapIndex + len - this.selectedIndex);
    var forewardWrapDelta = Math.abs(wrapIndex - len - this.selectedIndex);
    if (!this.isDragSelect && backWrapDelta < delta) {
      index += len;
    } else if (!this.isDragSelect && forewardWrapDelta < delta) {
      index -= len;
    }
    // wrap position so slider is within normal area
    if (index < 0) {
      this.x -= this.slideableWidth;
    } else if (index >= len) {
      this.x += this.slideableWidth;
    }
  };

  proto.previous = function (isWrap, isInstant) {
    this.select(this.selectedIndex - 1, isWrap, isInstant);
  };

  proto.next = function (isWrap, isInstant) {
    this.select(this.selectedIndex + 1, isWrap, isInstant);
  };

  proto.updateSelectedSlide = function () {
    var slide = this.slides[this.selectedIndex];
    // selectedIndex could be outside of slides, if triggered before resize()
    if (!slide) {
      return;
    }
    // unselect previous selected slide
    this.unselectSelectedSlide();
    // update new selected slide
    this.selectedSlide = slide;
    slide.select();
    this.selectedCells = slide.cells;
    this.selectedElements = slide.getCellElements();
    // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility
    // Remove in v3?
    this.selectedCell = slide.cells[0];
    this.selectedElement = this.selectedElements[0];
  };

  proto.unselectSelectedSlide = function () {
    if (this.selectedSlide) {
      this.selectedSlide.unselect();
    }
  };

  /**
  * select slide from number or cell element
  * @param {Element or Number} elem
  */
  proto.selectCell = function (value, isWrap, isInstant) {
    // get cell
    var cell;
    if (typeof value == 'number') {
      cell = this.cells[value];
    } else {
      // use string as selector
      if (typeof value == 'string') {
        value = this.element.querySelector(value);
      }
      // get cell from element
      cell = this.getCell(value);
    }
    // select slide that has cell
    for (var i = 0; cell && i < this.slides.length; i++) {
      var slide = this.slides[i];
      var index = slide.cells.indexOf(cell);
      if (index != -1) {
        this.select(i, isWrap, isInstant);
        return;
      }
    }
  };

  // -------------------------- get cells -------------------------- //

  /**
  * get Flickity.Cell, given an Element
  * @param {Element} elem
  * @returns {Flickity.Cell} item
  */
  proto.getCell = function (elem) {
    // loop through cells to get the one that matches
    for (var i = 0; i < this.cells.length; i++) {
      var cell = this.cells[i];
      if (cell.element == elem) {
        return cell;
      }
    }
  };

  /**
  * get collection of Flickity.Cells, given Elements
  * @param {Element, Array, NodeList} elems
  * @returns {Array} cells - Flickity.Cells
  */
  proto.getCells = function (elems) {
    elems = utils.makeArray(elems);
    var cells = [];
    elems.forEach(function (elem) {
      var cell = this.getCell(elem);
      if (cell) {
        cells.push(cell);
      }
    }, this);
    return cells;
  };

  /**
  * get cell elements
  * @returns {Array} cellElems
  */
  proto.getCellElements = function () {
    return this.cells.map(function (cell) {
      return cell.element;
    });
  };

  /**
  * get parent cell from an element
  * @param {Element} elem
  * @returns {Flickit.Cell} cell
  */
  proto.getParentCell = function (elem) {
    // first check if elem is cell
    var cell = this.getCell(elem);
    if (cell) {
      return cell;
    }
    // try to get parent cell elem
    elem = utils.getParent(elem, '.flickity-slider > *');
    return this.getCell(elem);
  };

  /**
  * get cells adjacent to a slide
  * @param {Integer} adjCount - number of adjacent slides
  * @param {Integer} index - index of slide to start
  * @returns {Array} cells - array of Flickity.Cells
  */
  proto.getAdjacentCellElements = function (adjCount, index) {
    if (!adjCount) {
      return this.selectedSlide.getCellElements();
    }
    index = index === undefined ? this.selectedIndex : index;

    var len = this.slides.length;
    if (1 + adjCount * 2 >= len) {
      return this.getCellElements();
    }

    var cellElems = [];
    for (var i = index - adjCount; i <= index + adjCount; i++) {
      var slideIndex = this.options.wrapAround ? utils.modulo(i, len) : i;
      var slide = this.slides[slideIndex];
      if (slide) {
        cellElems = cellElems.concat(slide.getCellElements());
      }
    }
    return cellElems;
  };

  // -------------------------- events -------------------------- //

  proto.uiChange = function () {
    this.emitEvent('uiChange');
  };

  proto.childUIPointerDown = function (event) {
    this.emitEvent('childUIPointerDown', [event]);
  };

  // ----- resize ----- //

  proto.onresize = function () {
    this.watchCSS();
    this.resize();
  };

  utils.debounceMethod(Flickity, 'onresize', 150);

  proto.resize = function () {
    if (!this.isActive) {
      return;
    }
    this.getSize();
    // wrap values
    if (this.options.wrapAround) {
      this.x = utils.modulo(this.x, this.slideableWidth);
    }
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
    this.emitEvent('resize');
    // update selected index for group slides, instant
    // TODO: position can be lost between groups of various numbers
    var selectedElement = this.selectedElements && this.selectedElements[0];
    this.selectCell(selectedElement, false, true);
  };

  // watches the :after property, activates/deactivates
  proto.watchCSS = function () {
    var watchOption = this.options.watchCSS;
    if (!watchOption) {
      return;
    }

    var afterContent = getComputedStyle(this.element, ':after').content;
    // activate if :after { content: 'flickity' }
    if (afterContent.indexOf('flickity') != -1) {
      this.activate();
    } else {
      this.deactivate();
    }
  };

  // ----- keydown ----- //

  // go previous/next if left/right keys pressed
  proto.onkeydown = function (event) {
    // only work if element is in focus
    if (!this.options.accessibility || document.activeElement && document.activeElement != this.element) {
      return;
    }

    if (event.keyCode == 37) {
      // go left
      var leftMethod = this.options.rightToLeft ? 'next' : 'previous';
      this.uiChange();
      this[leftMethod]();
    } else if (event.keyCode == 39) {
      // go right
      var rightMethod = this.options.rightToLeft ? 'previous' : 'next';
      this.uiChange();
      this[rightMethod]();
    }
  };

  // -------------------------- destroy -------------------------- //

  // deactivate all Flickity functionality, but keep stuff available
  proto.deactivate = function () {
    if (!this.isActive) {
      return;
    }
    this.element.classList.remove('flickity-enabled');
    this.element.classList.remove('flickity-rtl');
    // destroy cells
    this.cells.forEach(function (cell) {
      cell.destroy();
    });
    this.unselectSelectedSlide();
    this.element.removeChild(this.viewport);
    // move child elements back into element
    moveElements(this.slider.children, this.element);
    if (this.options.accessibility) {
      this.element.removeAttribute('tabIndex');
      this.element.removeEventListener('keydown', this);
    }
    // set flags
    this.isActive = false;
    this.emitEvent('deactivate');
  };

  proto.destroy = function () {
    this.deactivate();
    window.removeEventListener('resize', this);
    this.emitEvent('destroy');
    if (jQuery && this.$element) {
      jQuery.removeData(this.element, 'flickity');
    }
    delete this.element.flickityGUID;
    delete instances[this.guid];
  };

  // -------------------------- prototype -------------------------- //

  utils.extend(proto, animatePrototype);

  // -------------------------- extras -------------------------- //

  /**
  * get Flickity instance from element
  * @param {Element} elem
  * @returns {Flickity}
  */
  Flickity.data = function (elem) {
    elem = utils.getQueryElement(elem);
    var id = elem && elem.flickityGUID;
    return id && instances[id];
  };

  utils.htmlInit(Flickity, 'flickity');

  if (jQuery && jQuery.bridget) {
    jQuery.bridget('flickity', Flickity);
  }

  // set internal jQuery, for Webpack + jQuery v3, #478
  Flickity.setJQuery = function (jq) {
    jQuery = jq;
  };

  Flickity.Cell = Cell;

  return Flickity;
})

/*!
 * Unipointer v2.2.0
 * base class for doing one thing with pointer event
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */ /*global define, module, require */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('unipointer/unipointer', ['ev-emitter/ev-emitter'], function (EvEmitter) {
      return factory(window, EvEmitter);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('ev-emitter'));
  } else {
    // browser global
    window.Unipointer = factory(window, window.EvEmitter);
  }
})(window, function factory(window, EvEmitter) {
  function noop() {}

  function Unipointer() {}

  // inherit EvEmitter
  var proto = Unipointer.prototype = Object.create(EvEmitter.prototype);

  proto.bindStartEvent = function (elem) {
    this._bindStartEvent(elem, true);
  };

  proto.unbindStartEvent = function (elem) {
    this._bindStartEvent(elem, false);
  };

  /**
  * works as unbinder, as you can ._bindStart( false ) to unbind
  * @param {Boolean} isBind - will unbind if falsey
  */
  proto._bindStartEvent = function (elem, isBind) {
    // munge isBind, default to true
    isBind = isBind === undefined ? true : !!isBind;
    var bindMethod = isBind ? 'addEventListener' : 'removeEventListener';

    if (false) {
      // Pointer Events. Chrome 55, IE11, Edge 14
      elem[bindMethod]('pointerdown', this);
    } else {
      // listen for both, for devices like Chrome Pixel
      elem[bindMethod]('mousedown', this);
      elem[bindMethod]('touchstart', this);
    }
  };

  // trigger handler methods for events
  proto.handleEvent = function (event) {
    var method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };

  // returns the touch that we're keeping track of
  proto.getTouch = function (touches) {
    for (var i = 0; i < touches.length; i++) {
      var touch = touches[i];
      if (touch.identifier == this.pointerIdentifier) {
        return touch;
      }
    }
  };

  // ----- start event ----- //

  proto.onmousedown = function (event) {
    // dismiss clicks from right or middle buttons
    var button = event.button;
    if (button && button !== 0 && button !== 1) {
      return;
    }
    this._pointerDown(event, event);
  };

  proto.ontouchstart = function (event) {
    this._pointerDown(event, event.changedTouches[0]);
  };

  proto.onpointerdown = function (event) {
    this._pointerDown(event, event);
  };

  /**
  * pointer start
  * @param {Event} event
  * @param {Event or Touch} pointer
  */
  proto._pointerDown = function (event, pointer) {
    // dismiss other pointers
    if (this.isPointerDown) {
      return;
    }

    this.isPointerDown = true;
    // save pointer identifier to match up touch events
    this.pointerIdentifier = pointer.pointerId !== undefined ? // pointerId for pointer events, touch.indentifier for touch events
    pointer.pointerId : pointer.identifier;

    this.pointerDown(event, pointer);
  };

  proto.pointerDown = function (event, pointer) {
    this._bindPostStartEvents(event);
    this.emitEvent('pointerDown', [event, pointer]);
  };

  // hash of events to be bound after start event
  var postStartEvents = {
    mousedown: ['mousemove', 'mouseup'],
    touchstart: ['touchmove', 'touchend', 'touchcancel'],
    pointerdown: ['pointermove', 'pointerup', 'pointercancel']
  };

  proto._bindPostStartEvents = function (event) {
    if (!event) {
      return;
    }
    // get proper events to match start event
    var events = postStartEvents[event.type];
    // bind events to node
    events.forEach(function (eventName) {
      window.addEventListener(eventName, this);
    }, this);
    // save these arguments
    this._boundPointerEvents = events;
  };

  proto._unbindPostStartEvents = function () {
    // check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)
    if (!this._boundPointerEvents) {
      return;
    }
    this._boundPointerEvents.forEach(function (eventName) {
      window.removeEventListener(eventName, this);
    }, this);

    delete this._boundPointerEvents;
  };

  // ----- move event ----- //

  proto.onmousemove = function (event) {
    this._pointerMove(event, event);
  };

  proto.onpointermove = function (event) {
    if (event.pointerId == this.pointerIdentifier) {
      this._pointerMove(event, event);
    }
  };

  proto.ontouchmove = function (event) {
    var touch = this.getTouch(event.changedTouches);
    if (touch) {
      this._pointerMove(event, touch);
    }
  };

  /**
  * pointer move
  * @param {Event} event
  * @param {Event or Touch} pointer
  * @private
  */
  proto._pointerMove = function (event, pointer) {
    this.pointerMove(event, pointer);
  };

  // public
  proto.pointerMove = function (event, pointer) {
    this.emitEvent('pointerMove', [event, pointer]);
  };

  // ----- end event ----- //

  proto.onmouseup = function (event) {
    this._pointerUp(event, event);
  };

  proto.onpointerup = function (event) {
    if (event.pointerId == this.pointerIdentifier) {
      this._pointerUp(event, event);
    }
  };

  proto.ontouchend = function (event) {
    var touch = this.getTouch(event.changedTouches);
    if (touch) {
      this._pointerUp(event, touch);
    }
  };

  /**
  * pointer up
  * @param {Event} event
  * @param {Event or Touch} pointer
  * @private
  */
  proto._pointerUp = function (event, pointer) {
    this._pointerDone();
    this.pointerUp(event, pointer);
  };

  // public
  proto.pointerUp = function (event, pointer) {
    this.emitEvent('pointerUp', [event, pointer]);
  };

  // ----- pointer done ----- //

  // triggered on pointer up & pointer cancel
  proto._pointerDone = function () {
    // reset properties
    this.isPointerDown = false;
    delete this.pointerIdentifier;
    // remove events
    this._unbindPostStartEvents();
    this.pointerDone();
  };

  proto.pointerDone = noop;

  // ----- pointer cancel ----- //

  proto.onpointercancel = function (event) {
    if (event.pointerId == this.pointerIdentifier) {
      this._pointerCancel(event, event);
    }
  };

  proto.ontouchcancel = function (event) {
    var touch = this.getTouch(event.changedTouches);
    if (touch) {
      this._pointerCancel(event, touch);
    }
  };

  /**
  * pointer cancel
  * @param {Event} event
  * @param {Event or Touch} pointer
  * @private
  */
  proto._pointerCancel = function (event, pointer) {
    this._pointerDone();
    this.pointerCancel(event, pointer);
  };

  // public
  proto.pointerCancel = function (event, pointer) {
    this.emitEvent('pointerCancel', [event, pointer]);
  };

  // -----  ----- //

  // utility function for getting x/y coords from event
  Unipointer.getPointerPoint = function (pointer) {
    return {
      x: pointer.pageX,
      y: pointer.pageY
    };
  };

  // -----  ----- //

  return Unipointer;
})

/*!
 * Unidragger v2.2.3
 * Draggable base class
 * MIT license
 */

/*jshint browser: true, unused: true, undef: true, strict: true */

;(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if (typeof define == 'function' && define.amd) {
    // AMD
    define('unidragger/unidragger', ['unipointer/unipointer'], function (Unipointer) {
      return factory(window, Unipointer);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('unipointer'));
  } else {
    // browser global
    window.Unidragger = factory(window, window.Unipointer);
  }
})(window, function factory(window, Unipointer) {
  // -------------------------- Unidragger -------------------------- //

  function Unidragger() {}

  // inherit Unipointer & EvEmitter
  var proto = Unidragger.prototype = Object.create(Unipointer.prototype);

  // ----- bind start ----- //

  proto.bindHandles = function () {
    this._bindHandles(true);
  };

  proto.unbindHandles = function () {
    this._bindHandles(false);
  };

  /**
  * works as unbinder, as you can .bindHandles( false ) to unbind
  * @param {Boolean} isBind - will unbind if falsey
  */
  proto._bindHandles = function (isBind) {
    // munge isBind, default to true
    isBind = isBind === undefined ? true : !!isBind;
    // bind each handle
    var bindMethod = isBind ? 'addEventListener' : 'removeEventListener';
    for (var i = 0; i < this.handles.length; i++) {
      var handle = this.handles[i];
      this._bindStartEvent(handle, isBind);
      handle[bindMethod]('click', this);
      // touch-action: none to override browser touch gestures
      // metafizzy/flickity#540
      if (window.PointerEvent) {
        handle.style.touchAction = isBind ? this._touchActionValue : '';
      }
    }
  };

  // prototype so it can be overwriteable by Flickity
  proto._touchActionValue = 'none';

  // ----- start event ----- //

  /**
  * pointer start
  * @param {Event} event
  * @param {Event or Touch} pointer
  */
  proto.pointerDown = function (event, pointer) {
    // dismiss range sliders
    if (event.target.nodeName == 'INPUT' && event.target.type == 'range') {
      // reset pointerDown logic
      this.isPointerDown = false;
      delete this.pointerIdentifier;
      return;
    }

    this._dragPointerDown(event, pointer);
    // kludge to blur focused inputs in dragger
    var focused = document.activeElement;
    if (focused && focused.blur) {
      focused.blur();
    }
    // bind move and end events
    this._bindPostStartEvents(event);
    this.emitEvent('pointerDown', [event, pointer]);
  };

  // base pointer down logic
  proto._dragPointerDown = function (event, pointer) {
    // track to see when dragging starts
    this.pointerDownPoint = Unipointer.getPointerPoint(pointer);

    var canPreventDefault = this.canPreventDefaultOnPointerDown(event, pointer);
    if (canPreventDefault) {
      event.preventDefault();
    }
  };

  // overwriteable method so Flickity can prevent for scrolling
  proto.canPreventDefaultOnPointerDown = function (event) {
    // prevent default, unless touchstart or <select>
    return event.target.nodeName != 'SELECT';
  };

  // ----- move event ----- //

  /**
  * drag move
  * @param {Event} event
  * @param {Event or Touch} pointer
  */
  proto.pointerMove = function (event, pointer) {
    var moveVector = this._dragPointerMove(event, pointer);
    this.emitEvent('pointerMove', [event, pointer, moveVector]);
    this._dragMove(event, pointer, moveVector);
  };

  // base pointer move logic
  proto._dragPointerMove = function (event, pointer) {
    var movePoint = Unipointer.getPointerPoint(pointer);
    var moveVector = {
      x: movePoint.x - this.pointerDownPoint.x,
      y: movePoint.y - this.pointerDownPoint.y
      // start drag if pointer has moved far enough to start drag
    };if (!this.isDragging && this.hasDragStarted(moveVector)) {
      this._dragStart(event, pointer);
    }
    return moveVector;
  };

  // condition if pointer has moved far enough to start drag
  proto.hasDragStarted = function (moveVector) {
    return Math.abs(moveVector.x) > 3 || Math.abs(moveVector.y) > 3;
  };

  // ----- end event ----- //

  /**
  * pointer up
  * @param {Event} event
  * @param {Event or Touch} pointer
  */
  proto.pointerUp = function (event, pointer) {
    this.emitEvent('pointerUp', [event, pointer]);
    this._dragPointerUp(event, pointer);
  };

  proto._dragPointerUp = function (event, pointer) {
    if (this.isDragging) {
      this._dragEnd(event, pointer);
    } else {
      // pointer didn't move enough for drag to start
      this._staticClick(event, pointer);
    }
  };

  // -------------------------- drag -------------------------- //

  // dragStart
  proto._dragStart = function (event, pointer) {
    this.isDragging = true;
    this.dragStartPoint = Unipointer.getPointerPoint(pointer);
    // prevent clicks
    this.isPreventingClicks = true;

    this.dragStart(event, pointer);
  };

  proto.dragStart = function (event, pointer) {
    this.emitEvent('dragStart', [event, pointer]);
  };

  // dragMove
  proto._dragMove = function (event, pointer, moveVector) {
    // do not drag if not dragging yet
    if (!this.isDragging) {
      return;
    }

    this.dragMove(event, pointer, moveVector);
  };

  proto.dragMove = function (event, pointer, moveVector) {
    event.preventDefault();
    this.emitEvent('dragMove', [event, pointer, moveVector]);
  };

  // dragEnd
  proto._dragEnd = function (event, pointer) {
    // set flags
    this.isDragging = false;
    // re-enable clicking async
    setTimeout(function () {
      delete this.isPreventingClicks;
    }.bind(this));

    this.dragEnd(event, pointer);
  };

  proto.dragEnd = function (event, pointer) {
    this.emitEvent('dragEnd', [event, pointer]);
  };

  // ----- onclick ----- //

  // handle all clicks and prevent clicks when dragging
  proto.onclick = function (event) {
    if (this.isPreventingClicks) {
      event.preventDefault();
    }
  };

  // ----- staticClick ----- //

  // triggered after pointer down & up with no/tiny movement
  proto._staticClick = function (event, pointer) {
    // ignore emulated mouse up clicks
    if (this.isIgnoringMouseUp && event.type == 'mouseup') {
      return;
    }

    // allow click in <input>s and <textarea>s
    var nodeName = event.target.nodeName;
    if (nodeName == 'INPUT' || nodeName == 'TEXTAREA') {
      event.target.focus();
    }
    this.staticClick(event, pointer);

    // set flag for emulated clicks 300ms after touchend
    if (event.type != 'mouseup') {
      this.isIgnoringMouseUp = true;
      // reset flag after 300ms
      setTimeout(function () {
        delete this.isIgnoringMouseUp;
      }.bind(this), 400);
    }
  };

  proto.staticClick = function (event, pointer) {
    this.emitEvent('staticClick', [event, pointer]);
  };

  // ----- utils ----- //

  Unidragger.getPointerPoint = Unipointer.getPointerPoint;

  // -----  ----- //

  return Unidragger;
})

// drag
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/drag', ['./flickity', 'unidragger/unidragger', 'fizzy-ui-utils/utils'], function (Flickity, Unidragger, utils) {
      return factory(window, Flickity, Unidragger, utils);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('unidragger'), require('fizzy-ui-utils'));
  } else {
    // browser global
    window.Flickity = factory(window, window.Flickity, window.Unidragger, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, Unidragger, utils) {
  // ----- defaults ----- //

  utils.extend(Flickity.defaults, {
    draggable: true,
    dragThreshold: 3
  });

  // ----- create ----- //

  Flickity.createMethods.push('_createDrag');

  // -------------------------- drag prototype -------------------------- //

  var proto = Flickity.prototype;
  utils.extend(proto, Unidragger.prototype);
  proto._touchActionValue = 'pan-y';

  // --------------------------  -------------------------- //

  var isTouch = 'createTouch' in document;
  var isTouchmoveScrollCanceled = false;

  proto._createDrag = function () {
    this.on('activate', this.bindDrag);
    this.on('uiChange', this._uiChangeDrag);
    this.on('childUIPointerDown', this._childUIPointerDownDrag);
    this.on('deactivate', this.unbindDrag);
    // HACK - add seemingly innocuous handler to fix iOS 10 scroll behavior
    // #457, RubaXa/Sortable#973
    if (isTouch && !isTouchmoveScrollCanceled) {
      window.addEventListener('touchmove', function () {});
      isTouchmoveScrollCanceled = true;
    }
  };

  proto.bindDrag = function () {
    if (!this.options.draggable || this.isDragBound) {
      return;
    }
    this.element.classList.add('is-draggable');
    this.handles = [this.viewport];
    this.bindHandles();
    this.isDragBound = true;
  };

  proto.unbindDrag = function () {
    if (!this.isDragBound) {
      return;
    }
    this.element.classList.remove('is-draggable');
    this.unbindHandles();
    delete this.isDragBound;
  };

  proto._uiChangeDrag = function () {
    delete this.isFreeScrolling;
  };

  proto._childUIPointerDownDrag = function (event) {
    event.preventDefault();
    this.pointerDownFocus(event);
  };

  // -------------------------- pointer events -------------------------- //

  // nodes that have text fields
  var cursorNodes = {
    TEXTAREA: true,
    INPUT: true,
    OPTION: true

    // input types that do not have text fields
  };var clickTypes = {
    radio: true,
    checkbox: true,
    button: true,
    submit: true,
    image: true,
    file: true
  };

  proto.pointerDown = function (event, pointer) {
    // dismiss inputs with text fields. #403, #404
    var isCursorInput = cursorNodes[event.target.nodeName] && !clickTypes[event.target.type];
    if (isCursorInput) {
      // reset pointerDown logic
      this.isPointerDown = false;
      delete this.pointerIdentifier;
      return;
    }

    this._dragPointerDown(event, pointer);

    // kludge to blur focused inputs in dragger
    var focused = document.activeElement;
    if (focused && focused.blur && focused != this.element &&
    // do not blur body for IE9 & 10, #117
    focused != document.body) {
      focused.blur();
    }
    this.pointerDownFocus(event);
    // stop if it was moving
    this.dragX = this.x;
    this.viewport.classList.add('is-pointer-down');
    // bind move and end events
    this._bindPostStartEvents(event);
    // track scrolling
    this.pointerDownScroll = getScrollPosition();
    window.addEventListener('scroll', this);

    this.dispatchEvent('pointerDown', event, [pointer]);
  };

  proto.pointerDownFocus = function (event) {
    // focus element, if not touch, and its not an input or select
    var canPointerDown = getCanPointerDown(event);
    if (!this.options.accessibility || canPointerDown) {
      return;
    }
    var prevScrollY = window.pageYOffset;
    this.element.focus();
    // hack to fix scroll jump after focus, #76
    if (window.pageYOffset != prevScrollY) {
      window.scrollTo(window.pageXOffset, prevScrollY);
    }
  };

  var touchStartEvents = {
    touchstart: true,
    pointerdown: true
  };

  var focusNodes = {
    INPUT: true,
    SELECT: true
  };

  function getCanPointerDown(event) {
    var isTouchStart = touchStartEvents[event.type];
    var isFocusNode = focusNodes[event.target.nodeName];
    return isTouchStart || isFocusNode;
  }

  proto.canPreventDefaultOnPointerDown = function (event) {
    // prevent default, unless touchstart or input
    var canPointerDown = getCanPointerDown(event);
    return !canPointerDown;
  };

  // ----- move ----- //

  proto.hasDragStarted = function (moveVector) {
    return Math.abs(moveVector.x) > this.options.dragThreshold;
  };

  // ----- up ----- //

  proto.pointerUp = function (event, pointer) {
    delete this.isTouchScrolling;
    this.viewport.classList.remove('is-pointer-down');
    this.dispatchEvent('pointerUp', event, [pointer]);
    this._dragPointerUp(event, pointer);
  };

  proto.pointerDone = function () {
    window.removeEventListener('scroll', this);
    delete this.pointerDownScroll;
  };

  // -------------------------- dragging -------------------------- //

  proto.dragStart = function (event, pointer) {
    this.dragStartPosition = this.x;
    this.startAnimation();
    window.removeEventListener('scroll', this);
    this.dispatchEvent('dragStart', event, [pointer]);
  };

  proto.pointerMove = function (event, pointer) {
    var moveVector = this._dragPointerMove(event, pointer);
    this.dispatchEvent('pointerMove', event, [pointer, moveVector]);
    this._dragMove(event, pointer, moveVector);
  };

  proto.dragMove = function (event, pointer, moveVector) {
    event.preventDefault();

    this.previousDragX = this.dragX;
    // reverse if right-to-left
    var direction = this.options.rightToLeft ? -1 : 1;
    var dragX = this.dragStartPosition + moveVector.x * direction;

    if (!this.options.wrapAround && this.slides.length) {
      // slow drag
      var originBound = Math.max(-this.slides[0].target, this.dragStartPosition);
      dragX = dragX > originBound ? (dragX + originBound) * 0.5 : dragX;
      var endBound = Math.min(-this.getLastSlide().target, this.dragStartPosition);
      dragX = dragX < endBound ? (dragX + endBound) * 0.5 : dragX;
    }

    this.dragX = dragX;

    this.dragMoveTime = new Date();
    this.dispatchEvent('dragMove', event, [pointer, moveVector]);
  };

  proto.dragEnd = function (event, pointer) {
    if (this.options.freeScroll) {
      this.isFreeScrolling = true;
    }
    // set selectedIndex based on where flick will end up
    var index = this.dragEndRestingSelect();

    if (this.options.freeScroll && !this.options.wrapAround) {
      // if free-scroll & not wrap around
      // do not free-scroll if going outside of bounding slides
      // so bounding slides can attract slider, and keep it in bounds
      var restingX = this.getRestingPosition();
      this.isFreeScrolling = -restingX > this.slides[0].target && -restingX < this.getLastSlide().target;
    } else if (!this.options.freeScroll && index == this.selectedIndex) {
      // boost selection if selected index has not changed
      index += this.dragEndBoostSelect();
    }
    delete this.previousDragX;
    // apply selection
    // TODO refactor this, selecting here feels weird
    // HACK, set flag so dragging stays in correct direction
    this.isDragSelect = this.options.wrapAround;
    this.select(index);
    delete this.isDragSelect;
    this.dispatchEvent('dragEnd', event, [pointer]);
  };

  proto.dragEndRestingSelect = function () {
    var restingX = this.getRestingPosition();
    // how far away from selected slide
    var distance = Math.abs(this.getSlideDistance(-restingX, this.selectedIndex));
    // get closet resting going up and going down
    var positiveResting = this._getClosestResting(restingX, distance, 1);
    var negativeResting = this._getClosestResting(restingX, distance, -1);
    // use closer resting for wrap-around
    var index = positiveResting.distance < negativeResting.distance ? positiveResting.index : negativeResting.index;
    return index;
  };

  /**
  * given resting X and distance to selected cell
  * get the distance and index of the closest cell
  * @param {Number} restingX - estimated post-flick resting position
  * @param {Number} distance - distance to selected cell
  * @param {Integer} increment - +1 or -1, going up or down
  * @returns {Object} - { distance: {Number}, index: {Integer} }
  */
  proto._getClosestResting = function (restingX, distance, increment) {
    var index = this.selectedIndex;
    var minDistance = Infinity;
    var condition = this.options.contain && !this.options.wrapAround ? // if contain, keep going if distance is equal to minDistance
    function (d, md) {
      return d <= md;
    } : function (d, md) {
      return d < md;
    };
    while (condition(distance, minDistance)) {
      // measure distance to next cell
      index += increment;
      minDistance = distance;
      distance = this.getSlideDistance(-restingX, index);
      if (distance === null) {
        break;
      }
      distance = Math.abs(distance);
    }
    return {
      distance: minDistance,
      // selected was previous index
      index: index - increment
    };
  };

  /**
  * measure distance between x and a slide target
  * @param {Number} x
  * @param {Integer} index - slide index
  */
  proto.getSlideDistance = function (x, index) {
    var len = this.slides.length;
    // wrap around if at least 2 slides
    var isWrapAround = this.options.wrapAround && len > 1;
    var slideIndex = isWrapAround ? utils.modulo(index, len) : index;
    var slide = this.slides[slideIndex];
    if (!slide) {
      return null;
    }
    // add distance for wrap-around slides
    var wrap = isWrapAround ? this.slideableWidth * Math.floor(index / len) : 0;
    return x - (slide.target + wrap);
  };

  proto.dragEndBoostSelect = function () {
    // do not boost if no previousDragX or dragMoveTime
    if (this.previousDragX === undefined || !this.dragMoveTime ||
    // or if drag was held for 100 ms
    new Date() - this.dragMoveTime > 100) {
      return 0;
    }

    var distance = this.getSlideDistance(-this.dragX, this.selectedIndex);
    var delta = this.previousDragX - this.dragX;
    if (distance > 0 && delta > 0) {
      // boost to next if moving towards the right, and positive velocity
      return 1;
    } else if (distance < 0 && delta < 0) {
      // boost to previous if moving towards the left, and negative velocity
      return -1;
    }
    return 0;
  };

  // ----- staticClick ----- //

  proto.staticClick = function (event, pointer) {
    // get clickedCell, if cell was clicked
    var clickedCell = this.getParentCell(event.target);
    var cellElem = clickedCell && clickedCell.element;
    var cellIndex = clickedCell && this.cells.indexOf(clickedCell);
    this.dispatchEvent('staticClick', event, [pointer, cellElem, cellIndex]);
  };

  // ----- scroll ----- //

  proto.onscroll = function () {
    var scroll = getScrollPosition();
    var scrollMoveX = this.pointerDownScroll.x - scroll.x;
    var scrollMoveY = this.pointerDownScroll.y - scroll.y;
    // cancel click/tap if scroll is too much
    if (Math.abs(scrollMoveX) > 3 || Math.abs(scrollMoveY) > 3) {
      this._pointerDone();
    }
  };

  // ----- utils ----- //

  function getScrollPosition() {
    return {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }

  // -----  ----- //

  return Flickity;
})

/*!
 * Tap listener v2.0.0
 * listens to taps
 * MIT license
 */

/*jshint browser: true, unused: true, undef: true, strict: true */

;(function (window, factory) {
  // universal module definition
  /*jshint strict: false*/ /*globals define, module, require */

  if (typeof define == 'function' && define.amd) {
    // AMD
    define('tap-listener/tap-listener', ['unipointer/unipointer'], function (Unipointer) {
      return factory(window, Unipointer);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('unipointer'));
  } else {
    // browser global
    window.TapListener = factory(window, window.Unipointer);
  }
})(window, function factory(window, Unipointer) {
  // --------------------------  TapListener -------------------------- //

  function TapListener(elem) {
    this.bindTap(elem);
  }

  // inherit Unipointer & EventEmitter
  var proto = TapListener.prototype = Object.create(Unipointer.prototype);

  /**
  * bind tap event to element
  * @param {Element} elem
  */
  proto.bindTap = function (elem) {
    if (!elem) {
      return;
    }
    this.unbindTap();
    this.tapElement = elem;
    this._bindStartEvent(elem, true);
  };

  proto.unbindTap = function () {
    if (!this.tapElement) {
      return;
    }
    this._bindStartEvent(this.tapElement, true);
    delete this.tapElement;
  };

  /**
  * pointer up
  * @param {Event} event
  * @param {Event or Touch} pointer
  */
  proto.pointerUp = function (event, pointer) {
    // ignore emulated mouse up clicks
    if (this.isIgnoringMouseUp && event.type == 'mouseup') {
      return;
    }

    var pointerPoint = Unipointer.getPointerPoint(pointer);
    var boundingRect = this.tapElement.getBoundingClientRect();
    var scrollX = window.pageXOffset;
    var scrollY = window.pageYOffset;
    // calculate if pointer is inside tapElement
    var isInside = pointerPoint.x >= boundingRect.left + scrollX && pointerPoint.x <= boundingRect.right + scrollX && pointerPoint.y >= boundingRect.top + scrollY && pointerPoint.y <= boundingRect.bottom + scrollY;
    // trigger callback if pointer is inside element
    if (isInside) {
      this.emitEvent('tap', [event, pointer]);
    }

    // set flag for emulated clicks 300ms after touchend
    if (event.type != 'mouseup') {
      this.isIgnoringMouseUp = true;
      // reset flag after 300ms
      var _this = this;
      setTimeout(function () {
        delete _this.isIgnoringMouseUp;
      }, 400);
    }
  };

  proto.destroy = function () {
    this.pointerDone();
    this.unbindTap();
  };

  // -----  ----- //

  return TapListener;
})

// prev/next buttons
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/prev-next-button', ['./flickity', 'tap-listener/tap-listener', 'fizzy-ui-utils/utils'], function (Flickity, TapListener, utils) {
      return factory(window, Flickity, TapListener, utils);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('tap-listener'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.TapListener, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, TapListener, utils) {
  'use strict';

  var svgURI = 'http://www.w3.org/2000/svg';

  // -------------------------- PrevNextButton -------------------------- //

  function PrevNextButton(direction, parent) {
    this.direction = direction;
    this.parent = parent;
    this._create();
  }

  PrevNextButton.prototype = new TapListener();

  PrevNextButton.prototype._create = function () {
    // properties
    this.isEnabled = true;
    this.isPrevious = this.direction == -1;
    var leftDirection = this.parent.options.rightToLeft ? 1 : -1;
    this.isLeft = this.direction == leftDirection;

    var element = this.element = document.createElement('button');
    element.className = 'flickity-prev-next-button';
    element.className += this.isPrevious ? ' previous' : ' next';
    // prevent button from submitting form http://stackoverflow.com/a/10836076/182183
    element.setAttribute('type', 'button');
    // init as disabled
    this.disable();

    element.setAttribute('aria-label', this.isPrevious ? 'previous' : 'next');

    // create arrow
    var svg = this.createSVG();
    element.appendChild(svg);
    // events
    this.on('tap', this.onTap);
    this.parent.on('select', this.update.bind(this));
    this.on('pointerDown', this.parent.childUIPointerDown.bind(this.parent));
  };

  PrevNextButton.prototype.activate = function () {
    this.bindTap(this.element);
    // click events from keyboard
    this.element.addEventListener('click', this);
    // add to DOM
    this.parent.element.appendChild(this.element);
  };

  PrevNextButton.prototype.deactivate = function () {
    // remove from DOM
    this.parent.element.removeChild(this.element);
    // do regular TapListener destroy
    TapListener.prototype.destroy.call(this);
    // click events from keyboard
    this.element.removeEventListener('click', this);
  };

  PrevNextButton.prototype.createSVG = function () {
    var svg = document.createElementNS(svgURI, 'svg');
    svg.setAttribute('viewBox', '0 0 100 100');
    var path = document.createElementNS(svgURI, 'path');
    var pathMovements = getArrowMovements(this.parent.options.arrowShape);
    path.setAttribute('d', pathMovements);
    path.setAttribute('class', 'arrow');
    // rotate arrow
    if (!this.isLeft) {
      path.setAttribute('transform', 'translate(100, 100) rotate(180) ');
    }
    svg.appendChild(path);
    return svg;
  };

  // get SVG path movmement
  function getArrowMovements(shape) {
    // use shape as movement if string
    if (typeof shape == 'string') {
      return shape;
    }
    // create movement string
    return 'M ' + shape.x0 + ',50' + ' L ' + shape.x1 + ',' + (shape.y1 + 50) + ' L ' + shape.x2 + ',' + (shape.y2 + 50) + ' L ' + shape.x3 + ',50 ' + ' L ' + shape.x2 + ',' + (50 - shape.y2) + ' L ' + shape.x1 + ',' + (50 - shape.y1) + ' Z';
  }

  PrevNextButton.prototype.onTap = function () {
    if (!this.isEnabled) {
      return;
    }
    this.parent.uiChange();
    var method = this.isPrevious ? 'previous' : 'next';
    this.parent[method]();
  };

  PrevNextButton.prototype.handleEvent = utils.handleEvent;

  PrevNextButton.prototype.onclick = function () {
    // only allow clicks from keyboard
    var focused = document.activeElement;
    if (focused && focused == this.element) {
      this.onTap();
    }
  };

  // -----  ----- //

  PrevNextButton.prototype.enable = function () {
    if (this.isEnabled) {
      return;
    }
    this.element.disabled = false;
    this.isEnabled = true;
  };

  PrevNextButton.prototype.disable = function () {
    if (!this.isEnabled) {
      return;
    }
    this.element.disabled = true;
    this.isEnabled = false;
  };

  PrevNextButton.prototype.update = function () {
    // index of first or last slide, if previous or next
    var slides = this.parent.slides;
    // enable is wrapAround and at least 2 slides
    if (this.parent.options.wrapAround && slides.length > 1) {
      this.enable();
      return;
    }
    var lastIndex = slides.length ? slides.length - 1 : 0;
    var boundIndex = this.isPrevious ? 0 : lastIndex;
    var method = this.parent.selectedIndex == boundIndex ? 'disable' : 'enable';
    this[method]();
  };

  PrevNextButton.prototype.destroy = function () {
    this.deactivate();
  };

  // -------------------------- Flickity prototype -------------------------- //

  utils.extend(Flickity.defaults, {
    prevNextButtons: true,
    arrowShape: {
      x0: 10,
      x1: 60,
      y1: 50,
      x2: 70,
      y2: 40,
      x3: 30
    }
  });

  Flickity.createMethods.push('_createPrevNextButtons');
  var proto = Flickity.prototype;

  proto._createPrevNextButtons = function () {
    if (!this.options.prevNextButtons) {
      return;
    }

    this.prevButton = new PrevNextButton(-1, this);
    this.nextButton = new PrevNextButton(1, this);

    this.on('activate', this.activatePrevNextButtons);
  };

  proto.activatePrevNextButtons = function () {
    this.prevButton.activate();
    this.nextButton.activate();
    this.on('deactivate', this.deactivatePrevNextButtons);
  };

  proto.deactivatePrevNextButtons = function () {
    this.prevButton.deactivate();
    this.nextButton.deactivate();
    this.off('deactivate', this.deactivatePrevNextButtons);
  };

  // --------------------------  -------------------------- //

  Flickity.PrevNextButton = PrevNextButton;

  return Flickity;
})

// page dots
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/page-dots', ['./flickity', 'tap-listener/tap-listener', 'fizzy-ui-utils/utils'], function (Flickity, TapListener, utils) {
      return factory(window, Flickity, TapListener, utils);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('tap-listener'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.TapListener, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, TapListener, utils) {
  // -------------------------- PageDots -------------------------- //

  function PageDots(parent) {
    this.parent = parent;
    this._create();
  }

  PageDots.prototype = new TapListener();

  PageDots.prototype._create = function () {
    // create holder element
    this.holder = document.createElement('ol');
    this.holder.className = 'flickity-page-dots';
    // create dots, array of elements
    this.dots = [];
    // events
    this.on('tap', this.onTap);
    this.on('pointerDown', this.parent.childUIPointerDown.bind(this.parent));
  };

  PageDots.prototype.activate = function () {
    this.setDots();
    this.bindTap(this.holder);
    // add to DOM
    this.parent.element.appendChild(this.holder);
  };

  PageDots.prototype.deactivate = function () {
    // remove from DOM
    this.parent.element.removeChild(this.holder);
    TapListener.prototype.destroy.call(this);
  };

  PageDots.prototype.setDots = function () {
    // get difference between number of slides and number of dots
    var delta = this.parent.slides.length - this.dots.length;
    if (delta > 0) {
      this.addDots(delta);
    } else if (delta < 0) {
      this.removeDots(-delta);
    }
  };

  PageDots.prototype.addDots = function (count) {
    var fragment = document.createDocumentFragment();
    var newDots = [];
    while (count) {
      var dot = document.createElement('li');
      dot.className = 'dot';
      fragment.appendChild(dot);
      newDots.push(dot);
      count--;
    }
    this.holder.appendChild(fragment);
    this.dots = this.dots.concat(newDots);
  };

  PageDots.prototype.removeDots = function (count) {
    // remove from this.dots collection
    var removeDots = this.dots.splice(this.dots.length - count, count);
    // remove from DOM
    removeDots.forEach(function (dot) {
      this.holder.removeChild(dot);
    }, this);
  };

  PageDots.prototype.updateSelected = function () {
    // remove selected class on previous
    if (this.selectedDot) {
      this.selectedDot.className = 'dot';
    }
    // don't proceed if no dots
    if (!this.dots.length) {
      return;
    }
    this.selectedDot = this.dots[this.parent.selectedIndex];
    this.selectedDot.className = 'dot is-selected';
  };

  PageDots.prototype.onTap = function (event) {
    var target = event.target;
    // only care about dot clicks
    if (target.nodeName != 'LI') {
      return;
    }

    this.parent.uiChange();
    var index = this.dots.indexOf(target);
    this.parent.select(index);
  };

  PageDots.prototype.destroy = function () {
    this.deactivate();
  };

  Flickity.PageDots = PageDots;

  // -------------------------- Flickity -------------------------- //

  utils.extend(Flickity.defaults, {
    pageDots: true
  });

  Flickity.createMethods.push('_createPageDots');

  var proto = Flickity.prototype;

  proto._createPageDots = function () {
    if (!this.options.pageDots) {
      return;
    }
    this.pageDots = new PageDots(this);
    // events
    this.on('activate', this.activatePageDots);
    this.on('select', this.updateSelectedPageDots);
    this.on('cellChange', this.updatePageDots);
    this.on('resize', this.updatePageDots);
    this.on('deactivate', this.deactivatePageDots);
  };

  proto.activatePageDots = function () {
    this.pageDots.activate();
  };

  proto.updateSelectedPageDots = function () {
    this.pageDots.updateSelected();
  };

  proto.updatePageDots = function () {
    this.pageDots.setDots();
  };

  proto.deactivatePageDots = function () {
    this.pageDots.deactivate();
  };

  // -----  ----- //

  Flickity.PageDots = PageDots;

  return Flickity;
})

// player & autoPlay
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/player', ['ev-emitter/ev-emitter', 'fizzy-ui-utils/utils', './flickity'], function (EvEmitter, utils, Flickity) {
      return factory(EvEmitter, utils, Flickity);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(require('ev-emitter'), require('fizzy-ui-utils'), require('./flickity'));
  } else {
    // browser global
    factory(window.EvEmitter, window.fizzyUIUtils, window.Flickity);
  }
})(window, function factory(EvEmitter, utils, Flickity) {
  // -------------------------- Page Visibility -------------------------- //
  // https://developer.mozilla.org/en-US/docs/Web/Guide/User_experience/Using_the_Page_Visibility_API

  var hiddenProperty, visibilityEvent;
  if ('hidden' in document) {
    hiddenProperty = 'hidden';
    visibilityEvent = 'visibilitychange';
  } else if ('webkitHidden' in document) {
    hiddenProperty = 'webkitHidden';
    visibilityEvent = 'webkitvisibilitychange';
  }

  // -------------------------- Player -------------------------- //

  function Player(parent) {
    this.parent = parent;
    this.state = 'stopped';
    // visibility change event handler
    if (visibilityEvent) {
      this.onVisibilityChange = function () {
        this.visibilityChange();
      }.bind(this);
      this.onVisibilityPlay = function () {
        this.visibilityPlay();
      }.bind(this);
    }
  }

  Player.prototype = Object.create(EvEmitter.prototype);

  // start play
  Player.prototype.play = function () {
    if (this.state == 'playing') {
      return;
    }
    // do not play if page is hidden, start playing when page is visible
    var isPageHidden = document[hiddenProperty];
    if (visibilityEvent && isPageHidden) {
      document.addEventListener(visibilityEvent, this.onVisibilityPlay);
      return;
    }

    this.state = 'playing';
    // listen to visibility change
    if (visibilityEvent) {
      document.addEventListener(visibilityEvent, this.onVisibilityChange);
    }
    // start ticking
    this.tick();
  };

  Player.prototype.tick = function () {
    // do not tick if not playing
    if (this.state != 'playing') {
      return;
    }

    var time = this.parent.options.autoPlay;
    // default to 3 seconds
    time = typeof time == 'number' ? time : 3000;
    var _this = this;
    // HACK: reset ticks if stopped and started within interval
    this.clear();
    this.timeout = setTimeout(function () {
      _this.parent.next(true);
      _this.tick();
    }, time);
  };

  Player.prototype.stop = function () {
    this.state = 'stopped';
    this.clear();
    // remove visibility change event
    if (visibilityEvent) {
      document.removeEventListener(visibilityEvent, this.onVisibilityChange);
    }
  };

  Player.prototype.clear = function () {
    clearTimeout(this.timeout);
  };

  Player.prototype.pause = function () {
    if (this.state == 'playing') {
      this.state = 'paused';
      this.clear();
    }
  };

  Player.prototype.unpause = function () {
    // re-start play if paused
    if (this.state == 'paused') {
      this.play();
    }
  };

  // pause if page visibility is hidden, unpause if visible
  Player.prototype.visibilityChange = function () {
    var isPageHidden = document[hiddenProperty];
    this[isPageHidden ? 'pause' : 'unpause']();
  };

  Player.prototype.visibilityPlay = function () {
    this.play();
    document.removeEventListener(visibilityEvent, this.onVisibilityPlay);
  };

  // -------------------------- Flickity -------------------------- //

  utils.extend(Flickity.defaults, {
    pauseAutoPlayOnHover: true
  });

  Flickity.createMethods.push('_createPlayer');
  var proto = Flickity.prototype;

  proto._createPlayer = function () {
    this.player = new Player(this);

    this.on('activate', this.activatePlayer);
    this.on('uiChange', this.stopPlayer);
    this.on('pointerDown', this.stopPlayer);
    this.on('deactivate', this.deactivatePlayer);
  };

  proto.activatePlayer = function () {
    if (!this.options.autoPlay) {
      return;
    }
    this.player.play();
    this.element.addEventListener('mouseenter', this);
  };

  // Player API, don't hate the ... thanks I know where the door is

  proto.playPlayer = function () {
    this.player.play();
  };

  proto.stopPlayer = function () {
    this.player.stop();
  };

  proto.pausePlayer = function () {
    this.player.pause();
  };

  proto.unpausePlayer = function () {
    this.player.unpause();
  };

  proto.deactivatePlayer = function () {
    this.player.stop();
    this.element.removeEventListener('mouseenter', this);
  };

  // ----- mouseenter/leave ----- //

  // pause auto-play on hover
  proto.onmouseenter = function () {
    if (!this.options.pauseAutoPlayOnHover) {
      return;
    }
    this.player.pause();
    this.element.addEventListener('mouseleave', this);
  };

  // resume auto-play on hover off
  proto.onmouseleave = function () {
    this.player.unpause();
    this.element.removeEventListener('mouseleave', this);
  };

  // -----  ----- //

  Flickity.Player = Player;

  return Flickity;
})

// add, remove cell
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/add-remove-cell', ['./flickity', 'fizzy-ui-utils/utils'], function (Flickity, utils) {
      return factory(window, Flickity, utils);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, utils) {
  // append cells to a document fragment
  function getCellsFragment(cells) {
    var fragment = document.createDocumentFragment();
    cells.forEach(function (cell) {
      fragment.appendChild(cell.element);
    });
    return fragment;
  }

  // -------------------------- add/remove cell prototype -------------------------- //

  var proto = Flickity.prototype;

  /**
  * Insert, prepend, or append cells
  * @param {Element, Array, NodeList} elems
  * @param {Integer} index
  */
  proto.insert = function (elems, index) {
    var cells = this._makeCells(elems);
    if (!cells || !cells.length) {
      return;
    }
    var len = this.cells.length;
    // default to append
    index = index === undefined ? len : index;
    // add cells with document fragment
    var fragment = getCellsFragment(cells);
    // append to slider
    var isAppend = index == len;
    if (isAppend) {
      this.slider.appendChild(fragment);
    } else {
      var insertCellElement = this.cells[index].element;
      this.slider.insertBefore(fragment, insertCellElement);
    }
    // add to this.cells
    if (index === 0) {
      // prepend, add to start
      this.cells = cells.concat(this.cells);
    } else if (isAppend) {
      // append, add to end
      this.cells = this.cells.concat(cells);
    } else {
      // insert in this.cells
      var endCells = this.cells.splice(index, len - index);
      this.cells = this.cells.concat(cells).concat(endCells);
    }

    this._sizeCells(cells);

    var selectedIndexDelta = index > this.selectedIndex ? 0 : cells.length;
    this._cellAddedRemoved(index, selectedIndexDelta);
  };

  proto.append = function (elems) {
    this.insert(elems, this.cells.length);
  };

  proto.prepend = function (elems) {
    this.insert(elems, 0);
  };

  /**
  * Remove cells
  * @param {Element, Array, NodeList} elems
  */
  proto.remove = function (elems) {
    var cells = this.getCells(elems);
    var selectedIndexDelta = 0;
    var len = cells.length;
    var i, cell;
    // calculate selectedIndexDelta, easier if done in seperate loop
    for (i = 0; i < len; i++) {
      cell = cells[i];
      var wasBefore = this.cells.indexOf(cell) < this.selectedIndex;
      selectedIndexDelta -= wasBefore ? 1 : 0;
    }

    for (i = 0; i < len; i++) {
      cell = cells[i];
      cell.remove();
      // remove item from collection
      utils.removeFrom(this.cells, cell);
    }

    if (cells.length) {
      // update stuff
      this._cellAddedRemoved(0, selectedIndexDelta);
    }
  };

  // updates when cells are added or removed
  proto._cellAddedRemoved = function (changedCellIndex, selectedIndexDelta) {
    // TODO this math isn't perfect with grouped slides
    selectedIndexDelta = selectedIndexDelta || 0;
    this.selectedIndex += selectedIndexDelta;
    this.selectedIndex = Math.max(0, Math.min(this.slides.length - 1, this.selectedIndex));

    this.cellChange(changedCellIndex, true);
    // backwards compatibility
    this.emitEvent('cellAddedRemoved', [changedCellIndex, selectedIndexDelta]);
  };

  /**
  * logic to be run after a cell's size changes
  * @param {Element} elem - cell's element
  */
  proto.cellSizeChange = function (elem) {
    var cell = this.getCell(elem);
    if (!cell) {
      return;
    }
    cell.getSize();

    var index = this.cells.indexOf(cell);
    this.cellChange(index);
  };

  /**
  * logic any time a cell is changed: added, removed, or size changed
  * @param {Integer} changedCellIndex - index of the changed cell, optional
  */
  proto.cellChange = function (changedCellIndex, isPositioningSlider) {
    var prevSlideableWidth = this.slideableWidth;
    this._positionCells(changedCellIndex);
    this._getWrapShiftCells();
    this.setGallerySize();
    this.emitEvent('cellChange', [changedCellIndex]);
    // position slider
    if (this.options.freeScroll) {
      // shift x by change in slideableWidth
      // TODO fix position shifts when prepending w/ freeScroll
      var deltaX = prevSlideableWidth - this.slideableWidth;
      this.x += deltaX * this.cellAlign;
      this.positionSlider();
    } else {
      // do not position slider after lazy load
      if (isPositioningSlider) {
        this.positionSliderAtSelected();
      }
      this.select(this.selectedIndex);
    }
  };

  // -----  ----- //

  return Flickity;
})

// lazyload
;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/lazyload', ['./flickity', 'fizzy-ui-utils/utils'], function (Flickity, utils) {
      return factory(window, Flickity, utils);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('./flickity'), require('fizzy-ui-utils'));
  } else {
    // browser global
    factory(window, window.Flickity, window.fizzyUIUtils);
  }
})(window, function factory(window, Flickity, utils) {
  'use strict';

  Flickity.createMethods.push('_createLazyload');
  var proto = Flickity.prototype;

  proto._createLazyload = function () {
    this.on('select', this.lazyLoad);
  };

  proto.lazyLoad = function () {
    var lazyLoad = this.options.lazyLoad;
    if (!lazyLoad) {
      return;
    }
    // get adjacent cells, use lazyLoad option for adjacent count
    var adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;
    var cellElems = this.getAdjacentCellElements(adjCount);
    // get lazy images in those cells
    var lazyImages = [];
    cellElems.forEach(function (cellElem) {
      var lazyCellImages = getCellLazyImages(cellElem);
      lazyImages = lazyImages.concat(lazyCellImages);
    });
    // load lazy images
    lazyImages.forEach(function (img) {
      new LazyLoader(img, this);
    }, this);
  };

  function getCellLazyImages(cellElem) {
    // check if cell element is lazy image
    if (cellElem.nodeName == 'IMG' && cellElem.getAttribute('data-flickity-lazyload')) {
      return [cellElem];
    }
    // select lazy images in cell
    var imgs = cellElem.querySelectorAll('img[data-flickity-lazyload]');
    return utils.makeArray(imgs);
  }

  // -------------------------- LazyLoader -------------------------- //

  /**
  * class to handle loading images
  */
  function LazyLoader(img, flickity) {
    this.img = img;
    this.flickity = flickity;
    this.load();
  }

  LazyLoader.prototype.handleEvent = utils.handleEvent;

  LazyLoader.prototype.load = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    // load image
    this.img.src = this.img.getAttribute('data-flickity-lazyload');
    // remove attr
    this.img.removeAttribute('data-flickity-lazyload');
  };

  LazyLoader.prototype.onload = function (event) {
    this.complete(event, 'flickity-lazyloaded');
  };

  LazyLoader.prototype.onerror = function (event) {
    this.complete(event, 'flickity-lazyerror');
  };

  LazyLoader.prototype.complete = function (event, className) {
    // unbind events
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);

    var cell = this.flickity.getParentCell(this.img);
    var cellElem = cell && cell.element;
    this.flickity.cellSizeChange(cellElem);

    this.img.classList.add(className);
    this.flickity.dispatchEvent('lazyLoad', event, cellElem);
  };

  // -----  ----- //

  Flickity.LazyLoader = LazyLoader;

  return Flickity;
})

/*!
 * Flickity v2.0.9
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * http://flickity.metafizzy.co
 * Copyright 2017 Metafizzy
 */

;(function (window, factory) {
  // universal module definition
  /* jshint strict: false */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity/js/index', ['./flickity', './drag', './prev-next-button', './page-dots', './player', './add-remove-cell', './lazyload'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(require('./flickity'), require('./drag'), require('./prev-next-button'), require('./page-dots'), require('./player'), require('./add-remove-cell'), require('./lazyload'));
  }
})(window, function factory(Flickity) {
  /*jshint strict: false*/
  return Flickity;
})

/*!
 * Flickity asNavFor v2.0.1
 * enable asNavFor for Flickity
 */

/*jshint browser: true, undef: true, unused: true, strict: true*/

;(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define('flickity-as-nav-for/as-nav-for', ['flickity/js/index', 'fizzy-ui-utils/utils'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(require('flickity'), require('fizzy-ui-utils'));
  } else {
    // browser global
    window.Flickity = factory(window.Flickity, window.fizzyUIUtils);
  }
})(window, function factory(Flickity, utils) {
  // -------------------------- asNavFor prototype -------------------------- //

  // Flickity.defaults.asNavFor = null;

  Flickity.createMethods.push('_createAsNavFor');

  var proto = Flickity.prototype;

  proto._createAsNavFor = function () {
    this.on('activate', this.activateAsNavFor);
    this.on('deactivate', this.deactivateAsNavFor);
    this.on('destroy', this.destroyAsNavFor);

    var asNavForOption = this.options.asNavFor;
    if (!asNavForOption) {
      return;
    }
    // HACK do async, give time for other flickity to be initalized
    var _this = this;
    setTimeout(function initNavCompanion() {
      _this.setNavCompanion(asNavForOption);
    });
  };

  proto.setNavCompanion = function (elem) {
    elem = utils.getQueryElement(elem);
    var companion = Flickity.data(elem);
    // stop if no companion or companion is self
    if (!companion || companion == this) {
      return;
    }

    this.navCompanion = companion;
    // companion select
    var _this = this;
    this.onNavCompanionSelect = function () {
      _this.navCompanionSelect();
    };
    companion.on('select', this.onNavCompanionSelect);
    // click
    this.on('staticClick', this.onNavStaticClick);

    this.navCompanionSelect(true);
  };

  proto.navCompanionSelect = function (isInstant) {
    if (!this.navCompanion) {
      return;
    }
    // select slide that matches first cell of slide
    var selectedCell = this.navCompanion.selectedCells[0];
    var firstIndex = this.navCompanion.cells.indexOf(selectedCell);
    var lastIndex = firstIndex + this.navCompanion.selectedCells.length - 1;
    var selectIndex = Math.floor(lerp(firstIndex, lastIndex, this.navCompanion.cellAlign));
    this.selectCell(selectIndex, false, isInstant);
    // set nav selected class
    this.removeNavSelectedElements();
    // stop if companion has more cells than this one
    if (selectIndex >= this.cells.length) {
      return;
    }

    var selectedCells = this.cells.slice(firstIndex, lastIndex + 1);
    this.navSelectedElements = selectedCells.map(function (cell) {
      return cell.element;
    });
    this.changeNavSelectedClass('add');
  };

  function lerp(a, b, t) {
    return (b - a) * t + a;
  }

  proto.changeNavSelectedClass = function (method) {
    this.navSelectedElements.forEach(function (navElem) {
      navElem.classList[method]('is-nav-selected');
    });
  };

  proto.activateAsNavFor = function () {
    this.navCompanionSelect(true);
  };

  proto.removeNavSelectedElements = function () {
    if (!this.navSelectedElements) {
      return;
    }
    this.changeNavSelectedClass('remove');
    delete this.navSelectedElements;
  };

  proto.onNavStaticClick = function (event, pointer, cellElement, cellIndex) {
    if (typeof cellIndex == 'number') {
      this.navCompanion.selectCell(cellIndex);
    }
  };

  proto.deactivateAsNavFor = function () {
    this.removeNavSelectedElements();
  };

  proto.destroyAsNavFor = function () {
    if (!this.navCompanion) {
      return;
    }
    this.navCompanion.off('select', this.onNavCompanionSelect);
    this.off('staticClick', this.onNavStaticClick);
    delete this.navCompanion;
  };

  // -----  ----- //

  return Flickity;
})

/*!
 * imagesLoaded v4.1.3
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

;(function (window, factory) {
  'use strict';
  // universal module definition

  /*global define: false, module: false, require: false */

  if (typeof define == 'function' && define.amd) {
    // AMD
    define('imagesloaded/imagesloaded', ['ev-emitter/ev-emitter'], function (EvEmitter) {
      return factory(window, EvEmitter);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('ev-emitter'));
  } else {
    // browser global
    window.imagesLoaded = factory(window, window.EvEmitter);
  }
})(typeof window !== 'undefined' ? window : undefined,

// --------------------------  factory -------------------------- //

function factory(window, EvEmitter) {
  var $ = window.jQuery;
  var console = window.console;

  // -------------------------- helpers -------------------------- //

  // extend objects
  function extend(a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }
    return a;
  }

  // turn element or nodeList into an array
  function makeArray(obj) {
    var ary = [];
    if (Array.isArray(obj)) {
      // use object if already an array
      ary = obj;
    } else if (typeof obj.length == 'number') {
      // convert nodeList to array
      for (var i = 0; i < obj.length; i++) {
        ary.push(obj[i]);
      }
    } else {
      // array of single index
      ary.push(obj);
    }
    return ary;
  }

  // -------------------------- imagesLoaded -------------------------- //

  /**
  * @param {Array, Element, NodeList, String} elem
  * @param {Object or Function} options - if function, use as callback
  * @param {Function} onAlways - callback function
  */
  function ImagesLoaded(elem, options, onAlways) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if (!(this instanceof ImagesLoaded)) {
      return new ImagesLoaded(elem, options, onAlways);
    }
    // use elem as selector string
    if (typeof elem == 'string') {
      elem = document.querySelectorAll(elem);
    }

    this.elements = makeArray(elem);
    this.options = extend({}, this.options);

    if (typeof options == 'function') {
      onAlways = options;
    } else {
      extend(this.options, options);
    }

    if (onAlways) {
      this.on('always', onAlways);
    }

    this.getImages();

    if ($) {
      // add jQuery Deferred object
      this.jqDeferred = new $.Deferred();
    }

    // HACK check async to allow time to bind listeners
    setTimeout(function () {
      this.check();
    }.bind(this));
  }

  ImagesLoaded.prototype = Object.create(EvEmitter.prototype);

  ImagesLoaded.prototype.options = {};

  ImagesLoaded.prototype.getImages = function () {
    this.images = [];

    // filter & find items if we have an item selector
    this.elements.forEach(this.addElementImages, this);
  };

  /**
  * @param {Node} element
  */
  ImagesLoaded.prototype.addElementImages = function (elem) {
    // filter siblings
    if (elem.nodeName == 'IMG') {
      this.addImage(elem);
    }
    // get background image on element
    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    }

    // find children
    // no non-element nodes, #143
    var nodeType = elem.nodeType;
    if (!nodeType || !elementNodeTypes[nodeType]) {
      return;
    }
    var childImgs = elem.querySelectorAll('img');
    // concat childElems to filterFound array
    for (var i = 0; i < childImgs.length; i++) {
      var img = childImgs[i];
      this.addImage(img);
    }

    // get child background images
    if (typeof this.options.background == 'string') {
      var children = elem.querySelectorAll(this.options.background);
      for (i = 0; i < children.length; i++) {
        var child = children[i];
        this.addElementBackgroundImages(child);
      }
    }
  };

  var elementNodeTypes = {
    1: true,
    9: true,
    11: true
  };

  ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
    var style = getComputedStyle(elem);
    if (!style) {
      // Firefox returns null if in a hidden iframe https://bugzil.la/548397
      return;
    }
    // get url inside url("...")
    var reURL = /url\((['"])?(.*?)\1\)/gi;
    var matches = reURL.exec(style.backgroundImage);
    while (matches !== null) {
      var url = matches && matches[2];
      if (url) {
        this.addBackground(url, elem);
      }
      matches = reURL.exec(style.backgroundImage);
    }
  };

  /**
  * @param {Image} img
  */
  ImagesLoaded.prototype.addImage = function (img) {
    var loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  };

  ImagesLoaded.prototype.addBackground = function (url, elem) {
    var background = new Background(url, elem);
    this.images.push(background);
  };

  ImagesLoaded.prototype.check = function () {
    var _this = this;
    this.progressedCount = 0;
    this.hasAnyBroken = false;
    // complete if no images
    if (!this.images.length) {
      this.complete();
      return;
    }

    function onProgress(image, elem, message) {
      // HACK - Chrome triggers event before object properties have changed. #83
      setTimeout(function () {
        _this.progress(image, elem, message);
      });
    }

    this.images.forEach(function (loadingImage) {
      loadingImage.once('progress', onProgress);
      loadingImage.check();
    });
  };

  ImagesLoaded.prototype.progress = function (image, elem, message) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
    // progress event
    this.emitEvent('progress', [this, image, elem]);
    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    }
    // check if completed
    if (this.progressedCount == this.images.length) {
      this.complete();
    }

    if (this.options.debug && console) {
      console.log('progress: ' + message, image, elem);
    }
  };

  ImagesLoaded.prototype.complete = function () {
    var eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(eventName, [this]);
    this.emitEvent('always', [this]);
    if (this.jqDeferred) {
      var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[jqMethod](this);
    }
  };

  // --------------------------  -------------------------- //

  function LoadingImage(img) {
    this.img = img;
  }

  LoadingImage.prototype = Object.create(EvEmitter.prototype);

  LoadingImage.prototype.check = function () {
    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    var isComplete = this.getIsImageComplete();
    if (isComplete) {
      // report based on naturalWidth
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    }

    // If none of the checks above matched, simulate loading on detached element.
    this.proxyImage = new Image();
    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this);
    // bind to image as well for Firefox. #191
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.src;
  };

  LoadingImage.prototype.getIsImageComplete = function () {
    return this.img.complete && this.img.naturalWidth !== undefined;
  };

  LoadingImage.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.img, message]);
  };

  // ----- events ----- //

  // trigger specified handler for event type
  LoadingImage.prototype.handleEvent = function (event) {
    var method = 'on' + event.type;
    if (this[method]) {
      this[method](event);
    }
  };

  LoadingImage.prototype.onload = function () {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };

  LoadingImage.prototype.onerror = function () {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };

  LoadingImage.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  // -------------------------- Background -------------------------- //

  function Background(url, element) {
    this.url = url;
    this.element = element;
    this.img = new Image();
  }

  // inherit LoadingImage prototype
  Background.prototype = Object.create(LoadingImage.prototype);

  Background.prototype.check = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url;
    // check if image is already complete
    var isComplete = this.getIsImageComplete();
    if (isComplete) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };

  Background.prototype.unbindEvents = function () {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  Background.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.element, message]);
  };

  // -------------------------- jQuery -------------------------- //

  ImagesLoaded.makeJQueryPlugin = function (jQuery) {
    jQuery = jQuery || window.jQuery;
    if (!jQuery) {
      return;
    }
    // set local variable
    $ = jQuery;
    // $().imagesLoaded()
    $.fn.imagesLoaded = function (options, callback) {
      var instance = new ImagesLoaded(this, options, callback);
      return instance.jqDeferred.promise($(this));
    };
  };
  // try making plugin
  ImagesLoaded.makeJQueryPlugin();

  // --------------------------  -------------------------- //

  return ImagesLoaded;
})

/*!
 * Flickity imagesLoaded v2.0.0
 * enables imagesLoaded option for Flickity
 */

/*jshint browser: true, strict: true, undef: true, unused: true */

;(function (window, factory) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */
  if (typeof define == 'function' && define.amd) {
    // AMD
    define(['flickity/js/index', 'imagesloaded/imagesloaded'], function (Flickity, imagesLoaded) {
      return factory(window, Flickity, imagesLoaded);
    });
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module.exports) {
    // CommonJS
    module.exports = factory(window, require('flickity'), require('imagesloaded'));
  } else {
    // browser global
    window.Flickity = factory(window, window.Flickity, window.imagesLoaded);
  }
})(window, function factory(window, Flickity, imagesLoaded) {
  'use strict';

  Flickity.createMethods.push('_createImagesLoaded');

  var proto = Flickity.prototype;

  proto._createImagesLoaded = function () {
    this.on('activate', this.imagesLoaded);
  };

  proto.imagesLoaded = function () {
    if (!this.options.imagesLoaded) {
      return;
    }
    var _this = this;
    function onImagesLoadedProgress(instance, image) {
      var cell = _this.getParentCell(image.img);
      _this.cellSizeChange(cell && cell.element);
      if (!_this.options.freeScroll) {
        _this.positionSliderAtSelected();
      }
    }
    imagesLoaded(this.slider).on('progress', onImagesLoadedProgress);
  };

  return Flickity;
});
/*!
 * in-view 0.6.1 - Get notified when a DOM element enters or exits the viewport.
 * Copyright (c) 2016 Cam Wiegert <cam@camwiegert.com> - https://camwiegert.github.io/in-view
 * License: MIT
 */
! function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.inView = e() : t.inView = e()
}(this, function() {
    return function(t) {
        function e(r) {
            if (n[r]) return n[r].exports;
            var i = n[r] = {
                exports: {},
                id: r,
                loaded: !1
            };
            return t[r].call(i.exports, i, i.exports, e), i.loaded = !0, i.exports
        }
        var n = {};
        return e.m = t, e.c = n, e.p = "", e(0)
    }([function(t, e, n) {
        "use strict";

        function r(t) {
            return t && t.__esModule ? t : {
                "default": t
            }
        }
        var i = n(2),
            o = r(i);
        t.exports = o["default"]
    }, function(t, e) {
        function n(t) {
            var e = typeof t;
            return null != t && ("object" == e || "function" == e)
        }
        t.exports = n
    }, function(t, e, n) {
        "use strict";

        function r(t) {
            return t && t.__esModule ? t : {
                "default": t
            }
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var i = n(9),
            o = r(i),
            u = n(3),
            f = r(u),
            s = n(4),
            c = function() {
                if ("undefined" != typeof window) {
                    var t = 100,
                        e = ["scroll", "resize", "load"],
                        n = {
                            history: []
                        },
                        r = {
                            offset: {},
                            threshold: 0,
                            test: s.inViewport
                        },
                        i = (0, o["default"])(function() {
                            n.history.forEach(function(t) {
                                n[t].check()
                            })
                        }, t);
                    e.forEach(function(t) {
                        return addEventListener(t, i)
                    }), window.MutationObserver && addEventListener("DOMContentLoaded", function() {
                        new MutationObserver(i).observe(document.body, {
                            attributes: !0,
                            childList: !0,
                            subtree: !0
                        })
                    });
                    var u = function(t) {
                        if ("string" == typeof t) {
                            var e = [].slice.call(document.querySelectorAll(t));
                            return n.history.indexOf(t) > -1 ? n[t].elements = e : (n[t] = (0, f["default"])(e, r), n.history.push(t)), n[t]
                        }
                    };
                    return u.offset = function(t) {
                        if (void 0 === t) return r.offset;
                        var e = function(t) {
                            return "number" == typeof t
                        };
                        return ["top", "right", "bottom", "left"].forEach(e(t) ? function(e) {
                            return r.offset[e] = t
                        } : function(n) {
                            return e(t[n]) ? r.offset[n] = t[n] : null
                        }), r.offset
                    }, u.threshold = function(t) {
                        return "number" == typeof t && t >= 0 && t <= 1 ? r.threshold = t : r.threshold
                    }, u.test = function(t) {
                        return "function" == typeof t ? r.test = t : r.test
                    }, u.is = function(t) {
                        return r.test(t, r)
                    }, u.offset(0), u
                }
            };
        e["default"] = c()
    }, function(t, e) {
        "use strict";

        function n(t, e) {
            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var r = function() {
                function t(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
                    }
                }
                return function(e, n, r) {
                    return n && t(e.prototype, n), r && t(e, r), e
                }
            }(),
            i = function() {
                function t(e, r) {
                    n(this, t), this.options = r, this.elements = e, this.current = [], this.handlers = {
                        enter: [],
                        exit: []
                    }, this.singles = {
                        enter: [],
                        exit: []
                    }
                }
                return r(t, [{
                    key: "check",
                    value: function() {
                        var t = this;
                        return this.elements.forEach(function(e) {
                            var n = t.options.test(e, t.options),
                                r = t.current.indexOf(e),
                                i = r > -1,
                                o = n && !i,
                                u = !n && i;
                            o && (t.current.push(e), t.emit("enter", e)), u && (t.current.splice(r, 1), t.emit("exit", e))
                        }), this
                    }
                }, {
                    key: "on",
                    value: function(t, e) {
                        return this.handlers[t].push(e), this
                    }
                }, {
                    key: "once",
                    value: function(t, e) {
                        return this.singles[t].unshift(e), this
                    }
                }, {
                    key: "emit",
                    value: function(t, e) {
                        for (; this.singles[t].length;) this.singles[t].pop()(e);
                        for (var n = this.handlers[t].length; --n > -1;) this.handlers[t][n](e);
                        return this
                    }
                }]), t
            }();
        e["default"] = function(t, e) {
            return new i(t, e)
        }
    }, function(t, e) {
        "use strict";

        function n(t, e) {
            var n = t.getBoundingClientRect(),
                r = n.top,
                i = n.right,
                o = n.bottom,
                u = n.left,
                f = n.width,
                s = n.height,
                c = {
                    t: o,
                    r: window.innerWidth - u,
                    b: window.innerHeight - r,
                    l: i
                },
                a = {
                    x: e.threshold * f,
                    y: e.threshold * s
                };
            return c.t > e.offset.top + a.y && c.r > e.offset.right + a.x && c.b > e.offset.bottom + a.y && c.l > e.offset.left + a.x
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }), e.inViewport = n
    }, function(t, e) {
        (function(e) {
            var n = "object" == typeof e && e && e.Object === Object && e;
            t.exports = n
        }).call(e, function() {
            return this
        }())
    }, function(t, e, n) {
        var r = n(5),
            i = "object" == typeof self && self && self.Object === Object && self,
            o = r || i || Function("return this")();
        t.exports = o
    }, function(t, e, n) {
        function r(t, e, n) {
            function r(e) {
                var n = x,
                    r = m;
                return x = m = void 0, E = e, w = t.apply(r, n)
            }

            function a(t) {
                return E = t, j = setTimeout(h, e), M ? r(t) : w
            }

            function l(t) {
                var n = t - O,
                    r = t - E,
                    i = e - n;
                return _ ? c(i, g - r) : i
            }

            function d(t) {
                var n = t - O,
                    r = t - E;
                return void 0 === O || n >= e || n < 0 || _ && r >= g
            }

            function h() {
                var t = o();
                return d(t) ? p(t) : void(j = setTimeout(h, l(t)))
            }

            function p(t) {
                return j = void 0, T && x ? r(t) : (x = m = void 0, w)
            }

            function v() {
                void 0 !== j && clearTimeout(j), E = 0, x = O = m = j = void 0
            }

            function y() {
                return void 0 === j ? w : p(o())
            }

            function b() {
                var t = o(),
                    n = d(t);
                if (x = arguments, m = this, O = t, n) {
                    if (void 0 === j) return a(O);
                    if (_) return j = setTimeout(h, e), r(O)
                }
                return void 0 === j && (j = setTimeout(h, e)), w
            }
            var x, m, g, w, j, O, E = 0,
                M = !1,
                _ = !1,
                T = !0;
            if ("function" != typeof t) throw new TypeError(f);
            return e = u(e) || 0, i(n) && (M = !!n.leading, _ = "maxWait" in n, g = _ ? s(u(n.maxWait) || 0, e) : g, T = "trailing" in n ? !!n.trailing : T), b.cancel = v, b.flush = y, b
        }
        var i = n(1),
            o = n(8),
            u = n(10),
            f = "Expected a function",
            s = Math.max,
            c = Math.min;
        t.exports = r
    }, function(t, e, n) {
        var r = n(6),
            i = function() {
                return r.Date.now()
            };
        t.exports = i
    }, function(t, e, n) {
        function r(t, e, n) {
            var r = !0,
                f = !0;
            if ("function" != typeof t) throw new TypeError(u);
            return o(n) && (r = "leading" in n ? !!n.leading : r, f = "trailing" in n ? !!n.trailing : f), i(t, e, {
                leading: r,
                maxWait: e,
                trailing: f
            })
        }
        var i = n(7),
            o = n(1),
            u = "Expected a function";
        t.exports = r
    }, function(t, e) {
        function n(t) {
            return t
        }
        t.exports = n
    }])
});
'use strict';

/**
 * You need to include this library for this class to work.
 *
 * https://github.com/camwiegert/in-view
 *
 * */

function Scroller(selectorClass) {
    let self = this;
    this.selector = selectorClass || '.Scroller';

    this.section = document.querySelector(this.selector);
    this.device = this.section.querySelector('.Scroller-device');
    this.text = this.section.querySelector('.Scroller-text');
    this.content = this.section.querySelector('.Scroller-content');
    this.slides = this.section.querySelectorAll('img[data-slide]');
    this.initialSectionPosition = this.section.offsetTop;
    this.y = 0;
    this.direction = '';

    this.setSectionWidth();

    this.setPlaceholders();

    window.addEventListener('scroll', function () {
        window.requestAnimationFrame(function () {
            self.affix();
            self.checkDuplicate();
        });
    });

    window.addEventListener('resize', function () {
        window.requestAnimationFrame(function () {
            self.setSectionWidth();
            self.affix();
            self.setInView();
            self.checkDuplicate();
        });
    });

    this.setInView();
}

Scroller.prototype.checkDuplicate = function () {
    var isActiveTextGroup = this.section.querySelectorAll('.Scroller-textGroup.is-active');

    if (isActiveTextGroup.length > 1) {
        if (this.direction == 'down') {
            isActiveTextGroup[1].classList.remove("is-active");
        } else {
            isActiveTextGroup[0].classList.remove("is-active");
        }
    }
};


Scroller.prototype.affix = function () {
    this.initialSectionPosition = this.section.offsetTop;
    var windowBottom = window.pageYOffset + window.innerHeight;
    var deviceHeight = this.device.getBoundingClientRect().height;
    var sectionHeight = this.section.getBoundingClientRect().height;
    var offset = (window.innerHeight - deviceHeight) / 2;

    this.direction = window.pageYOffset > this.y ? 'down' : 'up';

    if (this.direction == 'down') {
        this.text.classList.add('is-down');
        this.text.classList.remove('is-up');
    } else {
        this.text.classList.add('is-up');
        this.text.classList.remove('is-down');
    }

    this.y = window.pageYOffset;

    if (windowBottom >= this.initialSectionPosition + deviceHeight + offset &&
        windowBottom <= sectionHeight + this.initialSectionPosition + offset) {

        if (!this.content.classList.contains('is-active')) {
            this.content.classList.add('is-active');
        }

        if (this.content.classList.contains('is-bottom')) {
            this.content.classList.remove('is-bottom');
        }

        this.content.style.bottom = offset + 'px';

    } else if (windowBottom >= sectionHeight + this.initialSectionPosition - offset) {

        if (!this.content.classList.contains('is-bottom')) {
            this.content.classList.add('is-bottom');
        }

        this.content.style.bottom = '0px';

    } else {

        if (this.content.classList.contains('is-active')) {
            this.content.classList.remove('is-active');
        }

        this.content.style.bottom = '0px';
    }
};

Scroller.prototype.setPlaceholders = function () {
    for (var i = 0; i < this.slides.length; i++) {
        var placeholderElement = document.createElement('div');
        placeholderElement.classList.add('Scroller-placeholder');
        placeholderElement.setAttribute('data-slide-anchor', i);
        this.section.appendChild(placeholderElement);
    }
};

Scroller.prototype.setSectionWidth = function () {
    this.sectionParentStyle = window.getComputedStyle(this.section.parentElement, null);
    this.content.style.width = this.section.getBoundingClientRect().width - parseInt(this.sectionParentStyle.getPropertyValue("padding-left")) + 'px';
};

Scroller.prototype.setInView = function () {
    var self = this;
    var slideSelector = this.section.querySelector('.Scroller-placeholder');

    inView.offset(slideSelector.getBoundingClientRect().height * .5);

    inView(this.selector + ' [data-slide-anchor]')
        .on('enter', function (selector) {
            var slideNumber = selector.getAttribute('data-slide-anchor');
            var slides = self.section.querySelectorAll('[data-slide="' + slideNumber + '"]');

            for (var i = 0; i < slides.length; i++) {
                slides[i].classList.remove('is-hidden');
                slides[i].classList.add('is-active');
            }

        })
        .on('exit', function (selector) {
            var slideNumber = selector.getAttribute('data-slide-anchor');
            var slides = self.section.querySelectorAll('[data-slide="' + slideNumber + '"]');
            var firstSlide = self.section.querySelector('[data-slide="0"]');
            var lastSlide = self.section.querySelector('[data-slide="' + (self.slides.length - 1) + '"]');

            for (var i = 0; i < slides.length; i++) {
                slides[i].classList.remove('is-active');
                slides[i].classList.add('is-hidden');
            }

            if (self.direction == 'up' && slideNumber == 0) {
                firstSlide.classList.add('is-active');
            }

            if (self.direction == 'down' && slideNumber == (self.slides.length - 1)) {
                lastSlide.classList.add('is-active');
            }

            setTimeout(function () {
                for (var i = 0; i < slides.length; i++) {
                    slides[i].classList.remove('is-hidden');
                }
            }, 750);
        });
};



function initializeScrollerElement() {
	var scroller = document.getElementsByClassName("Scroller");
	for (i = 0, length = scroller.length; i < length; i++) {		
		var selector = '#' + scroller[i].id;
		new Scroller(selector);
	}
}

document.addEventListener('DOMContentLoaded', function () {
	initializeScrollerElement();
});

! function (a, b) {
    var c = b(a, a.document);
    a.lazySizes = c, "object" == typeof module && module.exports && (module.exports = c)
}(window, function (a, b) {
    "use strict";
    if (b.getElementsByClassName) {
        var c, d, e = b.documentElement,
            f = a.Date,
            g = a.HTMLPictureElement,
            h = "addEventListener",
            i = "getAttribute",
            j = a[h],
            k = a.setTimeout,
            l = a.requestAnimationFrame || k,
            m = a.requestIdleCallback,
            n = /^picture$/i,
            o = ["load", "error", "lazyincluded", "_lazyloaded"],
            p = {},
            q = Array.prototype.forEach,
            r = function (a, b) {
                return p[b] || (p[b] = new RegExp("(\\s|^)" + b + "(\\s|$)")), p[b].test(a[i]("class") || "") && p[b]
            },
            s = function (a, b) {
                r(a, b) || a.setAttribute("class", (a[i]("class") || "").trim() + " " + b)
            },
            t = function (a, b) {
                var c;
                (c = r(a, b)) && a.setAttribute("class", (a[i]("class") || "").replace(c, " "))
            },
            u = function (a, b, c) {
                var d = c ? h : "removeEventListener";
                c && u(a, b), o.forEach(function (c) {
                    a[d](c, b)
                })
            },
            v = function (a, d, e, f, g) {
                var h = b.createEvent("Event");
                return e || (e = {}), e.instance = c, h.initEvent(d, !f, !g), h.detail = e, a.dispatchEvent(h), h
            },
            w = function (b, c) {
                var e;
                !g && (e = a.picturefill || d.pf) ? (c && c.src && !b[i]("srcset") && b.setAttribute("srcset", c.src), e({
                    reevaluate: !0,
                    elements: [b]
                })) : c && c.src && (b.src = c.src)
            },
            x = function (a, b) {
                return (getComputedStyle(a, null) || {})[b]
            },
            y = function (a, b, c) {
                for (c = c || a.offsetWidth; c < d.minSize && b && !a._lazysizesWidth;) c = b.offsetWidth, b = b.parentNode;
                return c
            },
            z = function () {
                var a, c, d = [],
                    e = [],
                    f = d,
                    g = function () {
                        var b = f;
                        for (f = d.length ? e : d, a = !0, c = !1; b.length;) b.shift()();
                        a = !1
                    },
                    h = function (d, e) {
                        a && !e ? d.apply(this, arguments) : (f.push(d), c || (c = !0, (b.hidden ? k : l)(g)))
                    };
                return h._lsFlush = g, h
            }(),
            A = function (a, b) {
                return b ? function () {
                    z(a)
                } : function () {
                    var b = this,
                        c = arguments;
                    z(function () {
                        a.apply(b, c)
                    })
                }
            },
            B = function (a) {
                var b, c = 0,
                    e = d.throttleDelay,
                    g = d.ricTimeout,
                    h = function () {
                        b = !1, c = f.now(), a()
                    },
                    i = m && g > 49 ? function () {
                        m(h, {
                            timeout: g
                        }), g !== d.ricTimeout && (g = d.ricTimeout)
                    } : A(function () {
                        k(h)
                    }, !0);
                return function (a) {
                    var d;
                    (a = !0 === a) && (g = 33), b || (b = !0, d = e - (f.now() - c), d < 0 && (d = 0), a || d < 9 ? i() : k(i, d))
                }
            },
            C = function (a) {
                var b, c, d = 99,
                    e = function () {
                        b = null, a()
                    },
                    g = function () {
                        var a = f.now() - c;
                        a < d ? k(g, d - a) : (m || e)(e)
                    };
                return function () {
                    c = f.now(), b || (b = k(g, d))
                }
            };
        ! function () {
            var b, c = {
                lazyClass: "lazyload",
                loadedClass: "lazyloaded",
                loadingClass: "lazyloading",
                preloadClass: "lazypreload",
                errorClass: "lazyerror",
                autosizesClass: "lazyautosizes",
                srcAttr: "data-src",
                srcsetAttr: "data-srcset",
                sizesAttr: "data-sizes",
                minSize: 40,
                customMedia: {},
                init: !0,
                expFactor: 1.5,
                hFac: .8,
                loadMode: 2,
                loadHidden: !0,
                ricTimeout: 0,
                throttleDelay: 125
            };
            d = a.lazySizesConfig || a.lazysizesConfig || {};
            for (b in c) b in d || (d[b] = c[b]);
            a.lazySizesConfig = d, k(function () {
                d.init && F()
            })
        }();
        var D = function () {
            var g, l, m, o, p, y, D, F, G, H, I, J, K, L, M = /^img$/i,
                N = /^iframe$/i,
                O = "onscroll" in a && !/(gle|ing)bot/.test(navigator.userAgent),
                P = 0,
                Q = 0,
                R = 0,
                S = -1,
                T = function (a) {
                    R--, a && a.target && u(a.target, T), (!a || R < 0 || !a.target) && (R = 0)
                },
                U = function (a, c) {
                    var d, f = a,
                        g = "hidden" == x(b.body, "visibility") || "hidden" != x(a.parentNode, "visibility") && "hidden" != x(a, "visibility");
                    for (F -= c, I += c, G -= c, H += c; g && (f = f.offsetParent) && f != b.body && f != e;)(g = (x(f, "opacity") || 1) > 0) && "visible" != x(f, "overflow") && (d = f.getBoundingClientRect(), g = H > d.left && G < d.right && I > d.top - 1 && F < d.bottom + 1);
                    return g
                },
                V = function () {
                    var a, f, h, j, k, m, n, p, q, r = c.elements;
                    if ((o = d.loadMode) && R < 8 && (a = r.length)) {
                        f = 0, S++, null == K && ("expand" in d || (d.expand = e.clientHeight > 500 && e.clientWidth > 500 ? 500 : 370), J = d.expand, K = J * d.expFactor), Q < K && R < 1 && S > 2 && o > 2 && !b.hidden ? (Q = K, S = 0) : Q = o > 1 && S > 1 && R < 6 ? J : P;
                        for (; f < a; f++)
                            if (r[f] && !r[f]._lazyRace)
                                if (O)
                                    if ((p = r[f][i]("data-expand")) && (m = 1 * p) || (m = Q), q !== m && (y = innerWidth + m * L, D = innerHeight + m, n = -1 * m, q = m), h = r[f].getBoundingClientRect(), (I = h.bottom) >= n && (F = h.top) <= D && (H = h.right) >= n * L && (G = h.left) <= y && (I || H || G || F) && (d.loadHidden || "hidden" != x(r[f], "visibility")) && (l && R < 3 && !p && (o < 3 || S < 4) || U(r[f], m))) {
                                        if (ba(r[f]), k = !0, R > 9) break
                                    } else !k && l && !j && R < 4 && S < 4 && o > 2 && (g[0] || d.preloadAfterLoad) && (g[0] || !p && (I || H || G || F || "auto" != r[f][i](d.sizesAttr))) && (j = g[0] || r[f]);
                                else ba(r[f]);
                        j && !k && ba(j)
                    }
                },
                W = B(V),
                X = function (a) {
                    s(a.target, d.loadedClass), t(a.target, d.loadingClass), u(a.target, Z), v(a.target, "lazyloaded")
                },
                Y = A(X),
                Z = function (a) {
                    Y({
                        target: a.target
                    })
                },
                $ = function (a, b) {
                    try {
                        a.contentWindow.location.replace(b)
                    } catch (c) {
                        a.src = b
                    }
                },
                _ = function (a) {
                    var b, c = a[i](d.srcsetAttr);
                    (b = d.customMedia[a[i]("data-media") || a[i]("media")]) && a.setAttribute("media", b), c && a.setAttribute("srcset", c)
                },
                aa = A(function (a, b, c, e, f) {
                    var g, h, j, l, o, p;
                    (o = v(a, "lazybeforeunveil", b)).defaultPrevented || (e && (c ? s(a, d.autosizesClass) : a.setAttribute("sizes", e)), h = a[i](d.srcsetAttr), g = a[i](d.srcAttr), f && (j = a.parentNode, l = j && n.test(j.nodeName || "")), p = b.firesLoad || "src" in a && (h || g || l), o = {
                        target: a
                    }, p && (u(a, T, !0), clearTimeout(m), m = k(T, 2500), s(a, d.loadingClass), u(a, Z, !0)), l && q.call(j.getElementsByTagName("source"), _), h ? a.setAttribute("srcset", h) : g && !l && (N.test(a.nodeName) ? $(a, g) : a.src = g), f && (h || l) && w(a, {
                        src: g
                    })), a._lazyRace && delete a._lazyRace, t(a, d.lazyClass), z(function () {
                        (!p || a.complete && a.naturalWidth > 1) && (p ? T(o) : R--, X(o))
                    }, !0)
                }),
                ba = function (a) {
                    var b, c = M.test(a.nodeName),
                        e = c && (a[i](d.sizesAttr) || a[i]("sizes")),
                        f = "auto" == e;
                    (!f && l || !c || !a[i]("src") && !a.srcset || a.complete || r(a, d.errorClass) || !r(a, d.lazyClass)) && (b = v(a, "lazyunveilread").detail, f && E.updateElem(a, !0, a.offsetWidth), a._lazyRace = !0, R++, aa(a, b, f, e, c))
                },
                ca = function () {
                    if (!l) {
                        if (f.now() - p < 999) return void k(ca, 999);
                        var a = C(function () {
                            d.loadMode = 3, W()
                        });
                        l = !0, d.loadMode = 3, W(), j("scroll", function () {
                            3 == d.loadMode && (d.loadMode = 2), a()
                        }, !0)
                    }
                };
            return {
                _: function () {
                    p = f.now(), c.elements = b.getElementsByClassName(d.lazyClass), g = b.getElementsByClassName(d.lazyClass + " " + d.preloadClass), L = d.hFac, j("scroll", W, !0), j("resize", W, !0), a.MutationObserver ? new MutationObserver(W).observe(e, {
                        childList: !0,
                        subtree: !0,
                        attributes: !0
                    }) : (e[h]("DOMNodeInserted", W, !0), e[h]("DOMAttrModified", W, !0), setInterval(W, 999)), j("hashchange", W, !0), ["focus", "mouseover", "click", "load", "transitionend", "animationend", "webkitAnimationEnd"].forEach(function (a) {
                        b[h](a, W, !0)
                    }), /d$|^c/.test(b.readyState) ? ca() : (j("load", ca), b[h]("DOMContentLoaded", W), k(ca, 2e4)), c.elements.length ? (V(), z._lsFlush()) : W()
                },
                checkElems: W,
                unveil: ba
            }
        }(),
            E = function () {
                var a, c = A(function (a, b, c, d) {
                    var e, f, g;
                    if (a._lazysizesWidth = d, d += "px", a.setAttribute("sizes", d), n.test(b.nodeName || ""))
                        for (e = b.getElementsByTagName("source"), f = 0, g = e.length; f < g; f++) e[f].setAttribute("sizes", d);
                    c.detail.dataAttr || w(a, c.detail)
                }),
                    e = function (a, b, d) {
                        var e, f = a.parentNode;
                        f && (d = y(a, f, d), e = v(a, "lazybeforesizes", {
                            width: d,
                            dataAttr: !!b
                        }), e.defaultPrevented || (d = e.detail.width) && d !== a._lazysizesWidth && c(a, f, e, d))
                    },
                    f = function () {
                        var b, c = a.length;
                        if (c)
                            for (b = 0; b < c; b++) e(a[b])
                    },
                    g = C(f);
                return {
                    _: function () {
                        a = b.getElementsByClassName(d.autosizesClass), j("resize", g)
                    },
                    checkElems: g,
                    updateElem: e
                }
            }(),
            F = function () {
                F.i || (F.i = !0, E._(), D._())
            };
        return c = {
            cfg: d,
            autoSizer: E,
            loader: D,
            init: F,
            uP: w,
            aC: s,
            rC: t,
            hC: r,
            fire: v,
            gW: y,
            rAF: z
        }
    }
}); /*! lazysizes - v4.1.5 */
! function (a, b) {
    var c = b(a, a.document);
    a.lazySizes = c, "object" == typeof module && module.exports && (module.exports = c)
}(window, function (a, b) {
    "use strict";
    if (b.getElementsByClassName) {
        var c, d, e = b.documentElement,
            f = a.Date,
            g = a.HTMLPictureElement,
            h = "addEventListener",
            i = "getAttribute",
            j = a[h],
            k = a.setTimeout,
            l = a.requestAnimationFrame || k,
            m = a.requestIdleCallback,
            n = /^picture$/i,
            o = ["load", "error", "lazyincluded", "_lazyloaded"],
            p = {},
            q = Array.prototype.forEach,
            r = function (a, b) {
                return p[b] || (p[b] = new RegExp("(\\s|^)" + b + "(\\s|$)")), p[b].test(a[i]("class") || "") && p[b]
            },
            s = function (a, b) {
                r(a, b) || a.setAttribute("class", (a[i]("class") || "").trim() + " " + b)
            },
            t = function (a, b) {
                var c;
                (c = r(a, b)) && a.setAttribute("class", (a[i]("class") || "").replace(c, " "))
            },
            u = function (a, b, c) {
                var d = c ? h : "removeEventListener";
                c && u(a, b), o.forEach(function (c) {
                    a[d](c, b)
                })
            },
            v = function (a, d, e, f, g) {
                var h = b.createEvent("Event");
                return e || (e = {}), e.instance = c, h.initEvent(d, !f, !g), h.detail = e, a.dispatchEvent(h), h
            },
            w = function (b, c) {
                var e;
                !g && (e = a.picturefill || d.pf) ? (c && c.src && !b[i]("srcset") && b.setAttribute("srcset", c.src), e({
                    reevaluate: !0,
                    elements: [b]
                })) : c && c.src && (b.src = c.src)
            },
            x = function (a, b) {
                return (getComputedStyle(a, null) || {})[b]
            },
            y = function (a, b, c) {
                for (c = c || a.offsetWidth; c < d.minSize && b && !a._lazysizesWidth;) c = b.offsetWidth, b = b.parentNode;
                return c
            },
            z = function () {
                var a, c, d = [],
                    e = [],
                    f = d,
                    g = function () {
                        var b = f;
                        for (f = d.length ? e : d, a = !0, c = !1; b.length;) b.shift()();
                        a = !1
                    },
                    h = function (d, e) {
                        a && !e ? d.apply(this, arguments) : (f.push(d), c || (c = !0, (b.hidden ? k : l)(g)))
                    };
                return h._lsFlush = g, h
            }(),
            A = function (a, b) {
                return b ? function () {
                    z(a)
                } : function () {
                    var b = this,
                        c = arguments;
                    z(function () {
                        a.apply(b, c)
                    })
                }
            },
            B = function (a) {
                var b, c = 0,
                    e = d.throttleDelay,
                    g = d.ricTimeout,
                    h = function () {
                        b = !1, c = f.now(), a()
                    },
                    i = m && g > 49 ? function () {
                        m(h, {
                            timeout: g
                        }), g !== d.ricTimeout && (g = d.ricTimeout)
                    } : A(function () {
                        k(h)
                    }, !0);
                return function (a) {
                    var d;
                    (a = !0 === a) && (g = 33), b || (b = !0, d = e - (f.now() - c), d < 0 && (d = 0), a || d < 9 ? i() : k(i, d))
                }
            },
            C = function (a) {
                var b, c, d = 99,
                    e = function () {
                        b = null, a()
                    },
                    g = function () {
                        var a = f.now() - c;
                        a < d ? k(g, d - a) : (m || e)(e)
                    };
                return function () {
                    c = f.now(), b || (b = k(g, d))
                }
            };
        ! function () {
            var b, c = {
                lazyClass: "lazyload",
                loadedClass: "lazyloaded",
                loadingClass: "lazyloading",
                preloadClass: "lazypreload",
                errorClass: "lazyerror",
                autosizesClass: "lazyautosizes",
                srcAttr: "data-src",
                srcsetAttr: "data-srcset",
                sizesAttr: "data-sizes",
                minSize: 40,
                customMedia: {},
                init: !0,
                expFactor: 1.5,
                hFac: .8,
                loadMode: 2,
                loadHidden: !0,
                ricTimeout: 0,
                throttleDelay: 125
            };
            d = a.lazySizesConfig || a.lazysizesConfig || {};
            for (b in c) b in d || (d[b] = c[b]);
            a.lazySizesConfig = d, k(function () {
                d.init && F()
            })
        }();
        var D = function () {
            var g, l, m, o, p, y, D, F, G, H, I, J, K, L, M = /^img$/i,
                N = /^iframe$/i,
                O = "onscroll" in a && !/(gle|ing)bot/.test(navigator.userAgent),
                P = 0,
                Q = 0,
                R = 0,
                S = -1,
                T = function (a) {
                    R--, a && a.target && u(a.target, T), (!a || R < 0 || !a.target) && (R = 0)
                },
                U = function (a, c) {
                    var d, f = a,
                        g = "hidden" == x(b.body, "visibility") || "hidden" != x(a.parentNode, "visibility") && "hidden" != x(a, "visibility");
                    for (F -= c, I += c, G -= c, H += c; g && (f = f.offsetParent) && f != b.body && f != e;)(g = (x(f, "opacity") || 1) > 0) && "visible" != x(f, "overflow") && (d = f.getBoundingClientRect(), g = H > d.left && G < d.right && I > d.top - 1 && F < d.bottom + 1);
                    return g
                },
                V = function () {
                    var a, f, h, j, k, m, n, p, q, r = c.elements;
                    if ((o = d.loadMode) && R < 8 && (a = r.length)) {
                        f = 0, S++, null == K && ("expand" in d || (d.expand = e.clientHeight > 500 && e.clientWidth > 500 ? 500 : 370), J = d.expand, K = J * d.expFactor), Q < K && R < 1 && S > 2 && o > 2 && !b.hidden ? (Q = K, S = 0) : Q = o > 1 && S > 1 && R < 6 ? J : P;
                        for (; f < a; f++)
                            if (r[f] && !r[f]._lazyRace)
                                if (O)
                                    if ((p = r[f][i]("data-expand")) && (m = 1 * p) || (m = Q), q !== m && (y = innerWidth + m * L, D = innerHeight + m, n = -1 * m, q = m), h = r[f].getBoundingClientRect(), (I = h.bottom) >= n && (F = h.top) <= D && (H = h.right) >= n * L && (G = h.left) <= y && (I || H || G || F) && (d.loadHidden || "hidden" != x(r[f], "visibility")) && (l && R < 3 && !p && (o < 3 || S < 4) || U(r[f], m))) {
                                        if (ba(r[f]), k = !0, R > 9) break
                                    } else !k && l && !j && R < 4 && S < 4 && o > 2 && (g[0] || d.preloadAfterLoad) && (g[0] || !p && (I || H || G || F || "auto" != r[f][i](d.sizesAttr))) && (j = g[0] || r[f]);
                                else ba(r[f]);
                        j && !k && ba(j)
                    }
                },
                W = B(V),
                X = function (a) {
                    s(a.target, d.loadedClass), t(a.target, d.loadingClass), u(a.target, Z), v(a.target, "lazyloaded")
                },
                Y = A(X),
                Z = function (a) {
                    Y({
                        target: a.target
                    })
                },
                $ = function (a, b) {
                    try {
                        a.contentWindow.location.replace(b)
                    } catch (c) {
                        a.src = b
                    }
                },
                _ = function (a) {
                    var b, c = a[i](d.srcsetAttr);
                    (b = d.customMedia[a[i]("data-media") || a[i]("media")]) && a.setAttribute("media", b), c && a.setAttribute("srcset", c)
                },
                aa = A(function (a, b, c, e, f) {
                    var g, h, j, l, o, p;
                    (o = v(a, "lazybeforeunveil", b)).defaultPrevented || (e && (c ? s(a, d.autosizesClass) : a.setAttribute("sizes", e)), h = a[i](d.srcsetAttr), g = a[i](d.srcAttr), f && (j = a.parentNode, l = j && n.test(j.nodeName || "")), p = b.firesLoad || "src" in a && (h || g || l), o = {
                        target: a
                    }, p && (u(a, T, !0), clearTimeout(m), m = k(T, 2500), s(a, d.loadingClass), u(a, Z, !0)), l && q.call(j.getElementsByTagName("source"), _), h ? a.setAttribute("srcset", h) : g && !l && (N.test(a.nodeName) ? $(a, g) : a.src = g), f && (h || l) && w(a, {
                        src: g
                    })), a._lazyRace && delete a._lazyRace, t(a, d.lazyClass), z(function () {
                        (!p || a.complete && a.naturalWidth > 1) && (p ? T(o) : R--, X(o))
                    }, !0)
                }),
                ba = function (a) {
                    var b, c = M.test(a.nodeName),
                        e = c && (a[i](d.sizesAttr) || a[i]("sizes")),
                        f = "auto" == e;
                    (!f && l || !c || !a[i]("src") && !a.srcset || a.complete || r(a, d.errorClass) || !r(a, d.lazyClass)) && (b = v(a, "lazyunveilread").detail, f && E.updateElem(a, !0, a.offsetWidth), a._lazyRace = !0, R++, aa(a, b, f, e, c))
                },
                ca = function () {
                    if (!l) {
                        if (f.now() - p < 999) return void k(ca, 999);
                        var a = C(function () {
                            d.loadMode = 3, W()
                        });
                        l = !0, d.loadMode = 3, W(), j("scroll", function () {
                            3 == d.loadMode && (d.loadMode = 2), a()
                        }, !0)
                    }
                };
            return {
                _: function () {
                    p = f.now(), c.elements = b.getElementsByClassName(d.lazyClass), g = b.getElementsByClassName(d.lazyClass + " " + d.preloadClass), L = d.hFac, j("scroll", W, !0), j("resize", W, !0), a.MutationObserver ? new MutationObserver(W).observe(e, {
                        childList: !0,
                        subtree: !0,
                        attributes: !0
                    }) : (e[h]("DOMNodeInserted", W, !0), e[h]("DOMAttrModified", W, !0), setInterval(W, 999)), j("hashchange", W, !0), ["focus", "mouseover", "click", "load", "transitionend", "animationend", "webkitAnimationEnd"].forEach(function (a) {
                        b[h](a, W, !0)
                    }), /d$|^c/.test(b.readyState) ? ca() : (j("load", ca), b[h]("DOMContentLoaded", W), k(ca, 2e4)), c.elements.length ? (V(), z._lsFlush()) : W()
                },
                checkElems: W,
                unveil: ba
            }
        }(),
            E = function () {
                var a, c = A(function (a, b, c, d) {
                    var e, f, g;
                    if (a._lazysizesWidth = d, d += "px", a.setAttribute("sizes", d), n.test(b.nodeName || ""))
                        for (e = b.getElementsByTagName("source"), f = 0, g = e.length; f < g; f++) e[f].setAttribute("sizes", d);
                    c.detail.dataAttr || w(a, c.detail)
                }),
                    e = function (a, b, d) {
                        var e, f = a.parentNode;
                        f && (d = y(a, f, d), e = v(a, "lazybeforesizes", {
                            width: d,
                            dataAttr: !!b
                        }), e.defaultPrevented || (d = e.detail.width) && d !== a._lazysizesWidth && c(a, f, e, d))
                    },
                    f = function () {
                        var b, c = a.length;
                        if (c)
                            for (b = 0; b < c; b++) e(a[b])
                    },
                    g = C(f);
                return {
                    _: function () {
                        a = b.getElementsByClassName(d.autosizesClass), j("resize", g)
                    },
                    checkElems: g,
                    updateElem: e
                }
            }(),
            F = function () {
                F.i || (F.i = !0, E._(), D._())
            };
        return c = {
            cfg: d,
            autoSizer: E,
            loader: D,
            init: F,
            uP: w,
            aC: s,
            rC: t,
            hC: r,
            fire: v,
            gW: y,
            rAF: z
        }
    }
});
document.addEventListener("DOMContentLoaded", function () {
    var lazyloadImages;
    $('img, video').addClass("lazyload");
    $('script[data-src]').each(function () {
        $(this).attr('src', $(this).attr('data-src'));
        $(this).removeAttr('data-src');
    });
    var div = document.querySelector('.flickity-viewport img')
    $(window).bind('scroll', function () {
        if (div) {
            window.dispatchEvent(new Event('resize'));
            div = null
        }
    })
    if ("IntersectionObserver" in window) {
        lazyloadImages = document.querySelectorAll(".lazy-css");
        var imageObserver = new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (entry) {
                if (entry.isIntersecting) {
                    var image = entry.target;
                    image.classList.remove("lazy-css");
                    imageObserver.unobserve(image);
                }
            });
        });

        lazyloadImages.forEach(function (image) {
            imageObserver.observe(image);
        });
    } else {
        var lazyloadThrottleTimeout;
        lazyloadImages = document.querySelectorAll(".lazy-css");

        function lazyload() {
            if (lazyloadThrottleTimeout) {
                clearTimeout(lazyloadThrottleTimeout);
            }

            lazyloadThrottleTimeout = setTimeout(function () {
                var scrollTop = window.pageYOffset;
                lazyloadImages.forEach(function (img) {
                    if (img.offsetTop < (window.innerHeight + scrollTop)) {
                        img.src = img.dataset.src;
                        img.classList.remove('lazy-css');
                    }
                });
                if (lazyloadImages.length == 0) {
                    document.removeEventListener("scroll", lazyload);
                    window.removeEventListener("resize", lazyload);
                    window.removeEventListener("orientationChange", lazyload);
                }
            }, 20);
        }

        document.addEventListener("scroll", lazyload);
        window.addEventListener("resize", lazyload);
        window.addEventListener("orientationChange", lazyload);
    }
});

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Carousel = function () {
  function Carousel(selector) {
    _classCallCheck(this, Carousel);

    this.carousel = null;
    this.selector = selector;
    this.options = {
      cellAlign: 'left'
    };
    this.create();
  }

  _createClass(Carousel, [{
    key: 'create',
    value: function create() {
      this.carousel = new Flickity(this.selector, this.options);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.carousel.destroy();
    }
  }]);

  return Carousel;
}();

var dualHeros = document.querySelectorAll('.Hero-wrapper-dual');
var carousels = [];

// Check if viewport is wider than min width
function checkViewport(minWidth) {
  var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
  return w < minWidth ? true : false;
}

// Check if viewport width is greater than 767
// If so, destroy swiper
function checkInternetViewport() {
  var dualHeros = document.querySelectorAll('.Hero-wrapper-dual');
  if (dualHeros.length > 0){
    if (checkViewport(767)) {
        for(i = 0, length = dualHeros.length; i < length; i++) {
            var herocarousal = dualHeros[i].querySelector('.Hero-slides');
            carousels.push(new Carousel(herocarousal));
        }
      } else {
        carousels.map(function (carousel) {
          console.log(carousel instanceof Carousel);
          if (carousel.carousel instanceof Flickity) {
            carousel.carousel.destroy();
          }
        });
      }
  }

}

// Throttle a function call to only run {wait} ms
function throttle(callback, wait) {
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

  var timeout = null;
  var callbackArgs = null;

  var later = function later() {
    callback.apply(context, callbackArgs);
    timeout = null;
  };

  return function () {
    if (!timeout) {
      callbackArgs = arguments;
      timeout = setTimeout(later, wait);
    }
  };
}

// Callback that is checking widths to destroy the swiper
var handleWindowResize = throttle(function (e) {
  checkInternetViewport();
}, 300);

if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
) {
  handleWindowResize();
} else {
   document.addEventListener('DOMContentLoaded', handleWindowResize);
}
// Check window resize and dom ready for internet swiper
  window.addEventListener('resize', handleWindowResize);

  try{

  	    var pdcjson = document.getElementById("pdc_json").value;
  	    if(pdcjson != "" && pdcjson != "external"){
  	        pdc_json = JSON.parse(pdcjson);
  	    }
  	} catch(err) {
  		console.log('E - parsePDC::'+err);
  	}
/*! VZRF Version 2.23.0 */
/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2014
 */
function a11yInit(e) {
    var t = getContext(e);
    $vf(document).trigger("beforeA11yInit"), t.off("touchstart mousedown"), t.on("touchstart mousedown", function() {
        focusRingHide()
    }), t.off("keydown"), t.on("keydown", function(e) {
        var t = e.which;
        (9 === t || 27 === t || t >= 37 && t <= 40) && focusRingShow()
    }), $vf("a", t).each(function() {
        var e = $vf(this);
        e.is("[target=_blank]") && !e.is("title") && e.attr("title", "Opens New Window"), e.attr("role") || (!e.attr("href") || e[0].hasAttribute("href") && e.attr("href").length < 0) && e.attr("role", "button")
    }), $vf("main", t).attr("role", "main"), $vf("header", t).attr("role", "banner"), $vf("nav", t).attr("role", "navigation"), $vf("article", t).attr("role", "article"), $vf("section", t).attr("role", "region"), $vf("aside", t).attr("role", "complementary"),$vf(".button", t).each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr("role", "button")
    }), $vf(".loader", t).attr({
        role: "alertdialog",
        "aria-busy": "true"
    }), $vf(".w_top-bar", t).attr({
        role: "menubar"
    }), $vf("a", t).attr({
        tabindex: 0
    }), $vf(".vzicon", t).attr({
        "aria-hidden": "true"
    }), $vf(document).trigger("afterA11yInit")
}
function keyClick(e) {
    var t = e.charCode || e.keyCode;
    if ("click" === e.type) return !0;
    if ("keydown" === e.type) {
        if (e.altKey && 38 === e.which || e.altKey && 40 === e.which) return !0;
        if (32 === t) return e.currentTarget === e.target && e.preventDefault(), !0;
        if (13 === t) return !0
    } else {
        if ("keypress" !== e.type) return !1;
        if (32 === t) return e.currentTarget === e.target && e.preventDefault(), !0;
        if (13 === t) return !0
    }
}
function saveFocus() {
    try {
        $vfFocus = $vf(document.activeElement)
    } catch (e) {}
    return $vfFocus
}
function resetFocus() {
    return $vfFocus.focus(), $vfFocus
}
function focusRingHide() {
    if (0 === $vf("#HideFocusRing").length) {
        $vf("head").append('<style id="HideFocusRing">*:focus { outline:none; }input[type=checkbox]:focus + label::before,input[type=checkbox] + label:active::before,input[type=radio]:focus + label::before,input[type=radio] + label:active::before,input[type=checkbox]:focus + .switch {\toutline:none;}.vzrf *:focus { outline:none; }.vzrf input[type=checkbox]:focus + label::before,.vzrf input[type=checkbox] + label:active::before,.vzrf input[type=radio]:focus + label::before,.vzrf input[type=radio] + label:active::before,.vzrf input[type=checkbox]:focus + .switch {\toutline:none;}</style>')
    }
}
function focusRingShow() {
    $vf("#HideFocusRing").length && $vf("#HideFocusRing").remove()
}
function androidNumberToTel() {
    (bowser.android && browserDetect.simpleOsVersion <= 4 || 4.1 == browserDetect.simpleOsVersion || 4.3 == browserDetect.simpleOsVersion || 4.4 == browserDetect.simpleOsVersion) && $vf('input[type="number"]').attr("type", "tel")
}
function equalHeightsInit(e) {
    var t = getContext(e),
        a = [];
    $vf("[data-equal-height]", t).each(function() {
        var e = $vf(this).attr("data-equal-height"); - 1 === $vf.inArray(e, a) && a.push(e)
    }), a.length > 0 && (equalHeights(a), $vf(function() {
        $vf(window).on("resize", function(e, t, a) {
            var i;
            return function() {
                var r = this,
                    n = arguments,
                    s = function() {
                        i = null, a || e.apply(r, n)
                    },
                    o = a && !i;
                clearTimeout(i), i = setTimeout(s, t), o && e.apply(r, n)
            }
        }(function() {
            equalHeights(a)
        }, 100))
    }))
}
function equalHeights(e) {
    if ("string" == typeof e) {
        var t = e,
            e = [];
        e.push(t)
    } else e || $vf("[data-equal-height]").each(function() {
        var t = $vf(this).attr("data-equal-height");
        e = [], -1 === $vf.inArray(t, e) && e.push(t)
    });
    $vf.each(e, function(e, t) {
        var a, i = $vf('[data-equal-height="' + t + '"]');
        i.each(function(e) {
            var t = $vf(this);
            t.trigger("beforeEqualHeights"), t[0].style.removeProperty("height");
            var i = this.scrollHeight;
            0 === e ? a = i : i > a && (a = i), t.trigger("afterEqualHeights")
        }), i.css("height", a)
    })
}
function equalWidthsInit(e) {
    var t = getContext(e),
        a = [];
    $vf("[data-equal-width]", t).each(function() {
        var e = $vf(this).attr("data-equal-width"); - 1 === $vf.inArray(e, a) && a.push(e)
    }), a.length > 0 && (equalWidths(a), $vf(function() {
        $vf(window).on("resize", function(e, t, a) {
            var i;
            return function() {
                var r = this,
                    n = arguments,
                    s = function() {
                        i = null, a || e.apply(r, n)
                    },
                    o = a && !i;
                clearTimeout(i), i = setTimeout(s, t), o && e.apply(r, n)
            }
        }(function() {
            equalWidths(a)
        }, 100))
    }))
}
function equalWidths(e) {
    if ("string" == typeof e) {
        var t = e,
            e = [];
        e.push(t)
    } else e || $vf("[data-equal-height]").each(function() {
        var t = $vf(this).attr("data-equal-height");
        e = [], -1 === $vf.inArray(t, e) && e.push(t)
    });
    $vf.each(e, function(e, t) {
        var a = 999999,
            i = $vf('[data-equal-width="' + t + '"]');
        i.each(function(e) {
            var t = $vf(this);
            t.trigger("beforeEqualWidths"), t[0].style.removeProperty("width");
            var i = t.outerWidth();
            i < a && (a = i), t.trigger("afterEqualWidths")
        }), i.css("width", a)
    })
}
function fixedBottomInit(e) {
    var t;
    getContext(e);
    if ($vf(".page.active").length > 0) {
        t = $vf(".page.active");
        var a = $vf(".page.active [data-fixed-bottom]");
        a.appendTo("body"), $vf(window).on("hashchange", function() {
            a.appendTo(t)
        })
    } else var a = $vf("[data-fixed-bottom]");
    var i = a.outerHeight();
    $vf("#BottomSpacer").length < 1 && $vf("body").append('<div id="BottomSpacer"></div>'), $vf(document).trigger("beforeFixedBottom"), $vf("#BottomSpacer").css("height", i), $vf(document).trigger("afterFixedBottom")
}
function formsInit(e) {
    $vf(document).trigger("beforeFormsInit");
    var t = getContext(e);
    $vf("input, textarea", t).each(function() {
        var e = $vf(this);
        e.val() && "" != e.val() && void 0 != e.val() && e.addClass("value"), formsA11y(e)
    }), t.on("change", "input, textarea", function() {
        formsA11y($vf(this))
    }), $vf("label").click(function() {}), $vf("[maxlength]", t).each(function() {
        characterCountdown($vf(this))
    }), void 0 == document.createElement("input").placeholder && $vf("[placeholder]").focus(function() {
        var e = $vf(this);
        e.val() == e.attr("placeholder") && e.val("")
    }).blur(function() {
        var e = $vf(this);
        "" != e.val() && e.val() != e.attr("placeholder") || e.val(e.attr("placeholder"))
    }).blur(), $vf("select", t).each(function() {
        var e = $vf(this);
        e.val() ? e.addClass("value") : e.removeClass("value")
    }), t.off("keyup change", 'textarea, select, input:not([type="radio"], [type="checkbox"])'), t.on("keyup change", 'textarea, select, input:not([type="radio"], [type="checkbox"])', function() {
        var e = $vf(this);
        e.val() ? e.addClass("value") : e.removeClass("value")
    }), t.off("change", '.validation-wrap input[type="radio"], .validation-wrap input[type="checkbox"]'), t.on("change", '.validation-wrap input[type="radio"], .validation-wrap input[type="checkbox"]', function() {
        var e = $vf(this),
            t = e.closest(".validation-wrap"),
            a = e.attr("name");
        $vf("[name=" + a + "]", t).is(":checked") ? t.addClass("value") : t.removeClass("value")
    }), t.off("click", ".switch-wrap:not(.disabled)"), t.on("click", ".switch-wrap:not(.disabled)", function(e) {
        flipSwitch($vf("input[type=checkbox]", $vf(this)))
    }), t.off("keydown", ".switch-wrap:not(.disabled)"), t.on("keydown", ".switch-wrap:not(.disabled)", function(e) {
        var t = $vf("input[type=checkbox]", $vf(this));
        32 == e.keyCode && flipSwitch(t)
    }), t.off("click", "label[for]"), t.on("click", "label[for]", function() {
        flipSwitch($vf(this).attr("for"))
    }), t.off("click", "input[data-open-modal]"), t.on("click", "input[data-open-modal]", function() {
        $vf(this).blur()
    }), $vf("[data-field-icon]", t).each(function() {
        generateFieldIcon($vf(this))
    }), t.off("keyup", "textarea[maxlength], input[maxlength]"), t.on("keyup", "textarea[maxlength], input[maxlength]", function() {
        characterCountdown($vf(this))
    }), t.off("click", "[data-field-value]"), t.on("click", "[data-field-value]", function() {
        elementToField($vf(this))
    }), $vf("a.disabled[href]", t).each(function() {
        var e = $vf(this),
            t = e.attr("href");
        e.removeAttr("href"), e.attr("data-href", t), e.off("enable"), e.on("enable", function() {
            var e = $vf(this),
                t = e.attr("data-href");
            e.removeAttr("data-href"), e.attr("href", t).removeClass("disabled")
        })
    }), t.off("keyup blur", "input[data-sync-value]"), t.on("keyup blur", "input[data-sync-value]", function() {
        fieldSyncValues($vf(this))
    }), $vf(document).off("mousedown keydown", ".device-desktop select:not([data-no-fancy])"), $vf(document).on("mousedown keydown", ".device-desktop select:not([data-no-fancy])", function(e) {
        if (!$vf(this).attr("disabled") && ("mousedown" === e.type && 1 === e.which || "keydown" === e.type && (13 === e.which || 32 === e.which || e.altKey && 38 === e.which || e.altKey && 40 === e.which))) {
            var t = $vf(this);
            t.is("[data-fancy-open]") ? (e.preventDefault(), closeFancyOptions(t)) : (e.preventDefault(), generateFancyOptions(t))
        }
    }), $vf("[type=search]").attr("role", "search"), $vf("[disabled]").attr("aria-disabled", "true"), $vf(".disabled").attr("aria-disabled", "true"), $vf(".text-success").attr("aria-valid", "true"), $vf("[data-multi-select]").attr("aria-multiselectable", "true"), $vf(".switch-wrap").each(function() {
        switchA11y($vf(this))
    }), $vf(document).trigger("afterFormsInit")
}
function characterCountdown(e) {
    e.trigger("beforeCharacterCountdown");
    var t = e.attr("maxlength"),
        a = e.val().length,
        i = e.nextAll(".form-msg").last();
    $vf("[data-character-count]", i).text(a), a >= t ? i.addClass("text-alert") : i.removeClass("text-alert"), e.trigger("afterCharacterCountdown")
}
function elementToField(e) {
    e.trigger("beforeElementToField");
    var t;
    t = e.is("[data-field-id]") ? e.data("field-id") : e.closest("[data-field-id]").data("field-id");
    var a = e.data("field-value");
    a.length > 0 && $vf("#" + t).is("input") ? $vf("#" + t).val(a).addClass("value") : $vf("#" + t).is("input") ? $vf("#" + t).val(a).removeClass("value") : $vf("#" + t).text(a), e.trigger("afterElementToField")
}
function fieldSyncValues(e) {
    var t = e.attr("data-sync-value"),
        a = e.val(),
        i = $vf('[data-sync-value="' + t + '"]');
    e.trigger("beforeFieldSyncValues"), i.trigger("beforeFieldSyncValues"), i.val(a), i.val().length > 0 ? i.addClass("value") : i.removeClass("value"), e.hasClass("error") ? i.addClass("error") : i.removeClass("error"), e.trigger("afterFieldSyncValues"), i.trigger("afterFieldSyncValues")
}
function generateFieldIcon(e) {
    var t;
    e instanceof $vf || e instanceof jQuery ? t = e : e && (t = $vf("#" + e)), t.trigger("beforeGenerateFieldIcon");
    var a = t.attr("id"),
        i = t.attr("data-field-icon");
    if (t.prev(".field-icon").length) t.prev().attr("class", "field-icon").addClass(i);
    else {
        var r = '<label for="' + a + '" class="field-icon ' + i + '"></label>';
        t.before(r)
    }
    t.is("select") && t.prev().addClass("select-box"), t.trigger("afterGenerateFieldIcon")
}
function flipSwitch(e) {
    var t;
    e instanceof $vf || e instanceof jQuery ? t = e : e && (t = $vf("#" + e));
    var a = t.closest(".switch-wrap");
    if (t.trigger("beforeFlipSwitch"), t.is(".switch-input") && !t.is("[disabled]"))
        if (t.prop("checked") ? t.prop("checked", !1) : t.prop("checked", !0), t.focus(), "createEvent" in document) {
            var i = document.createEvent("HTMLEvents");
            i.initEvent("change", !1, !0), t[0].dispatchEvent(i)
        } else t[0].fireEvent("onchange");
    switchA11y(a), t.trigger("afterFlipSwitch")
}
function switchA11y(e) {
    e.find("[type=checkbox]").trigger("beforeSwitchA11y");
    var t = $vf("[type=checkbox]", e).prop("checked"),
        a = !!$vf("[type=checkbox]", e).is("[required]"),
        i = !1;
    ($vf("[type=checkbox]", e).is("[disabled], .disabled") || e.is("[disabled], .disabled")) && (i = !0), e.attr({
        role: "checkbox",
        "aria-checked": t,
        "aria-required": a,
        "aria-disabled": i
    }), e.find("[type=checkbox]").trigger("afterSwitchA11y")
}
function generateFancyOptions(e) {
    var t;
    e instanceof $vf || e instanceof jQuery ? t = e : e && (t = $vf("#" + e)), t.trigger("beforeGenerateFancyOptions");
    var a = "",
        i = t.attr("id"),
        r = [],
        n = {
            left: 37,
            up: 38,
            right: 39,
            down: 40,
            tab: 9,
            enter: 13,
            shift: 16,
            esc: 27
        };
    t.attr("data-fancy-open", ""), $vf("option, optgroup", t).each(function(e) {
        var a = $vf(this),
            i = {
                index: e,
                tabIndex: function() {
                    return t.prop("tabindex") ? t.prop("tabindex") : 0
                }(),
                text: a.text(),
                selected: function() {
                    return a.is(":selected") ? "selected" : ""
                }(),
                disabled: function() {
                    return a.is(":disabled") ? "disabled" : ""
                }(),
                groupChild: function() {
                    return !!a.parent().is("optgroup")
                }(),
                group: function() {
                    return !!a.is("optgroup") && {
                        count: a.children().length,
                        label: a.attr("label")
                    }
                }()
            };
        r.push(i)
    });
    var s = 0;
    $vf.each(r, function(e, t) {
        0 === t.index && (a += '<div class="w_fancy-options" data-select-id=' + i + ' aria-hidden="false"><ul class="fancy-options_list" role="listbox">'), t.group ? (s = t.group.count, a += '<li class="fancy-options_group" role="heading" title="' + t.group.label + '">' + t.group.label + "</li>") : s > 0 ? (a += '<li class="fancy-options_item m_group-item ' + t.selected + '" title="' + t.text + '" tabindex="-1" role="option" ' + t.disabled + ">" + t.text + "</li>", s--) : a += '<li class="fancy-options_item ' + t.selected + '" title="' + t.text + '" tabindex="-1" role="option" ' + t.disabled + ">" + t.text + "</li>", t.index === r.length - 1 && (a += "</ul></div>")
    }), t.after(a);
    var o = $vf(".w_fancy-options[data-select-id=" + i + "]"),
        l = {
            dsFlow: function() {
                var e = t[0].getBoundingClientRect(),
                    a = $vf(window).height(),
                    i = "down";
                return e.top > a - e.bottom && parseInt($vf(".fancy-options_list", o)[0].scrollHeight) > a - e.bottom && (i = "up"), {
                    flow: i,
                    spacing: e,
                    winHeight: a
                }
            },
            dsTop: function() {
                var e = l.dsFlow();
                return "down" == e.flow ? e.spacing.bottom : e.spacing.top - l.dsHeight()
            },
            dsLeft: function() {
                return l.dsFlow().spacing.left
            },
            dsRight: function() {
                return l.dsFlow().spacing.right
            },
            dsHeight: function() {
                var e, a = o[0].scrollHeight,
                    r = parseInt(o.css("max-height"), 10),
                    n = l.dsFlow();
                return "up" == n.flow ? (e = n.spacing.top, t.attr("data-fancy-open", "flow-up"), $vf('[data-select-id="' + i + '"]').addClass("m_flow-up")) : (e = n.winHeight - n.spacing.bottom, t.attr("data-fancy-open", ""), $vf('[data-select-id="' + i + '"]').removeClass("m_flow-up")), e < r || e < a ? e : a > r ? r : a
            },
            dsWidth: t.outerWidth()
        },
        d = function() {
            o.trigger("beforeSetDropdownPosition"), o.css({
                top: l.dsTop(),
                left: l.dsLeft(),
                minWidth: l.dsWidth
            }).addClass("active"), o.find(".fancy-options_list").css("height", "auto").css({
                minWidth: l.dsWidth,
                maxWidth: $vf(window).width() - l.dsRight() + l.dsWidth,
                height: l.dsHeight()
            }), o.trigger("afterSetDropdownPosition")
        };
    d(), $vf(".selected", o).hide().show().removeClass("selected").addClass("selected"), $vf(".selected", o).focus(), o.on("mousemove", ".fancy-options_item", function() {
        $vf(this).focus()
    }), o.on("mousedown keydown", ".fancy-options_item", function(e) {
        e.preventDefault();
        var a = o.find(".fancy-options_item:focus"),
            i = function(e) {
                var i = a.index(".fancy-options_item");
                if (t.prop("selectedIndex", i).addClass("value"), $vf(".fancy-options_item.selected").removeClass("selected"), $vf(".fancy-options_item:focus").addClass("selected"), "createEvent" in document) {
                    var r = document.createEvent("HTMLEvents");
                    r.initEvent("change", !1, !0), t[0].dispatchEvent(r)
                } else t[0].fireEvent("onchange");
                t.trigger("selectChange"), closeFancyOptions(t)
            };
        if ("mousedown" == e.type) i();
        else if ("keydown" == e.type)
            if (e.altKey && 38 === e.which || e.altKey && 40 === e.which) closeFancyOptions(t);
            else if (e.which == n.enter || e.which == n.tab) {
            if (a.is("[disabled]")) return e.stopPropagation(), !1;
            i(), t = $vf()
        } else if (e.which == n.down || e.which == n.right) {
            var r = a.next();
            r.is("[tabindex=-1]") ? r.focus() : r.next().focus()
        } else if (e.which == n.up || e.which == n.left) {
            var s = a.prev();
            s.is("[tabindex=-1]") ? s.focus() : s.prev().focus()
        } else e.which == n.esc && closeFancyOptions(t)
    }), $vf(window).off("scroll"), $vf(window).on("scroll", function() {
        o.is(".active") && d()
    }), o.parent().off("scroll"), o.parent().on("scroll", function() {
        o.is(".active") && d()
    }), $vf(window).off("resize orientationchange"), $vf(window).one("resize orientationchange", function() {
        o.is(":visible") && (closeFancyOptions(t), t = $vf())
    }), $vf(".fancy-options_group", o).on("mousedown", function(e) {
        e.preventDefault(), e.stopPropagation()
    }), $vf(".fancy-options_item, .fancy-options_list, .fancy-options_group", o).on("blur", function(e) {
        setTimeout(function() {
            0 == $vf(document.activeElement).closest(o).length && (e.preventDefault(), e.stopPropagation(), closeFancyOptions(t, !0))
        }, 1)
    }), t.trigger("afterGenerateFancyOptions")
}
function closeFancyOptions(e, t) {
    var a;
    e instanceof $vf || e instanceof jQuery ? a = e : e && (a = $vf("#" + e)), a.trigger("beforeCloseFancyOptions");
    var i = a.attr("id"),
        r = $vf(".w_fancy-options[data-select-id=" + i + "]");
    r.removeClass("active"), a.removeAttr("data-fancy-open"), t || a.focus(), r.off("blur mousedown", "**"), r.off(), r.remove(), r = $vf(), a.trigger("afterCloseFancyOptions")
}
function formsA11y(e) {
    var t;
    e instanceof $vf || e instanceof jQuery ? t = e : e && (t = $vf("#" + e));
    var a = (t.attr("data-parsley-id"), !!t.is("[required]"));
    if (t.is("[type=checkbox], [type=radio]")) {
        var i = t.is("[type=checkbox]") ? "checkbox" : "radio",
            r = t.prop("checked");
        t.next("label").attr({
            role: i,
            "aria-checked": r/*,
            "aria-required": a*/
        })
    } else t.attr({
    	// fix for JIRA IR- CETC-134946. 
       // "aria-required": a
    })
}
function incrementInit(e) {
    var t = getContext(e);
    $vf("[data-increment]", t).each(function() {
        var e = $vf(this);
        incrementMinMaxCheck(e), incrementMessageUpdate(e)
    }), t.on("click keypress", "[data-increment-plus]:not(.disabled)", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf(this).closest("[data-increment]");
            incrementPlus(t), incrementMinMaxCheck(t), incrementMessageUpdate(t)
        }
    }), t.on("click keypress", "[data-increment-minus]:not(.disabled)", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf(this).closest("[data-increment]");
            incrementMinus(t), incrementMinMaxCheck(t), incrementMessageUpdate(t)
        }
    })
}
function incrementMessageUpdate(e) {
    e.trigger("beforeIncrementMessageUpdate");
    var t = (e.attr("data-increment"), e.attr("data-increment-value") || 0),
        a = $vf("[data-increment-message]", e).attr("data-increment-message") || "#";
    t > 1 || t < 1 ? (a = a.replace("#", t), a = a.replace("~", "s")) : 1 == t && (a = a.replace("#", t), a = a.replace("~", "")), $vf("[data-increment-message]", e).text(a), e.trigger("afterIncrementMessageUpdate")
}
function incrementMinMaxCheck(e) {
    e.trigger("beforeIncrementMinMaxCheck");
    var t = parseFloat(e.attr("data-increment-min")) || 0,
        a = parseFloat(e.attr("data-increment-max")) || 1 / 0,
        i = parseFloat(e.attr("data-increment-value")) || 0;
    i <= t && ($vf("[data-increment-minus]", e).addClass("disabled"), e.attr("data-increment-value", t)), i >= a && ($vf("[data-increment-plus]", e).addClass("disabled"), e.attr("data-increment-value", a)), i < a && $vf("[data-increment-plus]", e).removeClass("disabled"), i > t && $vf("[data-increment-minus]", e).removeClass("disabled"), e.trigger("afterIncrementMinMaxCheck")
}
function incrementPlus(e) {
    e.trigger("beforeIncrementPlus");
    var t = parseFloat(e.attr("data-increment-value")),
        a = parseFloat(e.attr("data-increment")) || 1,
        i = t + a;
    e.attr("data-increment-value", i), e.trigger("afterIncrementPlus")
}
function incrementMinus(e) {
    e.trigger("beforeIncrementMinus");
    var t = parseFloat(e.attr("data-increment-value")),
        a = parseFloat(e.attr("data-increment")) || 1,
        i = parseFloat(t - a);
    e.attr("data-increment-value", i), e.trigger("afterIncrementMinus")
}
function xScrollInit(e) {
    var t, a, i, r, n = getContext(e);
    $vf("[data-xscroll]").children().css({
        display: "inline-block",
        float: "none"
    }), n.off("mousedown", "[data-xscroll]"), n.on("mousedown", "[data-xscroll]", function(e) {
        e.preventDefault(), $vf(e.target).parents("[data-xscroll]").length && (e.preventDefault(), t = !0, a = e.pageX, i = $vf(this).scrollLeft())
    }), n.off("mousemove", "[data-xscroll]"), n.on("mousemove", "[data-xscroll]", function(e) {
        t && (r = e.pageX, $vf(this).scrollLeft(i - r + a))
    }), n.off("mouseup click", "[data-xscroll]"), n.on("mouseup click", "[data-xscroll]", function(e) {
        if (t = !1, Math.abs(r - a) > 15) return !1
    })
}
function revealInit(e) {
    var t = getContext(e);
    $vf("[data-reveal-content].hide", t).each(function() {
        var e = $vf(this);
        e.css("display", "none"), revealHide($vf(this));
        var t = e.attr("data-reveal-content");
        $vf('[data-reveal-trigger*="' + t + '"]').attr("aria-expanded", !1)
    }), $vf("[data-reveal-content]:not(.hide)", t).each(function() {
        var e = $vf(this),
            t = e.attr("data-reveal-content");
        $vf('[data-reveal-trigger*="' + t + '"]').attr("aria-expanded", !0)
    }), $vf(document).off("change", "input[data-reveal-trigger]"), $vf(document).on("change", "input[data-reveal-trigger]", function() {
        updateReveal($vf(this))
    }), $vf(document).off("selectChange", "select[data-reveal-select]"), $vf(document).on("selectChange", "select[data-reveal-select]", function() {
        updateReveal($vf(this))
    }), $vf(document).off("click keypress", "[data-reveal-trigger]:not(input, label)"), $vf(document).on("click keypress", "[data-reveal-trigger]:not(input, label)", function(e) {
        !0 === keyClick(e) && updateReveal($vf(this))
    }), $vf("[data-reveal-content].hide", t).attr("aria-hidden", "true"), $vf("[data-reveal-content].hide", t).prop("hidden", !0), $vf("[data-reveal-content]:not(.hide)", t).attr("aria-hidden", "false"), $vf("[data-reveal-content]:not(.hide)", t).prop("hidden", !1), $vf("[data-reveal-trigger]", t).each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0)
    })
}
function updateReveal(e) {
    function t(e) {
        for (var t = e.attr("data-reveal-trigger").split(" "), a = $vf(), i = 0; i < t.length; i++) {
            var r = t[i] = t[i].trim();
            a = a.add('[data-reveal-content~="' + r + '"]');
            var n = $vf('[type=checkbox][data-reveal-trigger~="' + r + '"]').not(e),
                s = e.prop("checked");
            n.is("[data-reveal-rev]") ? n.prop("checked", !s) : n.prop("checked", s)
        }
        return a
    }
    if (e.trigger("beforeUpdateReveal"), e.trigger("beforeRevealUpdate"), e.is("[type=checkbox]")) {
        var a = t(e);
        e.is("[data-reveal-rev]") ? e.prop("checked") ? revealHide(a) : revealShow(a) : e.prop("checked") ? revealShow(a) : revealHide(a),
            function() {
                $vf("[type=checkbox][data-reveal-trigger]").each(function() {
                    var e = $vf(this),
                        t = e.attr("data-reveal-trigger").trim().split(" "),
                        a = !0,
                        i = !0;
                    $vf.each(t, function(t, r) {
                        $vf('[data-reveal-content="' + r + '"]').is(".hide") && !e.is("[data-reveal-rev]") ? (a = !1, i = !1) : !$vf('[data-reveal-content="' + r + '"]').is(".hide") && e.is("[data-reveal-rev]") && (a = !1, i = !1)
                    }), e.prop("checked", a)
                })
            }()
    } else if (e.is("[type=radio]")) {
        var i = e.attr("name"),
            r = $vf("input[name=" + i + "][data-reveal-trigger]"),
            n = $vf("input[name=" + i + "][data-reveal-trigger]:checked"),
            a = t(n),
            s = r.not(n),
            o = $vf();
        s.each(function() {
            o = o.add(t($vf(this)))
        }), n.is("[data-reveal-rev]") ? (revealHide(a), revealShow(o)) : (revealHide(o), revealShow(a))
    } else if (e.is("[data-reveal-select]")) {
        var l = $vf("option:selected", e),
            a = t(l),
            d = l.siblings("[data-reveal-trigger]"),
            o = $vf();
        d.each(function() {
            o = o.add(t($vf(this)))
        }), l.is("[data-reveal-rev]") ? (revealHide(a), revealShow(o)) : (revealHide(o), revealShow(a))
    } else if (e.is("[data-reveal-group]")) {
        var i = e.attr("data-reveal-group"),
            c = e.attr("data-reveal-trigger"),
            u = $vf("[data-reveal-content=" + c + "]"),
            p = $vf("[data-reveal-group=" + i + "]").not(e);
        u.is(".hide") ? revealShow(u) : revealHide(u), p.each(function() {
            var e = $vf(this),
                t = $vf("[data-reveal-content=" + e.attr("data-reveal-trigger") + "]");
            if (!t.is(":hidden") && e.is("[data-reveal-toggle-class]")) {
                var a = e.attr("data-reveal-toggle-class");
                e.toggleClass(a)
            }
            if (!t.is(":hidden") && e.is("[data-reveal-alt-text]")) {
                var i = e.attr("data-reveal-alt-text"),
                    r = e.text();
                e.text(i), e.attr("data-reveal-alt-text", r)
            }
            revealHide(t)
        })
    } else {
        var a = t(e),
            o = function(e) {
                if (e.is("[data-reveal-hide]")) {
                    for (var t = e.attr("data-reveal-hide").split(" "), a = $vf(), i = 0; i < t.length; i++) {
                        var r = t[i] = t[i].trim();
                        a = a.add('[data-reveal-content~="' + r + '"]');
                        var n = $vf('[type=checkbox][data-reveal-trigger~="' + r + '"]').not(e),
                            s = e.prop("checked");
                        n.is("[data-reveal-rev]") ? n.prop("checked", s) : n.prop("checked", !s)
                    }
                    return a
                }
                return !1
            }(e);
        a.each(function() {
            $vf(this).hasClass("hide") ? revealShow($vf(this)) : revealHide($vf(this))
        }), o.length && o.each(function() {
            revealHide($vf(this))
        })
    }
    if (e.is("[data-reveal-alt-text]")) {
        var f = e.attr("data-reveal-alt-text"),
            h = e.text();
        e.text(f), e.attr("data-reveal-alt-text", h)
    }
    if (e.is("[data-reveal-swap-html]") && $vf("[data-reveal-html]").each(function() {
            $vf(this).slideToggle()
        }), e.is("[data-reveal-toggle-class]")) {
        var v = e.attr("data-reveal-toggle-class");
        e.toggleClass(v)
    }
    e.trigger("afterUpdateReveal"), e.trigger("afterRevealUpdate")
}
function revealShow(e) {
    e.each(function() {
        var e = $vf(this),
            t = 300,
            a = parseInt(e.attr("data-reveal-speed"), 10);
        e.is("[data-reveal-speed]") && a % 1 == 0 && (t = a);
        var i = e.attr("data-reveal-content").trim().split(" ");
        e[0].style.transition = "opacity " + t + "ms", e[0].style.webkitTransition = "opacity " + t + "ms", e.trigger("beforeRevealShow"), e.slideDown(t), e.removeClass("hide"), e.attr("aria-hidden", "false"), e.prop("hidden", !1), e.trigger("afterRevealShow"), $vf.each(i, function(e, t) {
            $vf('[data-reveal-trigger*="' + t + '"]').attr("aria-expanded", !0)
        })
    })
}
function revealHide(e) {
    e.each(function() {
        var e = $vf(this),
            t = e.attr("data-reveal-content").trim().split(" "),
            a = 300,
            i = parseInt(e.attr("data-reveal-speed"), 10);
        e.is("[data-reveal-speed]") && i % 1 == 0 && (a = i), e[0].style.transition = "opacity " + a + "ms", e[0].style.webkitTransition = "opacity " + a + "ms", e.trigger("beforeRevealHide"), e.addClass("hide").slideUp(a), e.attr("aria-hidden", "true"), e.prop("hidden", !0), e.trigger("afterRevealHide"), $vf.each(t, function(e, t) {
            $vf('[data-reveal-trigger*="' + t + '"]').attr("aria-expanded", !1)
        })
    })
}
function stickyInit(e) {
    stickyKit(getContext(e))
}
function stickyKit(e) {
    $vf("[data-sticky]", e).each(function(e) {
        var t = $vf(this);
        t.trigger("beforeStickyKit");
        var a = {},
            i = {};
        t.attr("data-sticky").length && (a = t.attr("data-sticky"), i = JSON.parse(a));
        var r, n = t.closest("[data-sticky-parent]");
        r = "parent" in i ? $vf(i.parent) : n.length ? n : t.parent();
        var s = {
                parent: r
            },
            o = parseInt(t.css("z-index"), 10),
            l = t.attr("style");
        $vf.extend(s, i), t.stick_in_parent(s), t.on("sticky_kit:stick sticky_kit:unbottom", function() {
            "add_class" in i && t.addClass(i.add_class), "remove_class" in i && t.removeClass(i.remove_class), "z_index" in i ? t.css("z-index", i.z_index) : o < 1 ? t.css("z-index", 1) : t.css("z-index", o)
        }), t.on("sticky_kit:unstick sticky_kit:bottom", function() {
            "add_class" in i && t.removeClass(i.add_class), "remove_class" in i && t.addClass(i.remove_class)
        }), t.on("sticky_kit:unstick", function() {
            t.attr("style", l)
        }), t.trigger("afterStickyKit")
    })
}
function datepickerInit(e) {
    getContext(e);
    $vf.datepicker.setDefaults(datepickerGlobalOptions)
}
function dropListInit(e) {
    var t = getContext(e);
    t.off("click keydown", "[data-drop-list]:not(.disabled):not(.active) [data-drop-list-button]"), t.on("click keydown", "[data-drop-list]:not(.disabled):not(.active) [data-drop-list-button]", function(e) {
        if (!0 === keyClick(e)) {
            showDropList($vf(this).closest("[data-drop-list]"))
        }
    }), t.off("click keydown", "[data-drop-list] .drop-list_list > [tabindex=-1]:not([data-has-tabs])"), t.on("click keydown", "[data-drop-list] .drop-list_list > [tabindex=-1]:not([data-has-tabs])", function(e) {
        if (!0 === keyClick(e)) {
            if (!$vf(e.target).is("input, textarea, select, [data-has-tabs]")) {
                hideDropList($vf(this).closest("[data-drop-list]"))
            }
        }
    }), t.off("click keydown", "[data-drop-list-choices] > .drop-list_choice, [data-drop-list-select] > [tabindex=-1]"), t.on("click keydown", "[data-drop-list-choices] > .drop-list_choice, [data-drop-list-select] > [tabindex=-1]", function(e) {
        if (!0 === keyClick(e)) {
            if (!$vf(e.target).is("input, textarea, select, [data-has-tabs]")) {
                e.preventDefault();
                var t = $vf(this);
                t.siblings().removeClass("active").attr("aria-checked", !1), t.addClass("active").attr("aria-checked", !0)
            }
        }
    }), t.off("mouseleave", "[data-drop-list]"), t.on("mouseleave", "[data-drop-list]", function() {
        var e = $vf(this),
            t = setTimeout(function() {
                e.is(".active") ? hideDropList(e) : clearTimeout(t)
            }, 300);
        e.on("mouseenter", function() {
            clearTimeout(t)
        })
    }), t.off("click keydown", "[data-drop-list].active [data-drop-list-button]"), t.on("click keydown", "[data-drop-list].active [data-drop-list-button]", function(e) {
        if (!0 === keyClick(e)) {
            hideDropList($vf(this).closest("[data-drop-list]"))
        }
    }), t.off("click keydown", ".page-overlay.droplist, .nested-overlay"), t.on("click keydown", ".page-overlay.droplist, .nested-overlay", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf("[data-drop-list].active");
            t.length && hideDropList(t)
        }
    }), t.on("afterShowDropList", "[data-drop-list]", function() {
        setDropListHeight($vf(this))
    }), t.on("afterHideDropList", "[data-drop-list]", function() {
        setDropListHeight($vf(this), !0)
    }), $vf("[data-drop-list-button]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr("aria-listbox", !0)
    }), $vf(".drop-list_list > li, .drop-list_list > a, .drop-list_list > span, .drop-list_list > div").attr({
        role: "option",
        tabindex: -1
    }), $vf(".drop-list_list").prop("hidden", !0), $vf("[data-drop-list-select] > .active").attr("aria-checked", !0), $vf("[data-drop-list]").attr({
        role: "combobox"
    }), t.off("keydown", ".active > [data-drop-list-button]"), t.on("keydown", ".active > [data-drop-list-button]", function(e) {
        var t = $vf(this),
            a = t.closest("[data-drop-list]"),
            i = ($vf(".drop-list_list", a), e.which);
        a.is(".active") && (27 === i || 9 === i ? (e.preventDefault(), hideDropList(a)) : i >= 36 && i <= 40 ? (e.preventDefault(), $vf("[tabindex=-1]", a).first().focus()) : 35 === i && (e.preventDefault(), $vf("[tabindex=-1]", a).last().focus()))
    }), t.on("keydown", ".drop-list_list > [tabindex=-1]", function(e) {
        var t = $vf(this),
            a = t.closest("[data-drop-list]"),
            i = $vf(".drop-list_list > [tabindex=-1]", a),
            r = e.which;
        a.is(".active") && ($vf("[data-has-tabs] [tabindex=0]:focus").length < 1 && (36 === r ? (e.preventDefault(), i.first().focus()) : 35 === r ? (e.preventDefault(), i.last().focus()) : 39 === r || 40 === r ? (e.preventDefault(), t.is(":last-child") || t.next().focus()) : 38 === r || 37 === r ? (e.preventDefault(), t.is(":first-child") || t.prev().focus()) : (27 === r || 9 === r && !t.is("[data-has-tabs]")) && (e.preventDefault(), hideDropList(a))), !t.is("[data-has-tabs]") || e.target != e.currentTarget || 9 !== r && 13 !== r ? t.is("[data-has-tabs]") && 9 === r ? setTimeout(function() {
            0 === $vf(":focus").closest("[data-has-tabs]").length && t.focus()
        }, 1) : t.is("[data-has-tabs]") && 27 === r && t.focus() : (e.preventDefault(), $vf("[tabindex=0]", t).first().focus()))
    })
}
function showDropList(e) {
    if (e.trigger("beforeShowDropList"), saveFocus(), $vf(".drop-list_list", e).prop("hidden", !1), e.addClass("active"), e.closest("[data-modal]").length > 0) {
        var t = e.closest("[data-modal]");
        $vf("[data-modal-header], [data-modal-content], [data-modal-footer]", t).each(function() {
            $vf(this).append('<div class="nested-overlay" />')
        }), $vf(".nested-overlay", t).addClass("active invisible droplist")
    } else {
        $vf(".page-overlay").length < 1 && $vf("body").append('<div class="page-overlay"></div>');
        var a = $vf(".page-overlay");
        e.closest(".main").length ? a.appendTo(e.closest(".main")) : $vf(".page.active").length && a.appendTo(".page.active"), $vf(".page-overlay").addClass("active invisible droplist")
    }
    $vf(window).on("orientationchange", function() {
        hideDropList(e)
    }), e.trigger("afterShowDropList")
}
function hideDropList(e) {
    e.trigger("beforeHideDropList");
    var t = $vf(".drop-list_list", e),
        a = t.outerHeight();
    t.css("height", a), e.removeClass("active"), $vf(":focus").blur();
    var i;
    e.closest("[data-modal]").length > 0 ? (i = e.closest("[data-modal]").find(".nested-overlay"), i.removeClass("active invisible droplist"), setTimeout(function() {
        i.remove()
    }, 250)) : (i = $vf(".page-overlay"), i.removeClass("active invisible droplist"), setTimeout(function() {
        i.appendTo("body")
    }, 250)), setTimeout(function() {
        t[0].style.height = ""
    }, 300), resetFocus(), $vf(".drop-list_list", e).prop("hidden", !0), $vf(window).off("orientationchange"), e.trigger("afterHideDropList")
}
function setDropListHeight(e, t) {
    if (!e.find("[data-drop-list-scroll]").length) return !1;
    e.trigger("beforeSetDropListHeight");
    var a = $vf(window).height(),
        i = $vf("[data-drop-list-scroll]", e).height(),
        r = e[0].getBoundingClientRect().bottom,
        n = a - r - 1,
        s = $vf("[data-drop-list-scroll] > li > a, [data-drop-list-scroll] > a, [data-drop-list-scroll] > span", e),
        o = parseInt(s.css("padding-right"));
    if (i > n && !t) {
        var l = n;
        $vf("[data-drop-list-scroll]", e).css({
            height: l,
            "min-height": 100,
            "overflow-x": "hidden",
            "overflow-y": "auto"
        });
        var d = document.createElement("div");
        d.className = "scrollbar-measure", document.body.appendChild(d), $vf(".scrollbar-measure").css({
            width: 100,
            height: 100,
            overflow: "scroll",
            position: "absolute",
            top: -9999
        });
        var c = d.offsetWidth - d.clientWidth;
        document.body.removeChild(d);
        var u = o + c,
            p = s[0].scrollWidth - c,
            f = p + u;
        s.css({
            "padding-right": u,
            width: f
        })
    } else t && ($vf("[data-drop-list-scroll]", e)[0].style.overflow = "", s.each(function() {
        this.style.paddingRight = ""
    }));
    e.trigger("afterSetDropListHeight")
}
function filterBarInit(e) {
    var t = getContext(e);
    $vf("[data-filter-bar]", t).each(function() {
        var e = $vf(this);
        $vf("[data-filter-bar-item]", e).each(function() {
            $vf(this).is("[data-multi-select]") ? updateMultiFilter($vf(this)) : updateSingleFilter($vf(this), !0)
        })
    }), $vf(document).off("click keypress", "[data-filter-bar-item]:not(.disabled)"), $vf(document).on("click keypress", "[data-filter-bar-item]:not(.disabled)", function(e) {
        if (!0 === keyClick(e)) {
            e.preventDefault();
            var t = $vf(e.target),
                a = $vf(this);
            if (t.is("[data-filter-bar-choices], [data-filter-bar-choices] *")) return !1;
            if (a.is(".active")) return closeFilter(a), !1;
            if ($vf("[data-filter-bar-item].active").length) return closeFilter(a), !1;
            if (!(a.find("[data-filter-bar-choices] li").length > 1)) return !1;
            $vf("[data-filter-bar-item].active").removeClass("active"), openFilter(a)
        }
    }), t.off("click keypress", "[data-filter-bar-choices] li"), t.on("click keypress", "[data-filter-bar-choices] li", function(e) {
        if (!0 === keyClick(e)) {
            e.preventDefault();
            var t = $vf(this),
                a = t.closest("[data-filter-bar-item]");
            if (t.trigger("beforeClickFilterChoice"), a.is("[data-multi-select]")) {
                var i = $vf("[data-filter-bar-choices] li.active", a),
                    r = parseInt(a.attr("data-multi-select")) || 1 / 0,
                    n = i.length;
                t.hasClass("active") ? t.removeClass("active") : n < r ? t.addClass("active") : n == r && ($vf("[data-filter-bar-selected]", a).addClass("shake"), setTimeout(function() {
                    $vf("[data-filter-bar-selected]", a).removeClass("shake")
                }, 500)), updateMultiFilter(a)
            } else t.siblings().removeClass("active"), t.addClass("active"), t.closest("[data-filter-bar-choices]").removeClass("active"), updateSingleFilter(a, t);
            t.trigger("afterClickFilterChoice")
        }
    }), t.off("mouseleave", "[data-filter-bar] [data-filter-bar-item].active"), t.on("mouseleave", "[data-filter-bar] [data-filter-bar-item].active", function() {
        var e = $vf(this),
            t = setTimeout(function() {
                closeFilter(e)
            }, 300);
        e.on("mouseenter", function() {
            clearTimeout(t)
        })
    }), t.off("click keypress", ".page-overlay.filterbar, .nested-overlay"), t.on("click keypress", ".page-overlay.filterbar, .nested-overlay", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf("[data-filter-bar-item].active");
            t.length && closeFilter(t)
        }
    }), $vf("[data-filter-bar-item]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr("role", "combobox")
    }), $vf("[data-filter-bar-choices]").attr({
        role: "listbox",
        "aria-labelledby": "listlabel"
    }), $vf("[data-filter-bar-choices]").prop("hidden", !0), $vf("[data-filter-bar-choices] li").attr({
        role: "option",
        "aria-selected": "false"
    }), $vf("[data-filter-bar-choices] li.active").attr({
        "aria-selected": "true"
    }), t.off("keydown", "[data-filter-bar-item]:not(.disabled)"), t.on("keydown", "[data-filter-bar-item]:not(.disabled)", function(e) {
        var t = $vf(this),
            a = e.which;
        if ($vf(e.target).is("[data-filter-bar-item]:not(.disabled)"))
            if (t.is(".active")) 27 === a ? (e.preventDefault(), closeFilter(t)) : e.altKey && 38 === e.which || e.altKey && 40 === e.which ? (e.preventDefault(), closeFilter(t)) : a >= 36 && a <= 40 ? (e.preventDefault(), $vf(".filter-bar_choices", t).children().first().focus()) : 35 === a ? (e.preventDefault(), $vf(".filter-bar_choices", t).children().last().focus()) : 9 === a && closeFilter(t, !0);
            else if (e.altKey && 38 === e.which || e.altKey && 40 === e.which) {
            if (!(t.find("[data-filter-bar-choices] li").length > 1)) return !1;
            $vf("[data-filter-bar-item].active").removeClass("active"), openFilter(t)
        }
    }), t.off("keydown", "[data-filter-bar-choices] li"), t.on("keydown", "[data-filter-bar-choices] li", function(e) {
        var t = $vf(this),
            a = $vf(e.target),
            i = t.closest("[data-filter-bar-item]"),
            r = $vf("[data-filter-bar-choices] li", i),
            n = e.which;
        a.is("[data-filter-bar-item]:not(.disabled)") || i.is(".active") && (36 === n ? (e.preventDefault(), r.first().focus()) : 35 === n ? (e.preventDefault(), r.last().focus()) : e.altKey && 38 === e.which || e.altKey && 40 === e.which ? (e.preventDefault(), closeFilter(i)) : 39 === n || 40 === n ? (e.preventDefault(), t.is(":last-child") ? t.focus() : t.next().focus()) : 38 === n || 37 === n ? (e.preventDefault(), t.is(":first-child") ? t.focus() : t.prev().focus()) : 27 === n ? closeFilter(i) : 9 === n && (i.is("[data-multi-select]") ? (t.closest("[data-filter-bar-item]").focus(), closeFilter(i, !0)) : (t.siblings().removeClass("active"), t.addClass("active"), t.closest("[data-filter-bar-choices]").removeClass("active"), updateSingleFilter(i, !1, t, !0))))
    })
}
function openFilter(e) {
    if (e.trigger("beforeOpenFilter").addClass("active").attr("aria-expanded", !0), setChoiceListHeight(e), saveFocus(), e.closest("[data-modal]").length > 0) {
        var t = e.closest("[data-modal]");
        $vf("[data-modal-header], [data-modal-content], [data-modal-footer]", t).each(function() {
            $vf(this).append('<div class="nested-overlay" />')
        }), $vf(".nested-overlay", t).addClass("active invisible filterbar")
    } else {
        $vf(".page-overlay").length < 1 && $vf("body").append('<div class="page-overlay vzrf"></div>');
        var a = $vf(".page-overlay");
        e.closest(".main").length ? a.appendTo(e.closest(".main")) : $vf(".page.active").length && a.appendTo(".page.active"), $vf(".page-overlay").addClass("active invisible filterbar")
    }
    $vf(window).on("orientationchange", function() {
        closeFilter(e)
    }), $vf(".filter-bar_choices", e).prop("hidden", !1), $vf(".filter-bar_choices", e).children().attr({
        tabindex: -1
    }), e.trigger("afterOpenFilter")
}
function closeFilter(e, t) {
    function a() {
        $vf(".page-overlay").hasClass("modal") || $vf(".page-overlay").hasClass("droplist") ? i.removeClass("invisible filterbar") : i.removeClass("active invisible filterbar")
    }
    e.trigger("beforeCloseFilter").removeClass("active").attr("aria-expanded", !1), setChoiceListHeight(e, !0);
    var i;
    e.closest("[data-modal]").length > 0 ? (i = e.closest("[data-modal]").find(".nested-overlay"), a(), setTimeout(function() {
        i.remove()
    }, 250)) : (i = $vf(".page-overlay.filterbar"), a(), $vf(".page.active").length > 0 && setTimeout(function() {
        i.appendTo("body")
    }, 250)), !0 !== t && setTimeout(function() {
        resetFocus()
    }, 350), $vf(".filter-bar_choices", e).prop("hidden", !0), $vf(window).off("orientationchange"), e.trigger("afterCloseFilter")
}
function updateSingleFilter(e, t, a, i) {
    e.trigger("beforeUpdateSingleFilter");
    var r;
    e.find(":focus");
    a ? r = $vf("a", a).text() : e.has("li.active").length > 0 ? r = $vf("li.active a", e).text() : (r = $vf("[data-filter-bar-choices] li:first-child a", e).text(), $vf("[data-filter-bar-choices] li:first-child", e).addClass("active")), $vf("[data-filter-bar-selected]", e).text(r), 1 != t && closeFilter(e, i), e.trigger("afterUpdateSingleFilter")
}
function updateMultiFilter(e) {
    e.trigger("beforeUpdateMultiFilter");
    var t = "Make a selection";
    e.is("[data-null-text]") && (t = e.attr("data-null-text"));
    var a = "# Item~ Selected";
    e.is("[data-count-text]") && (a = e.attr("data-count-text"));
    var i, r = $vf("[data-filter-bar-choices] li.active", e).length;
    r > 1 ? (a = a.replace("#", r), i = a.replace("~", "s")) : 1 == r ? e.is("[data-count-text-singular]") ? (a = a.replace("#", r), i = a.replace("~", "")) : i = $vf(".active a", e).text() : r < 1 && (i = t), $vf("[data-filter-bar-selected]", e).text(i), e.trigger("afterUpdateMultiFilter")
}
function setChoiceListHeight(e, t) {
    e.trigger("beforeSetChoiceListHeight");
    var a = $vf(window).height(),
        i = $vf("[data-filter-bar-choices]", e).height(),
        r = e[0].getBoundingClientRect().bottom,
        n = a - r;
    if (i > n && !t) {
        var s = n - 15;
        $vf("[data-filter-bar-choices]", e).css({
            height: s,
            "min-height": 120,
            overflow: "auto"
        });
        var o = document.createElement("div");
        o.className = "scrollbar-measure", document.body.appendChild(o), $vf(".scrollbar-measure").css({
            width: 100,
            height: 100,
            overflow: "scroll",
            position: "absolute",
            top: -9999
        });
        var l = o.offsetWidth - o.clientWidth;
        document.body.removeChild(o), l > 0 && $vf("[data-filter-bar-choices] > li > a", e).css("text-overflow", "clip")
    } else t && setTimeout(function() {
        $vf("[data-filter-bar-choices]", e).removeAttr("style"), $vf("[data-filter-bar-choices] > li > a", e).removeAttr("style")
    }, 500);
    e.trigger("afterSetChoiceListHeight")
}
function listControlInit(e) {
    var t = getContext(e),
        a = function() {
            $vf("[data-list-control] > li", t).each(function(e) {
                listControlItemHeight($vf(this), e)
            })
        };
    $vf("[data-list-control]").length && (a(), $vf(window).on("resize orientationchange", function() {
        a()
    })), t.on("click keypress", "[data-list-control] [data-list-control-check]", function(e) {
        if (!0 === keyClick(e)) {
            listControlSelection($vf(this))
        }
    }), $vf("[data-list-control-check]", t).each(function() {
        var e = $vf(this);
        $vf(this).closest("[data-list-control] > li");
        e.is(":checked") ? e.closest("li").addClass("checked") : e.closest("li")
    }), t.off("click keypress", "[data-list-control] [data-accordion]"), t.on("click keypress", "[data-list-control] [data-accordion]", function(e) {
        if (!0 === keyClick(e)) {
            e.preventDefault();
            var t, a = $vf(this);
            a.is("[data-accordion-group]") && !a.hasClass("open") ? (t = a.attr("data-accordion-group"), $vf("[data-accordion-group=" + t + "]").each(function(e, t) {
                if ($vf(t).hasClass("open")) {
                    return closeAccordion($vf(t)), !1
                }
            }), openAccordion(a)) : a.hasClass("open") ? closeAccordion(a) : openAccordion(a)
        }
    }), $vf("[data-accordion]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr("aria-expanded", "false")
    }), $vf("[data-accordion].open").attr({
        "aria-expanded": "true"
    }), $vf("[data-accordion] + .m_accordion-details").attr({
    	// Commented out for Accessibility issue fixes.
    	//"aria-role": "tabpanel",
        "aria-hidden": "true"
    }), $vf("[data-accordion] + .m_accordion-details").prop({
        hidden: !0
    }), $vf("[data-accordion].open + .m_accordion-details").attr({
    	// Commented out for Accessibility issue fixes.
    	//"aria-role": "tabpanel",
        "aria-hidden": "false"
    }), $vf("[data-accordion].open + .m_accordion-details").prop({
        hidden: !1
    })
}
function openAccordion(e) {
    e.trigger("beforeOpenAccordion"), e.each(function() {
        var t = $vf(this),
            a = t.next();
        a.hide(), setTimeout(function() {
            t.addClass("open").attr("aria-expanded", "true"), listControlItemHeight(a), a.slideDown(300, function() {
                a.attr("aria-hidden", "false"), a.prop("hidden", !1)
            }), e.trigger("afterOpenAccordion")
        }, 50)
    })
}
function closeAccordion(e) {
    e.trigger("beforeCloseAccordion"), e.each(function() {
        var t = $vf(this),
            a = t.next();
        setTimeout(function() {
            a.slideUp(300).attr("aria-hidden", "true"), a.prop("hidden", !0), t.removeClass("open").attr("aria-expanded", "false"), e.trigger("afterCloseAccordion")
        }, 50)
    })
}
function listControlItemHeight(e) {
    e.trigger("beforeListControlItemHeight");
    var t = parseInt(e.css("min-height"), 10),
        a = parseInt(e.css("height"), 10);
    if (e.hasClass("m_single") && a == t) return !1;
    !e.hasClass("m_single") && a <= t ? e.addClass("m_single") : e.hasClass("m_single") && a > t + 5 && e.removeClass("m_single"), e.trigger("afterListControlItemHeight")
}
function listControlSelection(e) {
    if (e.trigger("beforeListControlSelection"), e.is("[type=radio]")) {
        var t = e.attr("name");
        $vf('[name="' + t + '"]').each(function() {
            var e = $vf(this),
                t = e.prop("checked"),
                a = e.closest("[data-list-control] > li");
            t ? a.addClass("checked") : a.removeClass("checked")
        })
    } else if (e.is("[type=checkbox]")) {
        var a = e.closest("[data-list-control] > li");
        e.prop("checked") ? a.addClass("checked") : a.removeClass("checked")
    }
    e.trigger("afterListControlSelection")
}
function modalInit(e) {
    var t = getContext(e);
    $vf("[data-modal]").addClass("vzrf"), t.off("click keypress", "[data-open-modal]"), t.on("click keypress", "[data-open-modal]", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf(this).attr("data-open-modal");
            if ($vf(this).attr("aria-haspopup", "false"), $vf(this).hasClass("disabled")) return !1;
            if ($vf(this).is("[data-modal-section]")) {
                openModal(t, $vf(this).attr("data-modal-section"))
            } else openModal(t)
        }
    }), t.off("click keypress", "[data-close-modal]"), t.on("click keypress", "[data-close-modal]", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf("[data-modal].active"),
                a = $vf(this).is("[data-open-modal]");
            if ($vf("[data-open-modal]").attr("aria-haspopup", "true"), $vf(this).hasClass("disabled")) return !1;
            if ($vf(this).is("[data-validate-form]")) {
                if (!$vf("form", t).parsley().isValid()) return !1;
                closeModal(t, a)
            } else closeModal(t, a)
        }
    }), $vf("[data-modal]", t).off("click keypress", "[data-modal-height], [data-accordion], [data-tab], [data-reveal-trigger], [data-reveal-trigger] + label"), $vf("[data-modal]", t).on("click keypress", "[data-modal-height], [data-accordion], [data-tab], [data-reveal-trigger], [data-reveal-trigger] + label", function(e) {
        modalContentSizeChange()
    }), t.off("click", ".page-overlay"), t.on("click", ".page-overlay", function() {
        var e = $vf("[data-modal].active");
        e.is("[data-disable-overlay-close]") || closeModal(e)
    }), $vf(document).off("beforeOpenFilter beforeShowDropList"), $vf(document).on("beforeOpenFilter beforeShowDropList", function(e) {
        if ($vf(e.target).closest("[data-modal].active").length) return !1;
        $vf("[data-modal].active").length && closeModal($vf("[data-modal].active"))
    }), $vf("[data-modal-iframe]", t).each(function() {
        modalIframeSetup($vf(this))
    }), t.off("afterOpenModal"), t.on("afterOpenModal", function() {
        setTimeout(function() {
            modalIframeSizing()
        }, 400), setTimeout(function() {
            modalIframeSizing()
        }, 700)
    }), $vf("[data-modal]:not(.active)", t).attr({
        role: "dialog",
        "aria-hidden": "true"
    }).prop("hidden", !0), $vf("[data-open-modal]", t).each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr({
           // Commented out for Accessibility issue fixes.
        	//"aria-label": "Opens a Modal",
            "aria-haspopup": "true"
        })
    }), $vf("[data-close-modal]", t).each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", -1), e.attr({
            "aria-label": "Close modal"
        })
    })
}
function openModal(e, t) {
    function a() {
        $vf("body, html").addClass("no-scroll"), !1 === r.is("[data-modal-traditional-mobile], [data-modal-oldschool-mobile]") && ($vf("html").is(".device-mobile") || $vf(window).width() <= 480 && $vf(window).height() <= 740 ? r.not(".m_cover-all").addClass("m_js-cover-all") : r.is(".m_js-cover-all") && r.removeClass("m_js-cover-all")), $vf(".page-overlay").addClass("active modal"), r.hasClass("m_show-top-bar") && $vf(".page-overlay").addClass("show-top-bar"), r.addClass("active"), $vf(window).on("keyup", function(e) {
            9 === e.which && 0 == $vf(e.target).closest(r).length && (e.preventDefault(), r.focus(), modalHeightSetter()), 27 === e.which && !1 === o && closeModal(r)
        })
    }
    function i() {
        r.trigger("beforeActivateSectionModal");
        var e = s.css("position");
        "absolute" != e && "relative" != e && "fixed" != e && s.css("position", "relative"), s.css("overflow", "hidden").attr("data-modal-section-element", "").scrollTop(0), $vf(".page-overlay").prependTo(s).addClass("modal absolute"), setTimeout(function() {
            $vf(".page-overlay").addClass("active")
        }, 10), r.prependTo(s).addClass("m_section"), setTimeout(function() {
            r.addClass("active"), modalHeightSetter()
        }, 10), r.on("keyup", function(e) {
            27 === e.which && !1 === o && closeModal(r)
        }), r.trigger("afterActivateSectionModal")
    }
    var r;
    e instanceof $vf || e instanceof jQuery ? r = e : e && (r = $vf("[data-modal=" + e + "]")), r.trigger("beforeOpenModal"), saveFocus(), r.attr({
        "aria-hidden": "false",
        tabindex: "0"
    }).prop("hidden", !1), $vf("[data-close-modal]", r).attr("tabindex", "0"), $vf("main").attr("aria-hidden", "true").prop("hidden", !0);
    var n = $vf("[data-modal].active"),
        s = ($vf("[data-modal-content]", r), $vf("[data-modal-header]", r), $vf("[data-modal-footer]", r), !1),
        o = r.is("[data-no-esc]");
    if (t instanceof $vf || t instanceof jQuery ? s = t : t && (s = $vf("#" + t)), r.length > 0) {
        if (!r.is(".active") && r.parent("body").length < 1 && r.appendTo("body"), $vf(".page-overlay").length < 1 ? $vf("body").append('<div class="page-overlay vzrf"></div>') : $vf(".page-overlay").addClass("vzrf"), r.is(n) && s.length > 0) {
            var l = r.closest("[data-modal-section-element]").attr("id");
            if (s.attr("id") === l) return !1;
            r.removeClass("active"), $vf("[data-modal-section-element]").removeAttr("[data-modal-section-element]"), $vf(".page-overlay").removeClass("active"), setTimeout(function() {
                i()
            }, 350)
        } else n.length > 0 && !s ? (closeModal(n), setTimeout(function() {
            a(), modalVertAlign()
        }, 350)) : n.length > 0 && s.length > 0 ? (closeModal(n, !0), setTimeout(function() {
            i(), modalVertAlign()
        }, 350)) : s ? i() : a();
        modalHeightSetter(), setTimeout(function() {
            r.focus()
        }, 350)
    }
    r.trigger("afterOpenModal")
}
function closeModal(e, t) {
    var a;
    e instanceof $vf || e instanceof jQuery ? a = e : e && (a = $vf("[data-modal=" + e + "]")), a.trigger("beforeCloseModal"), $vf(window).off("keyup"), $vf("[data-close-modal]", a).attr("tabindex", "-1");
    var i = a.height();
    a.css("height", i), a.removeClass("active show-top-bar"), setTimeout(function() {
        a.removeClass("m_section")
    }, 350);
    var r = $vf("[data-modal-section-element]");
    r.length > 0 && setTimeout(function() {
        r.attr("style", "").removeAttr("data-modal-section-element")
    }, 350), !0 !== t && ($vf(".page-overlay.modal").removeClass("active modal show-top-bar"), setTimeout(function() {
        $vf(".page-overlay").removeClass("absolute").appendTo("body")
    }, 350), $vf("body, html").removeClass("no-scroll")), a.css("top", "-100%"), $vf(":focus", a).blur(), $vf(".page.active").length > 0 && setTimeout(function() {
        a.appendTo(".page.active")
    }, 400), setTimeout(function() {
        a.attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).prop("hidden", !0), $vf("main").attr("aria-hidden", "false").prop("hidden", !1)
    }, 400), resetFocus(), a.trigger("afterCloseModal")
}
function modalHeightSetter() {
    if ($vf("[data-modal].active").length < 1) return !1;
    var e = $vf("[data-modal].active");
    e.trigger("beforeModalHeightSetter");
    var t = $vf("[data-modal-content]", e),
        a = $vf("[data-modal-header]", e),
        i = $vf("[data-modal-footer]", e);
    if (e[0].style.height = "", t[0].style.height = "", a.length) {
        a[0].style.height = "";
        var r = a[0].scrollHeight
    } else var r = 0;
    if (i.length) {
        i[0].style.height = "";
        var n = i[0].scrollHeight
    } else var n = 0;
    var s = $vf(window).height(),
        o = t[0].scrollHeight || 0;
    !1 === e.is("[data-modal-traditional-mobile], [data-modal-oldschool-mobile]") && ($vf("html").is(".device-mobile") || $vf(window).width() <= 480 && $vf(window).height() <= 740 ? e.not(".m_cover-all").addClass("m_js-cover-all") : e.is(".m_js-cover-all") && e.removeClass("m_js-cover-all"));
    var l = .9;
    e.is(".m_cover, .m_cover-all, .m_js-cover-all") && (l = 1);
    var d = l * s,
        c = d - r - n;
    e.is(".m_tall, .m_cover, .m_cover-all, .m_js-cover-all") && (o = c), e.css({
        "max-height": d
    }), t.css({
        "max-height": c,
        height: o
    }), modalVertAlign(), e.trigger("afterModalHeightSetter")
}
function modalContentSizeChange() {
    var e = $vf("[data-modal].active [data-modal-content]");
    e.trigger("beforeModalContentSizeChange"), e[0].scrollHeight <= e.height() && e.css("overflow-y", "hidden");
    var t = setInterval(function() {
        modalHeightSetter()
    }, 40);
    setTimeout(function() {
        clearInterval(t), $vf("[data-modal].active [data-modal-content]").css("overflow-y", "auto"), e.trigger("afterModalContentSizeChange")
    }, 400)
}
function modalVertAlign() {
    var e = $vf("[data-modal].active"),
        t = e.height();
    e.is(".m_vert-top, m_tall") ? e.css({
        top: "5%",
        "margin-top": $vf(window).scrollTop()
    }) : e.is(".m_cover, .m_cover-all, .m_js-cover-all") ? e.css({
        top: 0,
        "margin-top": $vf(window).scrollTop()
    }) : e.css({
        top: "50%",
        "margin-top": -1 * t / 2 + $vf(window).scrollTop()
    })
}
function modalIframeSetup(e) {
    if (e.trigger("beforeModalIframeSetup"), $vf("iframe", e).length) return !1;
    var t = e.attr("data-modal-iframe"),
        a = $vf('<iframe src="' + t + '" scrolling="no"></iframe>'),
        i = '<div class="modal_content m_has-iframe" data-modal-content></div>';
    $vf("[data-modal-content]", e).length < 1 ? $vf("[data-modal-header]", e).length ? $vf("[data-modal-header]", e).after(i) : $vf(".modal_x", e).length ? $vf(".modal_x", e).after(i) : e.prepend(i) : $vf("[data-modal-content]").addClass("m_has-iframe"), $vf.get(t).fail(function() {}).done(function() {
        $vf("[data-modal-content]", e).append(a), modalIframeSizing()
    }), e.trigger("afterModalIframeSetup")
}
function modalIframeSizing() {
    var e = $vf("[data-modal].active iframe");
    e.trigger("beforeModalIframeSizing"), iframeNewHeight = e.contents().find("body").outerHeight(), e.height(iframeNewHeight), modalHeightSetter(), e.trigger("afterModalIframeSizing")
}
function paginationInit(e) {
    var t = getContext(e);
    $vf("[data-pagination]").each(function() {
        var e = $vf(this);
        paginationBuilder(e, e.attr("data-pagination")), !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr({
            role: "menubar",
            "aria-label": "Pagination"
        })
    });
    var a;
    $vf(window).on("resize", function(e) {
        clearTimeout(a), a = setTimeout(function() {
            $vf("[data-pagination]").each(function() {
                paginationDisplay($vf(this))
            })
        }, 50)
    }), t.off("click keypress", "[data-pagination] a"), t.on("click keypress", "[data-pagination] a", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf(this),
                a = t.parent();
            if (a.is("[data-page-first]")) paginationSetCurrentPage(t.closest("[data-pagination]"), "first");
            else if (a.is("[data-page-previous]")) paginationSetCurrentPage(t.closest("[data-pagination]"), "previous");
            else if (a.is("[data-page-next]")) paginationSetCurrentPage(t.closest("[data-pagination]"), "next");
            else if (a.is("[data-page-last]")) paginationSetCurrentPage(t.closest("[data-pagination]"), "last");
            else if (a.is("[data-page-number]")) {
                var i = parseInt(t.closest("[data-page-number]").attr("data-page-number"));
                paginationSetCurrentPage(t.closest("[data-pagination]"), i)
            }
        }
    }), t.off("keydown", "[data-pagination]"), t.on("keydown", "[data-pagination]", function(e) {
        var t = $vf(this);
        36 === e.which ? paginationSetCurrentPage(t, "first") : 35 === e.which ? paginationSetCurrentPage(t, "last") : 37 === e.which || 38 === e.which ? paginationSetCurrentPage(t, "previous") : 39 !== e.which && 40 !== e.which || paginationSetCurrentPage(t, "next"), e.which > 34 && e.which < 41 && (e.preventDefault(), $vf(".active a", t).focus())
    })
}
function paginationBuilder(e, t) {
    e instanceof $vf || e instanceof jQuery ? $list = e : $list = $vf("#" + e);
    var a = !1;
    if ($list.data("initialized")) var a = !0;
    $list.trigger("beforePaginationBuilder"), "string" == typeof t && t.length && (t = JSON.parse(t));
    var i, r, n = {
            numPages: 1,
            currentPage: null,
            includeFirstLast: !0,
            firstLastUsesText: !0,
            useEllipsis: !0,
            onPaginationLoad: function() {},
            onPaginate: function() {}
        },
        s = $vf.extend({}, n, t, $list.data()),
        o = "";
    if ($list.is("div")) i = "div";
    else {
        if (!$list.is("ul")) return !1;
        i = "li"
    }
    a ? (null == s.currentPage && (s.currentPage = parseInt($list.data("currentPage"))), $list.empty()) : null == s.currentPage && (s.currentPage = 1), s.firstLastUsesText && s.includeFirstLast ? o += "<" + i + ' class="pagination_item m_first m_text" data-page-first title="first"><a href="#FirstPage" tabindex="-1" aria-label="Go to first page">First</a></' + i + ">" : s.includeFirstLast && (o += "<" + i + ' class="pagination_item m_first" data-page-first title="first"><a href="#FirstPage" tabindex="-1" aria-label="Go to first page"></a></' + i + ">"), o += "<" + i + ' class="pagination_item m_prev" data-page-previous title="previous"><a href="#PreviousPage" tabindex="-1" aria-label="Go to previous page"></a></' + i + ">";
    for (var l = 1; l <= s.numPages; l++) l != s.numPages ? o += "<" + i + ' class="pagination_item" data-page-number="' + l + '"><a href="#Page' + l + '" tabindex="-1" aria-label="Page ' + l + '" aria-checked="false" role="menuitemradio">' + l + "</a></" + i + ">" : o += "<" + i + ' class="pagination_item" data-page-number="' + l + '" data-last-page><a href="#Page' + l + '" tabindex="-1" aria-label="Page ' + l + '. The last page." aria-checked="false" role="menuitemradio">' + l + "</a></" + i + ">";
    o += "<" + i + ' class="pagination_item m_next" data-page-next title="next"><a href="#NextPage" tabindex="-1" aria-label="Go to next page"></a></' + i + ">", s.firstLastUsesText && s.includeFirstLast ? o += "<" + i + ' class="pagination_item m_last m_text" data-page-last title="last"><a href="#LastPage" tabindex="-1" aria-label="Go to last page">Last</a></' + i + ">" : s.includeFirstLast && (o += "<" + i + ' class="pagination_item m_last" data-page-last title="last"><a href="#LastPage" tabindex="-1" aria-label="Go to last page"></a></' + i + ">"), r = $vf(o), $list.append(r), $list.data({
        initialized: !0,
        numPages: s.numPages || $vf("[data-page-number]", $list).length,
        currentPage: s.currentPage,
        useEllipsis: s.useEllipsis,
        includeFirstLast: s.includeFirstLast,
        firstLastUsesText: s.firstLastUsesText
    }).removeData("pagination"), paginationSetCurrentPage($list, s.currentPage), $list.on("afterPaginationSetCurrentPage", function() {
        s.onPaginate.call($list)
    }), s.onPaginationLoad.call($list), $list.trigger("afterPaginationBuilder")
}
function paginationSetCurrentPage(e, t) {
    var a;
    a = e instanceof $vf || e instanceof jQuery ? e : $vf("#" + e), a.trigger("beforePaginationSetCurrentPage"), $vf(".pagination_item", a).each(function() {
        var e = $vf(this);
        if (t % 1 == 0 && e.is("[data-page-number=" + t + "]")) e.addClass("active").children("a").attr("aria-checked", "true");
        else if ("first" === t && e.is("[data-page-number=1]")) e.addClass("active").children("a").attr("aria-checked", "true");
        else if ("last" === t && e.is("[data-last-page]")) e.addClass("active").children("a").attr("aria-checked", "true");
        else {
            if ("previous" === t && e.is(".active")) return e.prev().is("[data-page-number]") && e.removeClass("active").prev("[data-page-number]").addClass("active").children("a").attr("aria-checked", "true"), !1;
            if ("next" === t && e.is(".active")) return e.next().is("[data-page-number]") && e.removeClass("active").next("[data-page-number]").addClass("active").children("a").attr("aria-checked", "true"), !1;
            e.removeClass("active"), e.is("[data-page-number]") && e.children("a").attr("aria-checked", "false")
        }
    }), a.data("currentPage", parseInt($vf("[data-page-number].active", a).attr("data-page-number"))), $vf("[data-page-number=1]", a).is(".active") ? ($vf(".m_first, .m_prev", a).attr({
        disabled: "disabled",
        "aria-disabled": "true"
    }), $vf(".m_last, .m_next", a).removeAttr("disabled").attr("aria-disabled", "false")) : $vf("[data-last-page]", a).is(".active") ? ($vf(".m_first, .m_prev", a).removeAttr("disabled").attr("aria-disabled", "false"), $vf(".m_last, .m_next", a).attr({
        disabled: "disabled",
        "aria-disabled": "true"
    })) : $vf(".pagination_item", a).removeAttr("disabled"), paginationDisplay(a), a.trigger("afterPaginationSetCurrentPage")
}
function paginationDisplay(e) {
    var t;
    t = e instanceof $vf || e instanceof jQuery ? e : $vf("#" + e), t.trigger("beforePaginationDisplay");
    var a, i = $vf("[data-page-number]", t),
        r = t.data("currentPage") || 1,
        n = t.data("numPages"),
        s = t.width(),
        o = $vf("[data-page-number].active", t).outerWidth(),
        l = o * n,
        d = function() {
            var e = 0;
            return $vf(".m_first, .m_prev, .m_next, .m_last", t).each(function() {
                e += $vf(this).outerWidth(!0)
            }), e
        }(),
        c = s - d;
    if (t.data("useEllipsis") && $vf(window).width() >= 380 || $vf(window).width() >= 300 && 0 == t.data("includeFirstLast")) {
        a = !0;
        var u;
        u = t.is("ul") ? "li" : "div", $vf(".m_ellipsis", t).length < 1 && i.last().before("<" + u + ' class="pagination_item m_ellipsis" aria-disabled="true" role="separator"></' + u + ">")
    } else a = !1, $vf(".m_ellipsis", t).remove();
    if (c >= l) a && $vf(".m_ellipsis", t).remove(), i.show();
    else {
        var p, f, h = Math.floor(c / o),
            v = Math.round(h / 2) - 1;
        !a && r + v >= n ? (p = n, f = n - h + 1) : a && h % 2 == 0 && r + v + 2 >= n ? ($vf(".m_ellipsis", t).remove(), p = n, f = n - h + 1) : a && r + v + 1 >= n ? ($vf(".m_ellipsis", t).remove(), p = n, f = n - h + 1) : r - v < 1 ? a ? ($vf(".m_ellipsis", t).show(), p = h - 2, f = 1) : (p = h, f = 1) : h % 2 == 0 ? a ? ($vf(".m_ellipsis", t).show(), p = r + v, f = r - v + 1) : (p = r + v + 1, f = r - v) : a ? ($vf(".m_ellipsis", t).show(), p = r + v - 1, f = r - v + 1) : (p = r + v, f = r - v), i.each(function(e) {
            e++;
            var t = $vf(this);
            e >= f && e <= p ? t.show().attr("aria-hidden", "false").prop("hidden", !1) : t.hide().attr("aria-hidden", "true").prop("hidden", !0)
        }), a && i.last().show().attr({
            "aria-hidden": "false"
        }).prop("hidden", !1)
    }
    t.trigger("afterPaginationDisplay")
}
function pwToggleInit(e) {
    var t = getContext(e);
    $vf("[data-pw-toggle]").each(function() {
        var e = $vf(this),
            t = $vf("input", e),
            a = $vf("[data-pw-toggle-to]", e);
        !1 === a[0].hasAttribute("tabindex") && a.attr("tabindex", 0), t.val().length > 0 ? (e.addClass("focus"), a.attr({
            "aria-label": "Unmask field characters",
            "aria-hidden": "false"
        }).prop("hidden", !1)) : a.attr({
            "aria-label": "Unmask field characters",
            "aria-hidden": "true"
        }).prop("hidden", !0), $vf("html").is(".old-ie") && pwToggleIE9Support(t), t.is("[id]") && (fieldId = t.attr("id"), a.attr("aria-controls", fieldId))
    }), t.off("focus keyup", "[data-pw-toggle]"), t.on("focus keyup", "[data-pw-toggle]", function(e) {
        pwToggle($vf(this))
    }), t.off("click keypress", "[data-pw-toggle-to]"), t.on("click keypress", "[data-pw-toggle-to]", function(e) {
        !0 === keyClick(e) && pwToggleTo($vf(this))
    }), $vf("html").is(".old-ie") && (t.off("blur keyup", "[data-pw-toggle] > input"), t.on("blur keyup", "[data-pw-toggle] > input", function() {
        pwToggleIE9Support($vf(this))
    }))
}
function pwToggle(e) {
    var t = $vf("input", e);
    e.trigger("beforePwToggle"), t.trigger("beforePwToggle"), t.val().length > 0 ? (e.addClass("m_show-toggle"), $vf("[data-pw-toggle-to]", e).attr({
        "aria-hidden": "false"
    }).prop("hidden", !1)) : (e.removeClass("m_show-toggle"), $vf("[data-pw-toggle-to]", e).attr({
        "aria-hidden": "true"
    }).prop("hidden", !0)), e.trigger("afterPwToggle"), t.trigger("afterPwToggle")
}
function pwToggleTo(e) {
    var t = e.data("pw-toggle-to"),
        a = $vf("input", e.closest("[data-pw-toggle]")),
        i = a.attr("type");
    a.val();
    if (e.trigger("beforePwToggleTo"), a.trigger("beforePwToggleTo"), "password" == i ? (a.attr("type", t), e.text("Hide").attr("aria-label", "Mask field characters")) : (a.attr("type", "password"), e.text("Show").attr("aria-label", "Unmask field characters")), a.focus(), a[0].setSelectionRange) {
        var r = 2 * a.val().length;
        a[0].setSelectionRange(r, r)
    } else a.val(a.val());
    this.scrollTop = 999999, e.trigger("afterPwToggleTo"), a.trigger("afterPwToggleTo")
}
function pwToggleIE9Support(e, t) {
    e.trigger("beforepwToggleIE9Support");
    var a = e.closest("[data-pw-toggle]"),
        i = $vf("[data-pw-toggle-to]", a);
    setTimeout(function() {
        var t = e.val().trim(),
            r = e.attr("placeholder").trim(),
            n = i.text();
        t === r && "Show" === n ? (e.attr("type", "text"), a.removeClass("m_show-toggle")) : "Show" === n ? e.attr("type", "password") : e.attr("type", "text"), e.trigger("afterPwToggleIE9Support")
    }, 1)
}
function ratingInit(e) {
    var t = getContext(e);
    $vf("[data-rating-avg]").each(function() {
        ratingSetAverage($vf(this))
    }), t.off("click keypress", "[data-rating-value]"), t.on("click keypress", "[data-rating-value]", function(e) {
        if (!0 === keyClick(e)) {
            e.preventDefault();
            ratingSetPersonal($vf(this))
        }
    }), $vf("[data-rating-id]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr({
            "aria-valuemin": 1,
            "aria-valuemax": 5
        })
    }), $vf("[data-rating-value]").each(function() {
        var e = $vf(this),
            t = e.attr("data-rating-value");
        e.attr({
            role: "button",
            "aria-label": "select to rate " + t + " out of 5 stars",
            tabindex: -1
        })
    }), t.off("keydown keypress", "[data-rating-id]:not([data-rating-avg])"), t.on("keydown keypress", "[data-rating-id]:not([data-rating-avg])", function(e) {
        var t, a, i = $vf(this);
        t = !!$vf("[data-rating-value].active", i).length && parseInt($vf("[data-rating-value].active", i).attr("data-rating-value"), 10), 36 === e.which || 49 === e.charCode ? (e.preventDefault(), $vf("[data-rating-value=1]", i).click()) : 35 === e.which || 53 === e.charCode ? (e.preventDefault(), $vf("[data-rating-value=5]", i).click()) : 50 === e.charCode ? (e.preventDefault(), $vf("[data-rating-value=2]", i).click()) : 51 === e.charCode ? (e.preventDefault(), $vf("[data-rating-value=3]", i).click()) : 52 === e.charCode ? (e.preventDefault(), $vf("[data-rating-value=4]", i).click()) : 48 === e.charCode ? t < 1 || !1 === t || $vf("[data-rating-value=" + t + "]", i).click() : 37 === e.which || 40 === e.which ? (e.preventDefault(), t < 1 || !1 === t || (a = 1 === t ? 1 : t - 1), $vf("[data-rating-value=" + a + "]", i).click()) : 38 === e.which || 39 === e.which ? (e.preventDefault(), 5 === t || (a = t < 1 || !1 === t ? 1 : t + 1), $vf("[data-rating-value=" + a + "]", i).click()) : 27 === e.which && (e.preventDefault(), i.focus())
    })
}
function ratingSetPersonal(e) {
    var t = e.attr("data-rating-value"),
        a = e.parent().attr("data-rating-id"),
        i = "m_inactive-node",
        r = "m_active-node";
    return e.is(".active") ? (e.removeClass("active " + r).addClass(i), e.siblings().removeClass(r).addClass(i), -1) : (e.siblings().removeClass("active"), e.addClass("active").focus(), $vf("[data-rating-id=" + a + "] > [data-rating-value]").each(function() {
        var e = $vf(this),
            a = e.attr("data-rating-value");
        a <= t ? e.hasClass(r) || e.removeClass(i).addClass(r) : a > t && e.hasClass(r) && e.removeClass(r).addClass(i)
    }), $vf("[data-rating-id=" + a + "]").attr("aria-valuenow", t), t)
}
function ratingSetAverage(e) {
    var t = e.children("[data-rating-reviews]"),
        a = e.find(".rating_avg-container").width() + 1,
        i = parseFloat(e.attr("data-rating-avg")).toFixed(1),
        r = t.attr("data-rating-reviews").toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    $vf(".rating_avg-container", e).width(a).attr(""), $vf(".rating_avg-constrictor", e).width(i / 5 * a), e.attr({
        title: i + " out of 5",
        "aria-label": "Average rating is " + i + " out of 5",
        "aria-valuenow": i
    }), t.text("(" + r + ")").attr("aria-label", "Total Reviews: " + r)
}
function stepsInit(e) {
    var t = getContext(e);
    $vf("[data-steps]").addClass("vzrf");
    var a = function() {
        $vf("[data-steps]", t).each(function() {
            stepsSizing($vf(this))
        })
    };
    $vf("[data-steps]").length && (a(), $vf(window).on("resize orientationchange", function() {
        a()
    })), t.off("click keypress", "[data-steps][data-tabs] [data-tab]"), t.on("click keypress", "[data-steps][data-tabs] [data-tab]", function(e) {
        if (!0 === keyClick(e)) {
            stepsSizing($vf(this).closest("[data-steps]"))
        }
    }), $vf("[data-steps]").each(function() {
        var e = $vf(this),
            t = e.find(".steps_step").length,
            a = e.find(".active.steps_step").index() + 1;
        e.attr({
            role: "progressbar",
            "aria-valuemin": 1,
            "aria-valuemax": t,
            "aria-valuenow": a
        }), e.is("[data-tabs]") && e.attr("role", "tablist")
    })
}
function stepsSizing(e) {
    e.trigger("beforeStepsSizing"), e.addClass("m_resizing");
    var t = $vf(".steps_step", e).length,
        a = e.width(),
        i = 0,
        r = 100 / t + "%",
        n = e.clone().removeClass("m_abbr").css({
            position: "absolute",
            width: a,
            right: "-9999px",
            opacity: "0"
        });
    if ($vf(".steps_step", n).attr("style", "").addClass("active"), $vf("body").append(n), $vf(".steps_step", n).each(function(e) {
            e++;
            var t = $vf(this),
                a = Math.floor(t.width() + parseInt(t.css("padding-right")) + 6);
            a > i && (i = a)
        }), n.remove(), i * t < a) e.removeClass("m_abbr"), $vf(".steps_step", e).css("width", r);
    else {
        e.addClass("m_abbr");
        var s = a - i,
            o = 1 / (t - 1);
        $vf(".steps_step.active", e).css("width", i), $vf(".steps_step:not(.active)", e).css("width", o * s)
    }
    e.removeClass("m_resizing"), e.trigger("afterStepsSizing")
}
function swiperInit(e) {
    var t = getContext(e);
    $vf("[data-swiper]", t).each(function() {
        var e = $vf(this);
        e.trigger("beforeSwiperInit");
        var t = e.attr("data-swiper"),
            a = {
                runCallbacksOnInit: !1,
                pagination: "[data-swiper=" + t + "] > .swiper_pager",
                nextButton: "[data-swiper=" + t + "] > [data-swiper-next]",
                prevButton: "[data-swiper=" + t + "] > [data-swiper-prev]",
                slideClass: "swiper_item",
                slideActiveClass: "active",
                slideVisibleClass: "visible",
                slideNextClass: "swiper_slide-next",
                slidePrevClass: "swiper_slide-prev",
                wrapperClass: "w_swiper",
                paginationHiddenClass: "swiper_pagination-hidden",
                paginationProgressbarClass: "swiper_pagination-progressbar",
                speed: 300,
                paginationClickable: !0,
                keyboardControl: !1,
                spaceBetween: 12,
                loop: !0,
                a11y: !0,
                onSlideChangeStart: function(e) {
                    $vf(e.container).trigger("beforeSwiperSlideChange")
                },
                onSlideChangeEnd: function(e) {
                    var t = $vf(e.container),
                        a = $vf(".swiper_item.active", t);
                    $vf(".swiper_item", t).attr({
                        "aria-hidden": "true",
                        tabindex: -1
                    }), $vf(".swiper_item.active", t).attr({
                        "aria-hidden": "false",
                        tabindex: 0
                    }), $vf(".swiper_item > div [data-swiper-next]", t).attr("tabindex", -1), $vf(".swiper_item.active > div [data-swiper-next]", t).attr("tabindex", 0), $vf(".swiper_item > div [data-swiper-prev]", t).attr("tabindex", -1), $vf(".swiper_item.active > div [data-swiper-prev]", t).attr("tabindex", 0), $vf(".swiper_item [tabindex]", t).attr({
                        tabindex: -1
                    }), $vf(".swiper_item", t).attr({
                        "aria-selected": "false"
                    }), $vf(".swiper_item.active", t).attr({
                        "aria-hidden": "false",
                        tabindex: "0",
                        "aria-selected": "true"
                    }), t.removeAttr("data-is-inner"), t.removeAttr("data-last-tabstop"), setInnerTabStops(a), !1 === e.autoplaying && $vf(".swiper_item.active", t).focus(), t.trigger("afterSwiperSlideChange")
                },
                onInit: function(t) {
                    var a = $vf(t.container),
                        i = $vf(".swiper_item.active", a),
                        r = $vf(".swiper_item", a).not(".swiper-slide-duplicate").length;
                    $vf("[data-swiper-pager-list]", a).attr("aria-label", "swiper buttons"), $vf(".swiper_pager", a).attr({
                        tabindex: -1
                    }), $vf(".swiper_pager .swiper-pagination-bullet", a).attr({
                        tabindex: -1
                    }), $vf(".swiper_button-prev", a).attr({
                        tabindex: -1
                    }), $vf(".swiper_button-next", a).attr({
                        tabindex: -1
                    }), $vf(".swiper_item", a).children("[tabindex]").attr({
                        tabindex: -1
                    }), $vf(".swiper_item [tabindex]", a).attr({
                        tabindex: -1
                    }), setInnerTabStops(i), $vf("[data-swiper-next]").each(function() {
                        $vf(this).attr("aria-label", "next")
                    }), $vf("[data-swiper-prev]").each(function() {
                        $vf(this).attr("aria-label", "previous")
                    }), $vf(".swiper_item.active").attr({
                        "aria-hidden": "false",
                        tabindex: "0"
                    }), $vf(".w_swiper", a).attr({
                        "aria-label": "Carousel widget containing " + r + " slides. Change slides with arrow keys then press enter to access elements inside a slide"
                    }), $vf(".swiper_item", a).each(function(e) {
                        var a, i = $vf(this);
                        a = !0 === t.params.loop ? i.data("swiper-slide-index") + 1 : e;
                        var n = '<span class="sr-only" data-slide-count>Slide ' + a + " of " + r + "</span>",
                            s = i.hasClass("active");
                        i.attr({
                            "aria-selected": s
                        }), 0 === i.find("[data-slide-count]").length && i.prepend(n)
                    });
                    var n = e[0].swiper.params.loop,
                        s = $vf(".swiper_item", e).length;
                    n && 3 === s ? unSwiper(e) : n || 1 !== s || unSwiper(e)
                }
            };
        if (e.is("[data-swiper-options]")) {
            var i = e.attr("data-swiper-options"),
                r = JSON.parse(i);
            $vf.extend(a, r)
        }
        swiperToSwiper(t, a), $vf(".swiper-slide-duplicate > div .button").attr("tabindex", -1), e.closest("[data-reveal-content]").on("afterRevealShow", function() {
            vfSwipers[t].onResize()
        }), e.trigger("afterSwiperInit")
    });
    var a;
    $vf("[data-swiper-prev]", t).off("click keypress"), $vf("[data-swiper-prev]", t).on("click keypress", function(e) {
        if (!0 === keyClick(e)) {
            var t = $vf(this);
            a = t.closest("[data-swiper]").attr("data-swiper");
            var i;
            i = t.closest("[data-swiper]").attr("data-swiper"), vfSwipers[i].slidePrev()
        }
    }), $vf("[data-swiper-next]", t).off("click keypress"), $vf("[data-swiper-next]", t).on("click keypress", function(e) {
        if (!0 === keyClick(e)) {
            var t, i = $vf(this);
            a = i.closest("[data-swiper]").attr("data-swiper"), t = (i.closest("[data-swiper]").length, i.closest("[data-swiper]").attr("data-swiper")), vfSwipers[t].slideNext()
        }
    }), t.off("keyup", ".swiper_item.active"), t.on("keyup", ".swiper_item.active", function(e) {
        var t = e.charCode || e.keyCode,
            a = $vf(this),
            i = $vf(this).parents("[data-swiper]"),
            r = i.attr("data-swiper"),
            n = a.find("[tabindex]"),
            s = {
                right: 39 === t,
                down: 40 === t,
                left: 37 === t,
                up: 38 === t,
                enter: 13 === t,
                tab: 9 === t,
                esc: 27 === t
            };
        s.right || s.down ? vfSwipers[r].slideNext() : s.left || s.up ? vfSwipers[r].slidePrev() : s.enter && !i.is("[data-is-inner]") && n.length > 0 ? (i.attr("data-is-inner", ""), n.attr({
            tabindex: "0"
        }), n.first().focus()) : s.esc && (clearSwiperAttrs(i), n.attr({
            tabindex: "-1"
        }), i.on("afterSwiperSlideChange", function() {
            $vf(".swiper_item.active", i).focus()
        }))
    }), t.off("focus", "[data-swiper]"), t.on("focus", "[data-swiper]", function() {
        var e = $vf(this).attr("data-swiper");
        vfSwipers[e].stopAutoplay()
    }), t.on("keydown", "[data-first-tab], [data-last-tab]", function(e) {
        var t = e.charCode || e.keyCode,
            a = $vf(this).parents("[data-swiper]"),
            i = a.find(".swiper_item.active"),
            r = i.find("[tabindex]"),
            n = $vf(this).is("[data-first-tab]"),
            s = $vf(this).is("[data-last-tab]");
        (9 === t && e.shiftKey && n || 9 === t && !e.shiftKey && s) && (e.preventDefault(), clearSwiperAttrs(a), r.attr({
            tabindex: "-1"
        }), setTimeout(function() {
            $vf(".swiper_item.active", a).focus()
        }, 1))
    })
}
function swiperToSwiper(e, t) {
    var a = $vf("[data-swiper=" + e + "]");
    a.trigger("beforeSwiperToSwiper"), vfSwipers[e] = a.swiper(t), a.attr("data-swiper-init", "true"), a.trigger("afterSwiperToSwiper")
}
function unSwiper(e) {
    e.trigger("beforeUnSwiper");
    var t = e[0].swiper.params.nextButton,
        a = e[0].swiper.params.prevButton,
        i = e[0].swiper.params.pagination;
    e[0].swiper.lockSwipes(), $vf(t).hide().attr({
        "aria-hidden": !0,
        hidden: "hidden"
    }), $vf(a).hide().attr({
        "aria-hidden": !0,
        hidden: "hidden"
    }), $vf(i).hide().attr({
        "aria-hidden": !0,
        hidden: "hidden"
    }), e.trigger("afterUnSwiper")
}
function setInnerTabStops(e) {
    var t = e.find("[tabindex]").first(),
        a = e.find("[tabindex]").last();
    t.attr("data-first-tab", ""), a.attr("data-last-tab", "")
}
function clearSwiperAttrs(e) {
    e.removeAttr("data-is-inner")
}
function tabsInit(e) {
    var t = getContext(e);
    $vf("[data-tab].active", t).each(function() {
        switchTabs($vf(this))
    }), t.off("click keypress", "[data-tab]"), t.on("click keypress", "[data-tab]", function(e) {
        if (!0 === keyClick(e)) {
            switchTabs($vf(this))
        }
    }), t.off("change", "[data-tabs] [type=radio]"), t.on("change", "[data-tabs] [type=radio]", function(e) {
        var t = $vf(this);
        t.next().is("label[data-tab]") && switchTabs(t.next())
    }), t.off("touchend", "label[data-tab]"), t.on("touchend", "label[data-tab]", function() {
        switchTabs($vf(this))
    }), $vf("[data-tabs]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("role", "tablist")
    }), $vf("[data-tabs] [type=radio]+label[data-tab]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", -1)
    }), $vf("[data-tab]:not(label)").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", -1), e.attr("role", "tab"), e.attr("aria-selected", "false")
    }), $vf("[data-tab].active").attr({
        "aria-selected": !0
    }), $vf("[data-tabs-content]").attr({
        role: "tabpanel",
        "aria-hidden": !0
    }), $vf("[data-tabs-content]").prop("hidden", !0), $vf("[data-tabs-content].active").attr("aria-hidden", !1), $vf("[data-tabs-content].active").prop("hidden", !1), t.off("keydown", "[data-tabs]"), t.on("keydown", "[data-tabs]", function(e) {
        if (!$vf(this).find("label[data-tab]").length) {
            var t = $vf(e.target).closest("[data-tabs]"),
                a = $vf("> [data-tab]", t),
                i = t.find("> [data-tab].active").index(),
                r = t.find("> [data-tab]").length - 1,
                n = function() {
                    return i - 1 < 0 ? 0 : i - 1
                }(),
                s = function() {
                    return i + 1 > r ? r : i + 1
                }();
            36 === e.which ? switchTabs($vf(a.eq(0))) : 35 === e.which ? switchTabs($vf(a.eq(r))) : 37 === e.which || 38 === e.which ? switchTabs($vf(a.eq(n))) : 39 !== e.which && 40 !== e.which || switchTabs($vf(a.eq(s))), e.which > 34 && e.which < 41 && e.preventDefault()
        }
    })
}
function switchTabs(e) {
    e.trigger("beforeSwitchTabs");
    var t = e.closest("[data-tabs]"),
        a = e.attr("data-tab");
    $vf("> [data-tab]", t).removeClass("active").attr({"aria-selected":!1, tabindex:"-1" } ), e.addClass("active").attr({"aria-selected":!0, tabindex:"0" } ), e.is("label[data-tab]") && $vf("#" + e.attr("for")).prop("checked", !0);
    var i = $vf('[data-tabs-content="' + a + '"]'),
        r = i.closest("[data-tabs-content-wrap]"),
        n = r.find("[data-tabs-content-wrap] [data-tabs-content]");
    if ($vf("[data-tabs-content]", r).not(n).hide().removeClass("active").attr("aria-hidden", !0).prop("hidden", !0), i.show().addClass("active").attr("aria-hidden", !1).prop("hidden", !1), t.is("[data-steps]")) {
        var s = t.find(".active.steps_step").index() + 1;
        t.attr("aria-valuenow", s)
    }
    listControlInit(i), e.trigger("afterSwitchTabs")
}
function tooltipInit(e) {
    var t, a = getContext(e);
    a.off("click keypress", "[data-open-tooltip]:not(.active)"), a.on("click keypress", "[data-open-tooltip]:not(.active)", function(e) {
        if (!0 === keyClick(e)) {
            var a = $vf(this);
            if (a.is("input, select, textarea")) return !1;
            var i = a.attr("data-open-tooltip").trim();
            clearTimeout(t), closeTooltip(), e.target.hasAttribute("data-open-tooltip") && openTooltip(i, a)
        }
    }), a.off("click keypress", "[data-close-tooltip]"), a.on("click keypress", "[data-close-tooltip]", function(e) {
        !0 === keyClick(e) && closeTooltip()
    }), a.off("mouseover", "[data-open-tooltip][data-tooltip-hover]:not(.active)"), a.on("mouseover", "[data-open-tooltip][data-tooltip-hover]:not(.active)", function(e) {
        var a = $vf(this),
            i = parseInt(a.attr("data-tooltip-hover")) || 150;
        t = setTimeout(function() {
            if (a.is("input, select, textarea")) return !1;
            var t = a.attr("data-open-tooltip");
            closeTooltip(), e.target.hasAttribute("data-open-tooltip") && openTooltip(t, a, !0)
        }, i)
    }), a.off("mouseout", "[data-open-tooltip][data-tooltip-hover]"), a.on("mouseout", "[data-open-tooltip][data-tooltip-hover]", function() {
        clearTimeout(t), closeTooltip()
    }), a.off("focus", "[data-tooltip-field]"), a.on("focus", "[data-tooltip-field]", function() {
        var e = $vf(this),
            t = $vf("[data-open-tooltip]", e).attr("data-open-tooltip");
        closeTooltip(), openTooltip(t, e)
    }), a.off("blur", "[data-tooltip-field]"), a.on("blur", "[data-tooltip-field]", function() {
        closeTooltip(!0)
    }), $vf("[data-open-tooltip]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr("aria-label", "Show a tooltip")
    }), $vf("[data-close-tooltip]").each(function() {
        var e = $vf(this);
        !1 === e[0].hasAttribute("tabindex") && e.attr("tabindex", 0), e.attr("aria-label", "Close tooltip")
    }), $vf("[data-tooltip]").attr({
        role: "tooltip",
        "aria-hidden": "true"
    }), a.off("keydown", "[data-tooltip], [data-tooltip-open]"), a.on("keydown", "[data-tooltip], [data-tooltip-open]", function(e) {
        27 === e.which && ($vf(e.target).is("[data-open-tooltip]") ? closeTooltip() : (closeTooltip(), e.preventDefault()))
    })
}
function openTooltip(e, t, a) {
    var i = $vf('[data-tooltip="' + e + '"]');
    if (i.trigger("beforeOpenTooltip"), $vf("body").attr("data-tooltip-open", "true"), 0 == t.closest("[data-tooltip-field]").length && saveFocus(), $vf("[data-tooltip]").attr("aria-hidden", "false"), t.addClass("active"), a ? i.addClass("m_hover") : i.removeClass("m_hover"), parseInt(i.attr("data-percent-available-space"), 10) > 1) var r = i.attr("data-percent-available-space");
    else r = 100;
    var n = t.offset(),
        s = t[0].getBoundingClientRect(),
        o = t.width(),
        l = parseInt(i.css("padding-left"), 10);
    if ($vf(".page.active").length > 0) var d = $vf(".page.active .main");
    else if ($vf(".main").length > 0) var d = $vf(".main");
    else var d = t.closest($vf(".row, .modal_content, .w_modal"));
    var c, u = d.width(),
        p = d.offset(),
        f = s.left,
        h = $vf(window).width() - s.right,
        v = (s.bottom, s.top);
    i.is("[data-tooltip-vertical]") ? "" === i.data("tooltip-vertical") ? v < 120 ? i.addClass("m_bottom") : v > 1e3 && i.removeClass("m_bottom") : "down" === i.data("tooltip-vertical") ? i.addClass("m_bottom") : i.removeClass("m_bottom") : f > h ? i.addClass("m_rev") : i.removeClass("m_rev"), c = i.hasClass("m_rev") ? n.left - p.left - l : u + p.left - n.left - l - o;
    var m = c * (r / 100),
        g = $vf("[data-tooltip-vertical]").width();
    i.is("[data-tooltip-vertical]") ? g > h ? f > h ? i.addClass("m_flow-left") : i.removeClass("m_flow-left") : i.hasClass("m_flow-left") && i.removeClass("m_flow-left") : i.css("width", m), i.appendTo(t), i.addClass("active").fadeIn(300, function() {
        0 == t.closest("[data-tooltip-field]").length && ($vf("[data-close-tooltip]", i).length ? $vf("[data-close-tooltip]", i).focus() : i.focus())
    });
    var y = i[0].scrollHeight,
        w = $vf(window).height();
    s.top + y > w && s.top > y ? i.parents("[data-tooltip-field]").length < 1 ? i.addClass("m_flow-up").css("margin-top", 37 - y) : i.addClass("m_flow-up").css("margin-top", i.parent("[data-tooltip-field]").height() + 10 - y) : i.removeClass("m_flow-up").css("margin-top", "auto"), i.is("[data-tooltip-vertical]") && i.removeClass("m_flow-up").css("margin-top", "auto"), t.is("[data-tooltip-field]") || $vf(window).resize(function() {
        closeTooltip()
    }), i.trigger("afterOpenTooltip")
}
function closeTooltip(e) {
    var t = $vf("[data-tooltip].active");
    t.trigger("beforeCloseTooltip"), $vf("[data-toopltip]").attr("aria-hidden", "true"), e ? (t.fadeOut(150).removeClass("active").attr("aria-hidden", !0), $vf("[data-open-tooltip].active, [data-tooltip-field].active").removeClass("active")) : t.fadeOut(150, function() {
        $vf(this).removeClass("active").attr("aria-hidden", !0), $vf("[data-open-tooltip].active, [data-tooltip-field].active").removeClass("active")
    }), $vf("body").removeAttr("data-tooltip-open"), !1 === e && setTimeout(function() {
        resetFocus()
    }, 300), t.trigger("afterCloseTooltip")
}! function(e, t) {
    "undefined" != typeof module && module.exports ? module.exports.browser = t() : "function" == typeof define ? define(t) : this.bowser = t()
}(0, function() {
    function e(e) {
        function a(t) {
            var a = e.match(t);
            return a && a.length > 1 && a[1] || ""
        }
        var i, r = a(/(ipod|iphone|ipad)/i).toLowerCase(),
            n = /like android/i.test(e),
            s = !n && /android/i.test(e),
            o = a(/version\/(\d+(\.\d+)?)/i),
            l = /tablet/i.test(e),
            d = !l && /[^-]mobi/i.test(e);
        /opera|opr/i.test(e) ? i = {
            name: "Opera",
            opera: t,
            version: o || a(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i)
        } : /windows phone/i.test(e) ? i = {
            name: "Windows Phone",
            windowsphone: t,
            msie: t,
            version: a(/iemobile\/(\d+(\.\d+)?)/i)
        } : /msie|trident/i.test(e) ? i = {
            name: "Internet Explorer",
            msie: t,
            version: a(/(?:msie |rv:)(\d+(\.\d+)?)/i)
        } : /chrome|crios|crmo/i.test(e) ? i = {
            name: "Chrome",
            chrome: t,
            version: a(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
        } : r ? (i = {
            name: "iphone" == r ? "iPhone" : "ipad" == r ? "iPad" : "iPod"
        }, o && (i.version = o)) : /sailfish/i.test(e) ? i = {
            name: "Sailfish",
            sailfish: t,
            version: a(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
        } : /seamonkey\//i.test(e) ? i = {
            name: "SeaMonkey",
            seamonkey: t,
            version: a(/seamonkey\/(\d+(\.\d+)?)/i)
        } : /firefox|iceweasel/i.test(e) ? (i = {
            name: "Firefox",
            firefox: t,
            version: a(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i)
        }, /\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(e) && (i.firefoxos = t)) : /silk/i.test(e) ? i = {
            name: "Amazon Silk",
            silk: t,
            version: a(/silk\/(\d+(\.\d+)?)/i)
        } : s ? i = {
            name: "Android",
            version: o
        } : /phantom/i.test(e) ? i = {
            name: "PhantomJS",
            phantom: t,
            version: a(/phantomjs\/(\d+(\.\d+)?)/i)
        } : /blackberry|\bbb\d+/i.test(e) || /rim\stablet/i.test(e) ? i = {
            name: "BlackBerry",
            blackberry: t,
            version: o || a(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
        } : /(web|hpw)os/i.test(e) ? (i = {
            name: "WebOS",
            webos: t,
            version: o || a(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
        }, /touchpad\//i.test(e) && (i.touchpad = t)) : i = /bada/i.test(e) ? {
            name: "Bada",
            bada: t,
            version: a(/dolfin\/(\d+(\.\d+)?)/i)
        } : /tizen/i.test(e) ? {
            name: "Tizen",
            tizen: t,
            version: a(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || o
        } : /safari/i.test(e) ? {
            name: "Safari",
            safari: t,
            version: o
        } : {}, /(apple)?webkit/i.test(e) ? (i.name = i.name || "Webkit", i.webkit = t, !i.version && o && (i.version = o)) : !i.opera && /gecko\//i.test(e) && (i.name = i.name || "Gecko", i.gecko = t, i.version = i.version || a(/gecko\/(\d+(\.\d+)?)/i)), s || i.silk ? i.android = t : r && (i[r] = t, i.ios = t);
        var c = "";
        r ? (c = a(/os (\d+([_\s]\d+)*) like mac os x/i), c = c.replace(/[_\s]/g, ".")) : s ? c = a(/android[ \/-](\d+(\.\d+)*)/i) : i.windowsphone ? c = a(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i) : i.webos ? c = a(/(?:web|hpw)os\/(\d+(\.\d+)*)/i) : i.blackberry ? c = a(/rim\stablet\sos\s(\d+(\.\d+)*)/i) : i.bada ? c = a(/bada\/(\d+(\.\d+)*)/i) : i.tizen && (c = a(/tizen[\/\s](\d+(\.\d+)*)/i)), c && (i.osversion = c);
        var u = c.split(".")[0];
        return l || "ipad" == r || s && (3 == u || 4 == u && !d) || i.silk ? i.tablet = t : (d || "iphone" == r || "ipod" == r || s || i.blackberry || i.webos || i.bada) && (i.mobile = t), i.msie && i.version >= 10 || i.chrome && i.version >= 20 || i.firefox && i.version >= 20 || i.safari && i.version >= 6 || i.opera && i.version >= 10 || i.ios && i.osversion && i.osversion.split(".")[0] >= 6 ? i.a = t : i.msie && i.version < 10 || i.chrome && i.version < 20 || i.firefox && i.version < 20 || i.safari && i.version < 6 || i.opera && i.version < 10 || i.ios && i.osversion && i.osversion.split(".")[0] < 6 ? i.c = t : i.x = t, i
    }
    var t = !0,
        a = e("undefined" != typeof navigator ? navigator.userAgent : "");
    return a._detect = e, a
}),
/*!
 * Protect window.console method calls, e.g. console is not defined on IE
 * unless dev tools are open, and IE doesn't define console.debug
 * http://stackoverflow.com/questions/3326650/console-is-undefined-error-for-internet-explorer
 */
function() {
    for (var e, t = ["assert", "assert", "cd", "clear", "count", "countReset", "debug", "dir", "dirxml", "dirxml", "dirxml", "error", "error", "exception", "group", "group", "groupCollapsed", "groupCollapsed", "groupEnd", "info", "info", "log", "log", "markTimeline", "profile", "profileEnd", "profileEnd", "select", "table", "table", "time", "time", "timeEnd", "timeEnd", "timeEnd", "timeEnd", "timeEnd", "timeStamp", "timeline", "timelineEnd", "trace", "trace", "trace", "trace", "trace", "warn"], a = t.length, i = window.console = window.console || {}, r = function() {}; a--;) e = t[a], i[e] || (i[e] = r)
}(),
/*!
 * jQuery JavaScript Library v2.2.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-04-05T19:26Z
 */
function(e, t) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e)
    } : t(e)
}("undefined" != typeof window ? window : this, function(e, t) {
    function a(e) {
        var t = !!e && "length" in e && e.length,
            a = re.type(e);
        return "function" !== a && !re.isWindow(e) && ("array" === a || 0 === t || "number" == typeof t && t > 0 && t - 1 in e)
    }
    function i(e, t, a) {
        if (re.isFunction(t)) return re.grep(e, function(e, i) {
            return !!t.call(e, i, e) !== a
        });
        if (t.nodeType) return re.grep(e, function(e) {
            return e === t !== a
        });
        if ("string" == typeof t) {
            if (he.test(t)) return re.filter(t, e, a);
            t = re.filter(t, e)
        }
        return re.grep(e, function(e) {
            return Z.call(t, e) > -1 !== a
        })
    }
    function r(e, t) {
        for (;
            (e = e[t]) && 1 !== e.nodeType;);
        return e
    }
    function n(e) {
        var t = {};
        return re.each(e.match(we) || [], function(e, a) {
            t[a] = !0
        }), t
    }
    function s() {
        X.removeEventListener("DOMContentLoaded", s), e.removeEventListener("load", s), re.ready()
    }
    function o() {
        this.expando = re.expando + o.uid++
    }
    function l(e, t, a) {
        var i;
        if (void 0 === a && 1 === e.nodeType)
            if (i = "data-" + t.replace(Te, "-$&").toLowerCase(), "string" == typeof(a = e.getAttribute(i))) {
                try {
                    a = "true" === a || "false" !== a && ("null" === a ? null : +a + "" === a ? +a : $e.test(a) ? re.parseJSON(a) : a)
                } catch (e) {}
                Ce.set(e, t, a)
            } else a = void 0;
        return a
    }
    function d(e, t, a, i) {
        var r, n = 1,
            s = 20,
            o = i ? function() {
                return i.cur()
            } : function() {
                return re.css(e, t, "")
            },
            l = o(),
            d = a && a[3] || (re.cssNumber[t] ? "" : "px"),
            c = (re.cssNumber[t] || "px" !== d && +l) && Se.exec(re.css(e, t));
        if (c && c[3] !== d) {
            d = d || c[3], a = a || [], c = +l || 1;
            do {
                n = n || ".5", c /= n, re.style(e, t, c + d)
            } while (n !== (n = o() / l) && 1 !== n && --s)
        }
        return a && (c = +c || +l || 0, r = a[1] ? c + (a[1] + 1) * a[2] : +a[2], i && (i.unit = d, i.start = c, i.end = r)), r
    }
    function c(e, t) {
        var a = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [];
        return void 0 === t || t && re.nodeName(e, t) ? re.merge([e], a) : a
    }
    function u(e, t) {
        for (var a = 0, i = e.length; a < i; a++) ke.set(e[a], "globalEval", !t || ke.get(t[a], "globalEval"))
    }
    function p(e, t, a, i, r) {
        for (var n, s, o, l, d, p, f = t.createDocumentFragment(), h = [], v = 0, m = e.length; v < m; v++)
            if ((n = e[v]) || 0 === n)
                if ("object" === re.type(n)) re.merge(h, n.nodeType ? [n] : n);
                else if (Ne.test(n)) {
            for (s = s || f.appendChild(t.createElement("div")), o = (Pe.exec(n) || ["", ""])[1].toLowerCase(), l = Ae[o] || Ae._default, s.innerHTML = l[1] + re.htmlPrefilter(n) + l[2], p = l[0]; p--;) s = s.lastChild;
            re.merge(h, s.childNodes), s = f.firstChild, s.textContent = ""
        } else h.push(t.createTextNode(n));
        for (f.textContent = "", v = 0; n = h[v++];)
            if (i && re.inArray(n, i) > -1) r && r.push(n);
            else if (d = re.contains(n.ownerDocument, n), s = c(f.appendChild(n), "script"), d && u(s), a)
            for (p = 0; n = s[p++];) Ie.test(n.type || "") && a.push(n);
        return f
    }
    function f() {
        return !0
    }
    function h() {
        return !1
    }
    function v() {
        try {
            return X.activeElement
        } catch (e) {}
    }
    function m(e, t, a, i, r, n) {
        var s, o;
        if ("object" == typeof t) {
            "string" != typeof a && (i = i || a, a = void 0);
            for (o in t) m(e, o, a, i, t[o], n);
            return e
        }
        if (null == i && null == r ? (r = a, i = a = void 0) : null == r && ("string" == typeof a ? (r = i, i = void 0) : (r = i, i = a, a = void 0)), !1 === r) r = h;
        else if (!r) return e;
        return 1 === n && (s = r, r = function(e) {
            return re().off(e), s.apply(this, arguments)
        }, r.guid = s.guid || (s.guid = re.guid++)), e.each(function() {
            re.event.add(this, t, r, i, a)
        })
    }
    function g(e, t) {
        return re.nodeName(e, "table") && re.nodeName(11 !== t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e
    }
    function y(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e
    }
    function w(e) {
        var t = qe.exec(e.type);
        return t ? e.type = t[1] : e.removeAttribute("type"), e
    }
    function b(e, t) {
        var a, i, r, n, s, o, l, d;
        if (1 === t.nodeType) {
            if (ke.hasData(e) && (n = ke.access(e), s = ke.set(t, n), d = n.events)) {
                delete s.handle, s.events = {};
                for (r in d)
                    for (a = 0, i = d[r].length; a < i; a++) re.event.add(t, r, d[r][a])
            }
            Ce.hasData(e) && (o = Ce.access(e), l = re.extend({}, o), Ce.set(t, l))
        }
    }
    function x(e, t) {
        var a = t.nodeName.toLowerCase();
        "input" === a && Ee.test(e.type) ? t.checked = e.checked : "input" !== a && "textarea" !== a || (t.defaultValue = e.defaultValue)
    }
    function _(e, t, a, i) {
        t = Q.apply([], t);
        var r, n, s, o, l, d, u = 0,
            f = e.length,
            h = f - 1,
            v = t[0],
            m = re.isFunction(v);
        if (m || f > 1 && "string" == typeof v && !ie.checkClone && Re.test(v)) return e.each(function(r) {
            var n = e.eq(r);
            m && (t[0] = v.call(this, r, n.html())), _(n, t, a, i)
        });
        if (f && (r = p(t, e[0].ownerDocument, !1, e, i), n = r.firstChild, 1 === r.childNodes.length && (r = n), n || i)) {
            for (s = re.map(c(r, "script"), y), o = s.length; u < f; u++) l = r, u !== h && (l = re.clone(l, !0, !0), o && re.merge(s, c(l, "script"))), a.call(e[u], l, u);
            if (o)
                for (d = s[s.length - 1].ownerDocument, re.map(s, w), u = 0; u < o; u++) l = s[u], Ie.test(l.type || "") && !ke.access(l, "globalEval") && re.contains(d, l) && (l.src ? re._evalUrl && re._evalUrl(l.src) : re.globalEval(l.textContent.replace(Be, "")))
        }
        return e
    }
    function k(e, t, a) {
        for (var i, r = t ? re.filter(t, e) : e, n = 0; null != (i = r[n]); n++) a || 1 !== i.nodeType || re.cleanData(c(i)), i.parentNode && (a && re.contains(i.ownerDocument, i) && u(c(i, "script")), i.parentNode.removeChild(i));
        return e
    }
    function C(e, t) {
        var a = re(t.createElement(e)).appendTo(t.body),
            i = re.css(a[0], "display");
        return a.detach(), i
    }
    function $(e) {
        var t = X,
            a = Ve[e];
        return a || (a = C(e, t), "none" !== a && a || (We = (We || re("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement), t = We[0].contentDocument, t.write(), t.close(), a = C(e, t), We.detach()), Ve[e] = a), a
    }
    function T(e, t, a) {
        var i, r, n, s, o = e.style;
        return a = a || Ke(e), s = a ? a.getPropertyValue(t) || a[t] : void 0, "" !== s && void 0 !== s || re.contains(e.ownerDocument, e) || (s = re.style(e, t)), a && !ie.pixelMarginRight() && Ge.test(s) && Ye.test(t) && (i = o.width, r = o.minWidth, n = o.maxWidth, o.minWidth = o.maxWidth = o.width = s, s = a.width, o.width = i, o.minWidth = r, o.maxWidth = n), void 0 !== s ? s + "" : s
    }
    function D(e, t) {
        return {
            get: function() {
                return e() ? void delete this.get : (this.get = t).apply(this, arguments)
            }
        }
    }
    function S(e) {
        if (e in tt) return e;
        for (var t = e[0].toUpperCase() + e.slice(1), a = et.length; a--;)
            if ((e = et[a] + t) in tt) return e
    }
    function M(e, t, a) {
        var i = Se.exec(t);
        return i ? Math.max(0, i[2] - (a || 0)) + (i[3] || "px") : t
    }
    function F(e, t, a, i, r) {
        for (var n = a === (i ? "border" : "content") ? 4 : "width" === t ? 1 : 0, s = 0; n < 4; n += 2) "margin" === a && (s += re.css(e, a + Me[n], !0, r)), i ? ("content" === a && (s -= re.css(e, "padding" + Me[n], !0, r)), "margin" !== a && (s -= re.css(e, "border" + Me[n] + "Width", !0, r))) : (s += re.css(e, "padding" + Me[n], !0, r), "padding" !== a && (s += re.css(e, "border" + Me[n] + "Width", !0, r)));
        return s
    }
    function E(t, a, i) {
        var r = !0,
            n = "width" === a ? t.offsetWidth : t.offsetHeight,
            s = Ke(t),
            o = "border-box" === re.css(t, "boxSizing", !1, s);
        if (X.msFullscreenElement && e.top !== e && t.getClientRects().length && (n = Math.round(100 * t.getBoundingClientRect()[a])), n <= 0 || null == n) {
            if (n = T(t, a, s), (n < 0 || null == n) && (n = t.style[a]), Ge.test(n)) return n;
            r = o && (ie.boxSizingReliable() || n === t.style[a]), n = parseFloat(n) || 0
        }
        return n + F(t, a, i || (o ? "border" : "content"), r, s) + "px"
    }
    function P(e, t) {
        for (var a, i, r, n = [], s = 0, o = e.length; s < o; s++) i = e[s], i.style && (n[s] = ke.get(i, "olddisplay"), a = i.style.display, t ? (n[s] || "none" !== a || (i.style.display = ""), "" === i.style.display && Fe(i) && (n[s] = ke.access(i, "olddisplay", $(i.nodeName)))) : (r = Fe(i), "none" === a && r || ke.set(i, "olddisplay", r ? a : re.css(i, "display"))));
        for (s = 0; s < o; s++) i = e[s], i.style && (t && "none" !== i.style.display && "" !== i.style.display || (i.style.display = t ? n[s] || "" : "none"));
        return e
    }
    function I(e, t, a, i, r) {
        return new I.prototype.init(e, t, a, i, r)
    }
    function A() {
        return e.setTimeout(function() {
            at = void 0
        }), at = re.now()
    }
    function N(e, t) {
        var a, i = 0,
            r = {
                height: e
            };
        for (t = t ? 1 : 0; i < 4; i += 2 - t) a = Me[i], r["margin" + a] = r["padding" + a] = e;
        return t && (r.opacity = r.width = e), r
    }
    function z(e, t, a) {
        for (var i, r = (H.tweeners[t] || []).concat(H.tweeners["*"]), n = 0, s = r.length; n < s; n++)
            if (i = r[n].call(a, t, e)) return i
    }
    function O(e, t, a) {
        var i, r, n, s, o, l, d, c = this,
            u = {},
            p = e.style,
            f = e.nodeType && Fe(e),
            h = ke.get(e, "fxshow");
        a.queue || (o = re._queueHooks(e, "fx"), null == o.unqueued && (o.unqueued = 0, l = o.empty.fire, o.empty.fire = function() {
            o.unqueued || l()
        }), o.unqueued++, c.always(function() {
            c.always(function() {
                o.unqueued--, re.queue(e, "fx").length || o.empty.fire()
            })
        })), 1 === e.nodeType && ("height" in t || "width" in t) && (a.overflow = [p.overflow, p.overflowX, p.overflowY], d = re.css(e, "display"), "inline" === ("none" === d ? ke.get(e, "olddisplay") || $(e.nodeName) : d) && "none" === re.css(e, "float") && (p.display = "inline-block")), a.overflow && (p.overflow = "hidden", c.always(function() {
            p.overflow = a.overflow[0], p.overflowX = a.overflow[1], p.overflowY = a.overflow[2]
        }));
        for (i in t)
            if (r = t[i], rt.exec(r)) {
                if (delete t[i], n = n || "toggle" === r, r === (f ? "hide" : "show")) {
                    if ("show" !== r || !h || void 0 === h[i]) continue;
                    f = !0
                }
                u[i] = h && h[i] || re.style(e, i)
            } else d = void 0;
        if (re.isEmptyObject(u)) "inline" === ("none" === d ? $(e.nodeName) : d) && (p.display = d);
        else {
            h ? "hidden" in h && (f = h.hidden) : h = ke.access(e, "fxshow", {}), n && (h.hidden = !f), f ? re(e).show() : c.done(function() {
                re(e).hide()
            }), c.done(function() {
                var t;
                ke.remove(e, "fxshow");
                for (t in u) re.style(e, t, u[t])
            });
            for (i in u) s = z(f ? h[i] : 0, i, c), i in h || (h[i] = s.start, f && (s.end = s.start, s.start = "width" === i || "height" === i ? 1 : 0))
        }
    }
    function L(e, t) {
        var a, i, r, n, s;
        for (a in e)
            if (i = re.camelCase(a), r = t[i], n = e[a], re.isArray(n) && (r = n[1], n = e[a] = n[0]), a !== i && (e[i] = n, delete e[a]), (s = re.cssHooks[i]) && "expand" in s) {
                n = s.expand(n), delete e[i];
                for (a in n) a in e || (e[a] = n[a], t[a] = r)
            } else t[i] = r
    }
    function H(e, t, a) {
        var i, r, n = 0,
            s = H.prefilters.length,
            o = re.Deferred().always(function() {
                delete l.elem
            }),
            l = function() {
                if (r) return !1;
                for (var t = at || A(), a = Math.max(0, d.startTime + d.duration - t), i = a / d.duration || 0, n = 1 - i, s = 0, l = d.tweens.length; s < l; s++) d.tweens[s].run(n);
                return o.notifyWith(e, [d, n, a]), n < 1 && l ? a : (o.resolveWith(e, [d]), !1)
            },
            d = o.promise({
                elem: e,
                props: re.extend({}, t),
                opts: re.extend(!0, {
                    specialEasing: {},
                    easing: re.easing._default
                }, a),
                originalProperties: t,
                originalOptions: a,
                startTime: at || A(),
                duration: a.duration,
                tweens: [],
                createTween: function(t, a) {
                    var i = re.Tween(e, d.opts, t, a, d.opts.specialEasing[t] || d.opts.easing);
                    return d.tweens.push(i), i
                },
                stop: function(t) {
                    var a = 0,
                        i = t ? d.tweens.length : 0;
                    if (r) return this;
                    for (r = !0; a < i; a++) d.tweens[a].run(1);
                    return t ? (o.notifyWith(e, [d, 1, 0]), o.resolveWith(e, [d, t])) : o.rejectWith(e, [d, t]), this
                }
            }),
            c = d.props;
        for (L(c, d.opts.specialEasing); n < s; n++)
            if (i = H.prefilters[n].call(d, e, c, d.opts)) return re.isFunction(i.stop) && (re._queueHooks(d.elem, d.opts.queue).stop = re.proxy(i.stop, i)), i;
        return re.map(c, z, d), re.isFunction(d.opts.start) && d.opts.start.call(e, d), re.fx.timer(re.extend(l, {
            elem: e,
            anim: d,
            queue: d.opts.queue
        })), d.progress(d.opts.progress).done(d.opts.done, d.opts.complete).fail(d.opts.fail).always(d.opts.always)
    }
    function j(e) {
        return e.getAttribute && e.getAttribute("class") || ""
    }
    function R(e) {
        return function(t, a) {
            "string" != typeof t && (a = t, t = "*");
            var i, r = 0,
                n = t.toLowerCase().match(we) || [];
            if (re.isFunction(a))
                for (; i = n[r++];) "+" === i[0] ? (i = i.slice(1) || "*", (e[i] = e[i] || []).unshift(a)) : (e[i] = e[i] || []).push(a)
        }
    }
    function q(e, t, a, i) {
        function r(o) {
            var l;
            return n[o] = !0, re.each(e[o] || [], function(e, o) {
                var d = o(t, a, i);
                return "string" != typeof d || s || n[d] ? s ? !(l = d) : void 0 : (t.dataTypes.unshift(d), r(d), !1)
            }), l
        }
        var n = {},
            s = e === Ct;
        return r(t.dataTypes[0]) || !n["*"] && r("*")
    }
    function B(e, t) {
        var a, i, r = re.ajaxSettings.flatOptions || {};
        for (a in t) void 0 !== t[a] && ((r[a] ? e : i || (i = {}))[a] = t[a]);
        return i && re.extend(!0, e, i), e
    }
    function W(e, t, a) {
        for (var i, r, n, s, o = e.contents, l = e.dataTypes;
            "*" === l[0];) l.shift(), void 0 === i && (i = e.mimeType || t.getResponseHeader("Content-Type"));
        if (i)
            for (r in o)
                if (o[r] && o[r].test(i)) {
                    l.unshift(r);
                    break
                }
        if (l[0] in a) n = l[0];
        else {
            for (r in a) {
                if (!l[0] || e.converters[r + " " + l[0]]) {
                    n = r;
                    break
                }
                s || (s = r)
            }
            n = n || s
        }
        if (n) return n !== l[0] && l.unshift(n), a[n]
    }
    function V(e, t, a, i) {
        var r, n, s, o, l, d = {},
            c = e.dataTypes.slice();
        if (c[1])
            for (s in e.converters) d[s.toLowerCase()] = e.converters[s];
        for (n = c.shift(); n;)
            if (e.responseFields[n] && (a[e.responseFields[n]] = t), !l && i && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = n, n = c.shift())
                if ("*" === n) n = l;
                else if ("*" !== l && l !== n) {
            if (!(s = d[l + " " + n] || d["* " + n]))
                for (r in d)
                    if (o = r.split(" "), o[1] === n && (s = d[l + " " + o[0]] || d["* " + o[0]])) {
                        !0 === s ? s = d[r] : !0 !== d[r] && (n = o[0], c.unshift(o[1]));
                        break
                    }
            if (!0 !== s)
                if (s && e.throws) t = s(t);
                else try {
                    t = s(t)
                } catch (e) {
                    return {
                        state: "parsererror",
                        error: s ? e : "No conversion from " + l + " to " + n
                    }
                }
        }
        return {
            state: "success",
            data: t
        }
    }
    function Y(e, t, a, i) {
        var r;
        if (re.isArray(t)) re.each(t, function(t, r) {
            a || St.test(e) ? i(e, r) : Y(e + "[" + ("object" == typeof r && null != r ? t : "") + "]", r, a, i)
        });
        else if (a || "object" !== re.type(t)) i(e, t);
        else
            for (r in t) Y(e + "[" + r + "]", t[r], a, i)
    }
    function G(e) {
        return re.isWindow(e) ? e : 9 === e.nodeType && e.defaultView
    }
    var K = [],
        X = e.document,
        U = K.slice,
        Q = K.concat,
        J = K.push,
        Z = K.indexOf,
        ee = {},
        te = ee.toString,
        ae = ee.hasOwnProperty,
        ie = {},
        re = function(e, t) {
            return new re.fn.init(e, t)
        },
        ne = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        se = /^-ms-/,
        oe = /-([\da-z])/gi,
        le = function(e, t) {
            return t.toUpperCase()
        };
    re.fn = re.prototype = {
        jquery: "2.2.3",
        constructor: re,
        selector: "",
        length: 0,
        toArray: function() {
            return U.call(this)
        },
        get: function(e) {
            return null != e ? e < 0 ? this[e + this.length] : this[e] : U.call(this)
        },
        pushStack: function(e) {
            var t = re.merge(this.constructor(), e);
            return t.prevObject = this, t.context = this.context, t
        },
        each: function(e) {
            return re.each(this, e)
        },
        map: function(e) {
            return this.pushStack(re.map(this, function(t, a) {
                return e.call(t, a, t)
            }))
        },
        slice: function() {
            return this.pushStack(U.apply(this, arguments))
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq(-1)
        },
        eq: function(e) {
            var t = this.length,
                a = +e + (e < 0 ? t : 0);
            return this.pushStack(a >= 0 && a < t ? [this[a]] : [])
        },
        end: function() {
            return this.prevObject || this.constructor()
        },
        push: J,
        sort: K.sort,
        splice: K.splice
    }, re.extend = re.fn.extend = function() {
        var e, t, a, i, r, n, s = arguments[0] || {},
            o = 1,
            l = arguments.length,
            d = !1;
        for ("boolean" == typeof s && (d = s, s = arguments[o] || {}, o++), "object" == typeof s || re.isFunction(s) || (s = {}), o === l && (s = this, o--); o < l; o++)
            if (null != (e = arguments[o]))
                for (t in e) a = s[t], i = e[t], s !== i && (d && i && (re.isPlainObject(i) || (r = re.isArray(i))) ? (r ? (r = !1, n = a && re.isArray(a) ? a : []) : n = a && re.isPlainObject(a) ? a : {}, s[t] = re.extend(d, n, i)) : void 0 !== i && (s[t] = i));
        return s
    }, re.extend({
        expando: "jQuery" + ("2.2.3" + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(e) {
            throw new Error(e)
        },
        noop: function() {},
        isFunction: function(e) {
            return "function" === re.type(e)
        },
        isArray: Array.isArray,
        isWindow: function(e) {
            return null != e && e === e.window
        },
        isNumeric: function(e) {
            var t = e && e.toString();
            return !re.isArray(e) && t - parseFloat(t) + 1 >= 0
        },
        isPlainObject: function(e) {
            var t;
            if ("object" !== re.type(e) || e.nodeType || re.isWindow(e)) return !1;
            if (e.constructor && !ae.call(e, "constructor") && !ae.call(e.constructor.prototype || {}, "isPrototypeOf")) return !1;
            for (t in e);
            return void 0 === t || ae.call(e, t)
        },
        isEmptyObject: function(e) {
            var t;
            for (t in e) return !1;
            return !0
        },
        type: function(e) {
            return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? ee[te.call(e)] || "object" : typeof e
        },
        globalEval: function(e) {
            var t, a = eval;
            (e = re.trim(e)) && (1 === e.indexOf("use strict") ? (t = X.createElement("script"), t.text = e, X.head.appendChild(t).parentNode.removeChild(t)) : a(e))
        },
        camelCase: function(e) {
            return e.replace(se, "ms-").replace(oe, le)
        },
        nodeName: function(e, t) {
            return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
        },
        each: function(e, t) {
            var i, r = 0;
            if (a(e))
                for (i = e.length; r < i && !1 !== t.call(e[r], r, e[r]); r++);
            else
                for (r in e)
                    if (!1 === t.call(e[r], r, e[r])) break; return e
        },
        trim: function(e) {
            return null == e ? "" : (e + "").replace(ne, "")
        },
        makeArray: function(e, t) {
            var i = t || [];
            return null != e && (a(Object(e)) ? re.merge(i, "string" == typeof e ? [e] : e) : J.call(i, e)), i
        },
        inArray: function(e, t, a) {
            return null == t ? -1 : Z.call(t, e, a)
        },
        merge: function(e, t) {
            for (var a = +t.length, i = 0, r = e.length; i < a; i++) e[r++] = t[i];
            return e.length = r, e
        },
        grep: function(e, t, a) {
            for (var i = [], r = 0, n = e.length, s = !a; r < n; r++) !t(e[r], r) !== s && i.push(e[r]);
            return i
        },
        map: function(e, t, i) {
            var r, n, s = 0,
                o = [];
            if (a(e))
                for (r = e.length; s < r; s++) null != (n = t(e[s], s, i)) && o.push(n);
            else
                for (s in e) null != (n = t(e[s], s, i)) && o.push(n);
            return Q.apply([], o)
        },
        guid: 1,
        proxy: function(e, t) {
            var a, i, r;
            if ("string" == typeof t && (a = e[t], t = e, e = a), re.isFunction(e)) return i = U.call(arguments, 2), r = function() {
                return e.apply(t || this, i.concat(U.call(arguments)))
            }, r.guid = e.guid = e.guid || re.guid++, r
        },
        now: Date.now,
        support: ie
    }), "function" == typeof Symbol && (re.fn[Symbol.iterator] = K[Symbol.iterator]), re.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
        ee["[object " + t + "]"] = t.toLowerCase()
    });
    var de =
        /*!
         * Sizzle CSS Selector Engine v2.2.1
         * http://sizzlejs.com/
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license
         * http://jquery.org/license
         *
         * Date: 2015-10-17
         */
        function(e) {
            function t(e, t, a, i) {
                var r, n, s, o, d, u, p, f, h = t && t.ownerDocument,
                    v = t ? t.nodeType : 9;
                if (a = a || [], "string" != typeof e || !e || 1 !== v && 9 !== v && 11 !== v) return a;
                if (!i && ((t ? t.ownerDocument || t : L) !== F && M(t), t = t || F, P)) {
                    if (11 !== v && (u = ve.exec(e)))
                        if (r = u[1]) {
                            if (9 === v) {
                                if (!(s = t.getElementById(r))) return a;
                                if (s.id === r) return a.push(s), a
                            } else if (h && (s = h.getElementById(r)) && z(t, s) && s.id === r) return a.push(s), a
                        } else {
                            if (u[2]) return U.apply(a, t.getElementsByTagName(e)), a;
                            if ((r = u[3]) && w.getElementsByClassName && t.getElementsByClassName) return U.apply(a, t.getElementsByClassName(r)), a
                        }
                    if (w.qsa && !B[e + " "] && (!I || !I.test(e))) {
                        if (1 !== v) h = t, f = e;
                        else if ("object" !== t.nodeName.toLowerCase()) {
                            for ((o = t.getAttribute("id")) ? o = o.replace(ge, "\\$&") : t.setAttribute("id", o = O), p = k(e), n = p.length, d = ce.test(o) ? "#" + o : "[id='" + o + "']"; n--;) p[n] = d + " " + c(p[n]);
                            f = p.join(","), h = me.test(e) && l(t.parentNode) || t
                        }
                        if (f) try {
                            return U.apply(a, h.querySelectorAll(f)), a
                        } catch (e) {} finally {
                            o === O && t.removeAttribute("id")
                        }
                    }
                }
                return $(e.replace(ne, "$1"), t, a, i)
            }
            function a() {
                function e(a, i) {
                    return t.push(a + " ") > b.cacheLength && delete e[t.shift()], e[a + " "] = i
                }
                var t = [];
                return e
            }
            function i(e) {
                return e[O] = !0, e
            }
            function r(e) {
                var t = F.createElement("div");
                try {
                    return !!e(t)
                } catch (e) {
                    return !1
                } finally {
                    t.parentNode && t.parentNode.removeChild(t), t = null
                }
            }
            function n(e, t) {
                for (var a = e.split("|"), i = a.length; i--;) b.attrHandle[a[i]] = t
            }
            function s(e, t) {
                var a = t && e,
                    i = a && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || V) - (~e.sourceIndex || V);
                if (i) return i;
                if (a)
                    for (; a = a.nextSibling;)
                        if (a === t) return -1;
                return e ? 1 : -1
            }
            function o(e) {
                return i(function(t) {
                    return t = +t, i(function(a, i) {
                        for (var r, n = e([], a.length, t), s = n.length; s--;) a[r = n[s]] && (a[r] = !(i[r] = a[r]))
                    })
                })
            }
            function l(e) {
                return e && void 0 !== e.getElementsByTagName && e
            }
            function d() {}
            function c(e) {
                for (var t = 0, a = e.length, i = ""; t < a; t++) i += e[t].value;
                return i
            }
            function u(e, t, a) {
                var i = t.dir,
                    r = a && "parentNode" === i,
                    n = j++;
                return t.first ? function(t, a, n) {
                    for (; t = t[i];)
                        if (1 === t.nodeType || r) return e(t, a, n)
                } : function(t, a, s) {
                    var o, l, d, c = [H, n];
                    if (s) {
                        for (; t = t[i];)
                            if ((1 === t.nodeType || r) && e(t, a, s)) return !0
                    } else
                        for (; t = t[i];)
                            if (1 === t.nodeType || r) {
                                if (d = t[O] || (t[O] = {}), l = d[t.uniqueID] || (d[t.uniqueID] = {}), (o = l[i]) && o[0] === H && o[1] === n) return c[2] = o[2];
                                if (l[i] = c, c[2] = e(t, a, s)) return !0
                            }
                }
            }
            function p(e) {
                return e.length > 1 ? function(t, a, i) {
                    for (var r = e.length; r--;)
                        if (!e[r](t, a, i)) return !1;
                    return !0
                } : e[0]
            }
            function f(e, a, i) {
                for (var r = 0, n = a.length; r < n; r++) t(e, a[r], i);
                return i
            }
            function h(e, t, a, i, r) {
                for (var n, s = [], o = 0, l = e.length, d = null != t; o < l; o++)(n = e[o]) && (a && !a(n, i, r) || (s.push(n), d && t.push(o)));
                return s
            }
            function v(e, t, a, r, n, s) {
                return r && !r[O] && (r = v(r)), n && !n[O] && (n = v(n, s)), i(function(i, s, o, l) {
                    var d, c, u, p = [],
                        v = [],
                        m = s.length,
                        g = i || f(t || "*", o.nodeType ? [o] : o, []),
                        y = !e || !i && t ? g : h(g, p, e, o, l),
                        w = a ? n || (i ? e : m || r) ? [] : s : y;
                    if (a && a(y, w, o, l), r)
                        for (d = h(w, v), r(d, [], o, l), c = d.length; c--;)(u = d[c]) && (w[v[c]] = !(y[v[c]] = u));
                    if (i) {
                        if (n || e) {
                            if (n) {
                                for (d = [], c = w.length; c--;)(u = w[c]) && d.push(y[c] = u);
                                n(null, w = [], d, l)
                            }
                            for (c = w.length; c--;)(u = w[c]) && (d = n ? J(i, u) : p[c]) > -1 && (i[d] = !(s[d] = u))
                        }
                    } else w = h(w === s ? w.splice(m, w.length) : w), n ? n(null, s, w, l) : U.apply(s, w)
                })
            }
            function m(e) {
                for (var t, a, i, r = e.length, n = b.relative[e[0].type], s = n || b.relative[" "], o = n ? 1 : 0, l = u(function(e) {
                        return e === t
                    }, s, !0), d = u(function(e) {
                        return J(t, e) > -1
                    }, s, !0), f = [function(e, a, i) {
                        var r = !n && (i || a !== T) || ((t = a).nodeType ? l(e, a, i) : d(e, a, i));
                        return t = null, r
                    }]; o < r; o++)
                    if (a = b.relative[e[o].type]) f = [u(p(f), a)];
                    else {
                        if (a = b.filter[e[o].type].apply(null, e[o].matches), a[O]) {
                            for (i = ++o; i < r && !b.relative[e[i].type]; i++);
                            return v(o > 1 && p(f), o > 1 && c(e.slice(0, o - 1).concat({
                                value: " " === e[o - 2].type ? "*" : ""
                            })).replace(ne, "$1"), a, o < i && m(e.slice(o, i)), i < r && m(e = e.slice(i)), i < r && c(e))
                        }
                        f.push(a)
                    }
                return p(f)
            }
            function g(e, a) {
                var r = a.length > 0,
                    n = e.length > 0,
                    s = function(i, s, o, l, d) {
                        var c, u, p, f = 0,
                            v = "0",
                            m = i && [],
                            g = [],
                            y = T,
                            w = i || n && b.find.TAG("*", d),
                            x = H += null == y ? 1 : Math.random() || .1,
                            _ = w.length;
                        for (d && (T = s === F || s || d); v !== _ && null != (c = w[v]); v++) {
                            if (n && c) {
                                for (u = 0, s || c.ownerDocument === F || (M(c), o = !P); p = e[u++];)
                                    if (p(c, s || F, o)) {
                                        l.push(c);
                                        break
                                    }
                                d && (H = x)
                            }
                            r && ((c = !p && c) && f--, i && m.push(c))
                        }
                        if (f += v, r && v !== f) {
                            for (u = 0; p = a[u++];) p(m, g, s, o);
                            if (i) {
                                if (f > 0)
                                    for (; v--;) m[v] || g[v] || (g[v] = K.call(l));
                                g = h(g)
                            }
                            U.apply(l, g), d && !i && g.length > 0 && f + a.length > 1 && t.uniqueSort(l)
                        }
                        return d && (H = x, T = y), m
                    };
                return r ? i(s) : s
            }
            var y, w, b, x, _, k, C, $, T, D, S, M, F, E, P, I, A, N, z, O = "sizzle" + 1 * new Date,
                L = e.document,
                H = 0,
                j = 0,
                R = a(),
                q = a(),
                B = a(),
                W = function(e, t) {
                    return e === t && (S = !0), 0
                },
                V = 1 << 31,
                Y = {}.hasOwnProperty,
                G = [],
                K = G.pop,
                X = G.push,
                U = G.push,
                Q = G.slice,
                J = function(e, t) {
                    for (var a = 0, i = e.length; a < i; a++)
                        if (e[a] === t) return a;
                    return -1
                },
                Z = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                ee = "[\\x20\\t\\r\\n\\f]",
                te = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
                ae = "\\[" + ee + "*(" + te + ")(?:" + ee + "*([*^$|!~]?=)" + ee + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + te + "))|)" + ee + "*\\]",
                ie = ":(" + te + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + ae + ")*)|.*)\\)|)",
                re = new RegExp(ee + "+", "g"),
                ne = new RegExp("^" + ee + "+|((?:^|[^\\\\])(?:\\\\.)*)" + ee + "+$", "g"),
                se = new RegExp("^" + ee + "*," + ee + "*"),
                oe = new RegExp("^" + ee + "*([>+~]|" + ee + ")" + ee + "*"),
                le = new RegExp("=" + ee + "*([^\\]'\"]*?)" + ee + "*\\]", "g"),
                de = new RegExp(ie),
                ce = new RegExp("^" + te + "$"),
                ue = {
                    ID: new RegExp("^#(" + te + ")"),
                    CLASS: new RegExp("^\\.(" + te + ")"),
                    TAG: new RegExp("^(" + te + "|[*])"),
                    ATTR: new RegExp("^" + ae),
                    PSEUDO: new RegExp("^" + ie),
                    CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + ee + "*(even|odd|(([+-]|)(\\d*)n|)" + ee + "*(?:([+-]|)" + ee + "*(\\d+)|))" + ee + "*\\)|)", "i"),
                    bool: new RegExp("^(?:" + Z + ")$", "i"),
                    needsContext: new RegExp("^" + ee + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + ee + "*((?:-\\d)?\\d*)" + ee + "*\\)|)(?=[^-]|$)", "i")
                },
                pe = /^(?:input|select|textarea|button)$/i,
                fe = /^h\d$/i,
                he = /^[^{]+\{\s*\[native \w/,
                ve = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                me = /[+~]/,
                ge = /'|\\/g,
                ye = new RegExp("\\\\([\\da-f]{1,6}" + ee + "?|(" + ee + ")|.)", "ig"),
                we = function(e, t, a) {
                    var i = "0x" + t - 65536;
                    return i !== i || a ? t : i < 0 ? String.fromCharCode(i + 65536) : String.fromCharCode(i >> 10 | 55296, 1023 & i | 56320)
                },
                be = function() {
                    M()
                };
            try {
                U.apply(G = Q.call(L.childNodes), L.childNodes), G[L.childNodes.length].nodeType
            } catch (e) {
                U = {
                    apply: G.length ? function(e, t) {
                        X.apply(e, Q.call(t))
                    } : function(e, t) {
                        for (var a = e.length, i = 0; e[a++] = t[i++];);
                        e.length = a - 1
                    }
                }
            }
            w = t.support = {}, _ = t.isXML = function(e) {
                var t = e && (e.ownerDocument || e).documentElement;
                return !!t && "HTML" !== t.nodeName
            }, M = t.setDocument = function(e) {
                var t, a, i = e ? e.ownerDocument || e : L;
                return i !== F && 9 === i.nodeType && i.documentElement ? (F = i, E = F.documentElement, P = !_(F), (a = F.defaultView) && a.top !== a && (a.addEventListener ? a.addEventListener("unload", be, !1) : a.attachEvent && a.attachEvent("onunload", be)), w.attributes = r(function(e) {
                    return e.className = "i", !e.getAttribute("className")
                }), w.getElementsByTagName = r(function(e) {
                    return e.appendChild(F.createComment("")), !e.getElementsByTagName("*").length
                }), w.getElementsByClassName = he.test(F.getElementsByClassName), w.getById = r(function(e) {
                    return E.appendChild(e).id = O, !F.getElementsByName || !F.getElementsByName(O).length
                }), w.getById ? (b.find.ID = function(e, t) {
                    if (void 0 !== t.getElementById && P) {
                        var a = t.getElementById(e);
                        return a ? [a] : []
                    }
                }, b.filter.ID = function(e) {
                    var t = e.replace(ye, we);
                    return function(e) {
                        return e.getAttribute("id") === t
                    }
                }) : (delete b.find.ID, b.filter.ID = function(e) {
                    var t = e.replace(ye, we);
                    return function(e) {
                        var a = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
                        return a && a.value === t
                    }
                }), b.find.TAG = w.getElementsByTagName ? function(e, t) {
                    return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : w.qsa ? t.querySelectorAll(e) : void 0
                } : function(e, t) {
                    var a, i = [],
                        r = 0,
                        n = t.getElementsByTagName(e);
                    if ("*" === e) {
                        for (; a = n[r++];) 1 === a.nodeType && i.push(a);
                        return i
                    }
                    return n
                }, b.find.CLASS = w.getElementsByClassName && function(e, t) {
                    if (void 0 !== t.getElementsByClassName && P) return t.getElementsByClassName(e)
                }, A = [], I = [], (w.qsa = he.test(F.querySelectorAll)) && (r(function(e) {
                    E.appendChild(e).innerHTML = "<a id='" + O + "'></a><select id='" + O + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && I.push("[*^$]=" + ee + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || I.push("\\[" + ee + "*(?:value|" + Z + ")"), e.querySelectorAll("[id~=" + O + "-]").length || I.push("~="), e.querySelectorAll(":checked").length || I.push(":checked"), e.querySelectorAll("a#" + O + "+*").length || I.push(".#.+[+~]")
                }), r(function(e) {
                    var t = F.createElement("input");
                    t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && I.push("name" + ee + "*[*^$|!~]?="), e.querySelectorAll(":enabled").length || I.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), I.push(",.*:")
                })), (w.matchesSelector = he.test(N = E.matches || E.webkitMatchesSelector || E.mozMatchesSelector || E.oMatchesSelector || E.msMatchesSelector)) && r(function(e) {
                    w.disconnectedMatch = N.call(e, "div"), N.call(e, "[s!='']:x"), A.push("!=", ie)
                }), I = I.length && new RegExp(I.join("|")), A = A.length && new RegExp(A.join("|")), t = he.test(E.compareDocumentPosition), z = t || he.test(E.contains) ? function(e, t) {
                    var a = 9 === e.nodeType ? e.documentElement : e,
                        i = t && t.parentNode;
                    return e === i || !(!i || 1 !== i.nodeType || !(a.contains ? a.contains(i) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(i)))
                } : function(e, t) {
                    if (t)
                        for (; t = t.parentNode;)
                            if (t === e) return !0;
                    return !1
                }, W = t ? function(e, t) {
                    if (e === t) return S = !0, 0;
                    var a = !e.compareDocumentPosition - !t.compareDocumentPosition;
                    return a || (a = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1, 1 & a || !w.sortDetached && t.compareDocumentPosition(e) === a ? e === F || e.ownerDocument === L && z(L, e) ? -1 : t === F || t.ownerDocument === L && z(L, t) ? 1 : D ? J(D, e) - J(D, t) : 0 : 4 & a ? -1 : 1)
                } : function(e, t) {
                    if (e === t) return S = !0, 0;
                    var a, i = 0,
                        r = e.parentNode,
                        n = t.parentNode,
                        o = [e],
                        l = [t];
                    if (!r || !n) return e === F ? -1 : t === F ? 1 : r ? -1 : n ? 1 : D ? J(D, e) - J(D, t) : 0;
                    if (r === n) return s(e, t);
                    for (a = e; a = a.parentNode;) o.unshift(a);
                    for (a = t; a = a.parentNode;) l.unshift(a);
                    for (; o[i] === l[i];) i++;
                    return i ? s(o[i], l[i]) : o[i] === L ? -1 : l[i] === L ? 1 : 0
                }, F) : F
            }, t.matches = function(e, a) {
                return t(e, null, null, a)
            }, t.matchesSelector = function(e, a) {
                if ((e.ownerDocument || e) !== F && M(e), a = a.replace(le, "='$1']"), w.matchesSelector && P && !B[a + " "] && (!A || !A.test(a)) && (!I || !I.test(a))) try {
                    var i = N.call(e, a);
                    if (i || w.disconnectedMatch || e.document && 11 !== e.document.nodeType) return i
                } catch (e) {}
                return t(a, F, null, [e]).length > 0
            }, t.contains = function(e, t) {
                return (e.ownerDocument || e) !== F && M(e), z(e, t)
            }, t.attr = function(e, t) {
                (e.ownerDocument || e) !== F && M(e);
                var a = b.attrHandle[t.toLowerCase()],
                    i = a && Y.call(b.attrHandle, t.toLowerCase()) ? a(e, t, !P) : void 0;
                return void 0 !== i ? i : w.attributes || !P ? e.getAttribute(t) : (i = e.getAttributeNode(t)) && i.specified ? i.value : null
            }, t.error = function(e) {
                throw new Error("Syntax error, unrecognized expression: " + e)
            }, t.uniqueSort = function(e) {
                var t, a = [],
                    i = 0,
                    r = 0;
                if (S = !w.detectDuplicates, D = !w.sortStable && e.slice(0), e.sort(W), S) {
                    for (; t = e[r++];) t === e[r] && (i = a.push(r));
                    for (; i--;) e.splice(a[i], 1)
                }
                return D = null, e
            }, x = t.getText = function(e) {
                var t, a = "",
                    i = 0,
                    r = e.nodeType;
                if (r) {
                    if (1 === r || 9 === r || 11 === r) {
                        if ("string" == typeof e.textContent) return e.textContent;
                        for (e = e.firstChild; e; e = e.nextSibling) a += x(e)
                    } else if (3 === r || 4 === r) return e.nodeValue
                } else
                    for (; t = e[i++];) a += x(t);
                return a
            }, b = t.selectors = {
                cacheLength: 50,
                createPseudo: i,
                match: ue,
                attrHandle: {},
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: !0
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: !0
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    ATTR: function(e) {
                        return e[1] = e[1].replace(ye, we), e[3] = (e[3] || e[4] || e[5] || "").replace(ye, we), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4)
                    },
                    CHILD: function(e) {
                        return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || t.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && t.error(e[0]), e
                    },
                    PSEUDO: function(e) {
                        var t, a = !e[6] && e[2];
                        return ue.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : a && de.test(a) && (t = k(a, !0)) && (t = a.indexOf(")", a.length - t) - a.length) && (e[0] = e[0].slice(0, t), e[2] = a.slice(0, t)), e.slice(0, 3))
                    }
                },
                filter: {
                    TAG: function(e) {
                        var t = e.replace(ye, we).toLowerCase();
                        return "*" === e ? function() {
                            return !0
                        } : function(e) {
                            return e.nodeName && e.nodeName.toLowerCase() === t
                        }
                    },
                    CLASS: function(e) {
                        var t = R[e + " "];
                        return t || (t = new RegExp("(^|" + ee + ")" + e + "(" + ee + "|$)")) && R(e, function(e) {
                            return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "")
                        })
                    },
                    ATTR: function(e, a, i) {
                        return function(r) {
                            var n = t.attr(r, e);
                            return null == n ? "!=" === a : !a || (n += "", "=" === a ? n === i : "!=" === a ? n !== i : "^=" === a ? i && 0 === n.indexOf(i) : "*=" === a ? i && n.indexOf(i) > -1 : "$=" === a ? i && n.slice(-i.length) === i : "~=" === a ? (" " + n.replace(re, " ") + " ").indexOf(i) > -1 : "|=" === a && (n === i || n.slice(0, i.length + 1) === i + "-"))
                        }
                    },
                    CHILD: function(e, t, a, i, r) {
                        var n = "nth" !== e.slice(0, 3),
                            s = "last" !== e.slice(-4),
                            o = "of-type" === t;
                        return 1 === i && 0 === r ? function(e) {
                            return !!e.parentNode
                        } : function(t, a, l) {
                            var d, c, u, p, f, h, v = n !== s ? "nextSibling" : "previousSibling",
                                m = t.parentNode,
                                g = o && t.nodeName.toLowerCase(),
                                y = !l && !o,
                                w = !1;
                            if (m) {
                                if (n) {
                                    for (; v;) {
                                        for (p = t; p = p[v];)
                                            if (o ? p.nodeName.toLowerCase() === g : 1 === p.nodeType) return !1;
                                        h = v = "only" === e && !h && "nextSibling"
                                    }
                                    return !0
                                }
                                if (h = [s ? m.firstChild : m.lastChild], s && y) {
                                    for (p = m, u = p[O] || (p[O] = {}), c = u[p.uniqueID] || (u[p.uniqueID] = {}), d = c[e] || [], f = d[0] === H && d[1], w = f && d[2], p = f && m.childNodes[f]; p = ++f && p && p[v] || (w = f = 0) || h.pop();)
                                        if (1 === p.nodeType && ++w && p === t) {
                                            c[e] = [H, f, w];
                                            break
                                        }
                                } else if (y && (p = t, u = p[O] || (p[O] = {}), c = u[p.uniqueID] || (u[p.uniqueID] = {}), d = c[e] || [], f = d[0] === H && d[1], w = f), !1 === w)
                                    for (;
                                        (p = ++f && p && p[v] || (w = f = 0) || h.pop()) && ((o ? p.nodeName.toLowerCase() !== g : 1 !== p.nodeType) || !++w || (y && (u = p[O] || (p[O] = {}), c = u[p.uniqueID] || (u[p.uniqueID] = {}), c[e] = [H, w]), p !== t)););
                                return (w -= r) === i || w % i == 0 && w / i >= 0
                            }
                        }
                    },
                    PSEUDO: function(e, a) {
                        var r, n = b.pseudos[e] || b.setFilters[e.toLowerCase()] || t.error("unsupported pseudo: " + e);
                        return n[O] ? n(a) : n.length > 1 ? (r = [e, e, "", a], b.setFilters.hasOwnProperty(e.toLowerCase()) ? i(function(e, t) {
                            for (var i, r = n(e, a), s = r.length; s--;) i = J(e, r[s]), e[i] = !(t[i] = r[s])
                        }) : function(e) {
                            return n(e, 0, r)
                        }) : n
                    }
                },
                pseudos: {
                    not: i(function(e) {
                        var t = [],
                            a = [],
                            r = C(e.replace(ne, "$1"));
                        return r[O] ? i(function(e, t, a, i) {
                            for (var n, s = r(e, null, i, []), o = e.length; o--;)(n = s[o]) && (e[o] = !(t[o] = n))
                        }) : function(e, i, n) {
                            return t[0] = e, r(t, null, n, a), t[0] = null, !a.pop()
                        }
                    }),
                    has: i(function(e) {
                        return function(a) {
                            return t(e, a).length > 0
                        }
                    }),
                    contains: i(function(e) {
                        return e = e.replace(ye, we),
                            function(t) {
                                return (t.textContent || t.innerText || x(t)).indexOf(e) > -1
                            }
                    }),
                    lang: i(function(e) {
                        return ce.test(e || "") || t.error("unsupported lang: " + e), e = e.replace(ye, we).toLowerCase(),
                            function(t) {
                                var a;
                                do {
                                    if (a = P ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (a = a.toLowerCase()) === e || 0 === a.indexOf(e + "-")
                                } while ((t = t.parentNode) && 1 === t.nodeType);
                                return !1
                            }
                    }),
                    target: function(t) {
                        var a = e.location && e.location.hash;
                        return a && a.slice(1) === t.id
                    },
                    root: function(e) {
                        return e === E
                    },
                    focus: function(e) {
                        return e === F.activeElement && (!F.hasFocus || F.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)
                    },
                    enabled: function(e) {
                        return !1 === e.disabled
                    },
                    disabled: function(e) {
                        return !0 === e.disabled
                    },
                    checked: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && !!e.checked || "option" === t && !!e.selected
                    },
                    selected: function(e) {
                        return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected
                    },
                    empty: function(e) {
                        for (e = e.firstChild; e; e = e.nextSibling)
                            if (e.nodeType < 6) return !1;
                        return !0
                    },
                    parent: function(e) {
                        return !b.pseudos.empty(e)
                    },
                    header: function(e) {
                        return fe.test(e.nodeName)
                    },
                    input: function(e) {
                        return pe.test(e.nodeName)
                    },
                    button: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && "button" === e.type || "button" === t
                    },
                    text: function(e) {
                        var t;
                        return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase())
                    },
                    first: o(function() {
                        return [0]
                    }),
                    last: o(function(e, t) {
                        return [t - 1]
                    }),
                    eq: o(function(e, t, a) {
                        return [a < 0 ? a + t : a]
                    }),
                    even: o(function(e, t) {
                        for (var a = 0; a < t; a += 2) e.push(a);
                        return e
                    }),
                    odd: o(function(e, t) {
                        for (var a = 1; a < t; a += 2) e.push(a);
                        return e
                    }),
                    lt: o(function(e, t, a) {
                        for (var i = a < 0 ? a + t : a; --i >= 0;) e.push(i);
                        return e
                    }),
                    gt: o(function(e, t, a) {
                        for (var i = a < 0 ? a + t : a; ++i < t;) e.push(i);
                        return e
                    })
                }
            }, b.pseudos.nth = b.pseudos.eq;
            for (y in {
                    radio: !0,
                    checkbox: !0,
                    file: !0,
                    password: !0,
                    image: !0
                }) b.pseudos[y] = function(e) {
                return function(t) {
                    return "input" === t.nodeName.toLowerCase() && t.type === e
                }
            }(y);
            for (y in {
                    submit: !0,
                    reset: !0
                }) b.pseudos[y] = function(e) {
                return function(t) {
                    var a = t.nodeName.toLowerCase();
                    return ("input" === a || "button" === a) && t.type === e
                }
            }(y);
            return d.prototype = b.filters = b.pseudos, b.setFilters = new d, k = t.tokenize = function(e, a) {
                var i, r, n, s, o, l, d, c = q[e + " "];
                if (c) return a ? 0 : c.slice(0);
                for (o = e, l = [], d = b.preFilter; o;) {
                    i && !(r = se.exec(o)) || (r && (o = o.slice(r[0].length) || o), l.push(n = [])), i = !1, (r = oe.exec(o)) && (i = r.shift(), n.push({
                        value: i,
                        type: r[0].replace(ne, " ")
                    }), o = o.slice(i.length));
                    for (s in b.filter) !(r = ue[s].exec(o)) || d[s] && !(r = d[s](r)) || (i = r.shift(), n.push({
                        value: i,
                        type: s,
                        matches: r
                    }), o = o.slice(i.length));
                    if (!i) break
                }
                return a ? o.length : o ? t.error(e) : q(e, l).slice(0)
            }, C = t.compile = function(e, t) {
                var a, i = [],
                    r = [],
                    n = B[e + " "];
                if (!n) {
                    for (t || (t = k(e)), a = t.length; a--;) n = m(t[a]), n[O] ? i.push(n) : r.push(n);
                    n = B(e, g(r, i)), n.selector = e
                }
                return n
            }, $ = t.select = function(e, t, a, i) {
                var r, n, s, o, d, u = "function" == typeof e && e,
                    p = !i && k(e = u.selector || e);
                if (a = a || [], 1 === p.length) {
                    if (n = p[0] = p[0].slice(0), n.length > 2 && "ID" === (s = n[0]).type && w.getById && 9 === t.nodeType && P && b.relative[n[1].type]) {
                        if (!(t = (b.find.ID(s.matches[0].replace(ye, we), t) || [])[0])) return a;
                        u && (t = t.parentNode), e = e.slice(n.shift().value.length)
                    }
                    for (r = ue.needsContext.test(e) ? 0 : n.length; r-- && (s = n[r], !b.relative[o = s.type]);)
                        if ((d = b.find[o]) && (i = d(s.matches[0].replace(ye, we), me.test(n[0].type) && l(t.parentNode) || t))) {
                            if (n.splice(r, 1), !(e = i.length && c(n))) return U.apply(a, i), a;
                            break
                        }
                }
                return (u || C(e, p))(i, t, !P, a, !t || me.test(e) && l(t.parentNode) || t), a
            }, w.sortStable = O.split("").sort(W).join("") === O, w.detectDuplicates = !!S, M(), w.sortDetached = r(function(e) {
                return 1 & e.compareDocumentPosition(F.createElement("div"))
            }), r(function(e) {
                return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href")
            }) || n("type|href|height|width", function(e, t, a) {
                if (!a) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2)
            }), w.attributes && r(function(e) {
                return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value")
            }) || n("value", function(e, t, a) {
                if (!a && "input" === e.nodeName.toLowerCase()) return e.defaultValue
            }), r(function(e) {
                return null == e.getAttribute("disabled")
            }) || n(Z, function(e, t, a) {
                var i;
                if (!a) return !0 === e[t] ? t.toLowerCase() : (i = e.getAttributeNode(t)) && i.specified ? i.value : null
            }), t
        }(e);
    re.find = de, re.expr = de.selectors, re.expr[":"] = re.expr.pseudos, re.uniqueSort = re.unique = de.uniqueSort, re.text = de.getText, re.isXMLDoc = de.isXML, re.contains = de.contains;
    var ce = function(e, t, a) {
            for (var i = [], r = void 0 !== a;
                (e = e[t]) && 9 !== e.nodeType;)
                if (1 === e.nodeType) {
                    if (r && re(e).is(a)) break;
                    i.push(e)
                }
            return i
        },
        ue = function(e, t) {
            for (var a = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && a.push(e);
            return a
        },
        pe = re.expr.match.needsContext,
        fe = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
        he = /^.[^:#\[\.,]*$/;
    re.filter = function(e, t, a) {
        var i = t[0];
        return a && (e = ":not(" + e + ")"), 1 === t.length && 1 === i.nodeType ? re.find.matchesSelector(i, e) ? [i] : [] : re.find.matches(e, re.grep(t, function(e) {
            return 1 === e.nodeType
        }))
    }, re.fn.extend({
        find: function(e) {
            var t, a = this.length,
                i = [],
                r = this;
            if ("string" != typeof e) return this.pushStack(re(e).filter(function() {
                for (t = 0; t < a; t++)
                    if (re.contains(r[t], this)) return !0
            }));
            for (t = 0; t < a; t++) re.find(e, r[t], i);
            return i = this.pushStack(a > 1 ? re.unique(i) : i), i.selector = this.selector ? this.selector + " " + e : e, i
        },
        filter: function(e) {
            return this.pushStack(i(this, e || [], !1))
        },
        not: function(e) {
            return this.pushStack(i(this, e || [], !0))
        },
        is: function(e) {
            return !!i(this, "string" == typeof e && pe.test(e) ? re(e) : e || [], !1).length
        }
    });
    var ve, me = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
    (re.fn.init = function(e, t, a) {
        var i, r;
        if (!e) return this;
        if (a = a || ve, "string" == typeof e) {
            if (!(i = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : me.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || a).find(e) : this.constructor(t).find(e);
            if (i[1]) {
                if (t = t instanceof re ? t[0] : t, re.merge(this, re.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : X, !0)), fe.test(i[1]) && re.isPlainObject(t))
                    for (i in t) re.isFunction(this[i]) ? this[i](t[i]) : this.attr(i, t[i]);
                return this
            }
            return r = X.getElementById(i[2]), r && r.parentNode && (this.length = 1, this[0] = r), this.context = X, this.selector = e, this
        }
        return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : re.isFunction(e) ? void 0 !== a.ready ? a.ready(e) : e(re) : (void 0 !== e.selector && (this.selector = e.selector, this.context = e.context), re.makeArray(e, this))
    }).prototype = re.fn, ve = re(X);
    var ge = /^(?:parents|prev(?:Until|All))/,
        ye = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    re.fn.extend({
        has: function(e) {
            var t = re(e, this),
                a = t.length;
            return this.filter(function() {
                for (var e = 0; e < a; e++)
                    if (re.contains(this, t[e])) return !0
            })
        },
        closest: function(e, t) {
            for (var a, i = 0, r = this.length, n = [], s = pe.test(e) || "string" != typeof e ? re(e, t || this.context) : 0; i < r; i++)
                for (a = this[i]; a && a !== t; a = a.parentNode)
                    if (a.nodeType < 11 && (s ? s.index(a) > -1 : 1 === a.nodeType && re.find.matchesSelector(a, e))) {
                        n.push(a);
                        break
                    }
            return this.pushStack(n.length > 1 ? re.uniqueSort(n) : n)
        },
        index: function(e) {
            return e ? "string" == typeof e ? Z.call(re(e), this[0]) : Z.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function(e, t) {
            return this.pushStack(re.uniqueSort(re.merge(this.get(), re(e, t))))
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
        }
    }), re.each({
        parent: function(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null
        },
        parents: function(e) {
            return ce(e, "parentNode")
        },
        parentsUntil: function(e, t, a) {
            return ce(e, "parentNode", a)
        },
        next: function(e) {
            return r(e, "nextSibling")
        },
        prev: function(e) {
            return r(e, "previousSibling")
        },
        nextAll: function(e) {
            return ce(e, "nextSibling")
        },
        prevAll: function(e) {
            return ce(e, "previousSibling")
        },
        nextUntil: function(e, t, a) {
            return ce(e, "nextSibling", a)
        },
        prevUntil: function(e, t, a) {
            return ce(e, "previousSibling", a)
        },
        siblings: function(e) {
            return ue((e.parentNode || {}).firstChild, e)
        },
        children: function(e) {
            return ue(e.firstChild)
        },
        contents: function(e) {
            return e.contentDocument || re.merge([], e.childNodes)
        }
    }, function(e, t) {
        re.fn[e] = function(a, i) {
            var r = re.map(this, t, a);
            return "Until" !== e.slice(-5) && (i = a), i && "string" == typeof i && (r = re.filter(i, r)), this.length > 1 && (ye[e] || re.uniqueSort(r), ge.test(e) && r.reverse()), this.pushStack(r)
        }
    });
    var we = /\S+/g;
    re.Callbacks = function(e) {
        e = "string" == typeof e ? n(e) : re.extend({}, e);
        var t, a, i, r, s = [],
            o = [],
            l = -1,
            d = function() {
                for (r = e.once, i = t = !0; o.length; l = -1)
                    for (a = o.shift(); ++l < s.length;) !1 === s[l].apply(a[0], a[1]) && e.stopOnFalse && (l = s.length, a = !1);
                e.memory || (a = !1), t = !1, r && (s = a ? [] : "")
            },
            c = {
                add: function() {
                    return s && (a && !t && (l = s.length - 1, o.push(a)), function t(a) {
                        re.each(a, function(a, i) {
                            re.isFunction(i) ? e.unique && c.has(i) || s.push(i) : i && i.length && "string" !== re.type(i) && t(i)
                        })
                    }(arguments), a && !t && d()), this
                },
                remove: function() {
                    return re.each(arguments, function(e, t) {
                        for (var a;
                            (a = re.inArray(t, s, a)) > -1;) s.splice(a, 1), a <= l && l--
                    }), this
                },
                has: function(e) {
                    return e ? re.inArray(e, s) > -1 : s.length > 0
                },
                empty: function() {
                    return s && (s = []), this
                },
                disable: function() {
                    return r = o = [], s = a = "", this
                },
                disabled: function() {
                    return !s
                },
                lock: function() {
                    return r = o = [], a || (s = a = ""), this
                },
                locked: function() {
                    return !!r
                },
                fireWith: function(e, a) {
                    return r || (a = a || [], a = [e, a.slice ? a.slice() : a], o.push(a), t || d()), this
                },
                fire: function() {
                    return c.fireWith(this, arguments), this
                },
                fired: function() {
                    return !!i
                }
            };
        return c
    }, re.extend({
        Deferred: function(e) {
            var t = [
                    ["resolve", "done", re.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", re.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", re.Callbacks("memory")]
                ],
                a = "pending",
                i = {
                    state: function() {
                        return a
                    },
                    always: function() {
                        return r.done(arguments).fail(arguments), this
                    },
                    then: function() {
                        var e = arguments;
                        return re.Deferred(function(a) {
                            re.each(t, function(t, n) {
                                var s = re.isFunction(e[t]) && e[t];
                                r[n[1]](function() {
                                    var e = s && s.apply(this, arguments);
                                    e && re.isFunction(e.promise) ? e.promise().progress(a.notify).done(a.resolve).fail(a.reject) : a[n[0] + "With"](this === i ? a.promise() : this, s ? [e] : arguments)
                                })
                            }), e = null
                        }).promise()
                    },
                    promise: function(e) {
                        return null != e ? re.extend(e, i) : i
                    }
                },
                r = {};
            return i.pipe = i.then, re.each(t, function(e, n) {
                var s = n[2],
                    o = n[3];
                i[n[1]] = s.add, o && s.add(function() {
                    a = o
                }, t[1 ^ e][2].disable, t[2][2].lock), r[n[0]] = function() {
                    return r[n[0] + "With"](this === r ? i : this, arguments), this
                }, r[n[0] + "With"] = s.fireWith
            }), i.promise(r), e && e.call(r, r), r
        },
        when: function(e) {
            var t, a, i, r = 0,
                n = U.call(arguments),
                s = n.length,
                o = 1 !== s || e && re.isFunction(e.promise) ? s : 0,
                l = 1 === o ? e : re.Deferred(),
                d = function(e, a, i) {
                    return function(r) {
                        a[e] = this, i[e] = arguments.length > 1 ? U.call(arguments) : r, i === t ? l.notifyWith(a, i) : --o || l.resolveWith(a, i)
                    }
                };
            if (s > 1)
                for (t = new Array(s), a = new Array(s), i = new Array(s); r < s; r++) n[r] && re.isFunction(n[r].promise) ? n[r].promise().progress(d(r, a, t)).done(d(r, i, n)).fail(l.reject) : --o;
            return o || l.resolveWith(i, n), l.promise()
        }
    });
    var be;
    re.fn.ready = function(e) {
        return re.ready.promise().done(e), this
    }, re.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(e) {
            e ? re.readyWait++ : re.ready(!0)
        },
        ready: function(e) {
            (!0 === e ? --re.readyWait : re.isReady) || (re.isReady = !0, !0 !== e && --re.readyWait > 0 || (be.resolveWith(X, [re]), re.fn.triggerHandler && (re(X).triggerHandler("ready"), re(X).off("ready"))))
        }
    }), re.ready.promise = function(t) {
        return be || (be = re.Deferred(), "complete" === X.readyState || "loading" !== X.readyState && !X.documentElement.doScroll ? e.setTimeout(re.ready) : (X.addEventListener("DOMContentLoaded", s), e.addEventListener("load", s))), be.promise(t)
    }, re.ready.promise();
    var xe = function(e, t, a, i, r, n, s) {
            var o = 0,
                l = e.length,
                d = null == a;
            if ("object" === re.type(a)) {
                r = !0;
                for (o in a) xe(e, t, o, a[o], !0, n, s)
            } else if (void 0 !== i && (r = !0, re.isFunction(i) || (s = !0), d && (s ? (t.call(e, i), t = null) : (d = t, t = function(e, t, a) {
                    return d.call(re(e), a)
                })), t))
                for (; o < l; o++) t(e[o], a, s ? i : i.call(e[o], o, t(e[o], a)));
            return r ? e : d ? t.call(e) : l ? t(e[0], a) : n
        },
        _e = function(e) {
            return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType
        };
    o.uid = 1, o.prototype = {
        register: function(e, t) {
            var a = t || {};
            return e.nodeType ? e[this.expando] = a : Object.defineProperty(e, this.expando, {
                value: a,
                writable: !0,
                configurable: !0
            }), e[this.expando]
        },
        cache: function(e) {
            if (!_e(e)) return {};
            var t = e[this.expando];
            return t || (t = {}, _e(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t
        },
        set: function(e, t, a) {
            var i, r = this.cache(e);
            if ("string" == typeof t) r[t] = a;
            else
                for (i in t) r[i] = t[i];
            return r
        },
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][t]
        },
        access: function(e, t, a) {
            var i;
            return void 0 === t || t && "string" == typeof t && void 0 === a ? (i = this.get(e, t), void 0 !== i ? i : this.get(e, re.camelCase(t))) : (this.set(e, t, a), void 0 !== a ? a : t)
        },
        remove: function(e, t) {
            var a, i, r, n = e[this.expando];
            if (void 0 !== n) {
                if (void 0 === t) this.register(e);
                else {
                    re.isArray(t) ? i = t.concat(t.map(re.camelCase)) : (r = re.camelCase(t), t in n ? i = [t, r] : (i = r, i = i in n ? [i] : i.match(we) || [])), a = i.length;
                    for (; a--;) delete n[i[a]]
                }(void 0 === t || re.isEmptyObject(n)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando])
            }
        },
        hasData: function(e) {
            var t = e[this.expando];
            return void 0 !== t && !re.isEmptyObject(t)
        }
    };
    var ke = new o,
        Ce = new o,
        $e = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        Te = /[A-Z]/g;
    re.extend({
        hasData: function(e) {
            return Ce.hasData(e) || ke.hasData(e)
        },
        data: function(e, t, a) {
            return Ce.access(e, t, a)
        },
        removeData: function(e, t) {
            Ce.remove(e, t)
        },
        _data: function(e, t, a) {
            return ke.access(e, t, a)
        },
        _removeData: function(e, t) {
            ke.remove(e, t)
        }
    }), re.fn.extend({
        data: function(e, t) {
            var a, i, r, n = this[0],
                s = n && n.attributes;
            if (void 0 === e) {
                if (this.length && (r = Ce.get(n), 1 === n.nodeType && !ke.get(n, "hasDataAttrs"))) {
                    for (a = s.length; a--;) s[a] && (i = s[a].name, 0 === i.indexOf("data-") && (i = re.camelCase(i.slice(5)), l(n, i, r[i])));
                    ke.set(n, "hasDataAttrs", !0)
                }
                return r
            }
            return "object" == typeof e ? this.each(function() {
                Ce.set(this, e)
            }) : xe(this, function(t) {
                var a, i;
                if (n && void 0 === t) {
                    if (void 0 !== (a = Ce.get(n, e) || Ce.get(n, e.replace(Te, "-$&").toLowerCase()))) return a;
                    if (i = re.camelCase(e), void 0 !== (a = Ce.get(n, i))) return a;
                    if (void 0 !== (a = l(n, i, void 0))) return a
                } else i = re.camelCase(e), this.each(function() {
                    var a = Ce.get(this, i);
                    Ce.set(this, i, t), e.indexOf("-") > -1 && void 0 !== a && Ce.set(this, e, t)
                })
            }, null, t, arguments.length > 1, null, !0)
        },
        removeData: function(e) {
            return this.each(function() {
                Ce.remove(this, e)
            })
        }
    }), re.extend({
        queue: function(e, t, a) {
            var i;
            if (e) return t = (t || "fx") + "queue", i = ke.get(e, t), a && (!i || re.isArray(a) ? i = ke.access(e, t, re.makeArray(a)) : i.push(a)), i || []
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var a = re.queue(e, t),
                i = a.length,
                r = a.shift(),
                n = re._queueHooks(e, t),
                s = function() {
                    re.dequeue(e, t)
                };
            "inprogress" === r && (r = a.shift(), i--), r && ("fx" === t && a.unshift("inprogress"), delete n.stop, r.call(e, s, n)), !i && n && n.empty.fire()
        },
        _queueHooks: function(e, t) {
            var a = t + "queueHooks";
            return ke.get(e, a) || ke.access(e, a, {
                empty: re.Callbacks("once memory").add(function() {
                    ke.remove(e, [t + "queue", a])
                })
            })
        }
    }), re.fn.extend({
        queue: function(e, t) {
            var a = 2;
            return "string" != typeof e && (t = e, e = "fx", a--), arguments.length < a ? re.queue(this[0], e) : void 0 === t ? this : this.each(function() {
                var a = re.queue(this, e, t);
                re._queueHooks(this, e), "fx" === e && "inprogress" !== a[0] && re.dequeue(this, e)
            })
        },
        dequeue: function(e) {
            return this.each(function() {
                re.dequeue(this, e)
            })
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", [])
        },
        promise: function(e, t) {
            var a, i = 1,
                r = re.Deferred(),
                n = this,
                s = this.length,
                o = function() {
                    --i || r.resolveWith(n, [n])
                };
            for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; s--;)(a = ke.get(n[s], e + "queueHooks")) && a.empty && (i++, a.empty.add(o));
            return o(), r.promise(t)
        }
    });
    var De = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        Se = new RegExp("^(?:([+-])=|)(" + De + ")([a-z%]*)$", "i"),
        Me = ["Top", "Right", "Bottom", "Left"],
        Fe = function(e, t) {
            return e = t || e, "none" === re.css(e, "display") || !re.contains(e.ownerDocument, e)
        },
        Ee = /^(?:checkbox|radio)$/i,
        Pe = /<([\w:-]+)/,
        Ie = /^$|\/(?:java|ecma)script/i,
        Ae = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
        };
    Ae.optgroup = Ae.option, Ae.tbody = Ae.tfoot = Ae.colgroup = Ae.caption = Ae.thead, Ae.th = Ae.td;
    var Ne = /<|&#?\w+;/;
    ! function() {
        var e = X.createDocumentFragment(),
            t = e.appendChild(X.createElement("div")),
            a = X.createElement("input");
        a.setAttribute("type", "radio"), a.setAttribute("checked", "checked"), a.setAttribute("name", "t"), t.appendChild(a), ie.checkClone = t.cloneNode(!0).cloneNode(!0).lastChild.checked, t.innerHTML = "<textarea>x</textarea>", ie.noCloneChecked = !!t.cloneNode(!0).lastChild.defaultValue
    }();
    var ze = /^key/,
        Oe = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        Le = /^([^.]*)(?:\.(.+)|)/;
    re.event = {
        global: {},
        add: function(e, t, a, i, r) {
            var n, s, o, l, d, c, u, p, f, h, v, m = ke.get(e);
            if (m)
                for (a.handler && (n = a, a = n.handler, r = n.selector), a.guid || (a.guid = re.guid++), (l = m.events) || (l = m.events = {}), (s = m.handle) || (s = m.handle = function(t) {
                        return void 0 !== re && re.event.triggered !== t.type ? re.event.dispatch.apply(e, arguments) : void 0
                    }), t = (t || "").match(we) || [""], d = t.length; d--;) o = Le.exec(t[d]) || [], f = v = o[1], h = (o[2] || "").split(".").sort(), f && (u = re.event.special[f] || {}, f = (r ? u.delegateType : u.bindType) || f, u = re.event.special[f] || {}, c = re.extend({
                    type: f,
                    origType: v,
                    data: i,
                    handler: a,
                    guid: a.guid,
                    selector: r,
                    needsContext: r && re.expr.match.needsContext.test(r),
                    namespace: h.join(".")
                }, n), (p = l[f]) || (p = l[f] = [], p.delegateCount = 0, u.setup && !1 !== u.setup.call(e, i, h, s) || e.addEventListener && e.addEventListener(f, s)), u.add && (u.add.call(e, c), c.handler.guid || (c.handler.guid = a.guid)), r ? p.splice(p.delegateCount++, 0, c) : p.push(c), re.event.global[f] = !0)
        },
        remove: function(e, t, a, i, r) {
            var n, s, o, l, d, c, u, p, f, h, v, m = ke.hasData(e) && ke.get(e);
            if (m && (l = m.events)) {
                for (t = (t || "").match(we) || [""], d = t.length; d--;)
                    if (o = Le.exec(t[d]) || [], f = v = o[1], h = (o[2] || "").split(".").sort(), f) {
                        for (u = re.event.special[f] || {}, f = (i ? u.delegateType : u.bindType) || f, p = l[f] || [], o = o[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), s = n = p.length; n--;) c = p[n], !r && v !== c.origType || a && a.guid !== c.guid || o && !o.test(c.namespace) || i && i !== c.selector && ("**" !== i || !c.selector) || (p.splice(n, 1), c.selector && p.delegateCount--, u.remove && u.remove.call(e, c));
                        s && !p.length && (u.teardown && !1 !== u.teardown.call(e, h, m.handle) || re.removeEvent(e, f, m.handle), delete l[f])
                    } else
                        for (f in l) re.event.remove(e, f + t[d], a, i, !0);
                re.isEmptyObject(l) && ke.remove(e, "handle events")
            }
        },
        dispatch: function(e) {
            e = re.event.fix(e);
            var t, a, i, r, n, s = [],
                o = U.call(arguments),
                l = (ke.get(this, "events") || {})[e.type] || [],
                d = re.event.special[e.type] || {};
            if (o[0] = e, e.delegateTarget = this, !d.preDispatch || !1 !== d.preDispatch.call(this, e)) {
                for (s = re.event.handlers.call(this, e, l), t = 0;
                    (r = s[t++]) && !e.isPropagationStopped();)
                    for (e.currentTarget = r.elem, a = 0;
                        (n = r.handlers[a++]) && !e.isImmediatePropagationStopped();) e.rnamespace && !e.rnamespace.test(n.namespace) || (e.handleObj = n, e.data = n.data, void 0 !== (i = ((re.event.special[n.origType] || {}).handle || n.handler).apply(r.elem, o)) && !1 === (e.result = i) && (e.preventDefault(), e.stopPropagation()));
                return d.postDispatch && d.postDispatch.call(this, e), e.result
            }
        },
        handlers: function(e, t) {
            var a, i, r, n, s = [],
                o = t.delegateCount,
                l = e.target;
            if (o && l.nodeType && ("click" !== e.type || isNaN(e.button) || e.button < 1))
                for (; l !== this; l = l.parentNode || this)
                    if (1 === l.nodeType && (!0 !== l.disabled || "click" !== e.type)) {
                        for (i = [], a = 0; a < o; a++) n = t[a], r = n.selector + " ", void 0 === i[r] && (i[r] = n.needsContext ? re(r, this).index(l) > -1 : re.find(r, this, null, [l]).length), i[r] && i.push(n);
                        i.length && s.push({
                            elem: l,
                            handlers: i
                        })
                    }
            return o < t.length && s.push({
                elem: this,
                handlers: t.slice(o)
            }), s
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(e, t) {
                return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(e, t) {
                var a, i, r, n = t.button;
                return null == e.pageX && null != t.clientX && (a = e.target.ownerDocument || X, i = a.documentElement, r = a.body, e.pageX = t.clientX + (i && i.scrollLeft || r && r.scrollLeft || 0) - (i && i.clientLeft || r && r.clientLeft || 0), e.pageY = t.clientY + (i && i.scrollTop || r && r.scrollTop || 0) - (i && i.clientTop || r && r.clientTop || 0)), e.which || void 0 === n || (e.which = 1 & n ? 1 : 2 & n ? 3 : 4 & n ? 2 : 0), e
            }
        },
        fix: function(e) {
            if (e[re.expando]) return e;
            var t, a, i, r = e.type,
                n = e,
                s = this.fixHooks[r];
            for (s || (this.fixHooks[r] = s = Oe.test(r) ? this.mouseHooks : ze.test(r) ? this.keyHooks : {}), i = s.props ? this.props.concat(s.props) : this.props, e = new re.Event(n), t = i.length; t--;) a = i[t], e[a] = n[a];
            return e.target || (e.target = X), 3 === e.target.nodeType && (e.target = e.target.parentNode), s.filter ? s.filter(e, n) : e
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== v() && this.focus) return this.focus(), !1
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === v() && this.blur) return this.blur(), !1
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if ("checkbox" === this.type && this.click && re.nodeName(this, "input")) return this.click(), !1
                },
                _default: function(e) {
                    return re.nodeName(e.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result)
                }
            }
        }
    }, re.removeEvent = function(e, t, a) {
        e.removeEventListener && e.removeEventListener(t, a)
    }, re.Event = function(e, t) {
        if (!(this instanceof re.Event)) return new re.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? f : h) : this.type = e, t && re.extend(this, t), this.timeStamp = e && e.timeStamp || re.now(), this[re.expando] = !0
    }, re.Event.prototype = {
        constructor: re.Event,
        isDefaultPrevented: h,
        isPropagationStopped: h,
        isImmediatePropagationStopped: h,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = f, e && e.preventDefault()
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = f, e && e.stopPropagation()
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = f, e && e.stopImmediatePropagation(), this.stopPropagation()
        }
    }, re.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(e, t) {
        re.event.special[e] = {
            delegateType: t,
            bindType: t,
            handle: function(e) {
                var a, i = this,
                    r = e.relatedTarget,
                    n = e.handleObj;
                return r && (r === i || re.contains(i, r)) || (e.type = n.origType, a = n.handler.apply(this, arguments), e.type = t), a
            }
        }
    }), re.fn.extend({
        on: function(e, t, a, i) {
            return m(this, e, t, a, i)
        },
        one: function(e, t, a, i) {
            return m(this, e, t, a, i, 1)
        },
        off: function(e, t, a) {
            var i, r;
            if (e && e.preventDefault && e.handleObj) return i = e.handleObj, re(e.delegateTarget).off(i.namespace ? i.origType + "." + i.namespace : i.origType, i.selector, i.handler), this;
            if ("object" == typeof e) {
                for (r in e) this.off(r, t, e[r]);
                return this
            }
            return !1 !== t && "function" != typeof t || (a = t, t = void 0), !1 === a && (a = h), this.each(function() {
                re.event.remove(this, e, a, t)
            })
        }
    });
    var He = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
        je = /<script|<style|<link/i,
        Re = /checked\s*(?:[^=]|=\s*.checked.)/i,
        qe = /^true\/(.*)/,
        Be = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    re.extend({
        htmlPrefilter: function(e) {
            return e.replace(He, "<$1></$2>")
        },
        clone: function(e, t, a) {
            var i, r, n, s, o = e.cloneNode(!0),
                l = re.contains(e.ownerDocument, e);
            if (!(ie.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || re.isXMLDoc(e)))
                for (s = c(o), n = c(e), i = 0, r = n.length; i < r; i++) x(n[i], s[i]);
            if (t)
                if (a)
                    for (n = n || c(e), s = s || c(o), i = 0, r = n.length; i < r; i++) b(n[i], s[i]);
                else b(e, o);
            return s = c(o, "script"), s.length > 0 && u(s, !l && c(e, "script")), o
        },
        cleanData: function(e) {
            for (var t, a, i, r = re.event.special, n = 0; void 0 !== (a = e[n]); n++)
                if (_e(a)) {
                    if (t = a[ke.expando]) {
                        if (t.events)
                            for (i in t.events) r[i] ? re.event.remove(a, i) : re.removeEvent(a, i, t.handle);
                        a[ke.expando] = void 0
                    }
                    a[Ce.expando] && (a[Ce.expando] = void 0)
                }
        }
    }), re.fn.extend({
        domManip: _,
        detach: function(e) {
            return k(this, e, !0)
        },
        remove: function(e) {
            return k(this, e)
        },
        text: function(e) {
            return xe(this, function(e) {
                return void 0 === e ? re.text(this) : this.empty().each(function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e)
                })
            }, null, e, arguments.length)
        },
        append: function() {
            return _(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    g(this, e).appendChild(e)
                }
            })
        },
        prepend: function() {
            return _(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = g(this, e);
                    t.insertBefore(e, t.firstChild)
                }
            })
        },
        before: function() {
            return _(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this)
            })
        },
        after: function() {
            return _(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)
            })
        },
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (re.cleanData(c(e, !1)), e.textContent = "");
            return this
        },
        clone: function(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map(function() {
                return re.clone(this, e, t)
            })
        },
        html: function(e) {
            return xe(this, function(e) {
                var t = this[0] || {},
                    a = 0,
                    i = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !je.test(e) && !Ae[(Pe.exec(e) || ["", ""])[1].toLowerCase()]) {
                    e = re.htmlPrefilter(e);
                    try {
                        for (; a < i; a++) t = this[a] || {}, 1 === t.nodeType && (re.cleanData(c(t, !1)), t.innerHTML = e);
                        t = 0
                    } catch (e) {}
                }
                t && this.empty().append(e)
            }, null, e, arguments.length)
        },
        replaceWith: function() {
            var e = [];
            return _(this, arguments, function(t) {
                var a = this.parentNode;
                re.inArray(this, e) < 0 && (re.cleanData(c(this)), a && a.replaceChild(t, this))
            }, e)
        }
    }), re.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, t) {
        re.fn[e] = function(e) {
            for (var a, i = [], r = re(e), n = r.length - 1, s = 0; s <= n; s++) a = s === n ? this : this.clone(!0), re(r[s])[t](a), J.apply(i, a.get());
            return this.pushStack(i)
        }
    });
    var We, Ve = {
            HTML: "block",
            BODY: "block"
        },
        Ye = /^margin/,
        Ge = new RegExp("^(" + De + ")(?!px)[a-z%]+$", "i"),
        Ke = function(t) {
            var a = t.ownerDocument.defaultView;
            return a && a.opener || (a = e), a.getComputedStyle(t)
        },
        Xe = function(e, t, a, i) {
            var r, n, s = {};
            for (n in t) s[n] = e.style[n], e.style[n] = t[n];
            r = a.apply(e, i || []);
            for (n in t) e.style[n] = s[n];
            return r
        },
        Ue = X.documentElement;
    ! function() {
        function t() {
            o.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", o.innerHTML = "", Ue.appendChild(s);
            var t = e.getComputedStyle(o);
            a = "1%" !== t.top, n = "2px" === t.marginLeft, i = "4px" === t.width, o.style.marginRight = "50%", r = "4px" === t.marginRight, Ue.removeChild(s)
        }
        var a, i, r, n, s = X.createElement("div"),
            o = X.createElement("div");
        o.style && (o.style.backgroundClip = "content-box", o.cloneNode(!0).style.backgroundClip = "", ie.clearCloneStyle = "content-box" === o.style.backgroundClip, s.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", s.appendChild(o), re.extend(ie, {
            pixelPosition: function() {
                return t(), a
            },
            boxSizingReliable: function() {
                return null == i && t(), i
            },
            pixelMarginRight: function() {
                return null == i && t(), r
            },
            reliableMarginLeft: function() {
                return null == i && t(), n
            },
            reliableMarginRight: function() {
                var t, a = o.appendChild(X.createElement("div"));
                return a.style.cssText = o.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", a.style.marginRight = a.style.width = "0", o.style.width = "1px", Ue.appendChild(s), t = !parseFloat(e.getComputedStyle(a).marginRight), Ue.removeChild(s), o.removeChild(a), t
            }
        }))
    }();
    var Qe = /^(none|table(?!-c[ea]).+)/,
        Je = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Ze = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        et = ["Webkit", "O", "Moz", "ms"],
        tt = X.createElement("div").style;
    re.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) {
                        var a = T(e, "opacity");
                        return "" === a ? "1" : a
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: "cssFloat"
        },
        style: function(e, t, a, i) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var r, n, s, o = re.camelCase(t),
                    l = e.style;
                if (t = re.cssProps[o] || (re.cssProps[o] = S(o) || o), s = re.cssHooks[t] || re.cssHooks[o], void 0 === a) return s && "get" in s && void 0 !== (r = s.get(e, !1, i)) ? r : l[t];
                n = typeof a, "string" === n && (r = Se.exec(a)) && r[1] && (a = d(e, t, r), n = "number"), null != a && a === a && ("number" === n && (a += r && r[3] || (re.cssNumber[o] ? "" : "px")), ie.clearCloneStyle || "" !== a || 0 !== t.indexOf("background") || (l[t] = "inherit"), s && "set" in s && void 0 === (a = s.set(e, a, i)) || (l[t] = a))
            }
        },
        css: function(e, t, a, i) {
            var r, n, s, o = re.camelCase(t);
            return t = re.cssProps[o] || (re.cssProps[o] = S(o) || o), s = re.cssHooks[t] || re.cssHooks[o], s && "get" in s && (r = s.get(e, !0, a)), void 0 === r && (r = T(e, t, i)), "normal" === r && t in Ze && (r = Ze[t]), "" === a || a ? (n = parseFloat(r), !0 === a || isFinite(n) ? n || 0 : r) : r
        }
    }), re.each(["height", "width"], function(e, t) {
        re.cssHooks[t] = {
            get: function(e, a, i) {
                if (a) return Qe.test(re.css(e, "display")) && 0 === e.offsetWidth ? Xe(e, Je, function() {
                    return E(e, t, i)
                }) : E(e, t, i)
            },
            set: function(e, a, i) {
                var r, n = i && Ke(e),
                    s = i && F(e, t, i, "border-box" === re.css(e, "boxSizing", !1, n), n);
                return s && (r = Se.exec(a)) && "px" !== (r[3] || "px") && (e.style[t] = a, a = re.css(e, t)), M(e, a, s)
            }
        }
    }), re.cssHooks.marginLeft = D(ie.reliableMarginLeft, function(e, t) {
        if (t) return (parseFloat(T(e, "marginLeft")) || e.getBoundingClientRect().left - Xe(e, {
            marginLeft: 0
        }, function() {
            return e.getBoundingClientRect().left
        })) + "px"
    }), re.cssHooks.marginRight = D(ie.reliableMarginRight, function(e, t) {
        if (t) return Xe(e, {
            display: "inline-block"
        }, T, [e, "marginRight"])
    }), re.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(e, t) {
        re.cssHooks[e + t] = {
            expand: function(a) {
                for (var i = 0, r = {}, n = "string" == typeof a ? a.split(" ") : [a]; i < 4; i++) r[e + Me[i] + t] = n[i] || n[i - 2] || n[0];
                return r
            }
        }, Ye.test(e) || (re.cssHooks[e + t].set = M)
    }), re.fn.extend({
        css: function(e, t) {
            return xe(this, function(e, t, a) {
                var i, r, n = {},
                    s = 0;
                if (re.isArray(t)) {
                    for (i = Ke(e), r = t.length; s < r; s++) n[t[s]] = re.css(e, t[s], !1, i);
                    return n
                }
                return void 0 !== a ? re.style(e, t, a) : re.css(e, t)
            }, e, t, arguments.length > 1)
        },
        show: function() {
            return P(this, !0)
        },
        hide: function() {
            return P(this)
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                Fe(this) ? re(this).show() : re(this).hide()
            })
        }
    }), re.Tween = I, I.prototype = {
        constructor: I,
        init: function(e, t, a, i, r, n) {
            this.elem = e, this.prop = a, this.easing = r || re.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = i, this.unit = n || (re.cssNumber[a] ? "" : "px")
        },
        cur: function() {
            var e = I.propHooks[this.prop];
            return e && e.get ? e.get(this) : I.propHooks._default.get(this)
        },
        run: function(e) {
            var t, a = I.propHooks[this.prop];
            return this.options.duration ? this.pos = t = re.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), a && a.set ? a.set(this) : I.propHooks._default.set(this), this
        }
    }, I.prototype.init.prototype = I.prototype, I.propHooks = {
        _default: {
            get: function(e) {
                var t;
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = re.css(e.elem, e.prop, ""), t && "auto" !== t ? t : 0)
            },
            set: function(e) {
                re.fx.step[e.prop] ? re.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[re.cssProps[e.prop]] && !re.cssHooks[e.prop] ? e.elem[e.prop] = e.now : re.style(e.elem, e.prop, e.now + e.unit)
            }
        }
    }, I.propHooks.scrollTop = I.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)
        }
    }, re.easing = {
        linear: function(e) {
            return e
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2
        },
        _default: "swing"
    }, re.fx = I.prototype.init, re.fx.step = {};
    var at, it, rt = /^(?:toggle|show|hide)$/,
        nt = /queueHooks$/;
    re.Animation = re.extend(H, {
            tweeners: {
                "*": [function(e, t) {
                    var a = this.createTween(e, t);
                    return d(a.elem, e, Se.exec(t), a), a
                }]
            },
            tweener: function(e, t) {
                re.isFunction(e) ? (t = e, e = ["*"]) : e = e.match(we);
                for (var a, i = 0, r = e.length; i < r; i++) a = e[i], H.tweeners[a] = H.tweeners[a] || [], H.tweeners[a].unshift(t)
            },
            prefilters: [O],
            prefilter: function(e, t) {
                t ? H.prefilters.unshift(e) : H.prefilters.push(e)
            }
        }), re.speed = function(e, t, a) {
            var i = e && "object" == typeof e ? re.extend({}, e) : {
                complete: a || !a && t || re.isFunction(e) && e,
                duration: e,
                easing: a && t || t && !re.isFunction(t) && t
            };
            return i.duration = re.fx.off ? 0 : "number" == typeof i.duration ? i.duration : i.duration in re.fx.speeds ? re.fx.speeds[i.duration] : re.fx.speeds._default, null != i.queue && !0 !== i.queue || (i.queue = "fx"), i.old = i.complete, i.complete = function() {
                re.isFunction(i.old) && i.old.call(this), i.queue && re.dequeue(this, i.queue)
            }, i
        }, re.fn.extend({
            fadeTo: function(e, t, a, i) {
                return this.filter(Fe).css("opacity", 0).show().end().animate({
                    opacity: t
                }, e, a, i)
            },
            animate: function(e, t, a, i) {
                var r = re.isEmptyObject(e),
                    n = re.speed(t, a, i),
                    s = function() {
                        var t = H(this, re.extend({}, e), n);
                        (r || ke.get(this, "finish")) && t.stop(!0)
                    };
                return s.finish = s, r || !1 === n.queue ? this.each(s) : this.queue(n.queue, s)
            },
            stop: function(e, t, a) {
                var i = function(e) {
                    var t = e.stop;
                    delete e.stop, t(a)
                };
                return "string" != typeof e && (a = t, t = e, e = void 0), t && !1 !== e && this.queue(e || "fx", []), this.each(function() {
                    var t = !0,
                        r = null != e && e + "queueHooks",
                        n = re.timers,
                        s = ke.get(this);
                    if (r) s[r] && s[r].stop && i(s[r]);
                    else
                        for (r in s) s[r] && s[r].stop && nt.test(r) && i(s[r]);
                    for (r = n.length; r--;) n[r].elem !== this || null != e && n[r].queue !== e || (n[r].anim.stop(a), t = !1, n.splice(r, 1));
                    !t && a || re.dequeue(this, e)
                })
            },
            finish: function(e) {
                return !1 !== e && (e = e || "fx"), this.each(function() {
                    var t, a = ke.get(this),
                        i = a[e + "queue"],
                        r = a[e + "queueHooks"],
                        n = re.timers,
                        s = i ? i.length : 0;
                    for (a.finish = !0, re.queue(this, e, []), r && r.stop && r.stop.call(this, !0), t = n.length; t--;) n[t].elem === this && n[t].queue === e && (n[t].anim.stop(!0), n.splice(t, 1));
                    for (t = 0; t < s; t++) i[t] && i[t].finish && i[t].finish.call(this);
                    delete a.finish
                })
            }
        }), re.each(["toggle", "show", "hide"], function(e, t) {
            var a = re.fn[t];
            re.fn[t] = function(e, i, r) {
                return null == e || "boolean" == typeof e ? a.apply(this, arguments) : this.animate(N(t, !0), e, i, r)
            }
        }), re.each({
            slideDown: N("show"),
            slideUp: N("hide"),
            slideToggle: N("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function(e, t) {
            re.fn[e] = function(e, a, i) {
                return this.animate(t, e, a, i)
            }
        }), re.timers = [], re.fx.tick = function() {
            var e, t = 0,
                a = re.timers;
            for (at = re.now(); t < a.length; t++)(e = a[t])() || a[t] !== e || a.splice(t--, 1);
            a.length || re.fx.stop(), at = void 0
        }, re.fx.timer = function(e) {
            re.timers.push(e), e() ? re.fx.start() : re.timers.pop()
        }, re.fx.interval = 13, re.fx.start = function() {
            it || (it = e.setInterval(re.fx.tick, re.fx.interval))
        }, re.fx.stop = function() {
            e.clearInterval(it), it = null
        }, re.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        }, re.fn.delay = function(t, a) {
            return t = re.fx ? re.fx.speeds[t] || t : t, a = a || "fx", this.queue(a, function(a, i) {
                var r = e.setTimeout(a, t);
                i.stop = function() {
                    e.clearTimeout(r)
                }
            })
        },
        function() {
            var e = X.createElement("input"),
                t = X.createElement("select"),
                a = t.appendChild(X.createElement("option"));
            e.type = "checkbox", ie.checkOn = "" !== e.value, ie.optSelected = a.selected, t.disabled = !0, ie.optDisabled = !a.disabled, e = X.createElement("input"), e.value = "t", e.type = "radio", ie.radioValue = "t" === e.value
        }();
    var st, ot = re.expr.attrHandle;
    re.fn.extend({
        attr: function(e, t) {
            return xe(this, re.attr, e, t, arguments.length > 1)
        },
        removeAttr: function(e) {
            return this.each(function() {
                re.removeAttr(this, e)
            })
        }
    }), re.extend({
        attr: function(e, t, a) {
            var i, r, n = e.nodeType;
            if (3 !== n && 8 !== n && 2 !== n) return void 0 === e.getAttribute ? re.prop(e, t, a) : (1 === n && re.isXMLDoc(e) || (t = t.toLowerCase(), r = re.attrHooks[t] || (re.expr.match.bool.test(t) ? st : void 0)), void 0 !== a ? null === a ? void re.removeAttr(e, t) : r && "set" in r && void 0 !== (i = r.set(e, a, t)) ? i : (e.setAttribute(t, a + ""), a) : r && "get" in r && null !== (i = r.get(e, t)) ? i : (i = re.find.attr(e, t), null == i ? void 0 : i))
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    if (!ie.radioValue && "radio" === t && re.nodeName(e, "input")) {
                        var a = e.value;
                        return e.setAttribute("type", t), a && (e.value = a), t
                    }
                }
            }
        },
        removeAttr: function(e, t) {
            var a, i, r = 0,
                n = t && t.match(we);
            if (n && 1 === e.nodeType)
                for (; a = n[r++];) i = re.propFix[a] || a, re.expr.match.bool.test(a) && (e[i] = !1), e.removeAttribute(a)
        }
    }), st = {
        set: function(e, t, a) {
            return !1 === t ? re.removeAttr(e, a) : e.setAttribute(a, a), a
        }
    }, re.each(re.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var a = ot[t] || re.find.attr;
        ot[t] = function(e, t, i) {
            var r, n;
            return i || (n = ot[t], ot[t] = r, r = null != a(e, t, i) ? t.toLowerCase() : null, ot[t] = n), r
        }
    });
    var lt = /^(?:input|select|textarea|button)$/i,
        dt = /^(?:a|area)$/i;
    re.fn.extend({
        prop: function(e, t) {
            return xe(this, re.prop, e, t, arguments.length > 1)
        },
        removeProp: function(e) {
            return this.each(function() {
                delete this[re.propFix[e] || e]
            })
        }
    }), re.extend({
        prop: function(e, t, a) {
            var i, r, n = e.nodeType;
            if (3 !== n && 8 !== n && 2 !== n) return 1 === n && re.isXMLDoc(e) || (t = re.propFix[t] || t, r = re.propHooks[t]), void 0 !== a ? r && "set" in r && void 0 !== (i = r.set(e, a, t)) ? i : e[t] = a : r && "get" in r && null !== (i = r.get(e, t)) ? i : e[t]
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    var t = re.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : lt.test(e.nodeName) || dt.test(e.nodeName) && e.href ? 0 : -1
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    }), ie.optSelected || (re.propHooks.selected = {
        get: function(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null
        },
        set: function(e) {
            var t = e.parentNode;
            t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex)
        }
    }), re.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        re.propFix[this.toLowerCase()] = this
    });
    var ct = /[\t\r\n\f]/g;
    re.fn.extend({
        addClass: function(e) {
            var t, a, i, r, n, s, o, l = 0;
            if (re.isFunction(e)) return this.each(function(t) {
                re(this).addClass(e.call(this, t, j(this)))
            });
            if ("string" == typeof e && e)
                for (t = e.match(we) || []; a = this[l++];)
                    if (r = j(a), i = 1 === a.nodeType && (" " + r + " ").replace(ct, " ")) {
                        for (s = 0; n = t[s++];) i.indexOf(" " + n + " ") < 0 && (i += n + " ");
                        o = re.trim(i), r !== o && a.setAttribute("class", o)
                    }
            return this
        },
        removeClass: function(e) {
            var t, a, i, r, n, s, o, l = 0;
            if (re.isFunction(e)) return this.each(function(t) {
                re(this).removeClass(e.call(this, t, j(this)))
            });
            if (!arguments.length) return this.attr("class", "");
            if ("string" == typeof e && e)
                for (t = e.match(we) || []; a = this[l++];)
                    if (r = j(a), i = 1 === a.nodeType && (" " + r + " ").replace(ct, " ")) {
                        for (s = 0; n = t[s++];)
                            for (; i.indexOf(" " + n + " ") > -1;) i = i.replace(" " + n + " ", " ");
                        o = re.trim(i), r !== o && a.setAttribute("class", o)
                    }
            return this
        },
        toggleClass: function(e, t) {
            var a = typeof e;
            return "boolean" == typeof t && "string" === a ? t ? this.addClass(e) : this.removeClass(e) : re.isFunction(e) ? this.each(function(a) {
                re(this).toggleClass(e.call(this, a, j(this), t), t)
            }) : this.each(function() {
                var t, i, r, n;
                if ("string" === a)
                    for (i = 0, r = re(this), n = e.match(we) || []; t = n[i++];) r.hasClass(t) ? r.removeClass(t) : r.addClass(t);
                else void 0 !== e && "boolean" !== a || (t = j(this), t && ke.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : ke.get(this, "__className__") || ""))
            })
        },
        hasClass: function(e) {
            var t, a, i = 0;
            for (t = " " + e + " "; a = this[i++];)
                if (1 === a.nodeType && (" " + j(a) + " ").replace(ct, " ").indexOf(t) > -1) return !0;
            return !1
        }
    });
    var ut = /\r/g,
        pt = /[\x20\t\r\n\f]+/g;
    re.fn.extend({
        val: function(e) {
            var t, a, i, r = this[0]; {
                if (arguments.length) return i = re.isFunction(e), this.each(function(a) {
                    var r;
                    1 === this.nodeType && (r = i ? e.call(this, a, re(this).val()) : e, null == r ? r = "" : "number" == typeof r ? r += "" : re.isArray(r) && (r = re.map(r, function(e) {
                        return null == e ? "" : e + ""
                    })), (t = re.valHooks[this.type] || re.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, r, "value") || (this.value = r))
                });
                if (r) return (t = re.valHooks[r.type] || re.valHooks[r.nodeName.toLowerCase()]) && "get" in t && void 0 !== (a = t.get(r, "value")) ? a : (a = r.value, "string" == typeof a ? a.replace(ut, "") : null == a ? "" : a)
            }
        }
    }), re.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = re.find.attr(e, "value");
                    return null != t ? t : re.trim(re.text(e)).replace(pt, " ")
                }
            },
            select: {
                get: function(e) {
                    for (var t, a, i = e.options, r = e.selectedIndex, n = "select-one" === e.type || r < 0, s = n ? null : [], o = n ? r + 1 : i.length, l = r < 0 ? o : n ? r : 0; l < o; l++)
                        if (a = i[l], (a.selected || l === r) && (ie.optDisabled ? !a.disabled : null === a.getAttribute("disabled")) && (!a.parentNode.disabled || !re.nodeName(a.parentNode, "optgroup"))) {
                            if (t = re(a).val(), n) return t;
                            s.push(t)
                        }
                    return s
                },
                set: function(e, t) {
                    for (var a, i, r = e.options, n = re.makeArray(t), s = r.length; s--;) i = r[s], (i.selected = re.inArray(re.valHooks.option.get(i), n) > -1) && (a = !0);
                    return a || (e.selectedIndex = -1), n
                }
            }
        }
    }), re.each(["radio", "checkbox"], function() {
        re.valHooks[this] = {
            set: function(e, t) {
                if (re.isArray(t)) return e.checked = re.inArray(re(e).val(), t) > -1
            }
        }, ie.checkOn || (re.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value
        })
    });
    var ft = /^(?:focusinfocus|focusoutblur)$/;
    re.extend(re.event, {
        trigger: function(t, a, i, r) {
            var n, s, o, l, d, c, u, p = [i || X],
                f = ae.call(t, "type") ? t.type : t,
                h = ae.call(t, "namespace") ? t.namespace.split(".") : [];
            if (s = o = i = i || X, 3 !== i.nodeType && 8 !== i.nodeType && !ft.test(f + re.event.triggered) && (f.indexOf(".") > -1 && (h = f.split("."), f = h.shift(), h.sort()), d = f.indexOf(":") < 0 && "on" + f, t = t[re.expando] ? t : new re.Event(f, "object" == typeof t && t), t.isTrigger = r ? 2 : 3, t.namespace = h.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = i), a = null == a ? [t] : re.makeArray(a, [t]), u = re.event.special[f] || {}, r || !u.trigger || !1 !== u.trigger.apply(i, a))) {
                if (!r && !u.noBubble && !re.isWindow(i)) {
                    for (l = u.delegateType || f, ft.test(l + f) || (s = s.parentNode); s; s = s.parentNode) p.push(s), o = s;
                    o === (i.ownerDocument || X) && p.push(o.defaultView || o.parentWindow || e)
                }
                for (n = 0;
                    (s = p[n++]) && !t.isPropagationStopped();) t.type = n > 1 ? l : u.bindType || f, c = (ke.get(s, "events") || {})[t.type] && ke.get(s, "handle"), c && c.apply(s, a), (c = d && s[d]) && c.apply && _e(s) && (t.result = c.apply(s, a), !1 === t.result && t.preventDefault());
                return t.type = f, r || t.isDefaultPrevented() || u._default && !1 !== u._default.apply(p.pop(), a) || !_e(i) || d && re.isFunction(i[f]) && !re.isWindow(i) && (o = i[d], o && (i[d] = null), re.event.triggered = f, i[f](), re.event.triggered = void 0, o && (i[d] = o)), t.result
            }
        },
        simulate: function(e, t, a) {
            var i = re.extend(new re.Event, a, {
                type: e,
                isSimulated: !0
            });
            re.event.trigger(i, null, t), i.isDefaultPrevented() && a.preventDefault()
        }
    }), re.fn.extend({
        trigger: function(e, t) {
            return this.each(function() {
                re.event.trigger(e, t, this)
            })
        },
        triggerHandler: function(e, t) {
            var a = this[0];
            if (a) return re.event.trigger(e, t, a, !0)
        }
    }), re.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(e, t) {
        re.fn[t] = function(e, a) {
            return arguments.length > 0 ? this.on(t, null, e, a) : this.trigger(t)
        }
    }), re.fn.extend({
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e)
        }
    }), ie.focusin = "onfocusin" in e, ie.focusin || re.each({
        focus: "focusin",
        blur: "focusout"
    }, function(e, t) {
        var a = function(e) {
            re.event.simulate(t, e.target, re.event.fix(e))
        };
        re.event.special[t] = {
            setup: function() {
                var i = this.ownerDocument || this,
                    r = ke.access(i, t);
                r || i.addEventListener(e, a, !0), ke.access(i, t, (r || 0) + 1)
            },
            teardown: function() {
                var i = this.ownerDocument || this,
                    r = ke.access(i, t) - 1;
                r ? ke.access(i, t, r) : (i.removeEventListener(e, a, !0), ke.remove(i, t))
            }
        }
    });
  //Sanitize and encode all HTML in a user-submitted string to prevent XSS attacks.
    var sanitizeHTML = function (str) {
    var temp = document.createElement('div');
    temp.textContent = str;
    return temp.innerHTML;
    };
    var ht = e.location,
        vt = re.now(),
        mt = /\?/;
    re.parseJSON = function(e) {
        return JSON.parse(e + "")
    }, re.parseXML = function(t) {
        var a;
        if (!t || "string" != typeof t) return null;
        try {
            a = (new e.DOMParser).parseFromString(t, "text/xml")
        } catch (e) {
            a = void 0
        }
        return a && !a.getElementsByTagName("parsererror").length || re.error("Invalid XML: " + t), a
    };
    var gt = /#.*$/,
        yt = /([?&])_=[^&]*/,
        wt = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        bt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        xt = /^(?:GET|HEAD)$/,
        _t = /^\/\//,
        kt = {},
        Ct = {},
        $t = "*/".concat("*"),
        Tt = X.createElement("a");
    Tt.href = ht.href, re.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ht.href,
            type: "GET",
            isLocal: bt.test(ht.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": $t,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": re.parseJSON,
                "text xml": re.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? B(B(e, re.ajaxSettings), t) : B(re.ajaxSettings, e)
        },
        ajaxPrefilter: R(kt),
        ajaxTransport: R(Ct),
        ajax: function(t, a) {
            function i(t, a, i, o) {
                var d, u, y, w, x, k = a;
                2 !== b && (b = 2, l && e.clearTimeout(l), r = void 0, s = o || "", _.readyState = t > 0 ? 4 : 0, d = t >= 200 && t < 300 || 304 === t, i && (w = W(p, _, i)), w = V(p, w, _, d), d ? (p.ifModified && (x = _.getResponseHeader("Last-Modified"), x && (re.lastModified[n] = x), (x = _.getResponseHeader("etag")) && (re.etag[n] = x)), 204 === t || "HEAD" === p.type ? k = "nocontent" : 304 === t ? k = "notmodified" : (k = w.state, u = w.data, y = w.error, d = !y)) : (y = k, !t && k || (k = "error", t < 0 && (t = 0))), _.status = t, _.statusText = (a || k) + "", d ? v.resolveWith(f, [u, k, _]) : v.rejectWith(f, [_, k, y]), _.statusCode(g), g = void 0, c && h.trigger(d ? "ajaxSuccess" : "ajaxError", [_, p, d ? u : y]), m.fireWith(f, [_, k]), c && (h.trigger("ajaxComplete", [_, p]), --re.active || re.event.trigger("ajaxStop")))
            }
            "object" == typeof t && (a = t, t = void 0), a = a || {};
            var r, n, s, o, l, d, c, u, p = re.ajaxSetup({}, a),
                f = p.context || p,
                h = p.context && (f.nodeType || f.jquery) ? re(f) : re.event,
                v = re.Deferred(),
                m = re.Callbacks("once memory"),
                g = p.statusCode || {},
                y = {},
                w = {},
                b = 0,
                x = "canceled",
                _ = {
                    readyState: 0,
                    getResponseHeader: function(e) {
                        var t;
                        if (2 === b) {
                            if (!o)
                                for (o = {}; t = wt.exec(s);) o[t[1].toLowerCase()] = t[2];
                            t = o[e.toLowerCase()]
                        }
                        return null == t ? null : t
                    },
                    getAllResponseHeaders: function() {
                        return 2 === b ? s : null
                    },
                    setRequestHeader: function(e, t) {
                        var a = e.toLowerCase();
                        return b || (e = w[a] = w[a] || e, y[e] = t), this
                    },
                    overrideMimeType: function(e) {
                        return b || (p.mimeType = e), this
                    },
                    statusCode: function(e) {
                        var t;
                        if (e)
                            if (b < 2)
                                for (t in e) g[t] = [g[t], e[t]];
                            else _.always(e[_.status]);
                        return this
                    },
                    abort: function(e) {
                        var t = e || x;
                        return r && r.abort(t), i(0, t), this
                    }
                };
            if (v.promise(_).complete = m.add, _.success = _.done, _.error = _.fail, p.url = ((t || p.url || ht.href) + "").replace(gt, "").replace(_t, ht.protocol + "//"), p.type = a.method || a.type || p.method || p.type, p.dataTypes = re.trim(p.dataType || "*").toLowerCase().match(we) || [""], null == p.crossDomain) {
                d = X.createElement("a");
                try {
                    d.href = p.url, d.href = d.href, p.crossDomain = Tt.protocol + "//" + Tt.host != d.protocol + "//" + d.host
                } catch (e) {
                    p.crossDomain = !0
                }
            }
            if (p.data && p.processData && "string" != typeof p.data && (p.data = re.param(p.data, p.traditional)), q(kt, p, a, _), 2 === b) return _;
            c = re.event && p.global, c && 0 == re.active++ && re.event.trigger("ajaxStart"), p.type = p.type.toUpperCase(), p.hasContent = !xt.test(p.type), n = p.url, p.hasContent || (p.data && (n = p.url += (mt.test(n) ? "&" : "?") + p.data, delete p.data), !1 === p.cache && (p.url = yt.test(n) ? n.replace(yt, "$1_=" + vt++) : n + (mt.test(n) ? "&" : "?") + "_=" + vt++)), p.ifModified && (re.lastModified[n] && _.setRequestHeader("If-Modified-Since", re.lastModified[n]), re.etag[n] && _.setRequestHeader("If-None-Match", re.etag[n])), (p.data && p.hasContent && !1 !== p.contentType || a.contentType) && _.setRequestHeader("Content-Type", p.contentType), _.setRequestHeader("Accept", p.dataTypes[0] && p.accepts[p.dataTypes[0]] ? p.accepts[p.dataTypes[0]] + ("*" !== p.dataTypes[0] ? ", " + $t + "; q=0.01" : "") : p.accepts["*"]);
            for (u in p.headers) _.setRequestHeader(u, p.headers[u]);
            if (p.beforeSend && (!1 === p.beforeSend.call(f, _, p) || 2 === b)) return _.abort();
            x = "abort";
            for (u in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) _[u](p[u]);
            if (r = q(Ct, p, a, _)) {
                if (_.readyState = 1, c && h.trigger("ajaxSend", [_, p]), 2 === b) return _;
                p.async && p.timeout > 0 && (l = e.setTimeout(function() {
                    _.abort("timeout")
                }, p.timeout));
                try {
                    b = 1, r.send(y, i)
                } catch (e) {
                    if (!(b < 2)) throw e;
                    i(-1, e)
                }
            } else i(-1, "No Transport");
            return _
        },
        getJSON: function(e, t, a) {
            return re.get(e, t, a, "json")
        },
        getScript: function(e, t) {
            return re.get(e, void 0, t, "script")
        }
    }), re.each(["get", "post"], function(e, t) {
        re[t] = function(e, a, i, r) {
            return re.isFunction(a) && (r = r || i, i = a, a = void 0), re.ajax(re.extend({
                url: e,
                type: t,
                dataType: r,
                data: a,
                success: i
            }, re.isPlainObject(e) && e))
        }
    }), re._evalUrl = function(e) {
        return re.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            throws: !0
        })
    }, re.fn.extend({
        wrapAll: function(e) {
            var t;
            return re.isFunction(e) ? this.each(function(t) {
                re(this).wrapAll(e.call(this, t))
            }) : (this[0] && (t = re(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function() {
                for (var e = this; e.firstElementChild;) e = e.firstElementChild;
                return e
            }).append(this)), this)
        },
        wrapInner: function(e) {
            return re.isFunction(e) ? this.each(function(t) {
                re(this).wrapInner(e.call(this, t))
            }) : this.each(function() {
                var t = re(this),
                    a = t.contents();
                a.length ? a.wrapAll(e) : t.append(e)
            })
        },
        wrap: function(e) {
            var t = re.isFunction(e);
            return this.each(function(a) {
                re(this).wrapAll(t ? e.call(this, a) : e)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                re.nodeName(this, "body") || re(this).replaceWith(this.childNodes)
            }).end()
        }
    }), re.expr.filters.hidden = function(e) {
        return !re.expr.filters.visible(e)
    }, re.expr.filters.visible = function(e) {
        return e.offsetWidth > 0 || e.offsetHeight > 0 || e.getClientRects().length > 0
    };
    var Dt = /%20/g,
        St = /\[\]$/,
        Mt = /\r?\n/g,
        Ft = /^(?:submit|button|image|reset|file)$/i,
        Et = /^(?:input|select|textarea|keygen)/i;
    re.param = function(e, t) {
        var a, i = [],
            r = function(e, t) {
                t = re.isFunction(t) ? t() : null == t ? "" : t, i[i.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t)
            };
        if (void 0 === t && (t = re.ajaxSettings && re.ajaxSettings.traditional), re.isArray(e) || e.jquery && !re.isPlainObject(e)) re.each(e, function() {
            r(this.name, this.value)
        });
        else
            for (a in e) Y(a, e[a], t, r);
        return i.join("&").replace(Dt, "+")
    }, re.fn.extend({
        serialize: function() {
            return re.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                var e = re.prop(this, "elements");
                return e ? re.makeArray(e) : this
            }).filter(function() {
                var e = this.type;
                return this.name && !re(this).is(":disabled") && Et.test(this.nodeName) && !Ft.test(e) && (this.checked || !Ee.test(e))
            }).map(function(e, t) {
                var a = re(this).val();
                return null == a ? null : re.isArray(a) ? re.map(a, function(e) {
                    return {
                        name: t.name,
                        value: e.replace(Mt, "\r\n")
                    }
                }) : {
                    name: t.name,
                    value: a.replace(Mt, "\r\n")
                }
            }).get()
        }
    }), re.ajaxSettings.xhr = function() {
        try {
            return new e.XMLHttpRequest
        } catch (e) {}
    };
    var Pt = {
            0: 200,
            1223: 204
        },
        It = re.ajaxSettings.xhr();
    ie.cors = !!It && "withCredentials" in It, ie.ajax = It = !!It, re.ajaxTransport(function(t) {
        var a, i;
        if (ie.cors || It && !t.crossDomain) return {
            send: function(r, n) {
                var s, o = t.xhr();
                if (o.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields)
                    for (s in t.xhrFields) o[s] = t.xhrFields[s];
                t.mimeType && o.overrideMimeType && o.overrideMimeType(t.mimeType), t.crossDomain || r["X-Requested-With"] || (r["X-Requested-With"] = "XMLHttpRequest");
                for (s in r) o.setRequestHeader(s, r[s]);
                a = function(e) {
                    return function() {
                        a && (a = i = o.onload = o.onerror = o.onabort = o.onreadystatechange = null, "abort" === e ? o.abort() : "error" === e ? "number" != typeof o.status ? n(0, "error") : n(o.status, o.statusText) : n(Pt[o.status] || o.status, o.statusText, "text" !== (o.responseType || "text") || "string" != typeof o.responseText ? {
                            binary: o.response
                        } : {
                            text: o.responseText
                        }, o.getAllResponseHeaders()))
                    }
                }, o.onload = a(), i = o.onerror = a("error"), void 0 !== o.onabort ? o.onabort = i : o.onreadystatechange = function() {
                    4 === o.readyState && e.setTimeout(function() {
                        a && i()
                    })
                }, a = a("abort");
                try {
                    o.send(t.hasContent && t.data || null)
                } catch (e) {
                    if (a) throw e
                }
            },
            abort: function() {
                a && a()
            }
        }
    }), re.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(e) {
                return re.globalEval(e), e
            }
        }
    }), re.ajaxPrefilter("script", function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET")
    }), re.ajaxTransport("script", function(e) {
        if (e.crossDomain) {
            var t, a;
            return {
                send: function(i, r) {
                    t = re("<script>").prop({
                        charset: e.scriptCharset,
                        src: e.url
                    }).on("load error", a = function(e) {
                        t.remove(), a = null, e && r("error" === e.type ? 404 : 200, e.type)
                    }), X.head.appendChild(t[0])
                },
                abort: function() {
                    a && a()
                }
            }
        }
    });
    var At = [],
        Nt = /(=)\?(?=&|$)|\?\?/;
    re.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = At.pop() || re.expando + "_" + vt++;
            return this[e] = !0, e
        }
    }), re.ajaxPrefilter("json jsonp", function(t, a, i) {
        var r, n, s, o = !1 !== t.jsonp && (Nt.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Nt.test(t.data) && "data");
        if (o || "jsonp" === t.dataTypes[0]) return r = t.jsonpCallback = re.isFunction(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, o ? t[o] = t[o].replace(Nt, "$1" + r) : !1 !== t.jsonp && (t.url += (mt.test(t.url) ? "&" : "?") + t.jsonp + "=" + r), t.converters["script json"] = function() {
            return s || re.error(r + " was not called"), s[0]
        }, t.dataTypes[0] = "json", n = e[r], e[r] = function() {
            s = arguments
        }, i.always(function() {
            void 0 === n ? re(e).removeProp(r) : e[r] = n, t[r] && (t.jsonpCallback = a.jsonpCallback, At.push(r)), s && re.isFunction(n) && n(s[0]), s = n = void 0
        }), "script"
    }), re.parseHTML = function(e, t, a) {
        if (!e || "string" != typeof e) return null;
        "boolean" == typeof t && (a = t, t = !1), t = t || X;
        var i = fe.exec(e),
            r = !a && [];
        return i ? [t.createElement(i[1])] : (i = p([e], t, r), r && r.length && re(r).remove(), re.merge([], i.childNodes))
    };
    var zt = re.fn.load;
    re.fn.load = function(e, t, a) {
        if ("string" != typeof e && zt) return zt.apply(this, arguments);
        var i, r, n, s = this,
            o = e.indexOf(" ");
        return o > -1 && (i = re.trim(e.slice(o)), e = e.slice(0, o)), re.isFunction(t) ? (a = t, t = void 0) : t && "object" == typeof t && (r = "POST"), s.length > 0 && re.ajax({
            url: e,
            type: r || "GET",
            dataType: "html",
            data: t
        }).done(function(e) {
            n = arguments, s.html(i ? re("<div>").append(re.parseHTML(e)).find(i) : e)
        }).always(a && function(e, t) {
            s.each(function() {
                a.apply(this, n || [e.responseText, t, e])
            })
        }), this
    }, re.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(e, t) {
        re.fn[t] = function(e) {
            return this.on(t, e)
        }
    }), re.expr.filters.animated = function(e) {
        return re.grep(re.timers, function(t) {
            return e === t.elem
        }).length
    }, re.offset = {
        setOffset: function(e, t, a) {
            var i, r, n, s, o, l, d, c = re.css(e, "position"),
                u = re(e),
                p = {};
            "static" === c && (e.style.position = "relative"), o = u.offset(), n = re.css(e, "top"), l = re.css(e, "left"), d = ("absolute" === c || "fixed" === c) && (n + l).indexOf("auto") > -1, d ? (i = u.position(), s = i.top, r = i.left) : (s = parseFloat(n) || 0, r = parseFloat(l) || 0), re.isFunction(t) && (t = t.call(e, a, re.extend({}, o))), null != t.top && (p.top = t.top - o.top + s), null != t.left && (p.left = t.left - o.left + r), "using" in t ? t.using.call(e, p) : u.css(p)
        }
    }, re.fn.extend({
        offset: function(e) {
            if (arguments.length) return void 0 === e ? this : this.each(function(t) {
                re.offset.setOffset(this, e, t)
            });
            var t, a, i = this[0],
                r = {
                    top: 0,
                    left: 0
                },
                n = i && i.ownerDocument;
            if (n) return t = n.documentElement, re.contains(t, i) ? (r = i.getBoundingClientRect(), a = G(n), {
                top: r.top + a.pageYOffset - t.clientTop,
                left: r.left + a.pageXOffset - t.clientLeft
            }) : r
        },
        position: function() {
            if (this[0]) {
                var e, t, a = this[0],
                    i = {
                        top: 0,
                        left: 0
                    };
                return "fixed" === re.css(a, "position") ? t = a.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), re.nodeName(e[0], "html") || (i = e.offset()), i.top += re.css(e[0], "borderTopWidth", !0), i.left += re.css(e[0], "borderLeftWidth", !0)), {
                    top: t.top - i.top - re.css(a, "marginTop", !0),
                    left: t.left - i.left - re.css(a, "marginLeft", !0)
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var e = this.offsetParent; e && "static" === re.css(e, "position");) e = e.offsetParent;
                return e || Ue
            })
        }
    }), re.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(e, t) {
        var a = "pageYOffset" === t;
        re.fn[e] = function(i) {
            return xe(this, function(e, i, r) {
                var n = G(e);
                if (void 0 === r) return n ? n[t] : e[i];
                n ? n.scrollTo(a ? n.pageXOffset : r, a ? r : n.pageYOffset) : e[i] = r
            }, e, i, arguments.length)
        }
    }), re.each(["top", "left"], function(e, t) {
        re.cssHooks[t] = D(ie.pixelPosition, function(e, a) {
            if (a) return a = T(e, t), Ge.test(a) ? re(e).position()[t] + "px" : a
        })
    }), re.each({
        Height: "height",
        Width: "width"
    }, function(e, t) {
        re.each({
            padding: "inner" + e,
            content: t,
            "": "outer" + e
        }, function(a, i) {
            re.fn[i] = function(i, r) {
                var n = arguments.length && (a || "boolean" != typeof i),
                    s = a || (!0 === i || !0 === r ? "margin" : "border");
                return xe(this, function(t, a, i) {
                    var r;
                    return re.isWindow(t) ? t.document.documentElement["client" + e] : 9 === t.nodeType ? (r = t.documentElement, Math.max(t.body["scroll" + e], r["scroll" + e], t.body["offset" + e], r["offset" + e], r["client" + e])) : void 0 === i ? re.css(t, a, s) : re.style(t, a, i, s)
                }, t, n ? i : void 0, n, null)
            }
        })
    }), re.fn.extend({
        bind: function(e, t, a) {
            return this.on(e, null, t, a)
        },
        unbind: function(e, t) {
            return this.off(e, null, t)
        },
        delegate: function(e, t, a, i) {
            return this.on(t, e, a, i)
        },
        undelegate: function(e, t, a) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", a)
        },
        size: function() {
            return this.length
        }
    }), re.fn.andSelf = re.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
        return re
    });
    var Ot = e.jQuery,
        Lt = e.$;
    return re.noConflict = function(t) {
        return e.$ === re && (e.$ = Lt), t && e.jQuery === re && (e.jQuery = Ot), re
    }, t || (e.jQuery = e.$ = re), re
});
var $vf = jQuery.noConflict(),
    $vfFocus;
! function() {
    function e() {
        window.clearTimeout(i)
    }
    function t() {
        r.attr("content", "width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no, shrink-to-fit=no")
    }
    function a() {
        i = setTimeout(function() {
            r.attr("content", "width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=yes")
        }, 100)
    }
    var i, r = $vf('meta[name="viewport"]'),
        n = $vf("input, select, textarea");
    n.on("touchend", t), n.on("blur", a), n.on("focus", e)
}(),
/*! jQuery UI - v1.11.4 - 2016-05-22
 * http://jqueryui.com
 * Includes: core.js, datepicker.js
 * Copyright jQuery Foundation and other contributors; Licensed MIT */
function(e) {
    "function" == typeof define && define.amd ? define(["jquery"], e) : e(jQuery)
}(function(e) {
    function t(t, i) {
        var r, n, s, o = t.nodeName.toLowerCase();
        return "area" === o ? (r = t.parentNode, n = r.name, !(!t.href || !n || "map" !== r.nodeName.toLowerCase()) && (!!(s = e("img[usemap='#" + n + "']")[0]) && a(s))) : (/^(input|select|textarea|button|object)$/.test(o) ? !t.disabled : "a" === o ? t.href || i : i) && a(t)
    }
    function a(t) {
        return e.expr.filters.visible(t) && !e(t).parents().addBack().filter(function() {
            return "hidden" === e.css(this, "visibility")
        }).length
    }
    function i(e) {
        for (var t, a; e.length && e[0] !== document;) {
            if (("absolute" === (t = e.css("position")) || "relative" === t || "fixed" === t) && (a = parseInt(e.css("zIndex"), 10), !isNaN(a) && 0 !== a)) return a;
            e = e.parent()
        }
        return 0
    }
    function r() {
        this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: !1,
            showMonthAfterYear: !1,
            yearSuffix: ""
        }, this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: !1,
            hideIfNoPrevNext: !1,
            navigationAsDateFormat: !1,
            gotoCurrent: !1,
            changeMonth: !1,
            changeYear: !1,
            yearRange: "c-10:c+10",
            showOtherMonths: !1,
            selectOtherMonths: !1,
            showWeek: !1,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: !0,
            showButtonPanel: !1,
            autoSize: !1,
            disabled: !1
        }, e.extend(this._defaults, this.regional[""]), this.regional.en = e.extend(!0, {}, this.regional[""]), this.regional["en-US"] = e.extend(!0, {}, this.regional.en), this.dpDiv = n(e("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
    }
    function n(t) {
        var a = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return t.delegate(a, "mouseout", function() {
            e(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && e(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && e(this).removeClass("ui-datepicker-next-hover")
        }).delegate(a, "mouseover", s)
    }
    function s() {
        e.datepicker._isDisabledDatepicker(l.inline ? l.dpDiv.parent()[0] : l.input[0]) || (e(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), e(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && e(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && e(this).addClass("ui-datepicker-next-hover"))
    }
    function o(t, a) {
        e.extend(t, a);
        for (var i in a) null == a[i] && (t[i] = a[i]);
        return t
    }
    /*!
     * jQuery UI Core 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/category/ui-core/
     */
    e.ui = e.ui || {}, e.extend(e.ui, {
            version: "1.11.4",
            keyCode: {
                BACKSPACE: 8,
                COMMA: 188,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                LEFT: 37,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SPACE: 32,
                TAB: 9,
                UP: 38
            }
        }), e.fn.extend({
            scrollParent: function(t) {
                var a = this.css("position"),
                    i = "absolute" === a,
                    r = t ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                    n = this.parents().filter(function() {
                        var t = e(this);
                        return (!i || "static" !== t.css("position")) && r.test(t.css("overflow") + t.css("overflow-y") + t.css("overflow-x"))
                    }).eq(0);
                return "fixed" !== a && n.length ? n : e(this[0].ownerDocument || document)
            },
            uniqueId: function() {
                var e = 0;
                return function() {
                    return this.each(function() {
                        this.id || (this.id = "ui-id-" + ++e)
                    })
                }
            }(),
            removeUniqueId: function() {
                return this.each(function() {
                    /^ui-id-\d+$/.test(this.id) && e(this).removeAttr("id")
                })
            }
        }), e.extend(e.expr[":"], {
            data: e.expr.createPseudo ? e.expr.createPseudo(function(t) {
                return function(a) {
                    return !!e.data(a, t)
                }
            }) : function(t, a, i) {
                return !!e.data(t, i[3])
            },
            focusable: function(a) {
                return t(a, !isNaN(e.attr(a, "tabindex")))
            },
            tabbable: function(a) {
                var i = e.attr(a, "tabindex"),
                    r = isNaN(i);
                return (r || i >= 0) && t(a, !r)
            }
        }), e("<a>").outerWidth(1).jquery || e.each(["Width", "Height"], function(t, a) {
            function i(t, a, i, n) {
                return e.each(r, function() {
                    a -= parseFloat(e.css(t, "padding" + this)) || 0, i && (a -= parseFloat(e.css(t, "border" + this + "Width")) || 0), n && (a -= parseFloat(e.css(t, "margin" + this)) || 0)
                }), a
            }
            var r = "Width" === a ? ["Left", "Right"] : ["Top", "Bottom"],
                n = a.toLowerCase(),
                s = {
                    innerWidth: e.fn.innerWidth,
                    innerHeight: e.fn.innerHeight,
                    outerWidth: e.fn.outerWidth,
                    outerHeight: e.fn.outerHeight
                };
            e.fn["inner" + a] = function(t) {
                return void 0 === t ? s["inner" + a].call(this) : this.each(function() {
                    e(this).css(n, i(this, t) + "px")
                })
            }, e.fn["outer" + a] = function(t, r) {
                return "number" != typeof t ? s["outer" + a].call(this, t) : this.each(function() {
                    e(this).css(n, i(this, t, !0, r) + "px")
                })
            }
        }), e.fn.addBack || (e.fn.addBack = function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
        }), e("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (e.fn.removeData = function(t) {
            return function(a) {
                return arguments.length ? t.call(this, e.camelCase(a)) : t.call(this)
            }
        }(e.fn.removeData)), e.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()), e.fn.extend({
            focus: function(t) {
                return function(a, i) {
                    return "number" == typeof a ? this.each(function() {
                        var t = this;
                        setTimeout(function() {
                            e(t).focus(), i && i.call(t)
                        }, a)
                    }) : t.apply(this, arguments)
                }
            }(e.fn.focus),
            disableSelection: function() {
                var e = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
                return function() {
                    return this.bind(e + ".ui-disableSelection", function(e) {
                        e.preventDefault()
                    })
                }
            }(),
            enableSelection: function() {
                return this.unbind(".ui-disableSelection")
            },
            zIndex: function(t) {
                if (void 0 !== t) return this.css("zIndex", t);
                if (this.length)
                    for (var a, i, r = e(this[0]); r.length && r[0] !== document;) {
                        if (("absolute" === (a = r.css("position")) || "relative" === a || "fixed" === a) && (i = parseInt(r.css("zIndex"), 10), !isNaN(i) && 0 !== i)) return i;
                        r = r.parent()
                    }
                return 0
            }
        }), e.ui.plugin = {
            add: function(t, a, i) {
                var r, n = e.ui[t].prototype;
                for (r in i) n.plugins[r] = n.plugins[r] || [], n.plugins[r].push([a, i[r]])
            },
            call: function(e, t, a, i) {
                var r, n = e.plugins[t];
                if (n && (i || e.element[0].parentNode && 11 !== e.element[0].parentNode.nodeType))
                    for (r = 0; r < n.length; r++) e.options[n[r][0]] && n[r][1].apply(e.element, a)
            }
        },
        /*!
         * jQuery UI Datepicker 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/datepicker/
         */
        e.extend(e.ui, {
            datepicker: {
                version: "1.11.4"
            }
        });
    var l;
    e.extend(r.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function() {
            return this.dpDiv
        },
        setDefaults: function(e) {
            return o(this._defaults, e || {}), this
        },
        _attachDatepicker: function(t, a) {
            var i, r, n;
            i = t.nodeName.toLowerCase(), r = "div" === i || "span" === i, t.id || (this.uuid += 1, t.id = "dp" + this.uuid), n = this._newInst(e(t), r), n.settings = e.extend({}, a || {}), "input" === i ? this._connectDatepicker(t, n) : r && this._inlineDatepicker(t, n)
        },
        _newInst: function(t, a) {
            return {
                id: t[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"),
                input: t,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: a,
                dpDiv: a ? n(e("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
            }
        },
        _connectDatepicker: function(t, a) {
            var i = e(t);
            a.append = e([]), a.trigger = e([]), i.hasClass(this.markerClassName) || (this._attachments(i, a), i.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp), this._autoSize(a), e.data(t, "datepicker", a), a.settings.disabled && this._disableDatepicker(t))
        },
        _attachments: function(t, a) {
            var i, r, n, s = this._get(a, "appendText"),
                o = this._get(a, "isRTL");
            a.append && a.append.remove(), s && (a.append = e("<span class='" + this._appendClass + "'>" + s + "</span>"), t[o ? "before" : "after"](a.append)), t.unbind("focus", this._showDatepicker), a.trigger && a.trigger.remove(), i = this._get(a, "showOn"), "focus" !== i && "both" !== i || t.focus(this._showDatepicker), "button" !== i && "both" !== i || (r = this._get(a, "buttonText"), n = this._get(a, "buttonImage"), a.trigger = e(this._get(a, "buttonImageOnly") ? e("<img/>").addClass(this._triggerClass).attr({
                src: n,
                alt: r,
                title: r
            }) : e("<button type='button'></button>").addClass(this._triggerClass).html(n ? e("<img/>").attr({
                src: n,
                alt: r,
                title: r
            }) : r)), t[o ? "before" : "after"](a.trigger), a.trigger.click(function() {
                return e.datepicker._datepickerShowing && e.datepicker._lastInput === t[0] ? e.datepicker._hideDatepicker() : e.datepicker._datepickerShowing && e.datepicker._lastInput !== t[0] ? (e.datepicker._hideDatepicker(), e.datepicker._showDatepicker(t[0])) : e.datepicker._showDatepicker(t[0]), !1
            }))
        },
        _autoSize: function(e) {
            if (this._get(e, "autoSize") && !e.inline) {
                var t, a, i, r, n = new Date(2009, 11, 20),
                    s = this._get(e, "dateFormat");
                s.match(/[DM]/) && (t = function(e) {
                    for (a = 0, i = 0, r = 0; r < e.length; r++) e[r].length > a && (a = e[r].length, i = r);
                    return i
                }, n.setMonth(t(this._get(e, s.match(/MM/) ? "monthNames" : "monthNamesShort"))), n.setDate(t(this._get(e, s.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - n.getDay())), e.input.attr("size", this._formatDate(e, n).length)
            }
        },
        _inlineDatepicker: function(t, a) {
            var i = e(t);
            i.hasClass(this.markerClassName) || (i.addClass(this.markerClassName).append(a.dpDiv), e.data(t, "datepicker", a), this._setDate(a, this._getDefaultDate(a), !0), this._updateDatepicker(a), this._updateAlternate(a), a.settings.disabled && this._disableDatepicker(t), a.dpDiv.css("display", "block"))
        },
        _dialogDatepicker: function(t, a, i, r, n) {
            var s, l, d, c, u, p = this._dialogInst;
            return p || (this.uuid += 1, s = "dp" + this.uuid, this._dialogInput = e("<input type='text' id='" + s + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.keydown(this._doKeyDown), e("body").append(this._dialogInput), p = this._dialogInst = this._newInst(this._dialogInput, !1), p.settings = {}, e.data(this._dialogInput[0], "datepicker", p)), o(p.settings, r || {}), a = a && a.constructor === Date ? this._formatDate(p, a) : a, this._dialogInput.val(a), this._pos = n ? n.length ? n : [n.pageX, n.pageY] : null, this._pos || (l = document.documentElement.clientWidth, d = document.documentElement.clientHeight, c = document.documentElement.scrollLeft || document.body.scrollLeft, u = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [l / 2 - 100 + c, d / 2 - 150 + u]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), p.settings.onSelect = i, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), e.blockUI && e.blockUI(this.dpDiv), e.data(this._dialogInput[0], "datepicker", p), this
        },
        _destroyDatepicker: function(t) {
            var a, i = e(t),
                r = e.data(t, "datepicker");
            i.hasClass(this.markerClassName) && (a = t.nodeName.toLowerCase(), e.removeData(t, "datepicker"), "input" === a ? (r.append.remove(), r.trigger.remove(), i.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : "div" !== a && "span" !== a || i.removeClass(this.markerClassName).empty(), l === r && (l = null))
        },
        _enableDatepicker: function(t) {
            var a, i, r = e(t),
                n = e.data(t, "datepicker");
            r.hasClass(this.markerClassName) && (a = t.nodeName.toLowerCase(), "input" === a ? (t.disabled = !1, n.trigger.filter("button").each(function() {
                this.disabled = !1
            }).end().filter("img").css({
                opacity: "1.0",
                cursor: ""
            })) : "div" !== a && "span" !== a || (i = r.children("." + this._inlineClass), i.children().removeClass("ui-state-disabled"), i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = e.map(this._disabledInputs, function(e) {
                return e === t ? null : e
            }))
        },
        _disableDatepicker: function(t) {
            var a, i, r = e(t),
                n = e.data(t, "datepicker");
            r.hasClass(this.markerClassName) && (a = t.nodeName.toLowerCase(), "input" === a ? (t.disabled = !0, n.trigger.filter("button").each(function() {
                this.disabled = !0
            }).end().filter("img").css({
                opacity: "0.5",
                cursor: "default"
            })) : "div" !== a && "span" !== a || (i = r.children("." + this._inlineClass), i.children().addClass("ui-state-disabled"), i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = e.map(this._disabledInputs, function(e) {
                return e === t ? null : e
            }), this._disabledInputs[this._disabledInputs.length] = t)
        },
        _isDisabledDatepicker: function(e) {
            if (!e) return !1;
            for (var t = 0; t < this._disabledInputs.length; t++)
                if (this._disabledInputs[t] === e) return !0;
            return !1
        },
        _getInst: function(t) {
            try {
                return e.data(t, "datepicker")
            } catch (e) {
                throw "Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function(t, a, i) {
            var r, n, s, l, d = this._getInst(t);
            if (2 === arguments.length && "string" == typeof a) return "defaults" === a ? e.extend({}, e.datepicker._defaults) : d ? "all" === a ? e.extend({}, d.settings) : this._get(d, a) : null;
            r = a || {}, "string" == typeof a && (r = {}, r[a] = i), d && (this._curInst === d && this._hideDatepicker(), n = this._getDateDatepicker(t, !0), s = this._getMinMaxDate(d, "min"), l = this._getMinMaxDate(d, "max"), o(d.settings, r), null !== s && void 0 !== r.dateFormat && void 0 === r.minDate && (d.settings.minDate = this._formatDate(d, s)), null !== l && void 0 !== r.dateFormat && void 0 === r.maxDate && (d.settings.maxDate = this._formatDate(d, l)), "disabled" in r && (r.disabled ? this._disableDatepicker(t) : this._enableDatepicker(t)), this._attachments(e(t), d), this._autoSize(d), this._setDate(d, n), this._updateAlternate(d), this._updateDatepicker(d))
        },
        _changeDatepicker: function(e, t, a) {
            this._optionDatepicker(e, t, a)
        },
        _refreshDatepicker: function(e) {
            var t = this._getInst(e);
            t && this._updateDatepicker(t)
        },
        _setDateDatepicker: function(e, t) {
            var a = this._getInst(e);
            a && (this._setDate(a, t), this._updateDatepicker(a), this._updateAlternate(a))
        },
        _getDateDatepicker: function(e, t) {
            var a = this._getInst(e);
            return a && !a.inline && this._setDateFromField(a, t), a ? this._getDate(a) : null
        },
        _doKeyDown: function(t) {
            var a, i, r, n = e.datepicker._getInst(t.target),
                s = !0,
                o = n.dpDiv.is(".ui-datepicker-rtl");
            if (n._keyEvent = !0, e.datepicker._datepickerShowing) switch (t.keyCode) {
                case 9:
                    e.datepicker._hideDatepicker(), s = !1;
                    break;
                case 13:
                    return r = e("td." + e.datepicker._dayOverClass + ":not(." + e.datepicker._currentClass + ")", n.dpDiv), r[0] && e.datepicker._selectDay(t.target, n.selectedMonth, n.selectedYear, r[0]), a = e.datepicker._get(n, "onSelect"), a ? (i = e.datepicker._formatDate(n), a.apply(n.input ? n.input[0] : null, [i, n])) : e.datepicker._hideDatepicker(), !1;
                case 27:
                    e.datepicker._hideDatepicker();
                    break;
                case 33:
                    e.datepicker._adjustDate(t.target, t.ctrlKey ? -e.datepicker._get(n, "stepBigMonths") : -e.datepicker._get(n, "stepMonths"), "M");
                    break;
                case 34:
                    e.datepicker._adjustDate(t.target, t.ctrlKey ? +e.datepicker._get(n, "stepBigMonths") : +e.datepicker._get(n, "stepMonths"), "M");
                    break;
                case 35:
                    (t.ctrlKey || t.metaKey) && e.datepicker._clearDate(t.target), s = t.ctrlKey || t.metaKey;
                    break;
                case 36:
                    (t.ctrlKey || t.metaKey) && e.datepicker._gotoToday(t.target), s = t.ctrlKey || t.metaKey;
                    break;
                case 37:
                    (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, o ? 1 : -1, "D"), s = t.ctrlKey || t.metaKey, t.originalEvent.altKey && e.datepicker._adjustDate(t.target, t.ctrlKey ? -e.datepicker._get(n, "stepBigMonths") : -e.datepicker._get(n, "stepMonths"), "M");
                    break;
                case 38:
                    (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, -7, "D"), s = t.ctrlKey || t.metaKey;
                    break;
                case 39:
                    (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, o ? -1 : 1, "D"), s = t.ctrlKey || t.metaKey, t.originalEvent.altKey && e.datepicker._adjustDate(t.target, t.ctrlKey ? +e.datepicker._get(n, "stepBigMonths") : +e.datepicker._get(n, "stepMonths"), "M");
                    break;
                case 40:
                    (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, 7, "D"), s = t.ctrlKey || t.metaKey;
                    break;
                default:
                    s = !1
            } else 36 === t.keyCode && t.ctrlKey ? e.datepicker._showDatepicker(this) : s = !1;
            s && (t.preventDefault(), t.stopPropagation())
        },
        _doKeyPress: function(t) {
            var a, i, r = e.datepicker._getInst(t.target);
            if (e.datepicker._get(r, "constrainInput")) return a = e.datepicker._possibleChars(e.datepicker._get(r, "dateFormat")), i = String.fromCharCode(null == t.charCode ? t.keyCode : t.charCode), t.ctrlKey || t.metaKey || i < " " || !a || a.indexOf(i) > -1
        },
        _doKeyUp: function(t) {
            var a, i = e.datepicker._getInst(t.target);
            if (i.input.val() !== i.lastVal) try {
                a = e.datepicker.parseDate(e.datepicker._get(i, "dateFormat"), i.input ? i.input.val() : null, e.datepicker._getFormatConfig(i)), a && (e.datepicker._setDateFromField(i), e.datepicker._updateAlternate(i), e.datepicker._updateDatepicker(i))
            } catch (e) {}
            return !0
        },
        _showDatepicker: function(t) {
            if (t = t.target || t, "input" !== t.nodeName.toLowerCase() && (t = e("input", t.parentNode)[0]), !e.datepicker._isDisabledDatepicker(t) && e.datepicker._lastInput !== t) {
                var a, r, n, s, l, d, c;
                a = e.datepicker._getInst(t), e.datepicker._curInst && e.datepicker._curInst !== a && (e.datepicker._curInst.dpDiv.stop(!0, !0), a && e.datepicker._datepickerShowing && e.datepicker._hideDatepicker(e.datepicker._curInst.input[0])), r = e.datepicker._get(a, "beforeShow"), n = r ? r.apply(t, [t, a]) : {}, !1 !== n && (o(a.settings, n), a.lastVal = null, e.datepicker._lastInput = t, e.datepicker._setDateFromField(a), e.datepicker._inDialog && (t.value = ""), e.datepicker._pos || (e.datepicker._pos = e.datepicker._findPos(t), e.datepicker._pos[1] += t.offsetHeight), s = !1, e(t).parents().each(function() {
                    return !(s |= "fixed" === e(this).css("position"))
                }), l = {
                    left: e.datepicker._pos[0],
                    top: e.datepicker._pos[1]
                }, e.datepicker._pos = null, a.dpDiv.empty(), a.dpDiv.css({
                    position: "absolute",
                    display: "block",
                    top: "-1000px"
                }), e.datepicker._updateDatepicker(a), l = e.datepicker._checkOffset(a, l, s), a.dpDiv.css({
                    position: e.datepicker._inDialog && e.blockUI ? "static" : s ? "fixed" : "absolute",
                    display: "none",
                    left: l.left + "px",
                    top: l.top + "px"
                }), a.inline || (d = e.datepicker._get(a, "showAnim"), c = e.datepicker._get(a, "duration"), a.dpDiv.css("z-index", i(e(t)) + 1), e.datepicker._datepickerShowing = !0, e.effects && e.effects.effect[d] ? a.dpDiv.show(d, e.datepicker._get(a, "showOptions"), c) : a.dpDiv[d || "show"](d ? c : null), e.datepicker._shouldFocusInput(a) && a.input.focus(), e.datepicker._curInst = a))
            }
        },
        _updateDatepicker: function(t) {
            this.maxRows = 4, l = t, t.dpDiv.empty().append(this._generateHTML(t)), this._attachHandlers(t);
            var a, i = this._getNumberOfMonths(t),
                r = i[1],
                n = t.dpDiv.find("." + this._dayOverClass + " a");
            n.length > 0 && s.apply(n.get(0)), t.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), r > 1 && t.dpDiv.addClass("ui-datepicker-multi-" + r).css("width", 17 * r + "em"), t.dpDiv[(1 !== i[0] || 1 !== i[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), t.dpDiv[(this._get(t, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), t === e.datepicker._curInst && e.datepicker._datepickerShowing && e.datepicker._shouldFocusInput(t) && t.input.focus(), t.yearshtml && (a = t.yearshtml, setTimeout(function() {
                a === t.yearshtml && t.yearshtml && t.dpDiv.find("select.ui-datepicker-year:first").replaceWith(t.yearshtml), a = t.yearshtml = null
            }, 0))
        },
        _shouldFocusInput: function(e) {
            return e.input && e.input.is(":visible") && !e.input.is(":disabled") && !e.input.is(":focus")
        },
        _checkOffset: function(t, a, i) {
            var r = t.dpDiv.outerWidth(),
                n = t.dpDiv.outerHeight(),
                s = t.input ? t.input.outerWidth() : 0,
                o = t.input ? t.input.outerHeight() : 0,
                l = document.documentElement.clientWidth + (i ? 0 : e(document).scrollLeft()),
                d = document.documentElement.clientHeight + (i ? 0 : e(document).scrollTop());
            return a.left -= this._get(t, "isRTL") ? r - s : 0, a.left -= i && a.left === t.input.offset().left ? e(document).scrollLeft() : 0, a.top -= i && a.top === t.input.offset().top + o ? e(document).scrollTop() : 0, a.left -= Math.min(a.left, a.left + r > l && l > r ? Math.abs(a.left + r - l) : 0), a.top -= Math.min(a.top, a.top + n > d && d > n ? Math.abs(n + o) : 0), a
        },
        _findPos: function(t) {
            for (var a, i = this._getInst(t), r = this._get(i, "isRTL"); t && ("hidden" === t.type || 1 !== t.nodeType || e.expr.filters.hidden(t));) t = t[r ? "previousSibling" : "nextSibling"];
            return a = e(t).offset(), [a.left, a.top]
        },
        _hideDatepicker: function(t) {
            var a, i, r, n, s = this._curInst;
            !s || t && s !== e.data(t, "datepicker") || this._datepickerShowing && (a = this._get(s, "showAnim"), i = this._get(s, "duration"), r = function() {
                e.datepicker._tidyDialog(s)
            }, e.effects && (e.effects.effect[a] || e.effects[a]) ? s.dpDiv.hide(a, e.datepicker._get(s, "showOptions"), i, r) : s.dpDiv["slideDown" === a ? "slideUp" : "fadeIn" === a ? "fadeOut" : "hide"](a ? i : null, r), a || r(), this._datepickerShowing = !1, n = this._get(s, "onClose"), n && n.apply(s.input ? s.input[0] : null, [s.input ? s.input.val() : "", s]), this._lastInput = null, this._inDialog && (this._dialogInput.css({
                position: "absolute",
                left: "0",
                top: "-100px"
            }), e.blockUI && (e.unblockUI(), e("body").append(this.dpDiv))), this._inDialog = !1)
        },
        _tidyDialog: function(e) {
            e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
        },
        _checkExternalClick: function(t) {
            if (e.datepicker._curInst) {
                var a = e(t.target),
                    i = e.datepicker._getInst(a[0]);
                (a[0].id === e.datepicker._mainDivId || 0 !== a.parents("#" + e.datepicker._mainDivId).length || a.hasClass(e.datepicker.markerClassName) || a.closest("." + e.datepicker._triggerClass).length || !e.datepicker._datepickerShowing || e.datepicker._inDialog && e.blockUI) && (!a.hasClass(e.datepicker.markerClassName) || e.datepicker._curInst === i) || e.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function(t, a, i) {
            var r = e(t),
                n = this._getInst(r[0]);
            this._isDisabledDatepicker(r[0]) || (this._adjustInstDate(n, a + ("M" === i ? this._get(n, "showCurrentAtPos") : 0), i), this._updateDatepicker(n))
        },
        _gotoToday: function(t) {
            var a, i = e(t),
                r = this._getInst(i[0]);
            this._get(r, "gotoCurrent") && r.currentDay ? (r.selectedDay = r.currentDay, r.drawMonth = r.selectedMonth = r.currentMonth, r.drawYear = r.selectedYear = r.currentYear) : (a = new Date, r.selectedDay = a.getDate(), r.drawMonth = r.selectedMonth = a.getMonth(), r.drawYear = r.selectedYear = a.getFullYear()), this._notifyChange(r), this._adjustDate(i)
        },
        _selectMonthYear: function(t, a, i) {
            var r = e(t),
                n = this._getInst(r[0]);
            n["selected" + ("M" === i ? "Month" : "Year")] = n["draw" + ("M" === i ? "Month" : "Year")] = parseInt(a.options[a.selectedIndex].value, 10), this._notifyChange(n), this._adjustDate(r)
        },
        _selectDay: function(t, a, i, r) {
            var n, s = e(t);
            e(r).hasClass(this._unselectableClass) || this._isDisabledDatepicker(s[0]) || (n = this._getInst(s[0]), n.selectedDay = n.currentDay = e("a", r).html(), n.selectedMonth = n.currentMonth = a, n.selectedYear = n.currentYear = i, this._selectDate(t, this._formatDate(n, n.currentDay, n.currentMonth, n.currentYear)))
        },
        _clearDate: function(t) {
            var a = e(t);
            this._selectDate(a, "")
        },
        _selectDate: function(t, a) {
            var i, r = e(t),
                n = this._getInst(r[0]);
            a = null != a ? a : this._formatDate(n), n.input && n.input.val(a), this._updateAlternate(n), i = this._get(n, "onSelect"), i ? i.apply(n.input ? n.input[0] : null, [a, n]) : n.input && n.input.trigger("change"), n.inline ? this._updateDatepicker(n) : (this._hideDatepicker(), this._lastInput = n.input[0], "object" != typeof n.input[0] && n.input.focus(), this._lastInput = null)
        },
        _updateAlternate: function(t) {
            var a, i, r, n = this._get(t, "altField");
            n && (a = this._get(t, "altFormat") || this._get(t, "dateFormat"), i = this._getDate(t), r = this.formatDate(a, i, this._getFormatConfig(t)), e(n).each(function() {
                e(this).val(r)
            }))
        },
        noWeekends: function(e) {
            var t = e.getDay();
            return [t > 0 && t < 6, ""]
        },
        iso8601Week: function(e) {
            var t, a = new Date(e.getTime());
            return a.setDate(a.getDate() + 4 - (a.getDay() || 7)), t = a.getTime(), a.setMonth(0), a.setDate(1), Math.floor(Math.round((t - a) / 864e5) / 7) + 1
        },
        parseDate: function(t, a, i) {
            if (null == t || null == a) throw "Invalid arguments";
            if ("" === (a = "object" == typeof a ? a.toString() : a + "")) return null;
            var r, n, s, o, l = 0,
                d = (i ? i.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                c = "string" != typeof d ? d : (new Date).getFullYear() % 100 + parseInt(d, 10),
                u = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort,
                p = (i ? i.dayNames : null) || this._defaults.dayNames,
                f = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort,
                h = (i ? i.monthNames : null) || this._defaults.monthNames,
                v = -1,
                m = -1,
                g = -1,
                y = -1,
                w = !1,
                b = function(e) {
                    var a = r + 1 < t.length && t.charAt(r + 1) === e;
                    return a && r++, a
                },
                x = function(e) {
                    var t = b(e),
                        i = "@" === e ? 14 : "!" === e ? 20 : "y" === e && t ? 4 : "o" === e ? 3 : 2,
                        r = "y" === e ? i : 1,
                        n = new RegExp("^\\d{" + r + "," + i + "}"),
                        s = a.substring(l).match(n);
                    if (!s) throw "Missing number at position " + l;
                    return l += s[0].length, parseInt(s[0], 10)
                },
                _ = function(t, i, r) {
                    var n = -1,
                        s = e.map(b(t) ? r : i, function(e, t) {
                            return [
                                [t, e]
                            ]
                        }).sort(function(e, t) {
                            return -(e[1].length - t[1].length)
                        });
                    if (e.each(s, function(e, t) {
                            var i = t[1];
                            if (a.substr(l, i.length).toLowerCase() === i.toLowerCase()) return n = t[0], l += i.length, !1
                        }), -1 !== n) return n + 1;
                    throw "Unknown name at position " + l
                },
                k = function() {
                    if (a.charAt(l) !== t.charAt(r)) throw "Unexpected literal at position " + l;
                    l++
                };
            for (r = 0; r < t.length; r++)
                if (w) "'" !== t.charAt(r) || b("'") ? k() : w = !1;
                else switch (t.charAt(r)) {
                    case "d":
                        g = x("d");
                        break;
                    case "D":
                        _("D", u, p);
                        break;
                    case "o":
                        y = x("o");
                        break;
                    case "m":
                        m = x("m");
                        break;
                    case "M":
                        m = _("M", f, h);
                        break;
                    case "y":
                        v = x("y");
                        break;
                    case "@":
                        o = new Date(x("@")), v = o.getFullYear(), m = o.getMonth() + 1, g = o.getDate();
                        break;
                    case "!":
                        o = new Date((x("!") - this._ticksTo1970) / 1e4), v = o.getFullYear(), m = o.getMonth() + 1, g = o.getDate();
                        break;
                    case "'":
                        b("'") ? k() : w = !0;
                        break;
                    default:
                        k()
                }
                if (l < a.length && (s = a.substr(l), !/^\s+/.test(s))) throw "Extra/unparsed characters found in date: " + s;
            if (-1 === v ? v = (new Date).getFullYear() : v < 100 && (v += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (v <= c ? 0 : -100)), y > -1)
                for (m = 1, g = y;;) {
                    if (n = this._getDaysInMonth(v, m - 1), g <= n) break;
                    m++, g -= n
                }
            if (o = this._daylightSavingAdjust(new Date(v, m - 1, g)), o.getFullYear() !== v || o.getMonth() + 1 !== m || o.getDate() !== g) throw "Invalid date";
            return o
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7,
        formatDate: function(e, t, a) {
            if (!t) return "";
            var i, r = (a ? a.dayNamesShort : null) || this._defaults.dayNamesShort,
                n = (a ? a.dayNames : null) || this._defaults.dayNames,
                s = (a ? a.monthNamesShort : null) || this._defaults.monthNamesShort,
                o = (a ? a.monthNames : null) || this._defaults.monthNames,
                l = function(t) {
                    var a = i + 1 < e.length && e.charAt(i + 1) === t;
                    return a && i++, a
                },
                d = function(e, t, a) {
                    var i = "" + t;
                    if (l(e))
                        for (; i.length < a;) i = "0" + i;
                    return i
                },
                c = function(e, t, a, i) {
                    return l(e) ? i[t] : a[t]
                },
                u = "",
                p = !1;
            if (t)
                for (i = 0; i < e.length; i++)
                    if (p) "'" !== e.charAt(i) || l("'") ? u += e.charAt(i) : p = !1;
                    else switch (e.charAt(i)) {
                        case "d":
                            u += d("d", t.getDate(), 2);
                            break;
                        case "D":
                            u += c("D", t.getDay(), r, n);
                            break;
                        case "o":
                            u += d("o", Math.round((new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() - new Date(t.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                            break;
                        case "m":
                            u += d("m", t.getMonth() + 1, 2);
                            break;
                        case "M":
                            u += c("M", t.getMonth(), s, o);
                            break;
                        case "y":
                            u += l("y") ? t.getFullYear() : (t.getYear() % 100 < 10 ? "0" : "") + t.getYear() % 100;
                            break;
                        case "@":
                            u += t.getTime();
                            break;
                        case "!":
                            u += 1e4 * t.getTime() + this._ticksTo1970;
                            break;
                        case "'":
                            l("'") ? u += "'" : p = !0;
                            break;
                        default:
                            u += e.charAt(i)
                    }
                    return u
        },
        _possibleChars: function(e) {
            var t, a = "",
                i = !1,
                r = function(a) {
                    var i = t + 1 < e.length && e.charAt(t + 1) === a;
                    return i && t++, i
                };
            for (t = 0; t < e.length; t++)
                if (i) "'" !== e.charAt(t) || r("'") ? a += e.charAt(t) : i = !1;
                else switch (e.charAt(t)) {
                    case "d":
                    case "m":
                    case "y":
                    case "@":
                        a += "0123456789";
                        break;
                    case "D":
                    case "M":
                        return null;
                    case "'":
                        r("'") ? a += "'" : i = !0;
                        break;
                    default:
                        a += e.charAt(t)
                }
                return a
        },
        _get: function(e, t) {
            return void 0 !== e.settings[t] ? e.settings[t] : this._defaults[t]
        },
        _setDateFromField: function(e, t) {
            if (e.input.val() !== e.lastVal) {
                var a = this._get(e, "dateFormat"),
                    i = e.lastVal = e.input ? e.input.val() : null,
                    r = this._getDefaultDate(e),
                    n = r,
                    s = this._getFormatConfig(e);
                try {
                    n = this.parseDate(a, i, s) || r
                } catch (e) {
                    i = t ? "" : i
                }
                e.selectedDay = n.getDate(), e.drawMonth = e.selectedMonth = n.getMonth(), e.drawYear = e.selectedYear = n.getFullYear(), e.currentDay = i ? n.getDate() : 0, e.currentMonth = i ? n.getMonth() : 0, e.currentYear = i ? n.getFullYear() : 0, this._adjustInstDate(e)
            }
        },
        _getDefaultDate: function(e) {
            return this._restrictMinMax(e, this._determineDate(e, this._get(e, "defaultDate"), new Date))
        },
        _determineDate: function(t, a, i) {
            var r = null == a || "" === a ? i : "string" == typeof a ? function(a) {
                try {
                    return e.datepicker.parseDate(e.datepicker._get(t, "dateFormat"), a, e.datepicker._getFormatConfig(t))
                } catch (e) {}
                for (var i = (a.toLowerCase().match(/^c/) ? e.datepicker._getDate(t) : null) || new Date, r = i.getFullYear(), n = i.getMonth(), s = i.getDate(), o = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, l = o.exec(a); l;) {
                    switch (l[2] || "d") {
                        case "d":
                        case "D":
                            s += parseInt(l[1], 10);
                            break;
                        case "w":
                        case "W":
                            s += 7 * parseInt(l[1], 10);
                            break;
                        case "m":
                        case "M":
                            n += parseInt(l[1], 10), s = Math.min(s, e.datepicker._getDaysInMonth(r, n));
                            break;
                        case "y":
                        case "Y":
                            r += parseInt(l[1], 10), s = Math.min(s, e.datepicker._getDaysInMonth(r, n))
                    }
                    l = o.exec(a)
                }
                return new Date(r, n, s)
            }(a) : "number" == typeof a ? isNaN(a) ? i : function(e) {
                var t = new Date;
                return t.setDate(t.getDate() + e), t
            }(a) : new Date(a.getTime());
            return r = r && "Invalid Date" === r.toString() ? i : r, r && (r.setHours(0), r.setMinutes(0), r.setSeconds(0), r.setMilliseconds(0)), this._daylightSavingAdjust(r)
        },
        _daylightSavingAdjust: function(e) {
            return e ? (e.setHours(e.getHours() > 12 ? e.getHours() + 2 : 0), e) : null
        },
        _setDate: function(e, t, a) {
            var i = !t,
                r = e.selectedMonth,
                n = e.selectedYear,
                s = this._restrictMinMax(e, this._determineDate(e, t, new Date));
            e.selectedDay = e.currentDay = s.getDate(), e.drawMonth = e.selectedMonth = e.currentMonth = s.getMonth(), e.drawYear = e.selectedYear = e.currentYear = s.getFullYear(), r === e.selectedMonth && n === e.selectedYear || a || this._notifyChange(e), this._adjustInstDate(e), e.input && e.input.val(i ? "" : this._formatDate(e))
        },
        _getDate: function(e) {
            return !e.currentYear || e.input && "" === e.input.val() ? null : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay))
        },
        _attachHandlers: function(t) {
            var a = this._get(t, "stepMonths"),
                i = "#" + t.id.replace(/\\\\/g, "\\");
            t.dpDiv.find("[data-handler]").map(function() {
                var t = {
                    prev: function() {
                        e.datepicker._adjustDate(i, -a, "M")
                    },
                    next: function() {
                        e.datepicker._adjustDate(i, +a, "M")
                    },
                    hide: function() {
                        e.datepicker._hideDatepicker()
                    },
                    today: function() {
                        e.datepicker._gotoToday(i)
                    },
                    selectDay: function() {
                        return e.datepicker._selectDay(i, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1
                    },
                    selectMonth: function() {
                        return e.datepicker._selectMonthYear(i, this, "M"), !1
                    },
                    selectYear: function() {
                        return e.datepicker._selectMonthYear(i, this, "Y"), !1
                    }
                };
                e(this).bind(this.getAttribute("data-event"), t[this.getAttribute("data-handler")])
            })
        },
        _generateHTML: function(e) {
            var t, a, i, r, n, s, o, l, d, c, u, p, f, h, v, m, g, y, w, b, x, _, k, C, $, T, D, S, M, F, E, P, I, A, N, z, O, L, H, j = new Date,
                R = this._daylightSavingAdjust(new Date(j.getFullYear(), j.getMonth(), j.getDate())),
                q = this._get(e, "isRTL"),
                B = this._get(e, "showButtonPanel"),
                W = this._get(e, "hideIfNoPrevNext"),
                V = this._get(e, "navigationAsDateFormat"),
                Y = this._getNumberOfMonths(e),
                G = this._get(e, "showCurrentAtPos"),
                K = this._get(e, "stepMonths"),
                X = 1 !== Y[0] || 1 !== Y[1],
                U = this._daylightSavingAdjust(e.currentDay ? new Date(e.currentYear, e.currentMonth, e.currentDay) : new Date(9999, 9, 9)),
                Q = this._getMinMaxDate(e, "min"),
                J = this._getMinMaxDate(e, "max"),
                Z = e.drawMonth - G,
                ee = e.drawYear;
            if (Z < 0 && (Z += 12, ee--), J)
                for (t = this._daylightSavingAdjust(new Date(J.getFullYear(), J.getMonth() - Y[0] * Y[1] + 1, J.getDate())), t = Q && t < Q ? Q : t; this._daylightSavingAdjust(new Date(ee, Z, 1)) > t;) --Z < 0 && (Z = 11, ee--);
            for (e.drawMonth = Z, e.drawYear = ee, a = this._get(e, "prevText"), a = V ? this.formatDate(a, this._daylightSavingAdjust(new Date(ee, Z - K, 1)), this._getFormatConfig(e)) : a, i = this._canAdjustMonth(e, -1, ee, Z) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + a + "'><span class='ui-icon ui-icon-circle-triangle-" + (q ? "e" : "w") + "'>" + a + "</span></a>" : W ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + a + "'><span class='ui-icon ui-icon-circle-triangle-" + (q ? "e" : "w") + "'>" + a + "</span></a>", r = this._get(e, "nextText"), r = V ? this.formatDate(r, this._daylightSavingAdjust(new Date(ee, Z + K, 1)), this._getFormatConfig(e)) : r, n = this._canAdjustMonth(e, 1, ee, Z) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + r + "'><span class='ui-icon ui-icon-circle-triangle-" + (q ? "w" : "e") + "'>" + r + "</span></a>" : W ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + r + "'><span class='ui-icon ui-icon-circle-triangle-" + (q ? "w" : "e") + "'>" + r + "</span></a>", s = this._get(e, "currentText"), o = this._get(e, "gotoCurrent") && e.currentDay ? U : R, s = V ? this.formatDate(s, o, this._getFormatConfig(e)) : s, l = e.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(e, "closeText") + "</button>", d = B ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (q ? l : "") + (this._isInRange(e, o) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + s + "</button>" : "") + (q ? "" : l) + "</div>" : "", c = parseInt(this._get(e, "firstDay"), 10), c = isNaN(c) ? 0 : c, u = this._get(e, "showWeek"), p = this._get(e, "dayNames"), f = this._get(e, "dayNamesMin"), h = this._get(e, "monthNames"), v = this._get(e, "monthNamesShort"), m = this._get(e, "beforeShowDay"), g = this._get(e, "showOtherMonths"), y = this._get(e, "selectOtherMonths"), w = this._getDefaultDate(e), b = "", _ = 0; _ < Y[0]; _++) {
                for (k = "", this.maxRows = 4, C = 0; C < Y[1]; C++) {
                    if ($ = this._daylightSavingAdjust(new Date(ee, Z, e.selectedDay)), T = " ui-corner-all", D = "", X) {
                        if (D += "<div class='ui-datepicker-group", Y[1] > 1) switch (C) {
                            case 0:
                                D += " ui-datepicker-group-first", T = " ui-corner-" + (q ? "right" : "left");
                                break;
                            case Y[1] - 1:
                                D += " ui-datepicker-group-last", T = " ui-corner-" + (q ? "left" : "right");
                                break;
                            default:
                                D += " ui-datepicker-group-middle", T = ""
                        }
                        D += "'>"
                    }
                    for (D += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + T + "'>" + (/all|left/.test(T) && 0 === _ ? q ? n : i : "") + (/all|right/.test(T) && 0 === _ ? q ? i : n : "") + this._generateMonthYearHeader(e, Z, ee, Q, J, _ > 0 || C > 0, h, v) + "</div><table class='ui-datepicker-calendar'><thead><tr>", S = u ? "<th class='ui-datepicker-week-col'>" + this._get(e, "weekHeader") + "</th>" : "", x = 0; x < 7; x++) M = (x + c) % 7, S += "<th scope='col'" + ((x + c + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + p[M] + "'>" + f[M] + "</span></th>";
                    for (D += S + "</tr></thead><tbody>", F = this._getDaysInMonth(ee, Z), ee === e.selectedYear && Z === e.selectedMonth && (e.selectedDay = Math.min(e.selectedDay, F)), E = (this._getFirstDayOfMonth(ee, Z) - c + 7) % 7, P = Math.ceil((E + F) / 7), I = X && this.maxRows > P ? this.maxRows : P, this.maxRows = I, A = this._daylightSavingAdjust(new Date(ee, Z, 1 - E)), N = 0; N < I; N++) {
                        for (D += "<tr>", z = u ? "<td class='ui-datepicker-week-col'>" + this._get(e, "calculateWeek")(A) + "</td>" : "", x = 0; x < 7; x++) O = m ? m.apply(e.input ? e.input[0] : null, [A]) : [!0, ""], L = A.getMonth() !== Z, H = L && !y || !O[0] || Q && A < Q || J && A > J, z += "<td class='" + ((x + c + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (L ? " ui-datepicker-other-month" : "") + (A.getTime() === $.getTime() && Z === e.selectedMonth && e._keyEvent || w.getTime() === A.getTime() && w.getTime() === $.getTime() ? " " + this._dayOverClass : "") + (H ? " " + this._unselectableClass + " ui-state-disabled" : "") + (L && !g ? "" : " " + O[1] + (A.getTime() === U.getTime() ? " " + this._currentClass : "") + (A.getTime() === R.getTime() ? " ui-datepicker-today" : "")) + "'" + (L && !g || !O[2] ? "" : " title='" + O[2].replace(/'/g, "&#39;") + "'") + (H ? "" : " data-handler='selectDay' data-event='click' data-month='" + A.getMonth() + "' data-year='" + A.getFullYear() + "'") + ">" + (L && !g ? "&#xa0;" : H ? "<span class='ui-state-default'>" + A.getDate() + "</span>" : "<a class='ui-state-default" + (A.getTime() === R.getTime() ? " ui-state-highlight" : "") + (A.getTime() === U.getTime() ? " ui-state-active" : "") + (L ? " ui-priority-secondary" : "") + "' href='#'>" + A.getDate() + "</a>") + "</td>", A.setDate(A.getDate() + 1), A = this._daylightSavingAdjust(A);
                        D += z + "</tr>"
                    }
                    Z++, Z > 11 && (Z = 0, ee++), D += "</tbody></table>" + (X ? "</div>" + (Y[0] > 0 && C === Y[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), k += D
                }
                b += k
            }
            return b += d, e._keyEvent = !1, b
        },
        _generateMonthYearHeader: function(e, t, a, i, r, n, s, o) {
            var l, d, c, u, p, f, h, v, m = this._get(e, "changeMonth"),
                g = this._get(e, "changeYear"),
                y = this._get(e, "showMonthAfterYear"),
                w = "<div class='ui-datepicker-title'>",
                b = "";
            if (n || !m) b += "<span class='ui-datepicker-month'>" + s[t] + "</span>";
            else {
                for (l = i && i.getFullYear() === a, d = r && r.getFullYear() === a, b += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", c = 0; c < 12; c++)(!l || c >= i.getMonth()) && (!d || c <= r.getMonth()) && (b += "<option value='" + c + "'" + (c === t ? " selected='selected'" : "") + ">" + o[c] + "</option>");
                b += "</select>"
            }
            if (y || (w += b + (!n && m && g ? "" : "&#xa0;")), !e.yearshtml)
                if (e.yearshtml = "", n || !g) w += "<span class='ui-datepicker-year'>" + a + "</span>";
                else {
                    for (u = this._get(e, "yearRange").split(":"), p = (new Date).getFullYear(), f = function(e) {
                            var t = e.match(/c[+\-].*/) ? a + parseInt(e.substring(1), 10) : e.match(/[+\-].*/) ? p + parseInt(e, 10) : parseInt(e, 10);
                            return isNaN(t) ? p : t
                        }, h = f(u[0]), v = Math.max(h, f(u[1] || "")), h = i ? Math.max(h, i.getFullYear()) : h, v = r ? Math.min(v, r.getFullYear()) : v, e.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; h <= v; h++) e.yearshtml += "<option value='" + h + "'" + (h === a ? " selected='selected'" : "") + ">" + h + "</option>";
                    e.yearshtml += "</select>", w += e.yearshtml, e.yearshtml = null
                }
            return w += this._get(e, "yearSuffix"), y && (w += (!n && m && g ? "" : "&#xa0;") + b), w += "</div>"
        },
        _adjustInstDate: function(e, t, a) {
            var i = e.drawYear + ("Y" === a ? t : 0),
                r = e.drawMonth + ("M" === a ? t : 0),
                n = Math.min(e.selectedDay, this._getDaysInMonth(i, r)) + ("D" === a ? t : 0),
                s = this._restrictMinMax(e, this._daylightSavingAdjust(new Date(i, r, n)));
            e.selectedDay = s.getDate(), e.drawMonth = e.selectedMonth = s.getMonth(), e.drawYear = e.selectedYear = s.getFullYear(), "M" !== a && "Y" !== a || this._notifyChange(e)
        },
        _restrictMinMax: function(e, t) {
            var a = this._getMinMaxDate(e, "min"),
                i = this._getMinMaxDate(e, "max"),
                r = a && t < a ? a : t;
            return i && r > i ? i : r
        },
        _notifyChange: function(e) {
            var t = this._get(e, "onChangeMonthYear");
            t && t.apply(e.input ? e.input[0] : null, [e.selectedYear, e.selectedMonth + 1, e])
        },
        _getNumberOfMonths: function(e) {
            var t = this._get(e, "numberOfMonths");
            return null == t ? [1, 1] : "number" == typeof t ? [1, t] : t
        },
        _getMinMaxDate: function(e, t) {
            return this._determineDate(e, this._get(e, t + "Date"), null)
        },
        _getDaysInMonth: function(e, t) {
            return 32 - this._daylightSavingAdjust(new Date(e, t, 32)).getDate()
        },
        _getFirstDayOfMonth: function(e, t) {
            return new Date(e, t, 1).getDay()
        },
        _canAdjustMonth: function(e, t, a, i) {
            var r = this._getNumberOfMonths(e),
                n = this._daylightSavingAdjust(new Date(a, i + (t < 0 ? t : r[0] * r[1]), 1));
            return t < 0 && n.setDate(this._getDaysInMonth(n.getFullYear(), n.getMonth())), this._isInRange(e, n)
        },
        _isInRange: function(e, t) {
            var a, i, r = this._getMinMaxDate(e, "min"),
                n = this._getMinMaxDate(e, "max"),
                s = null,
                o = null,
                l = this._get(e, "yearRange");
            return l && (a = l.split(":"), i = (new Date).getFullYear(), s = parseInt(a[0], 10), o = parseInt(a[1], 10), a[0].match(/[+\-].*/) && (s += i), a[1].match(/[+\-].*/) && (o += i)), (!r || t.getTime() >= r.getTime()) && (!n || t.getTime() <= n.getTime()) && (!s || t.getFullYear() >= s) && (!o || t.getFullYear() <= o)
        },
        _getFormatConfig: function(e) {
            var t = this._get(e, "shortYearCutoff");
            return t = "string" != typeof t ? t : (new Date).getFullYear() % 100 + parseInt(t, 10), {
                shortYearCutoff: t,
                dayNamesShort: this._get(e, "dayNamesShort"),
                dayNames: this._get(e, "dayNames"),
                monthNamesShort: this._get(e, "monthNamesShort"),
                monthNames: this._get(e, "monthNames")
            }
        },
        _formatDate: function(e, t, a, i) {
            t || (e.currentDay = e.selectedDay, e.currentMonth = e.selectedMonth, e.currentYear = e.selectedYear);
            var r = t ? "object" == typeof t ? t : this._daylightSavingAdjust(new Date(i, a, t)) : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay));
            return this.formatDate(this._get(e, "dateFormat"), r, this._getFormatConfig(e))
        }
    }), e.fn.datepicker = function(t) {
        if (!this.length) return this;
        e.datepicker.initialized || (e(document).mousedown(e.datepicker._checkExternalClick), e.datepicker.initialized = !0), 0 === e("#" + e.datepicker._mainDivId).length && e("body").append(e.datepicker.dpDiv);
        var a = Array.prototype.slice.call(arguments, 1);
        return "string" != typeof t || "isDisabled" !== t && "getDate" !== t && "widget" !== t ? "option" === t && 2 === arguments.length && "string" == typeof arguments[1] ? e.datepicker["_" + t + "Datepicker"].apply(e.datepicker, [this[0]].concat(a)) : this.each(function() {
            "string" == typeof t ? e.datepicker["_" + t + "Datepicker"].apply(e.datepicker, [this].concat(a)) : e.datepicker._attachDatepicker(this, t)
        }) : e.datepicker["_" + t + "Datepicker"].apply(e.datepicker, [this[0]].concat(a))
    }, e.datepicker = new r, e.datepicker.initialized = !1, e.datepicker.uuid = (new Date).getTime(), e.datepicker.version = "1.11.4";
    e.datepicker
}),
function() {
    "use strict";
    var e, t = function(a, i) {
        function r(e) {
            return Math.floor(e)
        }
        function n() {
            w.autoplayTimeoutId = setTimeout(function() {
                w.params.loop ? (w.fixLoop(), w._slideNext(), w.emit("onAutoplay", w)) : w.isEnd ? i.autoplayStopOnLast ? w.stopAutoplay() : (w._slideTo(0), w.emit("onAutoplay", w)) : (w._slideNext(), w.emit("onAutoplay", w))
            }, w.params.autoplay)
        }
        function s(t, a) {
            var i = e(t.target);
            if (!i.is(a))
                if ("string" == typeof a) i = i.parents(a);
                else if (a.nodeType) {
                var r;
                return i.parents().each(function(e, t) {
                    t === a && (r = a)
                }), r ? a : void 0
            }
            if (0 !== i.length) return i[0]
        }
        function o(e, t) {
            t = t || {};
            var a = window.MutationObserver || window.WebkitMutationObserver,
                i = new a(function(e) {
                    e.forEach(function(e) {
                        w.onResize(!0), w.emit("onObserverUpdate", w, e)
                    })
                });
            i.observe(e, {
                attributes: void 0 === t.attributes || t.attributes,
                childList: void 0 === t.childList || t.childList,
                characterData: void 0 === t.characterData || t.characterData
            }), w.observers.push(i)
        }
        function l(e) {
            e.originalEvent && (e = e.originalEvent);
            var t = e.keyCode || e.charCode;
            if (!w.params.allowSwipeToNext && (w.isHorizontal() && 39 === t || !w.isHorizontal() && 40 === t)) return !1;
            if (!w.params.allowSwipeToPrev && (w.isHorizontal() && 37 === t || !w.isHorizontal() && 38 === t)) return !1;
            if (!(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey || document.activeElement && document.activeElement.nodeName && ("input" === document.activeElement.nodeName.toLowerCase() || "textarea" === document.activeElement.nodeName.toLowerCase()))) {
                if (37 === t || 39 === t || 38 === t || 40 === t) {
                    var a = !1;
                    if (w.container.parents(".swiper-slide").length > 0 && 0 === w.container.parents(".swiper-slide-active").length) return;
                    var i = {
                            left: window.pageXOffset,
                            top: window.pageYOffset
                        },
                        r = window.innerWidth,
                        n = window.innerHeight,
                        s = w.container.offset();
                    w.rtl && (s.left = s.left - w.container[0].scrollLeft);
                    for (var o = [
                            [s.left, s.top],
                            [s.left + w.width, s.top],
                            [s.left, s.top + w.height],
                            [s.left + w.width, s.top + w.height]
                        ], l = 0; l < o.length; l++) {
                        var d = o[l];
                        d[0] >= i.left && d[0] <= i.left + r && d[1] >= i.top && d[1] <= i.top + n && (a = !0)
                    }
                    if (!a) return
                }
                w.isHorizontal() ? (37 !== t && 39 !== t && 32 !== t || (e.preventDefault ? e.preventDefault() : e.returnValue = !1), (39 === t && !w.rtl || 37 === t && w.rtl) && w.slideNext(), (37 === t && !w.rtl || 39 === t && w.rtl) && w.slidePrev()) : (38 !== t && 40 !== t || (e.preventDefault ? e.preventDefault() : e.returnValue = !1), 40 === t && w.slideNext(), 38 === t && w.slidePrev())
            }
        }
        function d(e) {
            e.originalEvent && (e = e.originalEvent);
            var t = w.mousewheel.event,
                a = 0,
                i = w.rtl ? -1 : 1;
            if ("mousewheel" === t)
                if (w.params.mousewheelForceToAxis)
                    if (w.isHorizontal()) {
                        if (!(Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY))) return;
                        a = e.wheelDeltaX * i
                    } else {
                        if (!(Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX))) return;
                        a = e.wheelDeltaY
                    }
            else a = Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY) ? -e.wheelDeltaX * i : -e.wheelDeltaY;
            else if ("DOMMouseScroll" === t) a = -e.detail;
            else if ("wheel" === t)
                if (w.params.mousewheelForceToAxis)
                    if (w.isHorizontal()) {
                        if (!(Math.abs(e.deltaX) > Math.abs(e.deltaY))) return;
                        a = -e.deltaX * i
                    } else {
                        if (!(Math.abs(e.deltaY) > Math.abs(e.deltaX))) return;
                        a = -e.deltaY
                    }
            else a = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? -e.deltaX * i : -e.deltaY;
            if (0 !== a) {
                if (w.params.mousewheelInvert && (a = -a), w.params.freeMode) {
                    var r = w.getWrapperTranslate() + a * w.params.mousewheelSensitivity,
                        n = w.isBeginning,
                        s = w.isEnd;
                    if (r >= w.minTranslate() && (r = w.minTranslate()), r <= w.maxTranslate() && (r = w.maxTranslate()), w.setWrapperTransition(0), w.setWrapperTranslate(r), w.updateProgress(), w.updateActiveIndex(), (!n && w.isBeginning || !s && w.isEnd) && w.updateClasses(), w.params.freeModeSticky ? (clearTimeout(w.mousewheel.timeout), w.mousewheel.timeout = setTimeout(function() {
                            w.slideReset()
                        }, 300)) : w.params.lazyLoading && w.lazy && w.lazy.load(), 0 === r || r === w.maxTranslate()) return
                } else {
                    if ((new window.Date).getTime() - w.mousewheel.lastScrollTime > 60)
                        if (a < 0)
                            if (w.isEnd && !w.params.loop || w.animating) {
                                if (w.params.mousewheelReleaseOnEdges) return !0
                            } else w.slideNext();
                    else if (w.isBeginning && !w.params.loop || w.animating) {
                        if (w.params.mousewheelReleaseOnEdges) return !0
                    } else w.slidePrev();
                    w.mousewheel.lastScrollTime = (new window.Date).getTime()
                }
                return w.params.autoplay && w.stopAutoplay(), e.preventDefault ? e.preventDefault() : e.returnValue = !1, !1
            }
        }
        function c(t, a) {
            t = e(t);
            var i, r, n, s = w.rtl ? -1 : 1;
            i = t.attr("data-swiper-parallax") || "0", r = t.attr("data-swiper-parallax-x"), n = t.attr("data-swiper-parallax-y"), r || n ? (r = r || "0", n = n || "0") : w.isHorizontal() ? (r = i, n = "0") : (n = i, r = "0"), r = r.indexOf("%") >= 0 ? parseInt(r, 10) * a * s + "%" : r * a * s + "px", n = n.indexOf("%") >= 0 ? parseInt(n, 10) * a + "%" : n * a + "px", t.transform("translate3d(" + r + ", " + n + ",0px)")
        }
        function u(e) {
            return 0 !== e.indexOf("on") && (e = e[0] !== e[0].toUpperCase() ? "on" + e[0].toUpperCase() + e.substring(1) : "on" + e), e
        }
        if (!(this instanceof t)) return new t(a, i);
        var p = {
                direction: "horizontal",
                touchEventsTarget: "container",
                initialSlide: 0,
                speed: 300,
                autoplay: !1,
                autoplayDisableOnInteraction: !0,
                autoplayStopOnLast: !1,
                iOSEdgeSwipeDetection: !1,
                iOSEdgeSwipeThreshold: 20,
                freeMode: !1,
                freeModeMomentum: !0,
                freeModeMomentumRatio: 1,
                freeModeMomentumBounce: !0,
                freeModeMomentumBounceRatio: 1,
                freeModeSticky: !1,
                freeModeMinimumVelocity: .02,
                autoHeight: !1,
                setWrapperSize: !1,
                virtualTranslate: !1,
                effect: "slide",
                coverflow: {
                    rotate: 50,
                    stretch: 0,
                    depth: 100,
                    modifier: 1,
                    slideShadows: !0
                },
                flip: {
                    slideShadows: !0,
                    limitRotation: !0
                },
                cube: {
                    slideShadows: !0,
                    shadow: !0,
                    shadowOffset: 20,
                    shadowScale: .94
                },
                fade: {
                    crossFade: !1
                },
                parallax: !1,
                scrollbar: null,
                scrollbarHide: !0,
                scrollbarDraggable: !1,
                scrollbarSnapOnRelease: !1,
                keyboardControl: !1,
                mousewheelControl: !1,
                mousewheelReleaseOnEdges: !1,
                mousewheelInvert: !1,
                mousewheelForceToAxis: !1,
                mousewheelSensitivity: 1,
                hashnav: !1,
                breakpoints: void 0,
                spaceBetween: 0,
                slidesPerView: 1,
                slidesPerColumn: 1,
                slidesPerColumnFill: "column",
                slidesPerGroup: 1,
                centeredSlides: !1,
                slidesOffsetBefore: 0,
                slidesOffsetAfter: 0,
                roundLengths: !1,
                touchRatio: 1,
                touchAngle: 45,
                simulateTouch: !0,
                shortSwipes: !0,
                longSwipes: !0,
                longSwipesRatio: .5,
                longSwipesMs: 300,
                followFinger: !0,
                onlyExternal: !1,
                threshold: 0,
                touchMoveStopPropagation: !0,
                uniqueNavElements: !0,
                pagination: null,
                paginationElement: "span",
                paginationClickable: !1,
                paginationHide: !1,
                paginationBulletRender: null,
                paginationProgressRender: null,
                paginationFractionRender: null,
                paginationCustomRender: null,
                paginationType: "bullets",
                resistance: !0,
                resistanceRatio: .85,
                nextButton: null,
                prevButton: null,
                watchSlidesProgress: !1,
                watchSlidesVisibility: !1,
                grabCursor: !1,
                preventClicks: !0,
                preventClicksPropagation: !0,
                slideToClickedSlide: !1,
                lazyLoading: !1,
                lazyLoadingInPrevNext: !1,
                lazyLoadingInPrevNextAmount: 1,
                lazyLoadingOnTransitionStart: !1,
                preloadImages: !0,
                updateOnImagesReady: !0,
                loop: !1,
                loopAdditionalSlides: 0,
                loopedSlides: null,
                control: void 0,
                controlInverse: !1,
                controlBy: "slide",
                allowSwipeToPrev: !0,
                allowSwipeToNext: !0,
                swipeHandler: null,
                noSwiping: !0,
                noSwipingClass: "swiper-no-swiping",
                slideClass: "swiper-slide",
                slideActiveClass: "swiper-slide-active",
                slideVisibleClass: "swiper-slide-visible",
                slideDuplicateClass: "swiper-slide-duplicate",
                slideNextClass: "swiper-slide-next",
                slidePrevClass: "swiper-slide-prev",
                wrapperClass: "swiper-wrapper",
                bulletClass: "swiper-pagination-bullet",
                bulletActiveClass: "swiper-pagination-bullet-active",
                buttonDisabledClass: "swiper-button-disabled",
                paginationCurrentClass: "swiper-pagination-current",
                paginationTotalClass: "swiper-pagination-total",
                paginationHiddenClass: "swiper-pagination-hidden",
                paginationProgressbarClass: "swiper-pagination-progressbar",
                observer: !1,
                observeParents: !1,
                a11y: !1,
                prevSlideMessage: "Previous slide",
                nextSlideMessage: "Next slide",
                firstSlideMessage: "This is the first slide",
                lastSlideMessage: "This is the last slide",
                paginationBulletMessage: "Go to slide {{index}}",
                runCallbacksOnInit: !0
            },
            f = i && i.virtualTranslate;
        i = i || {};
        var h = {};
        for (var v in i)
            if ("object" != typeof i[v] || null === i[v] || (i[v].nodeType || i[v] === window || i[v] === document || "undefined" != typeof Dom7 && i[v] instanceof Dom7 || "undefined" != typeof jQuery && i[v] instanceof jQuery)) h[v] = i[v];
            else {
                h[v] = {};
                for (var m in i[v]) h[v][m] = i[v][m]
            }
        for (var g in p)
            if (void 0 === i[g]) i[g] = p[g];
            else if ("object" == typeof i[g])
            for (var y in p[g]) void 0 === i[g][y] && (i[g][y] = p[g][y]);
        var w = this;
        if (w.params = i, w.originalParams = h, w.classNames = [], void 0 !== e && "undefined" != typeof Dom7 && (e = Dom7), (void 0 !== e || (e = "undefined" == typeof Dom7 ? window.Dom7 || window.Zepto || window.jQuery : Dom7)) && (w.$ = e, w.currentBreakpoint = void 0, w.getActiveBreakpoint = function() {
                if (!w.params.breakpoints) return !1;
                var e, t = !1,
                    a = [];
                for (e in w.params.breakpoints) w.params.breakpoints.hasOwnProperty(e) && a.push(e);
                a.sort(function(e, t) {
                    return parseInt(e, 10) > parseInt(t, 10)
                });
                for (var i = 0; i < a.length; i++)(e = a[i]) >= window.innerWidth && !t && (t = e);
                return t || "max"
            }, w.setBreakpoint = function() {
                var e = w.getActiveBreakpoint();
                if (e && w.currentBreakpoint !== e) {
                    var t = e in w.params.breakpoints ? w.params.breakpoints[e] : w.originalParams,
                        a = w.params.loop && t.slidesPerView !== w.params.slidesPerView;
                    for (var i in t) w.params[i] = t[i];
                    w.currentBreakpoint = e, a && w.destroyLoop && w.reLoop(!0)
                }
            }, w.params.breakpoints && w.setBreakpoint(), w.container = e(a), 0 !== w.container.length)) {
            if (w.container.length > 1) {
                var b = [];
                return w.container.each(function() {
                    b.push(new t(this, i))
                }), b
            }
            w.container[0].swiper = w, w.container.data("swiper", w), w.classNames.push("swiper-container-" + w.params.direction), w.params.freeMode && w.classNames.push("swiper-container-free-mode"), w.support.flexbox || (w.classNames.push("swiper-container-no-flexbox"), w.params.slidesPerColumn = 1), w.params.autoHeight && w.classNames.push("swiper-container-autoheight"), (w.params.parallax || w.params.watchSlidesVisibility) && (w.params.watchSlidesProgress = !0), ["cube", "coverflow", "flip"].indexOf(w.params.effect) >= 0 && (w.support.transforms3d ? (w.params.watchSlidesProgress = !0, w.classNames.push("swiper-container-3d")) : w.params.effect = "slide"), "slide" !== w.params.effect && w.classNames.push("swiper-container-" + w.params.effect), "cube" === w.params.effect && (w.params.resistanceRatio = 0, w.params.slidesPerView = 1, w.params.slidesPerColumn = 1, w.params.slidesPerGroup = 1, w.params.centeredSlides = !1, w.params.spaceBetween = 0, w.params.virtualTranslate = !0, w.params.setWrapperSize = !1), "fade" !== w.params.effect && "flip" !== w.params.effect || (w.params.slidesPerView = 1, w.params.slidesPerColumn = 1, w.params.slidesPerGroup = 1, w.params.watchSlidesProgress = !0, w.params.spaceBetween = 0, w.params.setWrapperSize = !1, void 0 === f && (w.params.virtualTranslate = !0)), w.params.grabCursor && w.support.touch && (w.params.grabCursor = !1), w.wrapper = w.container.children("." + w.params.wrapperClass), w.params.pagination && (w.paginationContainer = e(w.params.pagination), w.params.uniqueNavElements && "string" == typeof w.params.pagination && w.paginationContainer.length > 1 && 1 === w.container.find(w.params.pagination).length && (w.paginationContainer = w.container.find(w.params.pagination)), "bullets" === w.params.paginationType && w.params.paginationClickable ? w.paginationContainer.addClass("swiper-pagination-clickable") : w.params.paginationClickable = !1, w.paginationContainer.addClass("swiper-pagination-" + w.params.paginationType)), (w.params.nextButton || w.params.prevButton) && (w.params.nextButton && (w.nextButton = e(w.params.nextButton), w.params.uniqueNavElements && "string" == typeof w.params.nextButton && w.nextButton.length > 1 && 1 === w.container.find(w.params.nextButton).length && (w.nextButton = w.container.find(w.params.nextButton))), w.params.prevButton && (w.prevButton = e(w.params.prevButton), w.params.uniqueNavElements && "string" == typeof w.params.prevButton && w.prevButton.length > 1 && 1 === w.container.find(w.params.prevButton).length && (w.prevButton = w.container.find(w.params.prevButton)))), w.isHorizontal = function() {
                return "horizontal" === w.params.direction
            }, w.rtl = w.isHorizontal() && ("rtl" === w.container[0].dir.toLowerCase() || "rtl" === w.container.css("direction")), w.rtl && w.classNames.push("swiper-container-rtl"), w.rtl && (w.wrongRTL = "-webkit-box" === w.wrapper.css("display")), w.params.slidesPerColumn > 1 && w.classNames.push("swiper-container-multirow"), w.device.android && w.classNames.push("swiper-container-android"), w.container.addClass(w.classNames.join(" ")), w.translate = 0, w.progress = 0, w.velocity = 0, w.lockSwipeToNext = function() {
                w.params.allowSwipeToNext = !1
            }, w.lockSwipeToPrev = function() {
                w.params.allowSwipeToPrev = !1
            }, w.lockSwipes = function() {
                w.params.allowSwipeToNext = w.params.allowSwipeToPrev = !1
            }, w.unlockSwipeToNext = function() {
                w.params.allowSwipeToNext = !0
            }, w.unlockSwipeToPrev = function() {
                w.params.allowSwipeToPrev = !0
            }, w.unlockSwipes = function() {
                w.params.allowSwipeToNext = w.params.allowSwipeToPrev = !0
            }, w.params.grabCursor && (w.container[0].style.cursor = "move", w.container[0].style.cursor = "-webkit-grab", w.container[0].style.cursor = "-moz-grab", w.container[0].style.cursor = "grab"), w.imagesToLoad = [], w.imagesLoaded = 0, w.loadImage = function(e, t, a, i, r) {
                function n() {
                    r && r()
                }
                var s;
                e.complete && i ? n() : t ? (s = new window.Image, s.onload = n, s.onerror = n, a && (s.srcset = a), t && (s.src = t)) : n()
            }, w.preloadImages = function() {
                function e() {
                    void 0 !== w && null !== w && (void 0 !== w.imagesLoaded && w.imagesLoaded++, w.imagesLoaded === w.imagesToLoad.length && (w.params.updateOnImagesReady && w.update(), w.emit("onImagesReady", w)))
                }
                w.imagesToLoad = w.container.find("img");
                for (var t = 0; t < w.imagesToLoad.length; t++) w.loadImage(w.imagesToLoad[t], w.imagesToLoad[t].currentSrc || w.imagesToLoad[t].getAttribute("src"), w.imagesToLoad[t].srcset || w.imagesToLoad[t].getAttribute("srcset"), !0, e)
            }, w.autoplayTimeoutId = void 0, w.autoplaying = !1, w.autoplayPaused = !1, w.startAutoplay = function() {
                return void 0 === w.autoplayTimeoutId && (!!w.params.autoplay && (!w.autoplaying && (w.autoplaying = !0, w.emit("onAutoplayStart", w), void n())))
            }, w.stopAutoplay = function(e) {
                w.autoplayTimeoutId && (w.autoplayTimeoutId && clearTimeout(w.autoplayTimeoutId), w.autoplaying = !1, w.autoplayTimeoutId = void 0, w.emit("onAutoplayStop", w))
            }, w.pauseAutoplay = function(e) {
                w.autoplayPaused || (w.autoplayTimeoutId && clearTimeout(w.autoplayTimeoutId), w.autoplayPaused = !0, 0 === e ? (w.autoplayPaused = !1, n()) : w.wrapper.transitionEnd(function() {
                    w && (w.autoplayPaused = !1, w.autoplaying ? n() : w.stopAutoplay())
                }))
            }, w.minTranslate = function() {
                return -w.snapGrid[0]
            }, w.maxTranslate = function() {
                return -w.snapGrid[w.snapGrid.length - 1]
            }, w.updateAutoHeight = function() {
                var e = w.slides.eq(w.activeIndex)[0];
                if (void 0 !== e) {
                    var t = e.offsetHeight;
                    t && w.wrapper.css("height", t + "px")
                }
            }, w.updateContainerSize = function() {
                var e, t;
                e = void 0 !== w.params.width ? w.params.width : w.container[0].clientWidth, t = void 0 !== w.params.height ? w.params.height : w.container[0].clientHeight, 0 === e && w.isHorizontal() || 0 === t && !w.isHorizontal() || (e = e - parseInt(w.container.css("padding-left"), 10) - parseInt(w.container.css("padding-right"), 10), t = t - parseInt(w.container.css("padding-top"), 10) - parseInt(w.container.css("padding-bottom"), 10), w.width = e, w.height = t, w.size = w.isHorizontal() ? w.width : w.height)
            }, w.updateSlidesSize = function() {
                w.slides = w.wrapper.children("." + w.params.slideClass), w.snapGrid = [], w.slidesGrid = [], w.slidesSizesGrid = [];
                var e, t = w.params.spaceBetween,
                    a = -w.params.slidesOffsetBefore,
                    i = 0,
                    n = 0;
                if (void 0 !== w.size) {
                    "string" == typeof t && t.indexOf("%") >= 0 && (t = parseFloat(t.replace("%", "")) / 100 * w.size), w.virtualSize = -t, w.rtl ? w.slides.css({
                        marginLeft: "",
                        marginTop: ""
                    }) : w.slides.css({
                        marginRight: "",
                        marginBottom: ""
                    });
                    var s;
                    w.params.slidesPerColumn > 1 && (s = Math.floor(w.slides.length / w.params.slidesPerColumn) === w.slides.length / w.params.slidesPerColumn ? w.slides.length : Math.ceil(w.slides.length / w.params.slidesPerColumn) * w.params.slidesPerColumn, "auto" !== w.params.slidesPerView && "row" === w.params.slidesPerColumnFill && (s = Math.max(s, w.params.slidesPerView * w.params.slidesPerColumn)));
                    var o, l = w.params.slidesPerColumn,
                        d = s / l,
                        c = d - (w.params.slidesPerColumn * d - w.slides.length);
                    for (e = 0; e < w.slides.length; e++) {
                        o = 0;
                        var u = w.slides.eq(e);
                        if (w.params.slidesPerColumn > 1) {
                            var p, f, h;
                            "column" === w.params.slidesPerColumnFill ? (f = Math.floor(e / l), h = e - f * l, (f > c || f === c && h === l - 1) && ++h >= l && (h = 0, f++), p = f + h * s / l, u.css({
                                "-webkit-box-ordinal-group": p,
                                "-moz-box-ordinal-group": p,
                                "-ms-flex-order": p,
                                "-webkit-order": p,
                                order: p
                            })) : (h = Math.floor(e / d), f = e - h * d), u.css({
                                "margin-top": 0 !== h && w.params.spaceBetween && w.params.spaceBetween + "px"
                            }).attr("data-swiper-column", f).attr("data-swiper-row", h)
                        }
                        "none" !== u.css("display") && ("auto" === w.params.slidesPerView ? (o = w.isHorizontal() ? u.outerWidth(!0) : u.outerHeight(!0), w.params.roundLengths && (o = r(o))) : (o = (w.size - (w.params.slidesPerView - 1) * t) / w.params.slidesPerView, w.params.roundLengths && (o = r(o)), w.isHorizontal() ? w.slides[e].style.width = o + "px" : w.slides[e].style.height = o + "px"), w.slides[e].swiperSlideSize = o, w.slidesSizesGrid.push(o), w.params.centeredSlides ? (a = a + o / 2 + i / 2 + t, 0 === e && (a = a - w.size / 2 - t), Math.abs(a) < .001 && (a = 0), n % w.params.slidesPerGroup == 0 && w.snapGrid.push(a), w.slidesGrid.push(a)) : (n % w.params.slidesPerGroup == 0 && w.snapGrid.push(a), w.slidesGrid.push(a), a = a + o + t), w.virtualSize += o + t, i = o, n++)
                    }
                    w.virtualSize = Math.max(w.virtualSize, w.size) + w.params.slidesOffsetAfter;
                    var v;
                    if (w.rtl && w.wrongRTL && ("slide" === w.params.effect || "coverflow" === w.params.effect) && w.wrapper.css({
                            width: w.virtualSize + w.params.spaceBetween + "px"
                        }), w.support.flexbox && !w.params.setWrapperSize || (w.isHorizontal() ? w.wrapper.css({
                            width: w.virtualSize + w.params.spaceBetween + "px"
                        }) : w.wrapper.css({
                            height: w.virtualSize + w.params.spaceBetween + "px"
                        })), w.params.slidesPerColumn > 1 && (w.virtualSize = (o + w.params.spaceBetween) * s, w.virtualSize = Math.ceil(w.virtualSize / w.params.slidesPerColumn) - w.params.spaceBetween, w.wrapper.css({
                            width: w.virtualSize + w.params.spaceBetween + "px"
                        }), w.params.centeredSlides)) {
                        for (v = [], e = 0; e < w.snapGrid.length; e++) w.snapGrid[e] < w.virtualSize + w.snapGrid[0] && v.push(w.snapGrid[e]);
                        w.snapGrid = v
                    }
                    if (!w.params.centeredSlides) {
                        for (v = [], e = 0; e < w.snapGrid.length; e++) w.snapGrid[e] <= w.virtualSize - w.size && v.push(w.snapGrid[e]);
                        w.snapGrid = v, Math.floor(w.virtualSize - w.size) - Math.floor(w.snapGrid[w.snapGrid.length - 1]) > 1 && w.snapGrid.push(w.virtualSize - w.size)
                    }
                    0 === w.snapGrid.length && (w.snapGrid = [0]), 0 !== w.params.spaceBetween && (w.isHorizontal() ? w.rtl ? w.slides.css({
                        marginLeft: t + "px"
                    }) : w.slides.css({
                        marginRight: t + "px"
                    }) : w.slides.css({
                        marginBottom: t + "px"
                    })), w.params.watchSlidesProgress && w.updateSlidesOffset()
                }
            }, w.updateSlidesOffset = function() {
                for (var e = 0; e < w.slides.length; e++) w.slides[e].swiperSlideOffset = w.isHorizontal() ? w.slides[e].offsetLeft : w.slides[e].offsetTop
            }, w.updateSlidesProgress = function(e) {
                if (void 0 === e && (e = w.translate || 0), 0 !== w.slides.length) {
                    void 0 === w.slides[0].swiperSlideOffset && w.updateSlidesOffset();
                    var t = -e;
                    w.rtl && (t = e), w.slides.removeClass(w.params.slideVisibleClass);
                    for (var a = 0; a < w.slides.length; a++) {
                        var i = w.slides[a],
                            r = (t - i.swiperSlideOffset) / (i.swiperSlideSize + w.params.spaceBetween);
                        if (w.params.watchSlidesVisibility) {
                            var n = -(t - i.swiperSlideOffset),
                                s = n + w.slidesSizesGrid[a];
                            (n >= 0 && n < w.size || s > 0 && s <= w.size || n <= 0 && s >= w.size) && w.slides.eq(a).addClass(w.params.slideVisibleClass)
                        }
                        i.progress = w.rtl ? -r : r
                    }
                }
            }, w.updateProgress = function(e) {
                void 0 === e && (e = w.translate || 0);
                var t = w.maxTranslate() - w.minTranslate(),
                    a = w.isBeginning,
                    i = w.isEnd;
                0 === t ? (w.progress = 0, w.isBeginning = w.isEnd = !0) : (w.progress = (e - w.minTranslate()) / t, w.isBeginning = w.progress <= 0, w.isEnd = w.progress >= 1), w.isBeginning && !a && w.emit("onReachBeginning", w), w.isEnd && !i && w.emit("onReachEnd", w), w.params.watchSlidesProgress && w.updateSlidesProgress(e), w.emit("onProgress", w, w.progress)
            }, w.updateActiveIndex = function() {
                var e, t, a, i = w.rtl ? w.translate : -w.translate;
                for (t = 0; t < w.slidesGrid.length; t++) void 0 !== w.slidesGrid[t + 1] ? i >= w.slidesGrid[t] && i < w.slidesGrid[t + 1] - (w.slidesGrid[t + 1] - w.slidesGrid[t]) / 2 ? e = t : i >= w.slidesGrid[t] && i < w.slidesGrid[t + 1] && (e = t + 1) : i >= w.slidesGrid[t] && (e = t);
                (e < 0 || void 0 === e) && (e = 0), a = Math.floor(e / w.params.slidesPerGroup), a >= w.snapGrid.length && (a = w.snapGrid.length - 1), e !== w.activeIndex && (w.snapIndex = a, w.previousIndex = w.activeIndex, w.activeIndex = e, w.updateClasses())
            }, w.updateClasses = function() {
                w.slides.removeClass(w.params.slideActiveClass + " " + w.params.slideNextClass + " " + w.params.slidePrevClass);
                var t = w.slides.eq(w.activeIndex);
                t.addClass(w.params.slideActiveClass);
                var a = t.next("." + w.params.slideClass).addClass(w.params.slideNextClass);
                w.params.loop && 0 === a.length && w.slides.eq(0).addClass(w.params.slideNextClass);
                var i = t.prev("." + w.params.slideClass).addClass(w.params.slidePrevClass);
                if (w.params.loop && 0 === i.length && w.slides.eq(-1).addClass(w.params.slidePrevClass), w.paginationContainer && w.paginationContainer.length > 0) {
                    var r, n = w.params.loop ? Math.ceil((w.slides.length - 2 * w.loopedSlides) / w.params.slidesPerGroup) : w.snapGrid.length;
                    if (w.params.loop ? (r = Math.ceil((w.activeIndex - w.loopedSlides) / w.params.slidesPerGroup), r > w.slides.length - 1 - 2 * w.loopedSlides && (r -= w.slides.length - 2 * w.loopedSlides), r > n - 1 && (r -= n), r < 0 && "bullets" !== w.params.paginationType && (r = n + r)) : r = void 0 !== w.snapIndex ? w.snapIndex : w.activeIndex || 0, "bullets" === w.params.paginationType && w.bullets && w.bullets.length > 0 && (w.bullets.removeClass(w.params.bulletActiveClass), w.paginationContainer.length > 1 ? w.bullets.each(function() {
                            e(this).index() === r && e(this).addClass(w.params.bulletActiveClass)
                        }) : w.bullets.eq(r).addClass(w.params.bulletActiveClass)), "fraction" === w.params.paginationType && (w.paginationContainer.find("." + w.params.paginationCurrentClass).text(r + 1), w.paginationContainer.find("." + w.params.paginationTotalClass).text(n)), "progress" === w.params.paginationType) {
                        var s = (r + 1) / n,
                            o = s,
                            l = 1;
                        w.isHorizontal() || (l = s, o = 1), w.paginationContainer.find("." + w.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX(" + o + ") scaleY(" + l + ")").transition(w.params.speed)
                    }
                    "custom" === w.params.paginationType && w.params.paginationCustomRender && (w.paginationContainer.html(w.params.paginationCustomRender(w, r + 1, n)), w.emit("onPaginationRendered", w, w.paginationContainer[0]))
                }
                w.params.loop || (w.params.prevButton && w.prevButton && w.prevButton.length > 0 && (w.isBeginning ? (w.prevButton.addClass(w.params.buttonDisabledClass), w.params.a11y && w.a11y && w.a11y.disable(w.prevButton)) : (w.prevButton.removeClass(w.params.buttonDisabledClass), w.params.a11y && w.a11y && w.a11y.enable(w.prevButton))), w.params.nextButton && w.nextButton && w.nextButton.length > 0 && (w.isEnd ? (w.nextButton.addClass(w.params.buttonDisabledClass), w.params.a11y && w.a11y && w.a11y.disable(w.nextButton)) : (w.nextButton.removeClass(w.params.buttonDisabledClass), w.params.a11y && w.a11y && w.a11y.enable(w.nextButton))))
            }, w.updatePagination = function() {
                if (w.params.pagination && w.paginationContainer && w.paginationContainer.length > 0) {
                    var e = "";
                    if ("bullets" === w.params.paginationType) {
                        for (var t = w.params.loop ? Math.ceil((w.slides.length - 2 * w.loopedSlides) / w.params.slidesPerGroup) : w.snapGrid.length, a = 0; a < t; a++) w.params.paginationBulletRender ? e += w.params.paginationBulletRender(a, w.params.bulletClass) : e += "<" + w.params.paginationElement + ' class="' + w.params.bulletClass + '"></' + w.params.paginationElement + ">";
                        w.paginationContainer.html(e), w.bullets = w.paginationContainer.find("." + w.params.bulletClass), w.params.paginationClickable && w.params.a11y && w.a11y && w.a11y.initPagination()
                    }
                    "fraction" === w.params.paginationType && (e = w.params.paginationFractionRender ? w.params.paginationFractionRender(w, w.params.paginationCurrentClass, w.params.paginationTotalClass) : '<span class="' + w.params.paginationCurrentClass + '"></span> / <span class="' + w.params.paginationTotalClass + '"></span>', w.paginationContainer.html(e)), "progress" === w.params.paginationType && (e = w.params.paginationProgressRender ? w.params.paginationProgressRender(w, w.params.paginationProgressbarClass) : '<span class="' + w.params.paginationProgressbarClass + '"></span>', w.paginationContainer.html(e)), "custom" !== w.params.paginationType && w.emit("onPaginationRendered", w, w.paginationContainer[0])
                }
            }, w.update = function(e) {
                function t() {
                    a = Math.min(Math.max(w.translate, w.maxTranslate()), w.minTranslate()), w.setWrapperTranslate(a), w.updateActiveIndex(), w.updateClasses()
                }
                if (w.updateContainerSize(), w.updateSlidesSize(), w.updateProgress(), w.updatePagination(), w.updateClasses(), w.params.scrollbar && w.scrollbar && w.scrollbar.set(), e) {
                    var a;
                    w.controller && w.controller.spline && (w.controller.spline = void 0), w.params.freeMode ? (t(), w.params.autoHeight && w.updateAutoHeight()) : (("auto" === w.params.slidesPerView || w.params.slidesPerView > 1) && w.isEnd && !w.params.centeredSlides ? w.slideTo(w.slides.length - 1, 0, !1, !0) : w.slideTo(w.activeIndex, 0, !1, !0)) || t()
                } else w.params.autoHeight && w.updateAutoHeight()
            }, w.onResize = function(e) {
                w.params.breakpoints && w.setBreakpoint();
                var t = w.params.allowSwipeToPrev,
                    a = w.params.allowSwipeToNext;
                w.params.allowSwipeToPrev = w.params.allowSwipeToNext = !0, w.updateContainerSize(), w.updateSlidesSize(), ("auto" === w.params.slidesPerView || w.params.freeMode || e) && w.updatePagination(), w.params.scrollbar && w.scrollbar && w.scrollbar.set(), w.controller && w.controller.spline && (w.controller.spline = void 0);
                var i = !1;
                if (w.params.freeMode) {
                    var r = Math.min(Math.max(w.translate, w.maxTranslate()), w.minTranslate());
                    w.setWrapperTranslate(r), w.updateActiveIndex(), w.updateClasses(), w.params.autoHeight && w.updateAutoHeight()
                } else w.updateClasses(), i = ("auto" === w.params.slidesPerView || w.params.slidesPerView > 1) && w.isEnd && !w.params.centeredSlides ? w.slideTo(w.slides.length - 1, 0, !1, !0) : w.slideTo(w.activeIndex, 0, !1, !0);
                w.params.lazyLoading && !i && w.lazy && w.lazy.load(), w.params.allowSwipeToPrev = t, w.params.allowSwipeToNext = a
            };
            var x = ["mousedown", "mousemove", "mouseup"];
            window.navigator.pointerEnabled ? x = ["pointerdown", "pointermove", "pointerup"] : window.navigator.msPointerEnabled && (x = ["MSPointerDown", "MSPointerMove", "MSPointerUp"]), w.touchEvents = {
                start: w.support.touch || !w.params.simulateTouch ? "touchstart" : x[0],
                move: w.support.touch || !w.params.simulateTouch ? "touchmove" : x[1],
                end: w.support.touch || !w.params.simulateTouch ? "touchend" : x[2]
            }, (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) && ("container" === w.params.touchEventsTarget ? w.container : w.wrapper).addClass("swiper-wp8-" + w.params.direction), w.initEvents = function(e) {
                var t = e ? "off" : "on",
                    a = e ? "removeEventListener" : "addEventListener",
                    r = "container" === w.params.touchEventsTarget ? w.container[0] : w.wrapper[0],
                    n = w.support.touch ? r : document,
                    s = !!w.params.nested;
                w.browser.ie ? (r[a](w.touchEvents.start, w.onTouchStart, !1), n[a](w.touchEvents.move, w.onTouchMove, s), n[a](w.touchEvents.end, w.onTouchEnd, !1)) : (w.support.touch && (r[a](w.touchEvents.start, w.onTouchStart, !1), r[a](w.touchEvents.move, w.onTouchMove, s), r[a](w.touchEvents.end, w.onTouchEnd, !1)), !i.simulateTouch || w.device.ios || w.device.android || (r[a]("mousedown", w.onTouchStart, !1), document[a]("mousemove", w.onTouchMove, s), document[a]("mouseup", w.onTouchEnd, !1))), window[a]("resize", w.onResize), w.params.nextButton && w.nextButton && w.nextButton.length > 0 && (w.nextButton[t]("click", w.onClickNext), w.params.a11y && w.a11y && w.nextButton[t]("keydown", w.a11y.onEnterKey)), w.params.prevButton && w.prevButton && w.prevButton.length > 0 && (w.prevButton[t]("click", w.onClickPrev), w.params.a11y && w.a11y && w.prevButton[t]("keydown", w.a11y.onEnterKey)), w.params.pagination && w.params.paginationClickable && (w.paginationContainer[t]("click", "." + w.params.bulletClass, w.onClickIndex), w.params.a11y && w.a11y && w.paginationContainer[t]("keydown", "." + w.params.bulletClass, w.a11y.onEnterKey)), (w.params.preventClicks || w.params.preventClicksPropagation) && r[a]("click", w.preventClicks, !0)
            }, w.attachEvents = function() {
                w.initEvents()
            }, w.detachEvents = function() {
                w.initEvents(!0)
            }, w.allowClick = !0, w.preventClicks = function(e) {
                w.allowClick || (w.params.preventClicks && e.preventDefault(), w.params.preventClicksPropagation && w.animating && (e.stopPropagation(), e.stopImmediatePropagation()))
            }, w.onClickNext = function(e) {
                e.preventDefault(), w.isEnd && !w.params.loop || w.slideNext()
            }, w.onClickPrev = function(e) {
                e.preventDefault(), w.isBeginning && !w.params.loop || w.slidePrev()
            }, w.onClickIndex = function(t) {
                t.preventDefault();
                var a = e(this).index() * w.params.slidesPerGroup;
                w.params.loop && (a += w.loopedSlides), w.slideTo(a)
            }, w.updateClickedSlide = function(t) {
                var a = s(t, "." + w.params.slideClass),
                    i = !1;
                if (a)
                    for (var r = 0; r < w.slides.length; r++) w.slides[r] === a && (i = !0);
                if (!a || !i) return w.clickedSlide = void 0, void(w.clickedIndex = void 0);
                if (w.clickedSlide = a, w.clickedIndex = e(a).index(), w.params.slideToClickedSlide && void 0 !== w.clickedIndex && w.clickedIndex !== w.activeIndex) {
                    var n, o = w.clickedIndex;
                    if (w.params.loop) {
                        if (w.animating) return;
                        n = e(w.clickedSlide).attr("data-swiper-slide-index"), w.params.centeredSlides ? o < w.loopedSlides - w.params.slidesPerView / 2 || o > w.slides.length - w.loopedSlides + w.params.slidesPerView / 2 ? (w.fixLoop(), o = w.wrapper.children("." + w.params.slideClass + '[data-swiper-slide-index="' + n + '"]:not(.swiper-slide-duplicate)').eq(0).index(), setTimeout(function() {
                            w.slideTo(o)
                        }, 0)) : w.slideTo(o) : o > w.slides.length - w.params.slidesPerView ? (w.fixLoop(), o = w.wrapper.children("." + w.params.slideClass + '[data-swiper-slide-index="' + n + '"]:not(.swiper-slide-duplicate)').eq(0).index(), setTimeout(function() {
                            w.slideTo(o)
                        }, 0)) : w.slideTo(o)
                    } else w.slideTo(o)
                }
            };
            var _, k, C, $, T, D, S, M, F, E, P = "input, select, textarea, button",
                I = Date.now(),
                A = [];
            w.animating = !1, w.touches = {
                startX: 0,
                startY: 0,
                currentX: 0,
                currentY: 0,
                diff: 0
            };
            var N, z;
            if (w.onTouchStart = function(t) {
                    if (t.originalEvent && (t = t.originalEvent), (N = "touchstart" === t.type) || !("which" in t) || 3 !== t.which) {
                        if (w.params.noSwiping && s(t, "." + w.params.noSwipingClass)) return void(w.allowClick = !0);
                        if (!w.params.swipeHandler || s(t, w.params.swipeHandler)) {
                            var a = w.touches.currentX = "touchstart" === t.type ? t.targetTouches[0].pageX : t.pageX,
                                i = w.touches.currentY = "touchstart" === t.type ? t.targetTouches[0].pageY : t.pageY;
                            if (!(w.device.ios && w.params.iOSEdgeSwipeDetection && a <= w.params.iOSEdgeSwipeThreshold)) {
                                if (_ = !0, k = !1, C = !0, T = void 0, z = void 0, w.touches.startX = a, w.touches.startY = i, $ = Date.now(), w.allowClick = !0, w.updateContainerSize(), w.swipeDirection = void 0, w.params.threshold > 0 && (M = !1), "touchstart" !== t.type) {
                                    var r = !0;
                                    e(t.target).is(P) && (r = !1), document.activeElement && e(document.activeElement).is(P) && document.activeElement.blur(), r && t.preventDefault()
                                }
                                w.emit("onTouchStart", w, t)
                            }
                        }
                    }
                }, w.onTouchMove = function(t) {
                    if (t.originalEvent && (t = t.originalEvent), !N || "mousemove" !== t.type) {
                        if (t.preventedByNestedSwiper) return w.touches.startX = "touchmove" === t.type ? t.targetTouches[0].pageX : t.pageX, void(w.touches.startY = "touchmove" === t.type ? t.targetTouches[0].pageY : t.pageY);
                        if (w.params.onlyExternal) return w.allowClick = !1, void(_ && (w.touches.startX = w.touches.currentX = "touchmove" === t.type ? t.targetTouches[0].pageX : t.pageX, w.touches.startY = w.touches.currentY = "touchmove" === t.type ? t.targetTouches[0].pageY : t.pageY, $ = Date.now()));
                        if (N && document.activeElement && t.target === document.activeElement && e(t.target).is(P)) return k = !0, void(w.allowClick = !1);
                        if (C && w.emit("onTouchMove", w, t), !(t.targetTouches && t.targetTouches.length > 1)) {
                            if (w.touches.currentX = "touchmove" === t.type ? t.targetTouches[0].pageX : t.pageX, w.touches.currentY = "touchmove" === t.type ? t.targetTouches[0].pageY : t.pageY, void 0 === T) {
                                var a = 180 * Math.atan2(Math.abs(w.touches.currentY - w.touches.startY), Math.abs(w.touches.currentX - w.touches.startX)) / Math.PI;
                                T = w.isHorizontal() ? a > w.params.touchAngle : 90 - a > w.params.touchAngle
                            }
                            if (T && w.emit("onTouchMoveOpposite", w, t), void 0 === z && w.browser.ieTouch && (w.touches.currentX === w.touches.startX && w.touches.currentY === w.touches.startY || (z = !0)), _) {
                                if (T) return void(_ = !1);
                                if (z || !w.browser.ieTouch) {
                                    w.allowClick = !1, w.emit("onSliderMove", w, t), t.preventDefault(), w.params.touchMoveStopPropagation && !w.params.nested && t.stopPropagation(), k || (i.loop && w.fixLoop(), S = w.getWrapperTranslate(), w.setWrapperTransition(0),
                                        w.animating && w.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"), w.params.autoplay && w.autoplaying && (w.params.autoplayDisableOnInteraction ? w.stopAutoplay() : w.pauseAutoplay()), E = !1, w.params.grabCursor && (w.container[0].style.cursor = "move", w.container[0].style.cursor = "-webkit-grabbing", w.container[0].style.cursor = "-moz-grabbin", w.container[0].style.cursor = "grabbing")), k = !0;
                                    var r = w.touches.diff = w.isHorizontal() ? w.touches.currentX - w.touches.startX : w.touches.currentY - w.touches.startY;
                                    r *= w.params.touchRatio, w.rtl && (r = -r), w.swipeDirection = r > 0 ? "prev" : "next", D = r + S;
                                    var n = !0;
                                    if (r > 0 && D > w.minTranslate() ? (n = !1, w.params.resistance && (D = w.minTranslate() - 1 + Math.pow(-w.minTranslate() + S + r, w.params.resistanceRatio))) : r < 0 && D < w.maxTranslate() && (n = !1, w.params.resistance && (D = w.maxTranslate() + 1 - Math.pow(w.maxTranslate() - S - r, w.params.resistanceRatio))), n && (t.preventedByNestedSwiper = !0), !w.params.allowSwipeToNext && "next" === w.swipeDirection && D < S && (D = S), !w.params.allowSwipeToPrev && "prev" === w.swipeDirection && D > S && (D = S), w.params.followFinger) {
                                        if (w.params.threshold > 0) {
                                            if (!(Math.abs(r) > w.params.threshold || M)) return void(D = S);
                                            if (!M) return M = !0, w.touches.startX = w.touches.currentX, w.touches.startY = w.touches.currentY, D = S, void(w.touches.diff = w.isHorizontal() ? w.touches.currentX - w.touches.startX : w.touches.currentY - w.touches.startY)
                                        }(w.params.freeMode || w.params.watchSlidesProgress) && w.updateActiveIndex(), w.params.freeMode && (0 === A.length && A.push({
                                            position: w.touches[w.isHorizontal() ? "startX" : "startY"],
                                            time: $
                                        }), A.push({
                                            position: w.touches[w.isHorizontal() ? "currentX" : "currentY"],
                                            time: (new window.Date).getTime()
                                        })), w.updateProgress(D), w.setWrapperTranslate(D)
                                    }
                                }
                            }
                        }
                    }
                }, w.onTouchEnd = function(t) {
                    if (t.originalEvent && (t = t.originalEvent), C && w.emit("onTouchEnd", w, t), C = !1, _) {
                        w.params.grabCursor && k && _ && (w.container[0].style.cursor = "move", w.container[0].style.cursor = "-webkit-grab", w.container[0].style.cursor = "-moz-grab", w.container[0].style.cursor = "grab");
                        var a = Date.now(),
                            i = a - $;
                        if (w.allowClick && (w.updateClickedSlide(t), w.emit("onTap", w, t), i < 300 && a - I > 300 && (F && clearTimeout(F), F = setTimeout(function() {
                                w && (w.params.paginationHide && w.paginationContainer.length > 0 && !e(t.target).hasClass(w.params.bulletClass) && w.paginationContainer.toggleClass(w.params.paginationHiddenClass), w.emit("onClick", w, t))
                            }, 300)), i < 300 && a - I < 300 && (F && clearTimeout(F), w.emit("onDoubleTap", w, t))), I = Date.now(), setTimeout(function() {
                                w && (w.allowClick = !0)
                            }, 0), !_ || !k || !w.swipeDirection || 0 === w.touches.diff || D === S) return void(_ = k = !1);
                        _ = k = !1;
                        var r;
                        if (r = w.params.followFinger ? w.rtl ? w.translate : -w.translate : -D, w.params.freeMode) {
                            if (r < -w.minTranslate()) return void w.slideTo(w.activeIndex);
                            if (r > -w.maxTranslate()) return void(w.slides.length < w.snapGrid.length ? w.slideTo(w.snapGrid.length - 1) : w.slideTo(w.slides.length - 1));
                            if (w.params.freeModeMomentum) {
                                if (A.length > 1) {
                                    var n = A.pop(),
                                        s = A.pop(),
                                        o = n.position - s.position,
                                        l = n.time - s.time;
                                    w.velocity = o / l, w.velocity = w.velocity / 2, Math.abs(w.velocity) < w.params.freeModeMinimumVelocity && (w.velocity = 0), (l > 150 || (new window.Date).getTime() - n.time > 300) && (w.velocity = 0)
                                } else w.velocity = 0;
                                A.length = 0;
                                var d = 1e3 * w.params.freeModeMomentumRatio,
                                    c = w.velocity * d,
                                    u = w.translate + c;
                                w.rtl && (u = -u);
                                var p, f = !1,
                                    h = 20 * Math.abs(w.velocity) * w.params.freeModeMomentumBounceRatio;
                                if (u < w.maxTranslate()) w.params.freeModeMomentumBounce ? (u + w.maxTranslate() < -h && (u = w.maxTranslate() - h), p = w.maxTranslate(), f = !0, E = !0) : u = w.maxTranslate();
                                else if (u > w.minTranslate()) w.params.freeModeMomentumBounce ? (u - w.minTranslate() > h && (u = w.minTranslate() + h), p = w.minTranslate(), f = !0, E = !0) : u = w.minTranslate();
                                else if (w.params.freeModeSticky) {
                                    var v, m = 0;
                                    for (m = 0; m < w.snapGrid.length; m += 1)
                                        if (w.snapGrid[m] > -u) {
                                            v = m;
                                            break
                                        }
                                    u = Math.abs(w.snapGrid[v] - u) < Math.abs(w.snapGrid[v - 1] - u) || "next" === w.swipeDirection ? w.snapGrid[v] : w.snapGrid[v - 1], w.rtl || (u = -u)
                                }
                                if (0 !== w.velocity) d = w.rtl ? Math.abs((-u - w.translate) / w.velocity) : Math.abs((u - w.translate) / w.velocity);
                                else if (w.params.freeModeSticky) return void w.slideReset();
                                w.params.freeModeMomentumBounce && f ? (w.updateProgress(p), w.setWrapperTransition(d), w.setWrapperTranslate(u), w.onTransitionStart(), w.animating = !0, w.wrapper.transitionEnd(function() {
                                    w && E && (w.emit("onMomentumBounce", w), w.setWrapperTransition(w.params.speed), w.setWrapperTranslate(p), w.wrapper.transitionEnd(function() {
                                        w && w.onTransitionEnd()
                                    }))
                                })) : w.velocity ? (w.updateProgress(u), w.setWrapperTransition(d), w.setWrapperTranslate(u), w.onTransitionStart(), w.animating || (w.animating = !0, w.wrapper.transitionEnd(function() {
                                    w && w.onTransitionEnd()
                                }))) : w.updateProgress(u), w.updateActiveIndex()
                            }
                            return void((!w.params.freeModeMomentum || i >= w.params.longSwipesMs) && (w.updateProgress(), w.updateActiveIndex()))
                        }
                        var g, y = 0,
                            b = w.slidesSizesGrid[0];
                        for (g = 0; g < w.slidesGrid.length; g += w.params.slidesPerGroup) void 0 !== w.slidesGrid[g + w.params.slidesPerGroup] ? r >= w.slidesGrid[g] && r < w.slidesGrid[g + w.params.slidesPerGroup] && (y = g, b = w.slidesGrid[g + w.params.slidesPerGroup] - w.slidesGrid[g]) : r >= w.slidesGrid[g] && (y = g, b = w.slidesGrid[w.slidesGrid.length - 1] - w.slidesGrid[w.slidesGrid.length - 2]);
                        var x = (r - w.slidesGrid[y]) / b;
                        if (i > w.params.longSwipesMs) {
                            if (!w.params.longSwipes) return void w.slideTo(w.activeIndex);
                            "next" === w.swipeDirection && (x >= w.params.longSwipesRatio ? w.slideTo(y + w.params.slidesPerGroup) : w.slideTo(y)), "prev" === w.swipeDirection && (x > 1 - w.params.longSwipesRatio ? w.slideTo(y + w.params.slidesPerGroup) : w.slideTo(y))
                        } else {
                            if (!w.params.shortSwipes) return void w.slideTo(w.activeIndex);
                            "next" === w.swipeDirection && w.slideTo(y + w.params.slidesPerGroup), "prev" === w.swipeDirection && w.slideTo(y)
                        }
                    }
                }, w._slideTo = function(e, t) {
                    return w.slideTo(e, t, !0, !0)
                }, w.slideTo = function(e, t, a, i) {
                    void 0 === a && (a = !0), void 0 === e && (e = 0), e < 0 && (e = 0), w.snapIndex = Math.floor(e / w.params.slidesPerGroup), w.snapIndex >= w.snapGrid.length && (w.snapIndex = w.snapGrid.length - 1);
                    var r = -w.snapGrid[w.snapIndex];
                    w.params.autoplay && w.autoplaying && (i || !w.params.autoplayDisableOnInteraction ? w.pauseAutoplay(t) : w.stopAutoplay()), w.updateProgress(r);
                    for (var n = 0; n < w.slidesGrid.length; n++) - Math.floor(100 * r) >= Math.floor(100 * w.slidesGrid[n]) && (e = n);
                    return !(!w.params.allowSwipeToNext && r < w.translate && r < w.minTranslate()) && (!(!w.params.allowSwipeToPrev && r > w.translate && r > w.maxTranslate() && (w.activeIndex || 0) !== e) && (void 0 === t && (t = w.params.speed), w.previousIndex = w.activeIndex || 0, w.activeIndex = e, w.rtl && -r === w.translate || !w.rtl && r === w.translate ? (w.params.autoHeight && w.updateAutoHeight(), w.updateClasses(), "slide" !== w.params.effect && w.setWrapperTranslate(r), !1) : (w.updateClasses(), w.onTransitionStart(a), 0 === t ? (w.setWrapperTranslate(r), w.setWrapperTransition(0), w.onTransitionEnd(a)) : (w.setWrapperTranslate(r), w.setWrapperTransition(t), w.animating || (w.animating = !0, w.wrapper.transitionEnd(function() {
                        w && w.onTransitionEnd(a)
                    }))), !0)))
                }, w.onTransitionStart = function(e) {
                    void 0 === e && (e = !0), w.params.autoHeight && w.updateAutoHeight(), w.lazy && w.lazy.onTransitionStart(), e && (w.emit("onTransitionStart", w), w.activeIndex !== w.previousIndex && (w.emit("onSlideChangeStart", w), w.activeIndex > w.previousIndex ? w.emit("onSlideNextStart", w) : w.emit("onSlidePrevStart", w)))
                }, w.onTransitionEnd = function(e) {
                    w.animating = !1, w.setWrapperTransition(0), void 0 === e && (e = !0), w.lazy && w.lazy.onTransitionEnd(), e && (w.emit("onTransitionEnd", w), w.activeIndex !== w.previousIndex && (w.emit("onSlideChangeEnd", w), w.activeIndex > w.previousIndex ? w.emit("onSlideNextEnd", w) : w.emit("onSlidePrevEnd", w))), w.params.hashnav && w.hashnav && w.hashnav.setHash()
                }, w.slideNext = function(e, t, a) {
                    if (w.params.loop) {
                        if (w.animating) return !1;
                        w.fixLoop();
                        w.container[0].clientLeft;
                        return w.slideTo(w.activeIndex + w.params.slidesPerGroup, t, e, a)
                    }
                    return w.slideTo(w.activeIndex + w.params.slidesPerGroup, t, e, a)
                }, w._slideNext = function(e) {
                    return w.slideNext(!0, e, !0)
                }, w.slidePrev = function(e, t, a) {
                    if (w.params.loop) {
                        if (w.animating) return !1;
                        w.fixLoop();
                        w.container[0].clientLeft;
                        return w.slideTo(w.activeIndex - 1, t, e, a)
                    }
                    return w.slideTo(w.activeIndex - 1, t, e, a)
                }, w._slidePrev = function(e) {
                    return w.slidePrev(!0, e, !0)
                }, w.slideReset = function(e, t, a) {
                    return w.slideTo(w.activeIndex, t, e)
                }, w.setWrapperTransition = function(e, t) {
                    w.wrapper.transition(e), "slide" !== w.params.effect && w.effects[w.params.effect] && w.effects[w.params.effect].setTransition(e), w.params.parallax && w.parallax && w.parallax.setTransition(e), w.params.scrollbar && w.scrollbar && w.scrollbar.setTransition(e), w.params.control && w.controller && w.controller.setTransition(e, t), w.emit("onSetTransition", w, e)
                }, w.setWrapperTranslate = function(e, t, a) {
                    var i = 0,
                        n = 0;
                    w.isHorizontal() ? i = w.rtl ? -e : e : n = e, w.params.roundLengths && (i = r(i), n = r(n)), w.params.virtualTranslate || (w.support.transforms3d ? w.wrapper.transform("translate3d(" + i + "px, " + n + "px, 0px)") : w.wrapper.transform("translate(" + i + "px, " + n + "px)")), w.translate = w.isHorizontal() ? i : n;
                    var s, o = w.maxTranslate() - w.minTranslate();
                    s = 0 === o ? 0 : (e - w.minTranslate()) / o, s !== w.progress && w.updateProgress(e), t && w.updateActiveIndex(), "slide" !== w.params.effect && w.effects[w.params.effect] && w.effects[w.params.effect].setTranslate(w.translate), w.params.parallax && w.parallax && w.parallax.setTranslate(w.translate), w.params.scrollbar && w.scrollbar && w.scrollbar.setTranslate(w.translate), w.params.control && w.controller && w.controller.setTranslate(w.translate, a), w.emit("onSetTranslate", w, w.translate)
                }, w.getTranslate = function(e, t) {
                    var a, i, r, n;
                    return void 0 === t && (t = "x"), w.params.virtualTranslate ? w.rtl ? -w.translate : w.translate : (r = window.getComputedStyle(e, null), window.WebKitCSSMatrix ? (i = r.transform || r.webkitTransform, i.split(",").length > 6 && (i = i.split(", ").map(function(e) {
                        return e.replace(",", ".")
                    }).join(", ")), n = new window.WebKitCSSMatrix("none" === i ? "" : i)) : (n = r.MozTransform || r.OTransform || r.MsTransform || r.msTransform || r.transform || r.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,"), a = n.toString().split(",")), "x" === t && (i = window.WebKitCSSMatrix ? n.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), "y" === t && (i = window.WebKitCSSMatrix ? n.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), w.rtl && i && (i = -i), i || 0)
                }, w.getWrapperTranslate = function(e) {
                    return void 0 === e && (e = w.isHorizontal() ? "x" : "y"), w.getTranslate(w.wrapper[0], e)
                }, w.observers = [], w.initObservers = function() {
                    if (w.params.observeParents)
                        for (var e = w.container.parents(), t = 0; t < e.length; t++) o(e[t]);
                    o(w.container[0], {
                        childList: !1
                    }), o(w.wrapper[0], {
                        attributes: !1
                    })
                }, w.disconnectObservers = function() {
                    for (var e = 0; e < w.observers.length; e++) w.observers[e].disconnect();
                    w.observers = []
                }, w.createLoop = function() {
                    w.wrapper.children("." + w.params.slideClass + "." + w.params.slideDuplicateClass).remove();
                    var t = w.wrapper.children("." + w.params.slideClass);
                    "auto" !== w.params.slidesPerView || w.params.loopedSlides || (w.params.loopedSlides = t.length), w.loopedSlides = parseInt(w.params.loopedSlides || w.params.slidesPerView, 10), w.loopedSlides = w.loopedSlides + w.params.loopAdditionalSlides, w.loopedSlides > t.length && (w.loopedSlides = t.length);
                    var a, i = [],
                        r = [];
                    for (t.each(function(a, n) {
                            var s = e(this);
                            a < w.loopedSlides && r.push(n), a < t.length && a >= t.length - w.loopedSlides && i.push(n), s.attr("data-swiper-slide-index", a)
                        }), a = 0; a < r.length; a++) w.wrapper.append(e(r[a].cloneNode(!0)).addClass(w.params.slideDuplicateClass));
                    for (a = i.length - 1; a >= 0; a--) w.wrapper.prepend(e(i[a].cloneNode(!0)).addClass(w.params.slideDuplicateClass))
                }, w.destroyLoop = function() {
                    w.wrapper.children("." + w.params.slideClass + "." + w.params.slideDuplicateClass).remove(), w.slides.removeAttr("data-swiper-slide-index")
                }, w.reLoop = function(e) {
                    var t = w.activeIndex - w.loopedSlides;
                    w.destroyLoop(), w.createLoop(), w.updateSlidesSize(), e && w.slideTo(t + w.loopedSlides, 0, !1)
                }, w.fixLoop = function() {
                    var e;
                    w.activeIndex < w.loopedSlides ? (e = w.slides.length - 3 * w.loopedSlides + w.activeIndex, e += w.loopedSlides, w.slideTo(e, 0, !1, !0)) : ("auto" === w.params.slidesPerView && w.activeIndex >= 2 * w.loopedSlides || w.activeIndex > w.slides.length - 2 * w.params.slidesPerView) && (e = -w.slides.length + w.activeIndex + w.loopedSlides, e += w.loopedSlides, w.slideTo(e, 0, !1, !0))
                }, w.appendSlide = function(e) {
                    if (w.params.loop && w.destroyLoop(), "object" == typeof e && e.length)
                        for (var t = 0; t < e.length; t++) e[t] && w.wrapper.append(e[t]);
                    else w.wrapper.append(e);
                    w.params.loop && w.createLoop(), w.params.observer && w.support.observer || w.update(!0)
                }, w.prependSlide = function(e) {
                    w.params.loop && w.destroyLoop();
                    var t = w.activeIndex + 1;
                    if ("object" == typeof e && e.length) {
                        for (var a = 0; a < e.length; a++) e[a] && w.wrapper.prepend(e[a]);
                        t = w.activeIndex + e.length
                    } else w.wrapper.prepend(e);
                    w.params.loop && w.createLoop(), w.params.observer && w.support.observer || w.update(!0), w.slideTo(t, 0, !1)
                }, w.removeSlide = function(e) {
                    w.params.loop && (w.destroyLoop(), w.slides = w.wrapper.children("." + w.params.slideClass));
                    var t, a = w.activeIndex;
                    if ("object" == typeof e && e.length) {
                        for (var i = 0; i < e.length; i++) t = e[i], w.slides[t] && w.slides.eq(t).remove(), t < a && a--;
                        a = Math.max(a, 0)
                    } else t = e, w.slides[t] && w.slides.eq(t).remove(), t < a && a--, a = Math.max(a, 0);
                    w.params.loop && w.createLoop(), w.params.observer && w.support.observer || w.update(!0), w.params.loop ? w.slideTo(a + w.loopedSlides, 0, !1) : w.slideTo(a, 0, !1)
                }, w.removeAllSlides = function() {
                    for (var e = [], t = 0; t < w.slides.length; t++) e.push(t);
                    w.removeSlide(e)
                }, w.effects = {
                    fade: {
                        setTranslate: function() {
                            for (var e = 0; e < w.slides.length; e++) {
                                var t = w.slides.eq(e),
                                    a = t[0].swiperSlideOffset,
                                    i = -a;
                                w.params.virtualTranslate || (i -= w.translate);
                                var r = 0;
                                w.isHorizontal() || (r = i, i = 0);
                                var n = w.params.fade.crossFade ? Math.max(1 - Math.abs(t[0].progress), 0) : 1 + Math.min(Math.max(t[0].progress, -1), 0);
                                t.css({
                                    opacity: n
                                }).transform("translate3d(" + i + "px, " + r + "px, 0px)")
                            }
                        },
                        setTransition: function(e) {
                            if (w.slides.transition(e), w.params.virtualTranslate && 0 !== e) {
                                var t = !1;
                                w.slides.transitionEnd(function() {
                                    if (!t && w) {
                                        t = !0, w.animating = !1;
                                        for (var e = ["webkitTransitionEnd", "transitionend", "oTransitionEnd", "MSTransitionEnd", "msTransitionEnd"], a = 0; a < e.length; a++) w.wrapper.trigger(e[a])
                                    }
                                })
                            }
                        }
                    },
                    flip: {
                        setTranslate: function() {
                            for (var t = 0; t < w.slides.length; t++) {
                                var a = w.slides.eq(t),
                                    i = a[0].progress;
                                w.params.flip.limitRotation && (i = Math.max(Math.min(a[0].progress, 1), -1));
                                var r = a[0].swiperSlideOffset,
                                    n = -180 * i,
                                    s = n,
                                    o = 0,
                                    l = -r,
                                    d = 0;
                                if (w.isHorizontal() ? w.rtl && (s = -s) : (d = l, l = 0, o = -s, s = 0), a[0].style.zIndex = -Math.abs(Math.round(i)) + w.slides.length, w.params.flip.slideShadows) {
                                    var c = w.isHorizontal() ? a.find(".swiper-slide-shadow-left") : a.find(".swiper-slide-shadow-top"),
                                        u = w.isHorizontal() ? a.find(".swiper-slide-shadow-right") : a.find(".swiper-slide-shadow-bottom");
                                    0 === c.length && (c = e('<div class="swiper-slide-shadow-' + (w.isHorizontal() ? "left" : "top") + '"></div>'), a.append(c)), 0 === u.length && (u = e('<div class="swiper-slide-shadow-' + (w.isHorizontal() ? "right" : "bottom") + '"></div>'), a.append(u)), c.length && (c[0].style.opacity = Math.max(-i, 0)), u.length && (u[0].style.opacity = Math.max(i, 0))
                                }
                                a.transform("translate3d(" + l + "px, " + d + "px, 0px) rotateX(" + o + "deg) rotateY(" + s + "deg)")
                            }
                        },
                        setTransition: function(t) {
                            if (w.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t), w.params.virtualTranslate && 0 !== t) {
                                var a = !1;
                                w.slides.eq(w.activeIndex).transitionEnd(function() {
                                    if (!a && w && e(this).hasClass(w.params.slideActiveClass)) {
                                        a = !0, w.animating = !1;
                                        for (var t = ["webkitTransitionEnd", "transitionend", "oTransitionEnd", "MSTransitionEnd", "msTransitionEnd"], i = 0; i < t.length; i++) w.wrapper.trigger(t[i])
                                    }
                                })
                            }
                        }
                    },
                    cube: {
                        setTranslate: function() {
                            var t, a = 0;
                            w.params.cube.shadow && (w.isHorizontal() ? (t = w.wrapper.find(".swiper-cube-shadow"), 0 === t.length && (t = e('<div class="swiper-cube-shadow"></div>'), w.wrapper.append(t)), t.css({
                                height: w.width + "px"
                            })) : (t = w.container.find(".swiper-cube-shadow"), 0 === t.length && (t = e('<div class="swiper-cube-shadow"></div>'), w.container.append(t))));
                            for (var i = 0; i < w.slides.length; i++) {
                                var r = w.slides.eq(i),
                                    n = 90 * i,
                                    s = Math.floor(n / 360);
                                w.rtl && (n = -n, s = Math.floor(-n / 360));
                                var o = Math.max(Math.min(r[0].progress, 1), -1),
                                    l = 0,
                                    d = 0,
                                    c = 0;
                                i % 4 == 0 ? (l = 4 * -s * w.size, c = 0) : (i - 1) % 4 == 0 ? (l = 0, c = 4 * -s * w.size) : (i - 2) % 4 == 0 ? (l = w.size + 4 * s * w.size, c = w.size) : (i - 3) % 4 == 0 && (l = -w.size, c = 3 * w.size + 4 * w.size * s), w.rtl && (l = -l), w.isHorizontal() || (d = l, l = 0);
                                var u = "rotateX(" + (w.isHorizontal() ? 0 : -n) + "deg) rotateY(" + (w.isHorizontal() ? n : 0) + "deg) translate3d(" + l + "px, " + d + "px, " + c + "px)";
                                if (o <= 1 && o > -1 && (a = 90 * i + 90 * o, w.rtl && (a = 90 * -i - 90 * o)), r.transform(u), w.params.cube.slideShadows) {
                                    var p = w.isHorizontal() ? r.find(".swiper-slide-shadow-left") : r.find(".swiper-slide-shadow-top"),
                                        f = w.isHorizontal() ? r.find(".swiper-slide-shadow-right") : r.find(".swiper-slide-shadow-bottom");
                                    0 === p.length && (p = e('<div class="swiper-slide-shadow-' + (w.isHorizontal() ? "left" : "top") + '"></div>'), r.append(p)), 0 === f.length && (f = e('<div class="swiper-slide-shadow-' + (w.isHorizontal() ? "right" : "bottom") + '"></div>'), r.append(f)), p.length && (p[0].style.opacity = Math.max(-o, 0)), f.length && (f[0].style.opacity = Math.max(o, 0))
                                }
                            }
                            if (w.wrapper.css({
                                    "-webkit-transform-origin": "50% 50% -" + w.size / 2 + "px",
                                    "-moz-transform-origin": "50% 50% -" + w.size / 2 + "px",
                                    "-ms-transform-origin": "50% 50% -" + w.size / 2 + "px",
                                    "transform-origin": "50% 50% -" + w.size / 2 + "px"
                                }), w.params.cube.shadow)
                                if (w.isHorizontal()) t.transform("translate3d(0px, " + (w.width / 2 + w.params.cube.shadowOffset) + "px, " + -w.width / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + w.params.cube.shadowScale + ")");
                                else {
                                    var h = Math.abs(a) - 90 * Math.floor(Math.abs(a) / 90),
                                        v = 1.5 - (Math.sin(2 * h * Math.PI / 360) / 2 + Math.cos(2 * h * Math.PI / 360) / 2),
                                        m = w.params.cube.shadowScale,
                                        g = w.params.cube.shadowScale / v,
                                        y = w.params.cube.shadowOffset;
                                    t.transform("scale3d(" + m + ", 1, " + g + ") translate3d(0px, " + (w.height / 2 + y) + "px, " + -w.height / 2 / g + "px) rotateX(-90deg)")
                                }
                            var b = w.isSafari || w.isUiWebView ? -w.size / 2 : 0;
                            w.wrapper.transform("translate3d(0px,0," + b + "px) rotateX(" + (w.isHorizontal() ? 0 : a) + "deg) rotateY(" + (w.isHorizontal() ? -a : 0) + "deg)")
                        },
                        setTransition: function(e) {
                            w.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), w.params.cube.shadow && !w.isHorizontal() && w.container.find(".swiper-cube-shadow").transition(e)
                        }
                    },
                    coverflow: {
                        setTranslate: function() {
                            for (var t = w.translate, a = w.isHorizontal() ? -t + w.width / 2 : -t + w.height / 2, i = w.isHorizontal() ? w.params.coverflow.rotate : -w.params.coverflow.rotate, r = w.params.coverflow.depth, n = 0, s = w.slides.length; n < s; n++) {
                                var o = w.slides.eq(n),
                                    l = w.slidesSizesGrid[n],
                                    d = o[0].swiperSlideOffset,
                                    c = (a - d - l / 2) / l * w.params.coverflow.modifier,
                                    u = w.isHorizontal() ? i * c : 0,
                                    p = w.isHorizontal() ? 0 : i * c,
                                    f = -r * Math.abs(c),
                                    h = w.isHorizontal() ? 0 : w.params.coverflow.stretch * c,
                                    v = w.isHorizontal() ? w.params.coverflow.stretch * c : 0;
                                Math.abs(v) < .001 && (v = 0), Math.abs(h) < .001 && (h = 0), Math.abs(f) < .001 && (f = 0), Math.abs(u) < .001 && (u = 0), Math.abs(p) < .001 && (p = 0);
                                var m = "translate3d(" + v + "px," + h + "px," + f + "px)  rotateX(" + p + "deg) rotateY(" + u + "deg)";
                                if (o.transform(m), o[0].style.zIndex = 1 - Math.abs(Math.round(c)), w.params.coverflow.slideShadows) {
                                    var g = w.isHorizontal() ? o.find(".swiper-slide-shadow-left") : o.find(".swiper-slide-shadow-top"),
                                        y = w.isHorizontal() ? o.find(".swiper-slide-shadow-right") : o.find(".swiper-slide-shadow-bottom");
                                    0 === g.length && (g = e('<div class="swiper-slide-shadow-' + (w.isHorizontal() ? "left" : "top") + '"></div>'), o.append(g)), 0 === y.length && (y = e('<div class="swiper-slide-shadow-' + (w.isHorizontal() ? "right" : "bottom") + '"></div>'), o.append(y)), g.length && (g[0].style.opacity = c > 0 ? c : 0), y.length && (y[0].style.opacity = -c > 0 ? -c : 0)
                                }
                            }
                            if (w.browser.ie) {
                                w.wrapper[0].style.perspectiveOrigin = a + "px 50%"
                            }
                        },
                        setTransition: function(e) {
                            w.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)
                        }
                    }
                }, w.lazy = {
                    initialImageLoaded: !1,
                    loadImageInSlide: function(t, a) {
                        if (void 0 !== t && (void 0 === a && (a = !0), 0 !== w.slides.length)) {
                            var i = w.slides.eq(t),
                                r = i.find(".swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)");
                            !i.hasClass("swiper-lazy") || i.hasClass("swiper-lazy-loaded") || i.hasClass("swiper-lazy-loading") || (r = r.add(i[0])), 0 !== r.length && r.each(function() {
                                var t = e(this);
                                t.addClass("swiper-lazy-loading");
                                var r = t.attr("data-background"),
                                    n = t.attr("data-src"),
                                    s = t.attr("data-srcset");
                                w.loadImage(t[0], n || r, s, !1, function() {
                                    if (r ? (t.css("background-image", 'url("' + r + '")'), t.removeAttr("data-background")) : (s && (t.attr("srcset", s), t.removeAttr("data-srcset")), n && (t.attr("src", n), t.removeAttr("data-src"))), t.addClass("swiper-lazy-loaded").removeClass("swiper-lazy-loading"), i.find(".swiper-lazy-preloader, .preloader").remove(), w.params.loop && a) {
                                        var e = i.attr("data-swiper-slide-index");
                                        if (i.hasClass(w.params.slideDuplicateClass)) {
                                            var o = w.wrapper.children('[data-swiper-slide-index="' + e + '"]:not(.' + w.params.slideDuplicateClass + ")");
                                            w.lazy.loadImageInSlide(o.index(), !1)
                                        } else {
                                            var l = w.wrapper.children("." + w.params.slideDuplicateClass + '[data-swiper-slide-index="' + e + '"]');
                                            w.lazy.loadImageInSlide(l.index(), !1)
                                        }
                                    }
                                    w.emit("onLazyImageReady", w, i[0], t[0])
                                }), w.emit("onLazyImageLoad", w, i[0], t[0])
                            })
                        }
                    },
                    load: function() {
                        var t;
                        if (w.params.watchSlidesVisibility) w.wrapper.children("." + w.params.slideVisibleClass).each(function() {
                            w.lazy.loadImageInSlide(e(this).index())
                        });
                        else if (w.params.slidesPerView > 1)
                            for (t = w.activeIndex; t < w.activeIndex + w.params.slidesPerView; t++) w.slides[t] && w.lazy.loadImageInSlide(t);
                        else w.lazy.loadImageInSlide(w.activeIndex);
                        if (w.params.lazyLoadingInPrevNext)
                            if (w.params.slidesPerView > 1 || w.params.lazyLoadingInPrevNextAmount && w.params.lazyLoadingInPrevNextAmount > 1) {
                                var a = w.params.lazyLoadingInPrevNextAmount,
                                    i = w.params.slidesPerView,
                                    r = Math.min(w.activeIndex + i + Math.max(a, i), w.slides.length),
                                    n = Math.max(w.activeIndex - Math.max(i, a), 0);
                                for (t = w.activeIndex + w.params.slidesPerView; t < r; t++) w.slides[t] && w.lazy.loadImageInSlide(t);
                                for (t = n; t < w.activeIndex; t++) w.slides[t] && w.lazy.loadImageInSlide(t)
                            } else {
                                var s = w.wrapper.children("." + w.params.slideNextClass);
                                s.length > 0 && w.lazy.loadImageInSlide(s.index());
                                var o = w.wrapper.children("." + w.params.slidePrevClass);
                                o.length > 0 && w.lazy.loadImageInSlide(o.index())
                            }
                    },
                    onTransitionStart: function() {
                        w.params.lazyLoading && (w.params.lazyLoadingOnTransitionStart || !w.params.lazyLoadingOnTransitionStart && !w.lazy.initialImageLoaded) && w.lazy.load()
                    },
                    onTransitionEnd: function() {
                        w.params.lazyLoading && !w.params.lazyLoadingOnTransitionStart && w.lazy.load()
                    }
                }, w.scrollbar = {
                    isTouched: !1,
                    setDragPosition: function(e) {
                        var t = w.scrollbar,
                            a = w.isHorizontal() ? "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX || e.clientX : "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY || e.clientY,
                            i = a - t.track.offset()[w.isHorizontal() ? "left" : "top"] - t.dragSize / 2,
                            r = -w.minTranslate() * t.moveDivider,
                            n = -w.maxTranslate() * t.moveDivider;
                        i < r ? i = r : i > n && (i = n), i = -i / t.moveDivider, w.updateProgress(i), w.setWrapperTranslate(i, !0)
                    },
                    dragStart: function(e) {
                        var t = w.scrollbar;
                        t.isTouched = !0, e.preventDefault(), e.stopPropagation(), t.setDragPosition(e), clearTimeout(t.dragTimeout), t.track.transition(0), w.params.scrollbarHide && t.track.css("opacity", 1), w.wrapper.transition(100), t.drag.transition(100), w.emit("onScrollbarDragStart", w)
                    },
                    dragMove: function(e) {
                        var t = w.scrollbar;
                        t.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, t.setDragPosition(e), w.wrapper.transition(0), t.track.transition(0), t.drag.transition(0), w.emit("onScrollbarDragMove", w))
                    },
                    dragEnd: function(e) {
                        var t = w.scrollbar;
                        t.isTouched && (t.isTouched = !1, w.params.scrollbarHide && (clearTimeout(t.dragTimeout), t.dragTimeout = setTimeout(function() {
                            t.track.css("opacity", 0), t.track.transition(400)
                        }, 1e3)), w.emit("onScrollbarDragEnd", w), w.params.scrollbarSnapOnRelease && w.slideReset())
                    },
                    enableDraggable: function() {
                        var t = w.scrollbar,
                            a = w.support.touch ? t.track : document;
                        e(t.track).on(w.touchEvents.start, t.dragStart), e(a).on(w.touchEvents.move, t.dragMove), e(a).on(w.touchEvents.end, t.dragEnd)
                    },
                    disableDraggable: function() {
                        var t = w.scrollbar,
                            a = w.support.touch ? t.track : document;
                        e(t.track).off(w.touchEvents.start, t.dragStart), e(a).off(w.touchEvents.move, t.dragMove), e(a).off(w.touchEvents.end, t.dragEnd)
                    },
                    set: function() {
                        if (w.params.scrollbar) {
                            var t = w.scrollbar;
                            t.track = e(w.params.scrollbar), w.params.uniqueNavElements && "string" == typeof w.params.scrollbar && t.track.length > 1 && 1 === w.container.find(w.params.scrollbar).length && (t.track = w.container.find(w.params.scrollbar)), t.drag = t.track.find(".swiper-scrollbar-drag"), 0 === t.drag.length && (t.drag = e('<div class="swiper-scrollbar-drag"></div>'), t.track.append(t.drag)), t.drag[0].style.width = "", t.drag[0].style.height = "", t.trackSize = w.isHorizontal() ? t.track[0].offsetWidth : t.track[0].offsetHeight, t.divider = w.size / w.virtualSize, t.moveDivider = t.divider * (t.trackSize / w.size), t.dragSize = t.trackSize * t.divider, w.isHorizontal() ? t.drag[0].style.width = t.dragSize + "px" : t.drag[0].style.height = t.dragSize + "px", t.divider >= 1 ? t.track[0].style.display = "none" : t.track[0].style.display = "", w.params.scrollbarHide && (t.track[0].style.opacity = 0)
                        }
                    },
                    setTranslate: function() {
                        if (w.params.scrollbar) {
                            var e, t = w.scrollbar,
                                a = (w.translate, t.dragSize);
                            e = (t.trackSize - t.dragSize) * w.progress, w.rtl && w.isHorizontal() ? (e = -e, e > 0 ? (a = t.dragSize - e, e = 0) : -e + t.dragSize > t.trackSize && (a = t.trackSize + e)) : e < 0 ? (a = t.dragSize + e, e = 0) : e + t.dragSize > t.trackSize && (a = t.trackSize - e), w.isHorizontal() ? (w.support.transforms3d ? t.drag.transform("translate3d(" + e + "px, 0, 0)") : t.drag.transform("translateX(" + e + "px)"), t.drag[0].style.width = a + "px") : (w.support.transforms3d ? t.drag.transform("translate3d(0px, " + e + "px, 0)") : t.drag.transform("translateY(" + e + "px)"), t.drag[0].style.height = a + "px"), w.params.scrollbarHide && (clearTimeout(t.timeout), t.track[0].style.opacity = 1, t.timeout = setTimeout(function() {
                                t.track[0].style.opacity = 0, t.track.transition(400)
                            }, 1e3))
                        }
                    },
                    setTransition: function(e) {
                        w.params.scrollbar && w.scrollbar.drag.transition(e)
                    }
                }, w.controller = {
                    LinearSpline: function(e, t) {
                        this.x = e, this.y = t, this.lastIndex = e.length - 1;
                        var a, i;
                        this.x.length;
                        this.interpolate = function(e) {
                            return e ? (i = r(this.x, e), a = i - 1, (e - this.x[a]) * (this.y[i] - this.y[a]) / (this.x[i] - this.x[a]) + this.y[a]) : 0
                        };
                        var r = function() {
                            var e, t, a;
                            return function(i, r) {
                                for (t = -1, e = i.length; e - t > 1;) i[a = e + t >> 1] <= r ? t = a : e = a;
                                return e
                            }
                        }()
                    },
                    getInterpolateFunction: function(e) {
                        w.controller.spline || (w.controller.spline = w.params.loop ? new w.controller.LinearSpline(w.slidesGrid, e.slidesGrid) : new w.controller.LinearSpline(w.snapGrid, e.snapGrid))
                    },
                    setTranslate: function(e, a) {
                        function i(t) {
                            e = t.rtl && "horizontal" === t.params.direction ? -w.translate : w.translate, "slide" === w.params.controlBy && (w.controller.getInterpolateFunction(t), n = -w.controller.spline.interpolate(-e)), n && "container" !== w.params.controlBy || (r = (t.maxTranslate() - t.minTranslate()) / (w.maxTranslate() - w.minTranslate()), n = (e - w.minTranslate()) * r + t.minTranslate()), w.params.controlInverse && (n = t.maxTranslate() - n), t.updateProgress(n), t.setWrapperTranslate(n, !1, w), t.updateActiveIndex()
                        }
                        var r, n, s = w.params.control;
                        if (w.isArray(s))
                            for (var o = 0; o < s.length; o++) s[o] !== a && s[o] instanceof t && i(s[o]);
                        else s instanceof t && a !== s && i(s)
                    },
                    setTransition: function(e, a) {
                        function i(t) {
                            t.setWrapperTransition(e, w), 0 !== e && (t.onTransitionStart(), t.wrapper.transitionEnd(function() {
                                n && (t.params.loop && "slide" === w.params.controlBy && t.fixLoop(), t.onTransitionEnd())
                            }))
                        }
                        var r, n = w.params.control;
                        if (w.isArray(n))
                            for (r = 0; r < n.length; r++) n[r] !== a && n[r] instanceof t && i(n[r]);
                        else n instanceof t && a !== n && i(n)
                    }
                }, w.hashnav = {
                    init: function() {
                        if (w.params.hashnav) {
                            w.hashnav.initialized = !0;
                            var e = document.location.hash.replace("#", "");
                            if (e)
                                for (var t = 0, a = w.slides.length; t < a; t++) {
                                    var i = w.slides.eq(t),
                                        r = i.attr("data-hash");
                                    if (r === e && !i.hasClass(w.params.slideDuplicateClass)) {
                                        var n = i.index();
                                        w.slideTo(n, 0, w.params.runCallbacksOnInit, !0)
                                    }
                                }
                        }
                    },
                    setHash: function() {
                        w.hashnav.initialized && w.params.hashnav && (document.location.hash = w.slides.eq(w.activeIndex).attr("data-hash") || "")
                    }
                }, w.disableKeyboardControl = function() {
                    w.params.keyboardControl = !1, e(document).off("keydown", l)
                }, w.enableKeyboardControl = function() {
                    w.params.keyboardControl = !0, e(document).on("keydown", l)
                }, w.mousewheel = {
                    event: !1,
                    lastScrollTime: (new window.Date).getTime()
                }, w.params.mousewheelControl) {
                try {
                    new window.WheelEvent("wheel"), w.mousewheel.event = "wheel"
                } catch (e) {
                    (window.WheelEvent || w.container[0] && "wheel" in w.container[0]) && (w.mousewheel.event = "wheel")
                }!w.mousewheel.event && window.WheelEvent, w.mousewheel.event || void 0 === document.onmousewheel || (w.mousewheel.event = "mousewheel"), w.mousewheel.event || (w.mousewheel.event = "DOMMouseScroll")
            }
            w.disableMousewheelControl = function() {
                return !!w.mousewheel.event && (w.container.off(w.mousewheel.event, d), !0)
            }, w.enableMousewheelControl = function() {
                return !!w.mousewheel.event && (w.container.on(w.mousewheel.event, d), !0)
            }, w.parallax = {
                setTranslate: function() {
                    w.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function() {
                        c(this, w.progress)
                    }), w.slides.each(function() {
                        var t = e(this);
                        t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function() {
                            c(this, Math.min(Math.max(t[0].progress, -1), 1))
                        })
                    })
                },
                setTransition: function(t) {
                    void 0 === t && (t = w.params.speed), w.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function() {
                        var a = e(this),
                            i = parseInt(a.attr("data-swiper-parallax-duration"), 10) || t;
                        0 === t && (i = 0), a.transition(i)
                    })
                }
            }, w._plugins = [];
            for (var O in w.plugins) {
                var L = w.plugins[O](w, w.params[O]);
                L && w._plugins.push(L)
            }
            return w.callPlugins = function(e) {
                for (var t = 0; t < w._plugins.length; t++) e in w._plugins[t] && w._plugins[t][e](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5])
            }, w.emitterEventListeners = {}, w.emit = function(e) {
                w.params[e] && w.params[e](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                var t;
                if (w.emitterEventListeners[e])
                    for (t = 0; t < w.emitterEventListeners[e].length; t++) w.emitterEventListeners[e][t](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                w.callPlugins && w.callPlugins(e, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5])
            }, w.on = function(e, t) {
                return e = u(e), w.emitterEventListeners[e] || (w.emitterEventListeners[e] = []), w.emitterEventListeners[e].push(t), w
            }, w.off = function(e, t) {
                var a;
                if (e = u(e), void 0 === t) return w.emitterEventListeners[e] = [], w;
                if (w.emitterEventListeners[e] && 0 !== w.emitterEventListeners[e].length) {
                    for (a = 0; a < w.emitterEventListeners[e].length; a++) w.emitterEventListeners[e][a] === t && w.emitterEventListeners[e].splice(a, 1);
                    return w
                }
            }, w.once = function(e, t) {
                e = u(e);
                var a = function() {
                    t(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]), w.off(e, a)
                };
                return w.on(e, a), w
            }, w.a11y = {
                makeFocusable: function(e) {
                    return e.attr("tabIndex", "0"), e
                },
                addRole: function(e, t) {
                    return e.attr("role", t), e
                },
                addLabel: function(e, t) {
                    return e.attr("aria-label", t), e
                },
                disable: function(e) {
                    return e.attr("aria-disabled", !0), e
                },
                enable: function(e) {
                    return e.attr("aria-disabled", !1), e
                },
                onEnterKey: function(t) {
                    13 === t.keyCode && (e(t.target).is(w.params.nextButton) ? (w.onClickNext(t), w.isEnd ? w.a11y.notify(w.params.lastSlideMessage) : w.a11y.notify(w.params.nextSlideMessage)) : e(t.target).is(w.params.prevButton) && (w.onClickPrev(t), w.isBeginning ? w.a11y.notify(w.params.firstSlideMessage) : w.a11y.notify(w.params.prevSlideMessage)), e(t.target).is("." + w.params.bulletClass) && e(t.target)[0].click())
                },
                liveRegion: e('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),
                notify: function(e) {
                    var t = w.a11y.liveRegion;
                    0 !== t.length && (t.html(""), t.html(e))
                },
                init: function() {
                    w.params.nextButton && w.nextButton && w.nextButton.length > 0 && (w.a11y.makeFocusable(w.nextButton), w.a11y.addRole(w.nextButton, "button"), w.a11y.addLabel(w.nextButton, w.params.nextSlideMessage)), w.params.prevButton && w.prevButton && w.prevButton.length > 0 && (w.a11y.makeFocusable(w.prevButton), w.a11y.addRole(w.prevButton, "button"), w.a11y.addLabel(w.prevButton, w.params.prevSlideMessage)), e(w.container).append(w.a11y.liveRegion)
                },
                initPagination: function() {
                    w.params.pagination && w.params.paginationClickable && w.bullets && w.bullets.length && w.bullets.each(function() {
                        var t = e(this);
                        w.a11y.makeFocusable(t), w.a11y.addRole(t, "button"), w.a11y.addLabel(t, w.params.paginationBulletMessage.replace(/{{index}}/, t.index() + 1))
                    })
                },
                destroy: function() {
                    w.a11y.liveRegion && w.a11y.liveRegion.length > 0 && w.a11y.liveRegion.remove()
                }
            }, w.init = function() {
                w.params.loop && w.createLoop(), w.updateContainerSize(), w.updateSlidesSize(), w.updatePagination(), w.params.scrollbar && w.scrollbar && (w.scrollbar.set(),
                    w.params.scrollbarDraggable && w.scrollbar.enableDraggable()), "slide" !== w.params.effect && w.effects[w.params.effect] && (w.params.loop || w.updateProgress(), w.effects[w.params.effect].setTranslate()), w.params.loop ? w.slideTo(w.params.initialSlide + w.loopedSlides, 0, w.params.runCallbacksOnInit) : (w.slideTo(w.params.initialSlide, 0, w.params.runCallbacksOnInit), 0 === w.params.initialSlide && (w.parallax && w.params.parallax && w.parallax.setTranslate(), w.lazy && w.params.lazyLoading && (w.lazy.load(), w.lazy.initialImageLoaded = !0))), w.attachEvents(), w.params.observer && w.support.observer && w.initObservers(), w.params.preloadImages && !w.params.lazyLoading && w.preloadImages(), w.params.autoplay && w.startAutoplay(), w.params.keyboardControl && w.enableKeyboardControl && w.enableKeyboardControl(), w.params.mousewheelControl && w.enableMousewheelControl && w.enableMousewheelControl(), w.params.hashnav && w.hashnav && w.hashnav.init(), w.params.a11y && w.a11y && w.a11y.init(), w.emit("onInit", w)
            }, w.cleanupStyles = function() {
                w.container.removeClass(w.classNames.join(" ")).removeAttr("style"), w.wrapper.removeAttr("style"), w.slides && w.slides.length && w.slides.removeClass([w.params.slideVisibleClass, w.params.slideActiveClass, w.params.slideNextClass, w.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"), w.paginationContainer && w.paginationContainer.length && w.paginationContainer.removeClass(w.params.paginationHiddenClass), w.bullets && w.bullets.length && w.bullets.removeClass(w.params.bulletActiveClass), w.params.prevButton && e(w.params.prevButton).removeClass(w.params.buttonDisabledClass), w.params.nextButton && e(w.params.nextButton).removeClass(w.params.buttonDisabledClass), w.params.scrollbar && w.scrollbar && (w.scrollbar.track && w.scrollbar.track.length && w.scrollbar.track.removeAttr("style"), w.scrollbar.drag && w.scrollbar.drag.length && w.scrollbar.drag.removeAttr("style"))
            }, w.destroy = function(e, t) {
                w.detachEvents(), w.stopAutoplay(), w.params.scrollbar && w.scrollbar && w.params.scrollbarDraggable && w.scrollbar.disableDraggable(), w.params.loop && w.destroyLoop(), t && w.cleanupStyles(), w.disconnectObservers(), w.params.keyboardControl && w.disableKeyboardControl && w.disableKeyboardControl(), w.params.mousewheelControl && w.disableMousewheelControl && w.disableMousewheelControl(), w.params.a11y && w.a11y && w.a11y.destroy(), w.emit("onDestroy"), !1 !== e && (w = null)
            }, w.init(), w
        }
    };
    t.prototype = {
        isSafari: function() {
            var e = navigator.userAgent.toLowerCase();
            return e.indexOf("safari") >= 0 && e.indexOf("chrome") < 0 && e.indexOf("android") < 0
        }(),
        isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),
        isArray: function(e) {
            return "[object Array]" === Object.prototype.toString.apply(e)
        },
        browser: {
            ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled,
            ieTouch: window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1 || window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1
        },
        device: function() {
            var e = navigator.userAgent,
                t = e.match(/(Android);?[\s\/]+([\d.]+)?/),
                a = e.match(/(iPad).*OS\s([\d_]+)/),
                i = e.match(/(iPod)(.*OS\s([\d_]+))?/),
                r = !a && e.match(/(iPhone\sOS)\s([\d_]+)/);
            return {
                ios: a || r || i,
                android: t
            }
        }(),
        support: {
            touch: window.Modernizr && !0 === Modernizr.touch || function() {
                return !!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch)
            }(),
            transforms3d: window.Modernizr && !0 === Modernizr.csstransforms3d || function() {
                var e = document.createElement("div").style;
                return "webkitPerspective" in e || "MozPerspective" in e || "OPerspective" in e || "MsPerspective" in e || "perspective" in e
            }(),
            flexbox: function() {
                for (var e = document.createElement("div").style, t = "alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "), a = 0; a < t.length; a++)
                    if (t[a] in e) return !0
            }(),
            observer: function() {
                return "MutationObserver" in window || "WebkitMutationObserver" in window
            }()
        },
        plugins: {}
    };
    for (var a = ["jQuery", "Zepto", "Dom7"], i = 0; i < a.length; i++) window[a[i]] && function(e) {
        e.fn.swiper = function(a) {
            var i;
            return e(this).each(function() {
                var e = new t(this, a);
                i || (i = e)
            }), i
        }
    }(window[a[i]]);
    var r;
    r = "undefined" == typeof Dom7 ? window.Dom7 || window.Zepto || window.jQuery : Dom7, r && ("transitionEnd" in r.fn || (r.fn.transitionEnd = function(e) {
        function t(n) {
            if (n.target === this)
                for (e.call(this, n), a = 0; a < i.length; a++) r.off(i[a], t)
        }
        var a, i = ["webkitTransitionEnd", "transitionend", "oTransitionEnd", "MSTransitionEnd", "msTransitionEnd"],
            r = this;
        if (e)
            for (a = 0; a < i.length; a++) r.on(i[a], t);
        return this
    }), "transform" in r.fn || (r.fn.transform = function(e) {
        for (var t = 0; t < this.length; t++) {
            var a = this[t].style;
            a.webkitTransform = a.MsTransform = a.msTransform = a.MozTransform = a.OTransform = a.transform = e
        }
        return this
    }), "transition" in r.fn || (r.fn.transition = function(e) {
        "string" != typeof e && (e += "ms");
        for (var t = 0; t < this.length; t++) {
            var a = this[t].style;
            a.webkitTransitionDuration = a.MsTransitionDuration = a.msTransitionDuration = a.MozTransitionDuration = a.OTransitionDuration = a.transitionDuration = e
        }
        return this
    })), window.Swiper = t
}(), "undefined" != typeof module ? module.exports = window.Swiper : "function" == typeof define && define.amd && define([], function() {
        "use strict";
        return window.Swiper
    }),
    /**
    @license Sticky-kit v1.1.2 | WTFPL | Leaf Corcoran 2015 | http://leafo.net
     */
    function() {
        var e, t;
        e = this.jQuery || window.jQuery, t = e(window), e.fn.stick_in_parent = function(a) {
            var i, r, n, s, o, l, d, c, u, p, f, h;
            for (null == a && (a = {}), h = a.sticky_class, l = a.inner_scrolling, f = a.recalc_every, p = a.parent, u = a.offset_top, c = a.spacer, n = a.bottoming, null == u && (u = 0), null == p && (p = void 0), null == l && (l = !0), null == h && (h = "is_stuck"), i = e(document), null == n && (n = !0), s = function(a, r, s, o, d, v, m, g) {
                    var y, w, b, x, _, k, C, $, T, D, S, M;
                    if (!a.data("sticky_kit")) {
                        if (a.data("sticky_kit", !0), _ = i.height(), C = a.parent(), null != p && (C = C.closest(p)), !C.length) throw "failed to find stick parent";
                        if (b = !1, y = !1, S = null != c ? c && a.closest(c) : e("<div />"), S && S.css("position", a.css("position")), $ = function() {
                                var e, t, n;
                                if (!g) return _ = i.height(), e = parseInt(C.css("border-top-width"), 10), t = parseInt(C.css("padding-top"), 10), r = parseInt(C.css("padding-bottom"), 10), s = C.offset().top + e + t, o = C.height(), b && (b = !1, y = !1, null == c && (a.insertAfter(S), S.detach()), a.css({
                                    position: "",
                                    top: "",
                                    width: "",
                                    bottom: ""
                                }).removeClass(h), n = !0), d = a.offset().top - (parseInt(a.css("margin-top"), 10) || 0) - u, v = a.outerHeight(!0), m = a.css("float"), S && S.css({
                                    width: a.outerWidth(!0),
                                    height: v,
                                    display: a.css("display"),
                                    "vertical-align": a.css("vertical-align"),
                                    float: m
                                }), n ? M() : void 0
                            }, $(), v !== o) return x = void 0, k = u, D = f, M = function() {
                            var e, p, w, T, M, F;
                            if (!g) return w = !1, null != D && (D -= 1) <= 0 && (D = f, $(), w = !0), w || i.height() === _ || ($(), w = !0), T = t.scrollTop(), null != x && (p = T - x), x = T, b ? (n && (M = T + v + k > o + s, y && !M && (y = !1, a.css({
                                position: "fixed",
                                bottom: "",
                                top: k
                            }).trigger("sticky_kit:unbottom"))), T < d && (b = !1, k = u, null == c && ("left" !== m && "right" !== m || a.insertAfter(S), S.detach()), e = {
                                position: "",
                                width: "",
                                top: ""
                            }, a.css(e).removeClass(h).trigger("sticky_kit:unstick")), l && (F = t.height(), v + u > F && (y || (k -= p, k = Math.max(F - v, k), k = Math.min(u, k), b && a.css({
                                top: k + "px"
                            }))))) : T > d && (b = !0, e = {
                                position: "fixed",
                                top: k
                            }, e.width = "border-box" === a.css("box-sizing") ? a.outerWidth() + "px" : a.width() + "px", a.css(e).addClass(h), null == c && (a.after(S), "left" !== m && "right" !== m || S.append(a)), a.trigger("sticky_kit:stick")), b && n && (null == M && (M = T + v + k > o + s), !y && M) ? (y = !0, "static" === C.css("position") && C.css({
                                position: "relative"
                            }), a.css({
                                position: "absolute",
                                bottom: r,
                                top: "auto"
                            }).trigger("sticky_kit:bottom")) : void 0
                        }, T = function() {
                            return $(), M()
                        }, w = function() {
                            if (g = !0, t.off("touchmove", M), t.off("scroll", M), t.off("resize", M), e(document.body).off("sticky_kit:recalc", T), a.off("sticky_kit:detach", w), a.removeData("sticky_kit"), a.css({
                                    position: "",
                                    bottom: "",
                                    top: "",
                                    width: ""
                                }), C.position("position", ""), b) return null == c && ("left" !== m && "right" !== m || a.insertAfter(S), S.remove()), a.removeClass(h)
                        }, t.on("touchmove", M), t.on("scroll", M), t.on("resize", M), e(document.body).on("sticky_kit:recalc", T), a.on("sticky_kit:detach", w), setTimeout(M, 0)
                    }
                }, o = 0, d = this.length; o < d; o++) r = this[o], s(e(r));
            return this
        }
    }.call(this);
var ParsleyConfig = {
    errorClass: "error",
    successClass: "success",
    errorsWrapper: '<div class="error-msg"></div>',
    errorTemplate: "<div></div>",
    excluded: "input[type=button], input[type=submit], input[type=reset], input[type=hidden], [disabled], :hidden",
    validationThreshold: 0,
    classHandler: function(e) {
        var t = e.$element,
            a = t.closest(".validation-wrap");
        t.add(a);
        return t.is("textarea[maxlength]") && (t.off("keyup"), t.on("keyup", function() {
            characterCountdown($vf(this))
        })), ParsleyConfig.a11y(t), e
    },
    errorsContainer: function(e) {
        var t, a;
        return e.$element.parent().is(".field-group") ? (a = e.$element.parent(), a.after("<div />"), t = a.next()) : (a = e.$element.closest(".validation-wrap"), t = a.prev().is(".error-msg-wrap") ? a.prev(".error-msg-wrap") : a.find(".error-msg-wrap").length > 0 ? a.find(".error-msg-wrap") : a.nextAll(".error-msg-wrap").length > 0 ? a.nextAll(".error-msg-wrap").last() : a.next().find(".error-msg-wrap")), t
    },
    validators: {
        creditcard: {
            fn: function(e) {
                e = e.replace(/[ -]/g, "");
                var t, a, i, r, n, s;
                for (i = 0, s = e.split("").reverse(), a = r = 0, n = s.length; r < n; a = ++r) t = s[a], t = +t, a % 2 ? (t *= 2, i += t < 10 ? t : t - 9) : i += t;
                return i % 10 == 0
            },
            priority: 32
        }
    },
    a11y: function(e) {
        var t = e.attr("data-parsley-id");
        if (e.is("[data-parsley-multiple]")) {
            var a = "parsley-id-multiple-" + e.attr("data-parsley-multiple");
            e.is("[type=checkbox], [type=radio]") ? e.next("label").attr({
                "aria-describedby": a,
                "aria-invalid": !!e.is(".error")
            }) : e.attr("aria-describedby", a)
        } else e.is("[type=checkbox], [type=radio]") ? e.next("label").attr("aria-describedby", "parsley-id-" + t) : e.attr("aria-describedby", "parsley-id-" + t);
        if (e.is(".error") ? e.is("[type=checkbox], [type=radio]") ? e.next("label").attr({
                "aria-invalid": !0
            }) : e.attr({
                "aria-invalid": !0
            }) : e.is("[type=checkbox], [type=radio]") ? e.next("label").attr({
                "aria-invalid": !1
            }) : e.attr({
                "aria-invalid": !1
            }), e.is("[data-parsley-multiple]")) {
            var i = e.attr("aria-describedby") ? e.attr("aria-describedby") : e.next("label").attr("aria-describedby");
            $vf("#" + i).is(".filled") ? e.is("[type=checkbox], [type=radio]") ? e.next("label").attr("aria-invalid", !0) : e.attr("aria-invalid", !0) : e.is("[type=checkbox], [type=radio]") ? e.next("label").attr("aria-invalid", !1) : e.attr("aria-invalid", !1)
        }
    }
};
$vf(function() {
        $vf("[data-form]").each(function() {
            var e = $vf(this);
            e.is("[data-parsley-validate]") && (ParsleyConfig = $vf.extend(ParsleyConfig || {}, {
                trigger: "change"
            })), e.parsley()
        }), $vf.listen("parsley:form:validated", $vf("[data-modal]"), function() {
            "function" == typeof modalHeightSetter && modalHeightSetter()
        }), $vf.listen("parsley:field:validated", $vf("[data-field-icon]"), function() {
            $vf(this).each(function() {
                var e = $vf(this);
                e.is(".error") ? e.prev(".field-icon").addClass("error") : e.is(".error") || e.prev(".field-icon").removeClass("error")
            })
        }), $vf.listen("parsley:field:validated", $vf("input[required], textarea[required], select[required]"), function() {
            $vf(this).each(function() {
                var e = $vf(this);
                ParsleyConfig.a11y(e)
            })
        }), $vf("input[required], textarea[required], select[required]").each(function() {
            $vf(this).each(function() {
                var e = $vf(this);
                ParsleyConfig.a11y(e)
            })
        })
    }), $vf(document).off("click keypress", "[data-validate-form]"), $vf(document).on("click keypress", "[data-validate-form]", function(e) {
        function t(e) {
            if (!$vf(".error-msg-wrap", e).find(".error-msg").length) {
                var t = $vf(".error-msg", e);
                e.after(t)
            }
            setTimeout(function() {
                var t = e.find(".error");
                e.find(".success");
                t.length > 0 ? e.addClass("error") : e.removeClass("error")
            }, 10)
        }!0 === keyClick(e) && (ParsleyConfig = ParsleyConfig || {}, ParsleyConfig.i18n = ParsleyConfig.i18n || {}, ParsleyConfig.i18n.en = $vf.extend(ParsleyConfig.i18n.en || {}, {
            defaultMessage: "This field seems to be invalid",
            type: {
                email: "This field should be a valid email",
                url: "This field should be a valid URL",
                number: "This field should be a valid number",
                integer: "This field should be a valid integer",
                digits: "This field should be digits",
                alphanum: "This field should be alphanumeric"
            },
            notblank: "This field should not be blank",
            required: "This is a required field",
            pattern: "This field seems to be invalid",
            min: "Value must be greater than or equal to %s",
            max: "Value must be lower than or equal to %s",
            range: "Value must be between %s and %s",
            minlength: "This field requires %s characters or more",
            maxlength: "This field requires %s characters or less",
            length: "This field length is invalid. It should be between %s and %s characters long",
            mincheck: "You must select at least %s choices",
            maxcheck: "You must select %s choices or less",
            check: "You must select between %s and %s choices",
            equalto: "Must equal previous field's value"
        }), $form = $vf(this).closest("[data-form]"), $form.parsley().validate(), $vf(".validation-wrap", $form).each(function() {
            t($vf(this))
        }), $vf.listen("parsley:field:validated", $form, function() {
            $vf(".validation-wrap", $form).each(function() {
                t($vf(this))
            })
        }), $vf(".error-msg-wrap[data-error-classes]", $form).each(function() {
            var e = $vf(this),
                t = e.attr("data-error-classes");
            $vf(".error-msg", e).addClass(t)
        }), $form.parsley().isValid() || e.preventDefault())
    }), window.ParsleyExtend = window.ParsleyExtend || {}, window.ParsleyExtend = $vf.extend(window.ParsleyExtend, {
        asyncSupport: !0,
        asyncValidators: $vf.extend({
            default: {
                fn: function(e) {
                    return "resolved" === e.state()
                },
                url: !1
            },
            reverse: {
                fn: function(e) {
                    return "rejected" === e.state()
                },
                url: !1
            }
        }, window.ParsleyExtend.asyncValidators),
        addAsyncValidator: function(e, t, a, i) {
            return this.asyncValidators[e.toLowerCase()] = {
                fn: t,
                url: a || !1,
                options: i || {}
            }, this
        },
        asyncValidate: function() {
            return "ParsleyForm" === this.__class__ ? this._asyncValidateForm.apply(this, arguments) : this._asyncValidateField.apply(this, arguments)
        },
        asyncIsValid: function() {
            return "ParsleyField" === this.__class__ ? this._asyncIsValidField.apply(this, arguments) : this._asyncIsValidForm.apply(this, arguments)
        },
        onSubmitValidate: function(e) {
            var t = this;
            if (!0 !== e.parsley) return this.submitEvent = $vf.extend(!0, {}, e), e instanceof $vf.Event && (e.stopImmediatePropagation(), e.preventDefault()), this._asyncValidateForm(void 0, e).done(function() {
                t.submitEvent.isDefaultPrevented() || t.$element.trigger($vf.extend($vf.Event("submit"), {
                    parsley: !0
                }))
            })
        },
        eventValidate: function(e) {
            new RegExp("key").test(e.type) && !this._ui.validationInformationVisible && this.getValue().length <= this.options.validationThreshold || (this._ui.validatedOnce = !0, this.asyncValidate())
        },
        _asyncValidateForm: function(e, t) {
            var a = this,
                i = [];
            this._refreshFields(), $vf.emit("parsley:form:validate", this);
            for (var r = 0; r < this.fields.length; r++) e && e !== this.fields[r].options.group || i.push(this.fields[r]._asyncValidateField());
            return $vf.when.apply($vf, i).always(function() {
                $vf.emit("parsley:form:validated", a)
            })
        },
        _asyncIsValidForm: function(e, t) {
            var a = [];
            this._refreshFields();
            for (var i = 0; i < this.fields.length; i++) e && e !== this.fields[i].options.group || a.push(this.fields[i]._asyncIsValidField(t));
            return $vf.when.apply($vf, a)
        },
        _asyncValidateField: function(e) {
            var t = this;
            return $vf.emit("parsley:field:validate", this), this._asyncIsValidField(e).done(function() {
                $vf.emit("parsley:field:success", t)
            }).fail(function() {
                $vf.emit("parsley:field:error", t)
            }).always(function() {
                $vf.emit("parsley:field:validated", t)
            })
        },
        _asyncIsValidField: function(e, t) {
            var a = $vf.Deferred();
            return !1 === this.isValid(e, t) ? a.rejectWith(this) : void 0 !== this.constraintsByName.remote ? this._remote(a) : a.resolveWith(this), a.promise()
        },
        _remote: function(e) {
            var t, a, i = this,
                r = {},
                n = this.options.remoteValidator || (!0 === this.options.remoteReverse ? "reverse" : "default");
            if (n = n.toLowerCase(), void 0 === this.asyncValidators[n]) throw new Error("Calling an undefined async validator: `" + n + "`");
            r[this.$element.attr("name") || this.$element.attr("id")] = this.getValue(), this.options.remoteOptions = $vf.extend(!0, this.options.remoteOptions || {}, this.asyncValidators[n].options), t = $vf.extend(!0, {}, {
                url: this.asyncValidators[n].url || this.options.remote,
                data: r,
                type: "GET"
            }, this.options.remoteOptions || {}), a = $vf.param(t), void 0 === this._remoteCache && (this._remoteCache = {}), this._remoteCache[a] || (this._xhr && "pending" === this._xhr.state() && this._xhr.abort(), this._xhr = $vf.ajax(t), this._remoteCache[a] = this._xhr), this._remoteCache[a].done(function(t, a, r) {
                i._handleRemoteResult(n, r, e)
            }).fail(function(t, a, r) {
                "abort" !== a && i._handleRemoteResult(n, t, e)
            })
        },
        _handleRemoteResult: function(e, t, a) {
            if ("function" == typeof this.asyncValidators[e].fn && this.asyncValidators[e].fn.call(this, t)) return void a.resolveWith(this);
            this.validationResult = [new window.ParsleyValidator.Validator.Violation(this.constraintsByName.remote, this.getValue(), null)], a.rejectWith(this)
        }
    }), window.ParsleyConfig = window.ParsleyConfig || {}, window.ParsleyConfig.validators = window.ParsleyConfig.validators || {}, window.ParsleyConfig.validators.remote = {
        fn: function() {
            return !0
        },
        priority: -1
    },
    function(e) {
        "function" == typeof define && define.amd ? define(["jquery"], e) : e(jQuery)
    }(function(e) {
        void 0 === e && void 0 !== window.jQuery && (e = window.jQuery);
        var t = {
                attr: function(e, t, a) {
                    var i, r = {},
                        n = this.msieversion(),
                        s = new RegExp("^" + t, "i");
                    if (void 0 === e || void 0 === e[0]) return {};
                    for (var o in e[0].attributes)
                        if (void 0 !== (i = e[0].attributes[o]) && null !== i && (!n || n >= 8 || i.specified) && s.test(i.name)) {
                            if (void 0 !== a && new RegExp(a + "$", "i").test(i.name)) return !0;
                            r[this.camelize(i.name.replace(t, ""))] = this.deserializeValue(i.value)
                        }
                    return void 0 === a && r
                },
                setAttr: function(e, t, a, i) {
                    e[0].setAttribute(this.dasherize(t + a), String(i))
                },
                get: function(e, t) {
                    for (var a = 0, i = (t || "").split("."); this.isObject(e) || this.isArray(e);)
                        if (e = e[i[a++]], a === i.length) return e
                },
                hash: function(e) {
                    return String(Math.random()).substring(2, e ? e + 2 : 9)
                },
                isArray: function(e) {
                    return "[object Array]" === Object.prototype.toString.call(e)
                },
                isObject: function(e) {
                    return e === Object(e)
                },
                deserializeValue: function(t) {
                    var a;
                    try {
                        return t ? "true" == t || "false" != t && ("null" == t ? null : isNaN(a = Number(t)) ? /^[\[\{]/.test(t) ? e.parseJSON(t) : t : a) : t
                    } catch (e) {
                        return t
                    }
                },
                camelize: function(e) {
                    return e.replace(/-+(.)?/g, function(e, t) {
                        return t ? t.toUpperCase() : ""
                    })
                },
                dasherize: function(e) {
                    return e.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase()
                },
                msieversion: function() {
                    var e = window.navigator.userAgent,
                        t = e.indexOf("MSIE ");
                    return t > 0 || navigator.userAgent.match(/Trident.*rv\:11\./) ? parseInt(e.substring(t + 5, e.indexOf(".", t)), 10) : 0
                }
            },
            a = {
                namespace: "data-parsley-",
                inputs: "input, textarea, select",
                excluded: "input[type=button], input[type=submit], input[type=reset], input[type=hidden]",
                priorityEnabled: !0,
                uiEnabled: !0,
                validationThreshold: 3,
                focus: "first",
                trigger: !1,
                errorClass: "parsley-error",
                successClass: "parsley-success",
                classHandler: function(e) {},
                errorsContainer: function(e) {},
                errorsWrapper: '<ul class="parsley-errors-list"></ul>',
                errorTemplate: "<li></li>"
            },
            i = function() {};
        i.prototype = {
            asyncSupport: !1,
            actualizeOptions: function() {
                return this.options = this.OptionsFactory.get(this), this
            },
            validateThroughValidator: function(e, t, a) {
                return window.ParsleyValidator.validate.apply(window.ParsleyValidator, [e, t, a])
            },
            subscribe: function(t, a) {
                return e.listenTo(this, t.toLowerCase(), a), this
            },
            unsubscribe: function(t) {
                return e.unsubscribeTo(this, t.toLowerCase()), this
            },
            reset: function() {
                if ("ParsleyForm" !== this.__class__) return e.emit("parsley:field:reset", this);
                for (var t = 0; t < this.fields.length; t++) e.emit("parsley:field:reset", this.fields[t]);
                e.emit("parsley:form:reset", this)
            },
            destroy: function() {
                if ("ParsleyForm" !== this.__class__) return this.$element.removeData("Parsley"), this.$element.removeData("ParsleyFieldMultiple"), void e.emit("parsley:field:destroy", this);
                for (var t = 0; t < this.fields.length; t++) this.fields[t].destroy();
                this.$element.removeData("Parsley"), e.emit("parsley:form:destroy", this)
            }
        };
        /*!
         * validator.js
         * Guillaume Potier - <guillaume@wisembly.com>
         * Version 1.0.0 - built Sun Aug 03 2014 17:42:31
         * MIT Licensed
         *
         */
        var r = function() {
            var e = {},
                t = function(e) {
                    this.__class__ = "Validator", this.__version__ = "1.0.0", this.options = e || {}, this.bindingKey = this.options.bindingKey || "_validatorjsConstraint"
                };
            t.prototype = {
                constructor: t,
                validate: function(e, t, a) {
                    if ("string" != typeof e && "object" != typeof e) throw new Error("You must validate an object or a string");
                    return "string" == typeof e || s(e) ? this._validateString(e, t, a) : this.isBinded(e) ? this._validateBindedObject(e, t) : this._validateObject(e, t, a)
                },
                bind: function(e, t) {
                    if ("object" != typeof e) throw new Error("Must bind a Constraint to an object");
                    return e[this.bindingKey] = new a(t), this
                },
                unbind: function(e) {
                    return void 0 === e._validatorjsConstraint ? this : (delete e[this.bindingKey], this)
                },
                isBinded: function(e) {
                    return void 0 !== e[this.bindingKey]
                },
                getBinded: function(e) {
                    return this.isBinded(e) ? e[this.bindingKey] : null
                },
                _validateString: function(e, t, a) {
                    var n, o = [];
                    s(t) || (t = [t]);
                    for (var l = 0; l < t.length; l++) {
                        if (!(t[l] instanceof r)) throw new Error("You must give an Assert or an Asserts array to validate a string");
                        n = t[l].check(e, a), n instanceof i && o.push(n)
                    }
                    return !o.length || o
                },
                _validateObject: function(e, t, i) {
                    if ("object" != typeof t) throw new Error("You must give a constraint to validate an object");
                    return t instanceof a ? t.check(e, i) : new a(t).check(e, i)
                },
                _validateBindedObject: function(e, t) {
                    return e[this.bindingKey].check(e, t)
                }
            }, t.errorCode = {
                must_be_a_string: "must_be_a_string",
                must_be_an_array: "must_be_an_array",
                must_be_a_number: "must_be_a_number",
                must_be_a_string_or_array: "must_be_a_string_or_array"
            };
            var a = function(e, t) {
                if (this.__class__ = "Constraint", this.options = t || {}, this.nodes = {}, e) try {
                    this._bootstrap(e)
                } catch (t) {
                    throw new Error("Should give a valid mapping object to Constraint", t, e)
                }
            };
            a.prototype = {
                constructor: a,
                check: function(e, t) {
                    var a, i = {};
                    for (var o in this.nodes) {
                        for (var l = !1, d = this.get(o), c = s(d) ? d : [d], u = c.length - 1; u >= 0; u--) "Required" !== c[u].__class__ || (l = c[u].requiresValidation(t));
                        if (this.has(o, e) || this.options.strict || l) try {
                            this.has(o, this.options.strict || l ? e : void 0) || (new r).HaveProperty(o).validate(e), a = this._check(o, e[o], t), (s(a) && a.length > 0 || !s(a) && !n(a)) && (i[o] = a)
                        } catch (e) {
                            i[o] = e
                        }
                    }
                    return !!n(i) || i
                },
                add: function(e, t) {
                    if (t instanceof r || s(t) && t[0] instanceof r) return this.nodes[e] = t, this;
                    if ("object" == typeof t && !s(t)) return this.nodes[e] = t instanceof a ? t : new a(t), this;
                    throw new Error("Should give an Assert, an Asserts array, a Constraint", t)
                },
                has: function(e, t) {
                    return t = void 0 !== t ? t : this.nodes, void 0 !== t[e]
                },
                get: function(e, t) {
                    return this.has(e) ? this.nodes[e] : t || null
                },
                remove: function(e) {
                    var t = [];
                    for (var a in this.nodes) a !== e && (t[a] = this.nodes[a]);
                    return this.nodes = t, this
                },
                _bootstrap: function(e) {
                    if (e instanceof a) return this.nodes = e.nodes;
                    for (var t in e) this.add(t, e[t])
                },
                _check: function(e, t, i) {
                    if (this.nodes[e] instanceof r) return this._checkAsserts(t, [this.nodes[e]], i);
                    if (s(this.nodes[e])) return this._checkAsserts(t, this.nodes[e], i);
                    if (this.nodes[e] instanceof a) return this.nodes[e].check(t, i);
                    throw new Error("Invalid node", this.nodes[e])
                },
                _checkAsserts: function(e, t, a) {
                    for (var i, r = [], n = 0; n < t.length; n++) void 0 !== (i = t[n].check(e, a)) && !0 !== i && r.push(i);
                    return r
                }
            };
            var i = function(e, t, a) {
                if (this.__class__ = "Violation", !(e instanceof r)) throw new Error("Should give an assertion implementing the Assert interface");
                this.assert = e, this.value = t, void 0 !== a && (this.violation = a)
            };
            i.prototype = {
                show: function() {
                    var e = {
                        assert: this.assert.__class__,
                        value: this.value
                    };
                    return this.violation && (e.violation = this.violation), e
                },
                __toString: function() {
                    return void 0 !== this.violation && (this.violation = '", ' + this.getViolation().constraint + " expected was " + this.getViolation().expected), this.assert.__class__ + ' assert failed for "' + this.value + this.violation || ""
                },
                getViolation: function() {
                    var e, t;
                    for (e in this.violation) t = this.violation[e];
                    return {
                        constraint: e,
                        expected: t
                    }
                }
            };
            var r = function(e) {
                this.__class__ = "Assert", this.__parentClass__ = this.__class__, this.groups = [], void 0 !== e && this.addGroup(e)
            };
            r.prototype = {
                construct: r,
                requiresValidation: function(e) {
                    return !(e && !this.hasGroup(e)) && !(!e && this.hasGroups())
                },
                check: function(e, t) {
                    if (this.requiresValidation(t)) try {
                        return this.validate(e, t)
                    } catch (e) {
                        return e
                    }
                },
                hasGroup: function(e) {
                    return s(e) ? this.hasOneOf(e) : "Any" === e || (this.hasGroups() ? -1 !== this.groups.indexOf(e) : "Default" === e)
                },
                hasOneOf: function(e) {
                    for (var t = 0; t < e.length; t++)
                        if (this.hasGroup(e[t])) return !0;
                    return !1
                },
                hasGroups: function() {
                    return this.groups.length > 0
                },
                addGroup: function(e) {
                    return s(e) ? this.addGroups(e) : (this.hasGroup(e) || this.groups.push(e), this)
                },
                removeGroup: function(e) {
                    for (var t = [], a = 0; a < this.groups.length; a++) e !== this.groups[a] && t.push(this.groups[a]);
                    return this.groups = t, this
                },
                addGroups: function(e) {
                    for (var t = 0; t < e.length; t++) this.addGroup(e[t]);
                    return this
                },
                HaveProperty: function(e) {
                    return this.__class__ = "HaveProperty", this.node = e, this.validate = function(e) {
                        if (void 0 === e[this.node]) throw new i(this, e, {
                            value: this.node
                        });
                        return !0
                    }, this
                },
                Blank: function() {
                    return this.__class__ = "Blank", this.validate = function(e) {
                        if ("string" != typeof e) throw new i(this, e, {
                            value: t.errorCode.must_be_a_string
                        });
                        if ("" !== e.replace(/^\s+/g, "").replace(/\s+$/g, "")) throw new i(this, e);
                        return !0
                    }, this
                },
                Callback: function(e) {
                    if (this.__class__ = "Callback", this.arguments = Array.prototype.slice.call(arguments), 1 === this.arguments.length ? this.arguments = [] : this.arguments.splice(0, 1), "function" != typeof e) throw new Error("Callback must be instanciated with a function");
                    return this.fn = e, this.validate = function(e) {
                        var t = this.fn.apply(this, [e].concat(this.arguments));
                        if (!0 !== t) throw new i(this, e, {
                            result: t
                        });
                        return !0
                    }, this
                },
                Choice: function(e) {
                    if (this.__class__ = "Choice", !s(e) && "function" != typeof e) throw new Error("Choice must be instanciated with an array or a function");
                    return this.list = e, this.validate = function(e) {
                        for (var t = "function" == typeof this.list ? this.list() : this.list, a = 0; a < t.length; a++)
                            if (e === t[a]) return !0;
                        throw new i(this, e, {
                            choices: t
                        })
                    }, this
                },
                Collection: function(e) {
                    return this.__class__ = "Collection", this.constraint = void 0 !== e && (e instanceof r ? e : new a(e)), this.validate = function(e, a) {
                        var r, o = new t,
                            l = 0,
                            d = {},
                            c = this.groups.length ? this.groups : a;
                        if (!s(e)) throw new i(this, array, {
                            value: t.errorCode.must_be_an_array
                        });
                        for (var u = 0; u < e.length; u++) r = this.constraint ? o.validate(e[u], this.constraint, c) : o.validate(e[u], c), n(r) || (d[l] = r), l++;
                        return !!n(d) || d
                    }, this
                },
                Count: function(e) {
                    return this.__class__ = "Count", this.count = e, this.validate = function(e) {
                        if (!s(e)) throw new i(this, e, {
                            value: t.errorCode.must_be_an_array
                        });
                        var a = "function" == typeof this.count ? this.count(e) : this.count;
                        if (isNaN(Number(a))) throw new Error("Count must be a valid interger", a);
                        if (a !== e.length) throw new i(this, e, {
                            count: a
                        });
                        return !0
                    }, this
                },
                Email: function() {
                    return this.__class__ = "Email", this.validate = function(e) {
                        var a = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
                        if ("string" != typeof e) throw new i(this, e, {
                            value: t.errorCode.must_be_a_string
                        });
                        if (!a.test(e)) throw new i(this, e);
                        return !0
                    }, this
                },
                EqualTo: function(e) {
                    if (this.__class__ = "EqualTo", void 0 === e) throw new Error("EqualTo must be instanciated with a value or a function");
                    return this.reference = e, this.validate = function(e) {
                        var t = "function" == typeof this.reference ? this.reference(e) : this.reference;
                        if (t !== e) throw new i(this, e, {
                            value: t
                        });
                        return !0
                    }, this
                },
                GreaterThan: function(e) {
                    if (this.__class__ = "GreaterThan", void 0 === e) throw new Error("Should give a threshold value");
                    return this.threshold = e, this.validate = function(e) {
                        if ("" === e || isNaN(Number(e))) throw new i(this, e, {
                            value: t.errorCode.must_be_a_number
                        });
                        if (this.threshold >= e) throw new i(this, e, {
                            threshold: this.threshold
                        });
                        return !0
                    }, this
                },
                GreaterThanOrEqual: function(e) {
                    if (this.__class__ = "GreaterThanOrEqual", void 0 === e) throw new Error("Should give a threshold value");
                    return this.threshold = e, this.validate = function(e) {
                        if ("" === e || isNaN(Number(e))) throw new i(this, e, {
                            value: t.errorCode.must_be_a_number
                        });
                        if (this.threshold > e) throw new i(this, e, {
                            threshold: this.threshold
                        });
                        return !0
                    }, this
                },
                InstanceOf: function(e) {
                    if (this.__class__ = "InstanceOf", void 0 === e) throw new Error("InstanceOf must be instanciated with a value");
                    return this.classRef = e, this.validate = function(e) {
                        if (!0 != e instanceof this.classRef) throw new i(this, e, {
                            classRef: this.classRef
                        });
                        return !0
                    }, this
                },
                Length: function(e) {
                    if (this.__class__ = "Length", !e.min && !e.max) throw new Error("Lenth assert must be instanciated with a { min: x, max: y } object");
                    return this.min = e.min, this.max = e.max, this.validate = function(e) {
                        if ("string" != typeof e && !s(e)) throw new i(this, e, {
                            value: t.errorCode.must_be_a_string_or_array
                        });
                        if (void 0 !== this.min && this.min === this.max && e.length !== this.min) throw new i(this, e, {
                            min: this.min,
                            max: this.max
                        });
                        if (void 0 !== this.max && e.length > this.max) throw new i(this, e, {
                            max: this.max
                        });
                        if (void 0 !== this.min && e.length < this.min) throw new i(this, e, {
                            min: this.min
                        });
                        return !0
                    }, this
                },
                LessThan: function(e) {
                    if (this.__class__ = "LessThan", void 0 === e) throw new Error("Should give a threshold value");
                    return this.threshold = e, this.validate = function(e) {
                        if ("" === e || isNaN(Number(e))) throw new i(this, e, {
                            value: t.errorCode.must_be_a_number
                        });
                        if (this.threshold <= e) throw new i(this, e, {
                            threshold: this.threshold
                        });
                        return !0
                    }, this
                },
                LessThanOrEqual: function(e) {
                    if (this.__class__ = "LessThanOrEqual", void 0 === e) throw new Error("Should give a threshold value");
                    return this.threshold = e, this.validate = function(e) {
                        if ("" === e || isNaN(Number(e))) throw new i(this, e, {
                            value: t.errorCode.must_be_a_number
                        });
                        if (this.threshold < e) throw new i(this, e, {
                            threshold: this.threshold
                        });
                        return !0
                    }, this
                },
                NotNull: function() {
                    return this.__class__ = "NotNull", this.validate = function(e) {
                        if (null === e || void 0 === e) throw new i(this, e);
                        return !0
                    }, this
                },
                NotBlank: function() {
                    return this.__class__ = "NotBlank", this.validate = function(e) {
                        if ("string" != typeof e) throw new i(this, e, {
                            value: t.errorCode.must_be_a_string
                        });
                        if ("" === e.replace(/^\s+/g, "").replace(/\s+$/g, "")) throw new i(this, e);
                        return !0
                    }, this
                },
                Null: function() {
                    return this.__class__ = "Null", this.validate = function(e) {
                        if (null !== e) throw new i(this, e);
                        return !0
                    }, this
                },
                Range: function(e, t) {
                    if (this.__class__ = "Range", void 0 === e || void 0 === t) throw new Error("Range assert expects min and max values");
                    return this.min = e, this.max = t, this.validate = function(e) {
                        try {
                            return "string" == typeof e && isNaN(Number(e)) || s(e) ? (new r).Length({
                                min: this.min,
                                max: this.max
                            }).validate(e) : (new r).GreaterThanOrEqual(this.min).validate(e) && (new r).LessThanOrEqual(this.max).validate(e), !0
                        } catch (t) {
                            throw new i(this, e, t.violation)
                        }
                        return !0
                    }, this
                },
                Regexp: function(e, a) {
                    if (this.__class__ = "Regexp", void 0 === e) throw new Error("You must give a regexp");
                    return this.regexp = e, this.flag = a || "", this.validate = function(e) {
                        if ("string" != typeof e) throw new i(this, e, {
                            value: t.errorCode.must_be_a_string
                        });
                        if (!new RegExp(this.regexp, this.flag).test(e)) throw new i(this, e, {
                            regexp: this.regexp,
                            flag: this.flag
                        });
                        return !0
                    }, this
                },
                Required: function() {
                    return this.__class__ = "Required", this.validate = function(e) {
                        if (void 0 === e) throw new i(this, e);
                        try {
                            "string" == typeof e ? (new r).NotNull().validate(e) && (new r).NotBlank().validate(e) : !0 === s(e) && (new r).Length({
                                min: 1
                            }).validate(e)
                        } catch (t) {
                            throw new i(this, e)
                        }
                        return !0
                    }, this
                },
                Unique: function(e) {
                    return this.__class__ = "Unique", "object" == typeof e && (this.key = e.key), this.validate = function(e) {
                        var a, r = [];
                        if (!s(e)) throw new i(this, e, {
                            value: t.errorCode.must_be_an_array
                        });
                        for (var n = 0; n < e.length; n++)
                            if (void 0 !== (a = "object" == typeof e[n] ? e[n][this.key] : e[n])) {
                                if (-1 !== r.indexOf(a)) throw new i(this, e, {
                                    value: a
                                });
                                r.push(a)
                            }
                        return !0
                    }, this
                }
            }, e.Assert = r, e.Validator = t, e.Violation = i, e.Constraint = a, Array.prototype.indexOf || (Array.prototype.indexOf = function(e) {
                if (null === this) throw new TypeError;
                var t = Object(this),
                    a = t.length >>> 0;
                if (0 === a) return -1;
                var i = 0;
                if (arguments.length > 1 && (i = Number(arguments[1]), i != i ? i = 0 : 0 !== i && i != 1 / 0 && i != -1 / 0 && (i = (i > 0 || -1) * Math.floor(Math.abs(i)))), i >= a) return -1;
                for (var r = i >= 0 ? i : Math.max(a - Math.abs(i), 0); r < a; r++)
                    if (r in t && t[r] === e) return r;
                return -1
            });
            var n = function(e) {
                    for (var t in e) return !1;
                    return !0
                },
                s = function(e) {
                    return "[object Array]" === Object.prototype.toString.call(e)
                };
            return "function" == typeof define && define.amd ? define("vendors/validator.js/dist/validator", [], function() {
                return e
            }) : "undefined" != typeof module && module.exports ? module.exports = e : window["undefined" != typeof validatorjs_ns ? validatorjs_ns : "Validator"] = e, e
        }();
        r = void 0 !== r ? r : "undefined" != typeof module ? module.exports : null;
        var n = function(e, t) {
            this.__class__ = "ParsleyValidator", this.Validator = r, this.locale = "en", this.init(e || {}, t || {})
        };
        n.prototype = {
            init: function(t, a) {
                this.catalog = a;
                for (var i in t) this.addValidator(i, t[i].fn, t[i].priority, t[i].requirementsTransformer);
                e.emit("parsley:validator:init")
            },
            setLocale: function(e) {
                if (void 0 === this.catalog[e]) throw new Error(e + " is not available in the catalog");
                return this.locale = e, this
            },
            addCatalog: function(e, t, a) {
                return "object" == typeof t && (this.catalog[e] = t), !0 === a ? this.setLocale(e) : this
            },
            addMessage: function(e, t, a) {
                return void 0 === this.catalog[e] && (this.catalog[e] = {}), this.catalog[e][t.toLowerCase()] = a, this
            },
            validate: function(e, t, a) {
                return (new this.Validator.Validator).validate.apply(new r.Validator, arguments)
            },
            addValidator: function(t, a, i, n) {
                return this.validators[t.toLowerCase()] = function(t) {
                    return e.extend((new r.Assert).Callback(a, t), {
                        priority: i,
                        requirementsTransformer: n
                    })
                }, this
            },
            updateValidator: function(e, t, a, i) {
                return this.addValidator(e, t, a, i)
            },
            removeValidator: function(e) {
                return delete this.validators[e], this
            },
            getErrorMessage: function(e) {
                var t;
                return t = "type" === e.name ? this.catalog[this.locale][e.name][e.requirements] : this.formatMessage(this.catalog[this.locale][e.name], e.requirements), "" !== t ? t : this.catalog[this.locale].defaultMessage
            },
            formatMessage: function(e, t) {
                if ("object" == typeof t) {
                    for (var a in t) e = this.formatMessage(e, t[a]);
                    return e
                }
                return "string" == typeof e ? e.replace(new RegExp("%s", "i"), t) : ""
            },
            validators: {
                notblank: function() {
                    return e.extend((new r.Assert).NotBlank(), {
                        priority: 2
                    })
                },
                required: function() {
                    return e.extend((new r.Assert).Required(), {
                        priority: 512
                    })
                },
                type: function(t) {
                    var a;
                    switch (t) {
                        case "email":
                            a = (new r.Assert).Email();
                            break;
                        case "range":
                        case "number":
                            a = (new r.Assert).Regexp("^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$");
                            break;
                        case "integer":
                            a = (new r.Assert).Regexp("^-?\\d+$");
                            break;
                        case "digits":
                            a = (new r.Assert).Regexp("^\\d+$");
                            break;
                        case "alphanum":
                            a = (new r.Assert).Regexp("^\\w+$", "i");
                            break;
                        case "url":
                            a = (new r.Assert).Regexp("(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)", "i");
                            break;
                        default:
                            throw new Error("validator type `" + t + "` is not supported")
                    }
                    return e.extend(a, {
                        priority: 256
                    })
                },
                pattern: function(t) {
                    var a = "";
                    return /^\/.*\/(?:[gimy]*)$/.test(t) && (a = t.replace(/.*\/([gimy]*)$/, "$1"), t = t.replace(new RegExp("^/(.*?)/" + a + "$"), "$1")), e.extend((new r.Assert).Regexp(t, a), {
                        priority: 64
                    })
                },
                minlength: function(t) {
                    return e.extend((new r.Assert).Length({
                        min: t
                    }), {
                        priority: 30,
                        requirementsTransformer: function() {
                            return "string" != typeof t || isNaN(t) ? t : parseInt(t, 10)
                        }
                    })
                },
                maxlength: function(t) {
                    return e.extend((new r.Assert).Length({
                        max: t
                    }), {
                        priority: 30,
                        requirementsTransformer: function() {
                            return "string" != typeof t || isNaN(t) ? t : parseInt(t, 10)
                        }
                    })
                },
                length: function(t) {
                    return e.extend((new r.Assert).Length({
                        min: t[0],
                        max: t[1]
                    }), {
                        priority: 32
                    })
                },
                mincheck: function(e) {
                    return this.minlength(e)
                },
                maxcheck: function(e) {
                    return this.maxlength(e)
                },
                check: function(e) {
                    return this.length(e)
                },
                min: function(t) {
                    return e.extend((new r.Assert).GreaterThanOrEqual(t), {
                        priority: 30,
                        requirementsTransformer: function() {
                            return "string" != typeof t || isNaN(t) ? t : parseInt(t, 10)
                        }
                    })
                },
                max: function(t) {
                    return e.extend((new r.Assert).LessThanOrEqual(t), {
                        priority: 30,
                        requirementsTransformer: function() {
                            return "string" != typeof t || isNaN(t) ? t : parseInt(t, 10)
                        }
                    })
                },
                range: function(t) {
                    return e.extend((new r.Assert).Range(t[0], t[1]), {
                        priority: 32,
                        requirementsTransformer: function() {
                            for (var e = 0; e < t.length; e++) t[e] = "string" != typeof t[e] || isNaN(t[e]) ? t[e] : parseInt(t[e], 10);
                            return t
                        }
                    })
                },
                equalto: function(t) {
                    return e.extend((new r.Assert).EqualTo(t), {
                        priority: 256,
                        requirementsTransformer: function() {
                            return e(t).length ? e(t).val() : t
                        }
                    })
                }
            }
        };
        var s = function(e) {
            this.__class__ = "ParsleyUI"
        };
        s.prototype = {
            listen: function() {
                return e.listen("parsley:form:init", this, this.setupForm), e.listen("parsley:field:init", this, this.setupField), e.listen("parsley:field:validated", this, this.reflow), e.listen("parsley:form:validated", this, this.focus), e.listen("parsley:field:reset", this, this.reset), e.listen("parsley:form:destroy", this, this.destroy), e.listen("parsley:field:destroy", this, this.destroy), this
            },
            reflow: function(e) {
                if (void 0 !== e._ui && !1 !== e._ui.active) {
                    var t = this._diff(e.validationResult, e._ui.lastValidationResult);
                    e._ui.lastValidationResult = e.validationResult, e._ui.validatedOnce = !0, this.manageStatusClass(e), this.manageErrorsMessages(e, t), this.actualizeTriggers(e), (t.kept.length || t.added.length) && void 0 === e._ui.failedOnce && this.manageFailingFieldTrigger(e)
                }
            },
            getErrorsMessages: function(e) {
                if (!0 === e.validationResult) return [];
                for (var t = [], a = 0; a < e.validationResult.length; a++) t.push(this._getErrorMessage(e, e.validationResult[a].assert));
                return t
            },
            manageStatusClass: function(e) {
                !0 === e.validationResult ? this._successClass(e) : e.validationResult.length > 0 ? this._errorClass(e) : this._resetClass(e)
            },
            manageErrorsMessages: function(t, a) {
                if (void 0 === t.options.errorsMessagesDisabled) {
                    if (void 0 !== t.options.errorMessage) return a.added.length || a.kept.length ? (0 === t._ui.$errorsWrapper.find(".parsley-custom-error-message").length && t._ui.$errorsWrapper.append(e(t.options.errorTemplate).addClass("parsley-custom-error-message")), t._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(t.options.errorMessage)) : t._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove();
                    for (var i = 0; i < a.removed.length; i++) this.removeError(t, a.removed[i].assert.name, !0);
                    for (i = 0; i < a.added.length; i++) this.addError(t, a.added[i].assert.name, void 0, a.added[i].assert, !0);
                    for (i = 0; i < a.kept.length; i++) this.updateError(t, a.kept[i].assert.name, void 0, a.kept[i].assert, !0)
                }
            },
            addError: function(t, a, i, r, n) {
                t._ui.$errorsWrapper.addClass("filled").append(e(t.options.errorTemplate).addClass("parsley-" + a).html(i || this._getErrorMessage(t, r))), !0 !== n && this._errorClass(t)
            },
            updateError: function(e, t, a, i, r) {
                e._ui.$errorsWrapper.addClass("filled").find(".parsley-" + t).html(a || this._getErrorMessage(e, i)), !0 !== r && this._errorClass(e)
            },
            removeError: function(e, t, a) {
                e._ui.$errorsWrapper.removeClass("filled").find(".parsley-" + t).remove(), !0 !== a && this.manageStatusClass(e)
            },
            focus: function(e) {
                if (!0 === e.validationResult || "none" === e.options.focus) return e._focusedField = null;
                e._focusedField = null;
                for (var t = 0; t < e.fields.length; t++)
                    if (!0 !== e.fields[t].validationResult && e.fields[t].validationResult.length > 0 && void 0 === e.fields[t].options.noFocus) {
                        if ("first" === e.options.focus) return e._focusedField = e.fields[t].$element, e._focusedField.focus();
                        e._focusedField = e.fields[t].$element
                    }
                return null === e._focusedField ? null : e._focusedField.focus()
            },
            _getErrorMessage: function(e, t) {
                var a = t.name + "Message";
                return void 0 !== e.options[a] ? window.ParsleyValidator.formatMessage(e.options[a], t.requirements) : window.ParsleyValidator.getErrorMessage(t)
            },
            _diff: function(e, t, a) {
                for (var i = [], r = [], n = 0; n < e.length; n++) {
                    for (var s = !1, o = 0; o < t.length; o++)
                        if (e[n].assert.name === t[o].assert.name) {
                            s = !0;
                            break
                        }
                    s ? r.push(e[n]) : i.push(e[n])
                }
                return {
                    kept: r,
                    added: i,
                    removed: a ? [] : this._diff(t, e, !0).added
                }
            },
            setupForm: function(t) {
                t.$element.on("submit.Parsley", !1, e.proxy(t.onSubmitValidate, t)), !1 !== t.options.uiEnabled && t.$element.attr("novalidate", "")
            },
            setupField: function(t) {
                var a = {
                    active: !1
                };
                !1 !== t.options.uiEnabled && (a.active = !0, t.$element.attr(t.options.namespace + "id", t.__id__), a.$errorClassHandler = this._manageClassHandler(t), a.errorsWrapperId = "parsley-id-" + (void 0 !== t.options.multiple ? "multiple-" + t.options.multiple : t.__id__), a.$errorsWrapper = e(t.options.errorsWrapper).attr("id", a.errorsWrapperId), a.lastValidationResult = [], a.validatedOnce = !1, a.validationInformationVisible = !1, t._ui = a, t.$element.is(t.options.excluded) || this._insertErrorWrapper(t), this.actualizeTriggers(t))
            },
            _manageClassHandler: function(t) {
                if ("string" == typeof t.options.classHandler && e(t.options.classHandler).length) return e(t.options.classHandler);
                var a = t.options.classHandler(t);
                return void 0 !== a && a.length ? a : void 0 === t.options.multiple || t.$element.is("select") ? t.$element : t.$element.parent()
            },
            _insertErrorWrapper: function(t) {
                var a;
                if ("string" == typeof t.options.errorsContainer) {
                    if (e(t.options.errorsContainer).length) return e(t.options.errorsContainer).append(t._ui.$errorsWrapper);
                    window.console && window.console.warn
                } else "function" == typeof t.options.errorsContainer && (a = t.options.errorsContainer(t));
                return void 0 !== a && a.length ? a.append(t._ui.$errorsWrapper) : void 0 === t.options.multiple ? t.$element.after(t._ui.$errorsWrapper) : t.$element.parent().after(t._ui.$errorsWrapper)
            },
            actualizeTriggers: function(t) {
                var a = this;
                if (t.options.multiple ? e("[" + t.options.namespace + 'multiple="' + t.options.multiple + '"]').each(function() {
                        e(this).off(".Parsley")
                    }) : t.$element.off(".Parsley"), !1 !== t.options.trigger) {
                    var i = t.options.trigger.replace(/^\s+/g, "").replace(/\s+$/g, "");
                    "" !== i && (t.options.multiple ? e("[" + t.options.namespace + 'multiple="' + t.options.multiple + '"]').each(function() {
                        e(this).on(i.split(" ").join(".Parsley ") + ".Parsley", !1, e.proxy("function" == typeof t.eventValidate ? t.eventValidate : a.eventValidate, t))
                    }) : t.$element.on(i.split(" ").join(".Parsley ") + ".Parsley", !1, e.proxy("function" == typeof t.eventValidate ? t.eventValidate : this.eventValidate, t)))
                }
            },
            eventValidate: function(e) {
                new RegExp("key").test(e.type) && !this._ui.validationInformationVisible && this.getValue().length <= this.options.validationThreshold || (this._ui.validatedOnce = !0, this.validate())
            },
            manageFailingFieldTrigger: function(t) {
                return t._ui.failedOnce = !0, t.options.multiple && e("[" + t.options.namespace + 'multiple="' + t.options.multiple + '"]').each(function() {
                    if (!new RegExp("change", "i").test(e(this).parsley().options.trigger || "")) return e(this).on("change.ParsleyFailedOnce", !1, e.proxy(t.validate, t))
                }), t.$element.is("select") && !new RegExp("change", "i").test(t.options.trigger || "") ? t.$element.on("change.ParsleyFailedOnce", !1, e.proxy(t.validate, t)) : new RegExp("keyup", "i").test(t.options.trigger || "") ? void 0 : t.$element.on("keyup.ParsleyFailedOnce", !1, e.proxy(t.validate, t))
            },
            reset: function(e) {
                e.$element.off(".Parsley"), e.$element.off(".ParsleyFailedOnce"), void 0 !== e._ui && "ParsleyForm" !== e.__class__ && (e._ui.$errorsWrapper.removeClass("filled").children().remove(), this._resetClass(e), e._ui.validatedOnce = !1, e._ui.lastValidationResult = [], e._ui.validationInformationVisible = !1)
            },
            destroy: function(e) {
                this.reset(e), "ParsleyForm" !== e.__class__ && (void 0 !== e._ui && e._ui.$errorsWrapper.remove(), delete e._ui)
            },
            _successClass: function(e) {
                e._ui.validationInformationVisible = !0, e._ui.$errorClassHandler.removeClass(e.options.errorClass).addClass(e.options.successClass)
            },
            _errorClass: function(e) {
                e._ui.validationInformationVisible = !0, e._ui.$errorClassHandler.removeClass(e.options.successClass).addClass(e.options.errorClass)
            },
            _resetClass: function(e) {
                e._ui.$errorClassHandler.removeClass(e.options.successClass).removeClass(e.options.errorClass)
            }
        };
        var o = function(a, i, r, n) {
            this.__class__ = "OptionsFactory", this.__id__ = t.hash(4), this.formOptions = null, this.fieldOptions = null, this.staticOptions = e.extend(!0, {}, a, i, r, {
                namespace: n
            })
        };
        o.prototype = {
            get: function(e) {
                if (void 0 === e.__class__) throw new Error("Parsley Instance expected");
                switch (e.__class__) {
                    case "Parsley":
                        return this.staticOptions;
                    case "ParsleyForm":
                        return this.getFormOptions(e);
                    case "ParsleyField":
                    case "ParsleyFieldMultiple":
                        return this.getFieldOptions(e);
                    default:
                        throw new Error("Instance " + e.__class__ + " is not supported")
                }
            },
            getFormOptions: function(a) {
                return this.formOptions = t.attr(a.$element, this.staticOptions.namespace), e.extend({}, this.staticOptions, this.formOptions)
            },
            getFieldOptions: function(a) {
                return this.fieldOptions = t.attr(a.$element, this.staticOptions.namespace), null === this.formOptions && void 0 !== a.parent && (this.formOptions = this.getFormOptions(a.parent)), e.extend({}, this.staticOptions, this.formOptions, this.fieldOptions)
            }
        };
        var l = function(a, i) {
            if (this.__class__ = "ParsleyForm", this.__id__ = t.hash(4), "OptionsFactory" !== t.get(i, "__class__")) throw new Error("You must give an OptionsFactory instance");
            this.OptionsFactory = i, this.$element = e(a), this.validationResult = null, this.options = this.OptionsFactory.get(this)
        };
        l.prototype = {
            onSubmitValidate: function(t) {
                return this.validate(void 0, void 0, t), !1 === this.validationResult && t instanceof e.Event && (t.stopImmediatePropagation(), t.preventDefault()), this
            },
            validate: function(t, a, i) {
                this.submitEvent = i, this.validationResult = !0;
                var r = [];
                this._refreshFields(), e.emit("parsley:form:validate", this);
                for (var n = 0; n < this.fields.length; n++) t && !this._isFieldInGroup(this.fields[n], t) || !0 !== (r = this.fields[n].validate(a)) && r.length > 0 && this.validationResult && (this.validationResult = !1);
                return e.emit("parsley:form:validated", this), this.validationResult
            },
            isValid: function(e, t) {
                this._refreshFields();
                for (var a = 0; a < this.fields.length; a++)
                    if ((!e || this._isFieldInGroup(this.fields[a], e)) && !1 === this.fields[a].isValid(t)) return !1;
                return !0
            },
            _isFieldInGroup: function(a, i) {
                return t.isArray(a.options.group) ? -1 !== e.inArray(i, a.options.group) : a.options.group === i
            },
            _refreshFields: function() {
                return this.actualizeOptions()._bindFields()
            },
            _bindFields: function() {
                var e = this;
                return this.fields = [], this.fieldsMappedById = {}, this.$element.find(this.options.inputs).each(function() {
                    var t = new window.Parsley(this, {}, e);
                    "ParsleyField" !== t.__class__ && "ParsleyFieldMultiple" !== t.__class__ || t.$element.is(t.options.excluded) || void 0 === e.fieldsMappedById[t.__class__ + "-" + t.__id__] && (e.fieldsMappedById[t.__class__ + "-" + t.__id__] = t, e.fields.push(t))
                }), this
            }
        };
        var d = function(a, i, r, n, s) {
                if (!new RegExp("ParsleyField").test(t.get(a, "__class__"))) throw new Error("ParsleyField or ParsleyFieldMultiple instance expected");
                if ("function" != typeof window.ParsleyValidator.validators[i] && "Assert" !== window.ParsleyValidator.validators[i](r).__parentClass__) throw new Error("Valid validator expected");
                return n = n || function(e, a) {
                    return void 0 !== e.options[a + "Priority"] ? e.options[a + "Priority"] : t.get(window.ParsleyValidator.validators[a](r), "priority") || 2
                }(a, i), "function" == typeof window.ParsleyValidator.validators[i](r).requirementsTransformer && (r = window.ParsleyValidator.validators[i](r).requirementsTransformer()), e.extend(window.ParsleyValidator.validators[i](r), {
                    name: i,
                    requirements: r,
                    priority: n,
                    groups: [n],
                    isDomConstraint: s || t.attr(a.$element, a.options.namespace, i)
                })
            },
            c = function(a, i, r) {
                this.__class__ = "ParsleyField", this.__id__ = t.hash(4), this.$element = e(a), void 0 !== r ? (this.parent = r, this.OptionsFactory = this.parent.OptionsFactory, this.options = this.OptionsFactory.get(this)) : (this.OptionsFactory = i, this.options = this.OptionsFactory.get(this)), this.constraints = [], this.constraintsByName = {}, this.validationResult = [], this._bindConstraints()
            };
        c.prototype = {
            validate: function(t) {
                return this.value = this.getValue(), e.emit("parsley:field:validate", this), e.emit("parsley:field:" + (this.isValid(t, this.value) ? "success" : "error"), this), e.emit("parsley:field:validated", this), this.validationResult
            },
            isValid: function(e, t) {
                this.refreshConstraints();
                var a = this._getConstraintsSortedPriorities();
                if (0 === a.length) return this.validationResult = [];
                if (t = t || this.getValue(), !t.length && !this._isRequired() && void 0 === this.options.validateIfEmpty && !0 !== e) return this.validationResult = [];
                if (!1 === this.options.priorityEnabled) return !0 === (this.validationResult = this.validateThroughValidator(t, this.constraints, "Any"));
                for (var i = 0; i < a.length; i++)
                    if (!0 !== (this.validationResult = this.validateThroughValidator(t, this.constraints, a[i]))) return !1;
                return !0
            },
            getValue: function() {
                var e;
                return e = void 0 !== this.options.value ? this.options.value : this.$element.val(), void 0 === e || null === e ? "" : !0 === this.options.trimValue ? e.replace(/^\s+|\s+$/g, "") : e
            },
            refreshConstraints: function() {
                return this.actualizeOptions()._bindConstraints()
            },
            addConstraint: function(e, t, a, i) {
                if (e = e.toLowerCase(), "function" == typeof window.ParsleyValidator.validators[e]) {
                    var r = new d(this, e, t, a, i);
                    "undefined" !== this.constraintsByName[r.name] && this.removeConstraint(r.name), this.constraints.push(r), this.constraintsByName[r.name] = r
                }
                return this
            },
            removeConstraint: function(e) {
                for (var t = 0; t < this.constraints.length; t++)
                    if (e === this.constraints[t].name) {
                        this.constraints.splice(t, 1);
                        break
                    }
                return delete this.constraintsByName[e], this
            },
            updateConstraint: function(e, t, a) {
                return this.removeConstraint(e).addConstraint(e, t, a)
            },
            _bindConstraints: function() {
                for (var e = [], t = {}, a = 0; a < this.constraints.length; a++) !1 === this.constraints[a].isDomConstraint && (e.push(this.constraints[a]), t[this.constraints[a].name] = this.constraints[a]);
                this.constraints = e, this.constraintsByName = t;
                for (var i in this.options) this.addConstraint(i, this.options[i]);
                return this._bindHtml5Constraints()
            },
            _bindHtml5Constraints: function() {
                (this.$element.hasClass("required") || this.$element.attr("required")) && this.addConstraint("required", !0, void 0, !0), "string" == typeof this.$element.attr("pattern") && this.addConstraint("pattern", this.$element.attr("pattern"), void 0, !0), void 0 !== this.$element.attr("min") && void 0 !== this.$element.attr("max") ? this.addConstraint("range", [this.$element.attr("min"), this.$element.attr("max")], void 0, !0) : void 0 !== this.$element.attr("min") ? this.addConstraint("min", this.$element.attr("min"), void 0, !0) : void 0 !== this.$element.attr("max") && this.addConstraint("max", this.$element.attr("max"), void 0, !0);
                var e = this.$element.attr("type");
                return void 0 === e ? this : "number" === e ? void 0 === this.$element.attr("step") || 0 == parseFloat(this.$element.attr("step")) % 1 ? this.addConstraint("type", "integer", void 0, !0) : this.addConstraint("type", "number", void 0, !0) : new RegExp(e, "i").test("email url range") ? this.addConstraint("type", e, void 0, !0) : this
            },
            _isRequired: function() {
                return void 0 !== this.constraintsByName.required && !1 !== this.constraintsByName.required.requirements
            },
            _getConstraintsSortedPriorities: function() {
                for (var e = [], t = 0; t < this.constraints.length; t++) - 1 === e.indexOf(this.constraints[t].priority) && e.push(this.constraints[t].priority);
                return e.sort(function(e, t) {
                    return t - e
                }), e
            }
        };
        var u = function() {
            this.__class__ = "ParsleyFieldMultiple"
        };
        u.prototype = {
            addElement: function(e) {
                return this.$elements.push(e), this
            },
            refreshConstraints: function() {
                var t;
                if (this.constraints = [], this.$element.is("select")) return this.actualizeOptions()._bindConstraints(), this;
                for (var a = 0; a < this.$elements.length; a++)
                    if (e("html").has(this.$elements[a]).length) {
                        t = this.$elements[a].data("ParsleyFieldMultiple").refreshConstraints().constraints;
                        for (var i = 0; i < t.length; i++) this.addConstraint(t[i].name, t[i].requirements, t[i].priority, t[i].isDomConstraint)
                    } else this.$elements.splice(a, 1);
                return this
            },
            getValue: function() {
                if (void 0 !== this.options.value) return this.options.value;
                if (this.$element.is("input[type=radio]")) return e("[" + this.options.namespace + 'multiple="' + this.options.multiple + '"]:checked').val() || "";
                if (this.$element.is("input[type=checkbox]")) {
                    var t = [];
                    return e("[" + this.options.namespace + 'multiple="' + this.options.multiple + '"]:checked').each(function() {
                        t.push(e(this).val())
                    }), t.length ? t : []
                }
                return this.$element.is("select") && null === this.$element.val() ? [] : this.$element.val()
            },
            _init: function(e) {
                return this.$elements = [this.$element], this.options.multiple = e, this
            }
        };
        var p = e({}),
            f = {};
        e.listen = function(e) {
            if (void 0 === f[e] && (f[e] = []), "function" == typeof arguments[1]) return f[e].push({
                fn: arguments[1]
            });
            if ("object" == typeof arguments[1] && "function" == typeof arguments[2]) return f[e].push({
                fn: arguments[2],
                ctxt: arguments[1]
            });
            throw new Error("Wrong parameters")
        }, e.listenTo = function(e, t, a) {
            if (void 0 === f[t] && (f[t] = []), !(e instanceof c || e instanceof l)) throw new Error("Must give Parsley instance");
            if ("string" != typeof t || "function" != typeof a) throw new Error("Wrong parameters");
            f[t].push({
                instance: e,
                fn: a
            })
        }, e.unsubscribe = function(e, t) {
            if (void 0 !== f[e]) {
                if ("string" != typeof e || "function" != typeof t) throw new Error("Wrong arguments");
                for (var a = 0; a < f[e].length; a++)
                    if (f[e][a].fn === t) return f[e].splice(a, 1)
            }
        }, e.unsubscribeTo = function(e, t) {
            if (void 0 !== f[t]) {
                if (!(e instanceof c || e instanceof l)) throw new Error("Must give Parsley instance");
                for (var a = 0; a < f[t].length; a++)
                    if (void 0 !== f[t][a].instance && f[t][a].instance.__id__ === e.__id__) return f[t].splice(a, 1)
            }
        }, e.unsubscribeAll = function(e) {
            void 0 !== f[e] && delete f[e]
        }, e.emit = function(e, t) {
            if (void 0 !== f[e])
                for (var a = 0; a < f[e].length; a++)
                    if (void 0 !== f[e][a].instance) {
                        if (t instanceof c || t instanceof l)
                            if (f[e][a].instance.__id__ !== t.__id__) {
                                if (f[e][a].instance instanceof l && t instanceof c)
                                    for (var i = 0; i < f[e][a].instance.fields.length; i++)
                                        if (f[e][a].instance.fields[i].__id__ === t.__id__) {
                                            f[e][a].fn.apply(p, Array.prototype.slice.call(arguments, 1));
                                            continue
                                        }
                            } else f[e][a].fn.apply(p, Array.prototype.slice.call(arguments, 1))
                    } else f[e][a].fn.apply(void 0 !== f[e][a].ctxt ? f[e][a].ctxt : p, Array.prototype.slice.call(arguments, 1))
        }, e.subscribed = function() {
            return f
        }, window.ParsleyConfig = window.ParsleyConfig || {}, window.ParsleyConfig.i18n = window.ParsleyConfig.i18n || {}, window.ParsleyConfig.i18n.en = e.extend(window.ParsleyConfig.i18n.en || {}, {
            defaultMessage: "This value seems to be invalid.",
            type: {
                email: "This value should be a valid email.",
                url: "This value should be a valid url.",
                number: "This value should be a valid number.",
                integer: "This value should be a valid integer.",
                digits: "This value should be digits.",
                alphanum: "This value should be alphanumeric."
            },
            notblank: "This value should not be blank.",
            required: "This value is required.",
            pattern: "This value seems to be invalid.",
            min: "This value should be greater than or equal to %s.",
            max: "This value should be lower than or equal to %s.",
            range: "This value should be between %s and %s.",
            minlength: "This value is too short. It should have %s characters or more.",
            maxlength: "This value is too long. It should have %s characters or fewer.",
            length: "This value length is invalid. It should be between %s and %s characters long.",
            mincheck: "You must select at least %s choices.",
            maxcheck: "You must select %s choices or fewer.",
            check: "You must select between %s and %s choices.",
            equalto: "This value should be the same."
        }), void 0 !== window.ParsleyValidator && window.ParsleyValidator.addCatalog("en", window.ParsleyConfig.i18n.en, !0);
        var h = function(a, i, r) {
            if (this.__class__ = "Parsley", this.__version__ = "2.0.6", this.__id__ = t.hash(4), void 0 === a) throw new Error("You must give an element");
            if (void 0 !== r && "ParsleyForm" !== r.__class__) throw new Error("Parent instance must be a ParsleyForm instance");
            return this.init(e(a), i, r)
        };
        h.prototype = {
            init: function(e, i, r) {
                if (!e.length) throw new Error("You must bind Parsley on an existing element.");
                if (this.$element = e, this.$element.data("Parsley")) {
                    var n = this.$element.data("Parsley");
                    return void 0 !== r && (n.parent = r), n
                }
                return this.OptionsFactory = new o(a, t.get(window, "ParsleyConfig") || {}, i, this.getNamespace(i)), this.options = this.OptionsFactory.get(this), this.$element.is("form") || t.attr(this.$element, this.options.namespace, "validate") && !this.$element.is(this.options.inputs) ? this.bind("parsleyForm") : this.$element.is(this.options.inputs) && !this.$element.is(this.options.excluded) ? this.isMultiple() ? this.handleMultiple(r) : this.bind("parsleyField", r) : this
            },
            isMultiple: function() {
                return this.$element.is("input[type=radio], input[type=checkbox]") && void 0 === this.options.multiple || this.$element.is("select") && void 0 !== this.$element.attr("multiple")
            },
            handleMultiple: function(a) {
                var i, r, n, s = this;
                if (this.options = e.extend(this.options, a ? a.OptionsFactory.get(a) : {}, t.attr(this.$element, this.options.namespace)), this.options.multiple ? r = this.options.multiple : void 0 !== this.$element.attr("name") && this.$element.attr("name").length ? r = i = this.$element.attr("name") : void 0 !== this.$element.attr("id") && this.$element.attr("id").length && (r = this.$element.attr("id")), this.$element.is("select") && void 0 !== this.$element.attr("multiple")) return this.bind("parsleyFieldMultiple", a, r || this.__id__);
                if (void 0 === r) return window.console && window.console.warn, this;
                if (r = r.replace(/(:|\.|\[|\]|\{|\}|\$)/g, ""), void 0 !== i && e('input[name="' + i + '"]').each(function() {
                        e(this).is("input[type=radio], input[type=checkbox]") && e(this).attr(s.options.namespace + "multiple", r)
                    }), e("[" + this.options.namespace + "multiple=" + r + "]").length)
                    for (var o = 0; o < e("[" + this.options.namespace + "multiple=" + r + "]").length; o++)
                        if (void 0 !== e(e("[" + this.options.namespace + "multiple=" + r + "]").get(o)).data("Parsley")) {
                            n = e(e("[" + this.options.namespace + "multiple=" + r + "]").get(o)).data("Parsley"), this.$element.data("ParsleyFieldMultiple") || (n.addElement(this.$element), this.$element.attr(this.options.namespace + "id", n.__id__));
                            break
                        }
                return this.bind("parsleyField", a, r, !0), n || this.bind("parsleyFieldMultiple", a, r)
            },
            getNamespace: function(e) {
                return void 0 !== this.$element.data("parsleyNamespace") ? this.$element.data("parsleyNamespace") : void 0 !== t.get(e, "namespace") ? e.namespace : void 0 !== t.get(window, "ParsleyConfig.namespace") ? window.ParsleyConfig.namespace : a.namespace
            },
            bind: function(a, r, n, s) {
                var o;
                switch (a) {
                    case "parsleyForm":
                        o = e.extend(new l(this.$element, this.OptionsFactory), new i, window.ParsleyExtend)._bindFields();
                        break;
                    case "parsleyField":
                        o = e.extend(new c(this.$element, this.OptionsFactory, r), new i, window.ParsleyExtend);
                        break;
                    case "parsleyFieldMultiple":
                        o = e.extend(new c(this.$element, this.OptionsFactory, r), new i, new u, window.ParsleyExtend)._init(n);
                        break;
                    default:
                        throw new Error(a + "is not a supported Parsley type")
                }
                return void 0 !== n && t.setAttr(this.$element, this.options.namespace, "multiple", n), void 0 !== s ? (this.$element.data("ParsleyFieldMultiple", o), o) : (new RegExp("ParsleyF", "i").test(o.__class__) && (this.$element.data("Parsley", o), e.emit("parsley:" + ("parsleyForm" === a ? "form" : "field") + ":init", o)), o)
            }
        }, e.fn.parsley = e.fn.psly = function(t) {
            if (this.length > 1) {
                var a = [];
                return this.each(function() {
                    a.push(e(this).parsley(t))
                }), a
            }
            return e(this).length ? new h(this, t) : void(window.console && window.console.warn)
        }, window.ParsleyUI = "function" == typeof t.get(window, "ParsleyConfig.ParsleyUI") ? (new window.ParsleyConfig.ParsleyUI).listen() : (new s).listen(), void 0 === window.ParsleyExtend && (window.ParsleyExtend = {}), void 0 === window.ParsleyConfig && (window.ParsleyConfig = {}), window.Parsley = window.psly = h, window.ParsleyUtils = t, window.ParsleyValidator = new n(window.ParsleyConfig.validators, window.ParsleyConfig.i18n), !1 !== t.get(window, "ParsleyConfig.autoBind") && e(function() {
            e("[data-parsley-validate]").length && e("[data-parsley-validate]").parsley()
        })
    });
var browserDetect = {};
$vf(function() {
    void 0 == bowser.version && (bowser.version = 999);
    var e = JSON.stringify(bowser.name).replace(/"/g, ""),
        t = JSON.stringify(bowser.version).replace(/"/g, ""),
        a = parseFloat(bowser.osversion),
        i = !1;
    "iPhone" != e && "iPad" != e && "iPod" != e || (i = !0), browserDetect = {
        browserName: e,
        browserVersion: t,
        simpleOsVersion: a,
        ios: i
    }, i && $vf("html").addClass("device-ios"), bowser.android && $vf("html").addClass("device-android"), bowser.windowsphone && $vf("html").addClass("device-windowsphone"), bowser.blackberry && $vf("html").addClass("device-blackberry"), bowser.firefoxos && $vf("html").addClass("device-firefoxos"), bowser.webos && $vf("html").addClass("device-webos"), bowser.tablet || bowser.mobile ? (bowser.mobile && $vf("html").addClass("device-mobile"), bowser.tablet && $vf("html").addClass("device-tablet")) : $vf("html").addClass("device-desktop"), $vf("html").addClass("browser-name-" + e.toLowerCase().replace(/\s+/g, "-") + " browser-version-" + parseInt(t)), "Android" == e && $vf("meta[name=viewport]").attr("content", "width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no"), i && t >= 9 && $vf("meta[name=viewport]").attr("content", $vf("meta[name=viewport]").attr("content") + ", shrink-to-fit=no"), ("Android" == e || i && t < 7 || "Internet Explorer" == e && t < 10) && $vf("html").addClass("gif-loader"), "Internet Explorer" == e && t < 10 && $vf("html").addClass("old-ie"), androidNumberToTel()
});
var datepickerGlobalOptions = {
    showAnim: "fadeIn",
    hideIfNoPrevNext: !0,
    dateFormat: "mm/dd/y",
    dayNamesMin: ["S", "M", "T", "W", "T", "F", "S"],
    showOtherMonths: !0,
    selectOtherMonths: !0,
    onClose: function(e, t) {
        t.dpDiv.attr("aria-hidden", !0).prop("hidden", !0)
    },
    onSelect: function() {
        var e = $vf(this).datepicker("getDate"),
            t = $vf.datepicker.formatDate("m/dd/yy", e);
        if ($vf(this).closest("[data-field-id]").length > 0) {
            var a = $vf(this).closest("[data-field-id]").data("field-id"),
                i = $vf("#" + a);
            i.is("input, textarea") ? (i.val(t).addClass("value"), "function" == typeof Parsley && $vf("#" + a).parsley().validate()) : i.text(t)
        }
        $vf(this).is("input, textarea") && $vf(this).addClass("value")
    }
};
$vf.extend($vf.datepicker, {
    _doKeyDown: function(e) {
        var t, a, i, r = $vf.datepicker._getInst(e.target),
            n = !0,
            s = r.dpDiv.is(".ui-datepicker-rtl");
        if (r._keyEvent = !0, $vf.datepicker._datepickerShowing) switch (e.keyCode) {
            case 9:
                $vf.datepicker._hideDatepicker(), n = !1;
                break;
            case 13:
                return i = $vf("td." + $vf.datepicker._dayOverClass + ":not(." + $vf.datepicker._currentClass + ")", r.dpDiv), i[0] && $vf.datepicker._selectDay(e.target, r.selectedMonth, r.selectedYear, i[0]), t = $vf.datepicker._get(r, "onSelect"), t ? (a = $vf.datepicker._formatDate(r), t.apply(r.input ? r.input[0] : null, [a, r])) : $vf.datepicker._hideDatepicker(), !1;
            case 27:
                $vf.datepicker._hideDatepicker();
                break;
            case 33:
                $vf.datepicker._adjustDate(e.target, e || e.ctrlKey ? -$vf.datepicker._get(r, "stepBigMonths") : -$vf.datepicker._get(r, "stepMonths"), "M");
                break;
            case 34:
                $vf.datepicker._adjustDate(e.target, e || e.ctrlKey ? +$vf.datepicker._get(r, "stepBigMonths") : +$vf.datepicker._get(r, "stepMonths"), "M");
                break;
            case 35:
                (e || e.ctrlKey || e.metaKey) && $vf.datepicker._clearDate(e.target), n = e || e.ctrlKey || e.metaKey;
                break;
            case 36:
                (e || e.ctrlKey || e.metaKey) && $vf.datepicker._gotoToday(e.target), n = e || e.ctrlKey || e.metaKey;
                break;
            case 37:
                (e || e.ctrlKey || e.metaKey) && $vf.datepicker._adjustDate(e.target, s ? 1 : -1, "D"), n = e || e.ctrlKey || e.metaKey, e.originalEvent.altKey && $vf.datepicker._adjustDate(e.target, e || e.ctrlKey ? -$vf.datepicker._get(r, "stepBigMonths") : -$vf.datepicker._get(r, "stepMonths"), "M");
                break;
            case 38:
                (e || e.ctrlKey || e.metaKey) && $vf.datepicker._adjustDate(e.target, -7, "D"), n = e || e.ctrlKey || e.metaKey;
                break;
            case 39:
                (e || e.ctrlKey || e.metaKey) && $vf.datepicker._adjustDate(e.target, s ? -1 : 1, "D"), n = e || e.ctrlKey || e.metaKey, e.originalEvent.altKey && $vf.datepicker._adjustDate(e.target, e || e.ctrlKey ? +$vf.datepicker._get(r, "stepBigMonths") : +$vf.datepicker._get(r, "stepMonths"), "M");
                break;
            case 40:
                (e || e.ctrlKey || e.metaKey) && $vf.datepicker._adjustDate(e.target, 7, "D"), n = e || e.ctrlKey || e.metaKey;
                break;
            default:
                n = !1
        } else 36 === e.keyCode && e || e.ctrlKey ? $vf.datepicker._showDatepicker(this) : n = !1;
        n && (e.preventDefault(), e.stopPropagation())
    }
}), $vf.extend($vf.datepicker, {
    _generateHTML_original: $vf.datepicker._generateHTML,
    _generateHTML: function(e) {
        var t = $vf(this._generateHTML_original(e)),
            a = e.dpDiv;
        return a.attr("aria-hidden", !1).prop("hidden", !1), setTimeout(function() {
            $vf(".ui-datepicker", a).attr("aria-hidden", "true").prop("hidden", !0), $vf(".ui-datepicker-month", a).attr("aria-label", "month"), $vf(".ui-datepicker-year", a).attr("aria-label", "year"), $vf(".ui-datepicker-calendar", a).attr({
                role: "grid",
                "aria-label": "month year"
            }), $vf(".ui-datepicker-prev", a).attr({
                "aria-label": "previous"
            }), $vf(".ui-datepicker-next", a).attr({
                "aria-label": "next"
            })
        }, 100), t
    }
}), $vf(function() {
    $vf(window).on("resize", function(e, t, a) {
        var i;
        return function() {
            var r = this,
                n = arguments,
                s = function() {
                    i = null, a || e.apply(r, n)
                },
                o = a && !i;
            clearTimeout(i), i = setTimeout(s, t), o && e.apply(r, n)
        }
    }(function() {
        $vf("[data-modal].active").length && (modalHeightSetter(), setTimeout(function() {
            modalHeightSetter()
        }, 200), $vf("[data-modal].active").find("iframe").length && modalIframeSizing())
    }, 100)), $vf(window).on("orientationchange", function() {
        $vf("[data-modal].active").length && (modalHeightSetter(), $vf("[data-modal].active").find("iframe").length && modalIframeSizing())
    })
});
var setPersonal = ratingSetPersonal,
    setAverage = ratingSetAverage,
    vfSwipers = {};

/**************** 
    Starter vzrfInit() template. Modify to your custom Needs!! 
****************/

// Choose an alias for jQuery. If this line is removed, will default to VZRF's internally used, $vf
//var $ = $vf;

// Where context = id || jQuery object || undefined.
function vzrfInit(context) {
	// Accessibility
	a11yInit(context);

	// init components and utility
	datepickerInit(context);
	equalHeightsInit(context);
	equalWidthsInit(context);
	formsInit(context);
	fixedBottomInit(context);
	incrementInit(context);
	revealInit(context);
	xScrollInit(context);
	stickyInit(context);

	// init widgets
	dropListInit(context);
	filterBarInit(context);
	listControlInit(context);
	modalInit(context);
	paginationInit(context);
	pwToggleInit(context);
	ratingInit(context);
	stepsInit(context);
	swiperInit(context);
	tabsInit(context);
	tooltipInit(context);

	// app specific components/widgets
	appInit(context);
}

// wait until everything else, including images load
$vf(window).load(function() {
	equalHeightsInit();
	equalWidthsInit();
});

// run on DOM ready
$vf(function() {
	vzrfInit();
});

// Function to return the context as a jQuery object
// Where context = id || jQuery object || undefined.
function getContext(context) {
	var $context;
	if (context instanceof $vf || context instanceof jQuery) {
		$context = context;
	} else if (context) {
		$context = $vf('#' + context);
	} else {
		$context = $vf(document);
	}
	return $context;
}

/*! VZRF Version 2.20.0 */
/*!
 * Swiper 2.7.6
 * Mobile touch slider and framework with hardware accelerated transitions
 *
 * http://www.idangero.us/sliders/swiper/
 *
 * Copyright 2010-2015, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under GPL & MIT
 *
 * Released on: February 11, 2015
 */
var Swiper = function(selector, params) {
    'use strict';
    /*=========================
      A little bit dirty but required part for IE8 and old FF support
      ===========================*/
    if (!document.body.outerHTML && document.body.__defineGetter__) {
        if (HTMLElement) {
            var element = HTMLElement.prototype;
            if (element.__defineGetter__) {
                element.__defineGetter__('outerHTML', function() {
                    return new XMLSerializer().serializeToString(this);
                });
            }
        }
    }
    if (!window.getComputedStyle) {
        window.getComputedStyle = function(el, pseudo) {
            this.el = el;
            this.getPropertyValue = function(prop) {
                var re = /(\-([a-z]){1})/g;
                if (prop === 'float') prop = 'styleFloat';
                if (re.test(prop)) {
                    prop = prop.replace(re, function() {
                        return arguments[2].toUpperCase();
                    });
                }
                return el.currentStyle[prop] ? el.currentStyle[prop] : null;
            };
            return this;
        };
    }
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(obj, start) {
            for (var i = (start || 0), j = this.length; i < j; i++) {
                if (this[i] === obj) {
                    return i;
                }
            }
            return -1;
        };
    }
    if (!document.querySelectorAll) {
        if (!window.jQuery) return;
    }
    function $$(selector, context) {
        if (document.querySelectorAll)
            return (context || document).querySelectorAll(selector);
        else
            return jQuery(selector, context);
    }
    /*=========================
      Check for correct selector
      ===========================*/
    if (typeof selector === 'undefined') return;
    if (!(selector.nodeType)) {
        if ($$(selector).length === 0) return;
    }
    /*=========================
     _this
     ===========================*/
    var _this = this;
    /*=========================
     Default Flags and vars
     ===========================*/
    _this.touches = {
        start: 0,
        startX: 0,
        startY: 0,
        current: 0,
        currentX: 0,
        currentY: 0,
        diff: 0,
        abs: 0
    };
    _this.positions = {
        start: 0,
        abs: 0,
        diff: 0,
        current: 0
    };
    _this.times = {
        start: 0,
        end: 0
    };
    _this.id = (new Date()).getTime();
    _this.container = (selector.nodeType) ? selector : $$(selector)[0];
    _this.isTouched = false;
    _this.isMoved = false;
    _this.activeIndex = 0;
    _this.centerIndex = 0;
    _this.activeLoaderIndex = 0;
    _this.activeLoopIndex = 0;
    _this.previousIndex = null;
    _this.velocity = 0;
    _this.snapGrid = [];
    _this.slidesGrid = [];
    _this.imagesToLoad = [];
    _this.imagesLoaded = 0;
    _this.wrapperLeft = 0;
    _this.wrapperRight = 0;
    _this.wrapperTop = 0;
    _this.wrapperBottom = 0;
    _this.isAndroid = navigator.userAgent.toLowerCase().indexOf('android') >= 0;
    var wrapper, slideSize, wrapperSize, direction, isScrolling, containerSize;
    /*=========================
      Default Parameters
      ===========================*/
    var defaults = {
        eventTarget: 'wrapper', // or 'container'
        mode: 'horizontal', // or 'vertical'
        touchRatio: 1,
        speed: 300,
        freeMode: false,
        freeModeFluid: false,
        momentumRatio: 1,
        momentumBounce: true,
        momentumBounceRatio: 1,
        slidesPerView: 1,
        slidesPerGroup: 1,
        slidesPerViewFit: true, //Fit to slide when spv "auto" and slides larger than container
        simulateTouch: true,
        followFinger: true,
        shortSwipes: true,
        longSwipesRatio: 0.5,
        moveStartThreshold: false,
        onlyExternal: false,
        createPagination: true,
        pagination: false,
        paginationElement: 'span',
        paginationClickable: false,
        paginationAsRange: true,
        resistance: true, // or false or 100%
        scrollContainer: false,
        preventLinks: true,
        preventLinksPropagation: false,
        noSwiping: false, // or class
        noSwipingClass: 'swiper-no-swiping', //:)
        initialSlide: 0,
        keyboardControl: false,
        mousewheelControl: false,
        mousewheelControlForceToAxis: false,
        useCSS3Transforms: true,
        // Autoplay
        autoplay: false,
        autoplayDisableOnInteraction: true,
        autoplayStopOnLast: false,
        //Loop mode
        loop: false,
        loopAdditionalSlides: 0,
        // Round length values
        roundLengths: false,
        //Auto Height
        calculateHeight: false,
        //Apply CSS for width and/or height
        cssWidthAndHeight: false, // or true or 'width' or 'height'
        //Images Preloader
        updateOnImagesReady: true,
        //Form elements
        releaseFormElements: true,
        //Watch for active slide, useful when use effects on different slide states
        watchActiveIndex: false,
        //Slides Visibility Fit
        visibilityFullFit: false,
        //Slides Offset
        offsetPxBefore: 0,
        offsetPxAfter: 0,
        offsetSlidesBefore: 0,
        offsetSlidesAfter: 0,
        centeredSlides: false,
        //Queue callbacks
        queueStartCallbacks: false,
        queueEndCallbacks: false,
        //Auto Resize
        autoResize: true,
        resizeReInit: false,
        //DOMAnimation
        DOMAnimation: true,
        //Slides Loader
        loader: {
            slides: [], //array with slides
            slidesHTMLType: 'inner', // or 'outer'
            surroundGroups: 1, //keep preloaded slides groups around view
            logic: 'reload', //or 'change'
            loadAllSlides: false
        },
        // One way swipes
        swipeToPrev: true,
        swipeToNext: true,
        //Namespace
        slideElement: 'div',
        slideClass: 'swiper-slide',
        slideActiveClass: 'swiper-slide-active',
        slideVisibleClass: 'swiper-slide-visible',
        slideDuplicateClass: 'swiper-slide-duplicate',
        wrapperClass: 'swiper-wrapper',
        paginationElementClass: 'swiper-pagination-switch',
        paginationActiveClass: 'swiper-active-switch',
        paginationVisibleClass: 'swiper-visible-switch'
    };
    params = params || {};
    for (var prop in defaults) {
        if (prop in params && typeof params[prop] === 'object') {
            for (var subProp in defaults[prop]) {
                if (!(subProp in params[prop])) {
                    params[prop][subProp] = defaults[prop][subProp];
                }
            }
        } else if (!(prop in params)) {
            params[prop] = defaults[prop];
        }
    }
    _this.params = params;
    if (params.scrollContainer) {
        params.freeMode = true;
        params.freeModeFluid = true;
    }
    if (params.loop) {
        params.resistance = '100%';
    }
    var isH = params.mode === 'horizontal';
    /*=========================
      Define Touch Events
      ===========================*/
    var desktopEvents = ['mousedown', 'mousemove', 'mouseup'];
    if (_this.browser.ie10) desktopEvents = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
    if (_this.browser.ie11) desktopEvents = ['pointerdown', 'pointermove', 'pointerup'];
    _this.touchEvents = {
        touchStart: _this.support.touch || !params.simulateTouch ? 'touchstart' : desktopEvents[0],
        touchMove: _this.support.touch || !params.simulateTouch ? 'touchmove' : desktopEvents[1],
        touchEnd: _this.support.touch || !params.simulateTouch ? 'touchend' : desktopEvents[2]
    };
    /*=========================
      Wrapper
      ===========================*/
    for (var i = _this.container.childNodes.length - 1; i >= 0; i--) {
        if (_this.container.childNodes[i].className) {
            var _wrapperClasses = _this.container.childNodes[i].className.split(/\s+/);
            for (var j = 0; j < _wrapperClasses.length; j++) {
                if (_wrapperClasses[j] === params.wrapperClass) {
                    wrapper = _this.container.childNodes[i];
                }
            }
        }
    }
    _this.wrapper = wrapper;
    /*=========================
      Slide API
      ===========================*/
    _this._extendSwiperSlide = function(el) {
        el.append = function() {
            if (params.loop) {
                el.insertAfter(_this.slides.length - _this.loopedSlides);
            } else {
                _this.wrapper.appendChild(el);
                _this.reInit();
            }
            return el;
        };
        el.prepend = function() {
            if (params.loop) {
                _this.wrapper.insertBefore(el, _this.slides[_this.loopedSlides]);
                _this.removeLoopedSlides();
                _this.calcSlides();
                _this.createLoop();
            } else {
                _this.wrapper.insertBefore(el, _this.wrapper.firstChild);
            }
            _this.reInit();
            return el;
        };
        el.insertAfter = function(index) {
            if (typeof index === 'undefined') return false;
            var beforeSlide;
            if (params.loop) {
                beforeSlide = _this.slides[index + 1 + _this.loopedSlides];
                if (beforeSlide) {
                    _this.wrapper.insertBefore(el, beforeSlide);
                } else {
                    _this.wrapper.appendChild(el);
                }
                _this.removeLoopedSlides();
                _this.calcSlides();
                _this.createLoop();
            } else {
                beforeSlide = _this.slides[index + 1];
                _this.wrapper.insertBefore(el, beforeSlide);
            }
            _this.reInit();
            return el;
        };
        el.clone = function() {
            return _this._extendSwiperSlide(el.cloneNode(true));
        };
        el.remove = function() {
            _this.wrapper.removeChild(el);
            _this.reInit();
        };
        el.html = function(html) {
            if (typeof html === 'undefined') {
                return el.innerHTML;
            } else {
                el.innerHTML = html;
                return el;
            }
        };
        el.index = function() {
            var index;
            for (var i = _this.slides.length - 1; i >= 0; i--) {
                if (el === _this.slides[i]) index = i;
            }
            return index;
        };
        el.isActive = function() {
            if (el.index() === _this.activeIndex) return true;
            else return false;
        };
        if (!el.swiperSlideDataStorage) el.swiperSlideDataStorage = {};
        el.getData = function(name) {
            return el.swiperSlideDataStorage[name];
        };
        el.setData = function(name, value) {
            el.swiperSlideDataStorage[name] = value;
            return el;
        };
        el.data = function(name, value) {
            if (typeof value === 'undefined') {
                return el.getAttribute('data-' + name);
            } else {
                el.setAttribute('data-' + name, value);
                return el;
            }
        };
        el.getWidth = function(outer, round) {
            return _this.h.getWidth(el, outer, round);
        };
        el.getHeight = function(outer, round) {
            return _this.h.getHeight(el, outer, round);
        };
        el.getOffset = function() {
            return _this.h.getOffset(el);
        };
        return el;
    };
    //Calculate information about number of slides
    _this.calcSlides = function(forceCalcSlides) {
        var oldNumber = _this.slides ? _this.slides.length : false;
        _this.slides = [];
        _this.displaySlides = [];
        for (var i = 0; i < _this.wrapper.childNodes.length; i++) {
            if (_this.wrapper.childNodes[i].className) {
                var _className = _this.wrapper.childNodes[i].className;
                var _slideClasses = _className.split(/\s+/);
                for (var j = 0; j < _slideClasses.length; j++) {
                    if (_slideClasses[j] === params.slideClass) {
                        _this.slides.push(_this.wrapper.childNodes[i]);
                    }
                }
            }
        }
        for (i = _this.slides.length - 1; i >= 0; i--) {
            _this._extendSwiperSlide(_this.slides[i]);
        }
        if (oldNumber === false) return;
        if (oldNumber !== _this.slides.length || forceCalcSlides) {
            // Number of slides has been changed
            removeSlideEvents();
            addSlideEvents();
            _this.updateActiveSlide();
            if (_this.params.pagination) _this.createPagination();
            _this.callPlugins('numberOfSlidesChanged');
        }
    };
    //Create Slide
    _this.createSlide = function(html, slideClassList, el) {
        slideClassList = slideClassList || _this.params.slideClass;
        el = el || params.slideElement;
        var newSlide = document.createElement(el);
        newSlide.innerHTML = html || '';
        newSlide.className = slideClassList;
        return _this._extendSwiperSlide(newSlide);
    };
    //Append Slide
    _this.appendSlide = function(html, slideClassList, el) {
        if (!html) return;
        if (html.nodeType) {
            return _this._extendSwiperSlide(html).append();
        } else {
            return _this.createSlide(html, slideClassList, el).append();
        }
    };
    _this.prependSlide = function(html, slideClassList, el) {
        if (!html) return;
        if (html.nodeType) {
            return _this._extendSwiperSlide(html).prepend();
        } else {
            return _this.createSlide(html, slideClassList, el).prepend();
        }
    };
    _this.insertSlideAfter = function(index, html, slideClassList, el) {
        if (typeof index === 'undefined') return false;
        if (html.nodeType) {
            return _this._extendSwiperSlide(html).insertAfter(index);
        } else {
            return _this.createSlide(html, slideClassList, el).insertAfter(index);
        }
    };
    _this.removeSlide = function(index) {
        if (_this.slides[index]) {
            if (params.loop) {
                if (!_this.slides[index + _this.loopedSlides]) return false;
                _this.slides[index + _this.loopedSlides].remove();
                _this.removeLoopedSlides();
                _this.calcSlides();
                _this.createLoop();
            } else _this.slides[index].remove();
            return true;
        } else return false;
    };
    _this.removeLastSlide = function() {
        if (_this.slides.length > 0) {
            if (params.loop) {
                _this.slides[_this.slides.length - 1 - _this.loopedSlides].remove();
                _this.removeLoopedSlides();
                _this.calcSlides();
                _this.createLoop();
            } else _this.slides[_this.slides.length - 1].remove();
            return true;
        } else {
            return false;
        }
    };
    _this.removeAllSlides = function() {
        var num = _this.slides.length;
        for (var i = _this.slides.length - 1; i >= 0; i--) {
            _this.slides[i].remove();
            if (i === num - 1) {
                _this.setWrapperTranslate(0);
            }
        }
    };
    _this.getSlide = function(index) {
        return _this.slides[index];
    };
    _this.getLastSlide = function() {
        return _this.slides[_this.slides.length - 1];
    };
    _this.getFirstSlide = function() {
        return _this.slides[0];
    };
    //Currently Active Slide
    _this.activeSlide = function() {
        return _this.slides[_this.activeIndex];
    };
    /*=========================
     Wrapper for Callbacks : Allows additive callbacks via function arrays
     ===========================*/
    _this.fireCallback = function() {
        var callback = arguments[0];
        if (Object.prototype.toString.call(callback) === '[object Array]') {
            for (var i = 0; i < callback.length; i++) {
                if (typeof callback[i] === 'function') {
                    callback[i](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                }
            }
        } else if (Object.prototype.toString.call(callback) === '[object String]') {
            if (params['on' + callback]) _this.fireCallback(params['on' + callback], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        } else {
            callback(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
    };
    function isArray(obj) {
        if (Object.prototype.toString.apply(obj) === '[object Array]') return true;
        return false;
    }
    /**
     * Allows user to add callbacks, rather than replace them
     * @param callback
     * @param func
     * @return {*}
     */
    _this.addCallback = function(callback, func) {
        var _this = this,
            tempFunc;
        if (_this.params['on' + callback]) {
            if (isArray(this.params['on' + callback])) {
                return this.params['on' + callback].push(func);
            } else if (typeof this.params['on' + callback] === 'function') {
                tempFunc = this.params['on' + callback];
                this.params['on' + callback] = [];
                this.params['on' + callback].push(tempFunc);
                return this.params['on' + callback].push(func);
            }
        } else {
            this.params['on' + callback] = [];
            return this.params['on' + callback].push(func);
        }
    };
    _this.removeCallbacks = function(callback) {
        if (_this.params['on' + callback]) {
            _this.params['on' + callback] = null;
        }
    };
    /*=========================
      Plugins API
      ===========================*/
    var _plugins = [];
    for (var plugin in _this.plugins) {
        if (params[plugin]) {
            var p = _this.plugins[plugin](_this, params[plugin]);
            if (p) _plugins.push(p);
        }
    }
    _this.callPlugins = function(method, args) {
        if (!args) args = {};
        for (var i = 0; i < _plugins.length; i++) {
            if (method in _plugins[i]) {
                _plugins[i][method](args);
            }
        }
    };
    /*=========================
      Windows Phone 8 Fix
      ===========================*/
    if ((_this.browser.ie10 || _this.browser.ie11) && !params.onlyExternal) {
        _this.wrapper.classList.add('swiper-wp8-' + (isH ? 'horizontal' : 'vertical'));
    }
    /*=========================
      Free Mode Class
      ===========================*/
    if (params.freeMode) {
        _this.container.className += ' swiper-free-mode';
    }
    /*==================================================
        Init/Re-init/Resize Fix
    ====================================================*/
    _this.initialized = false;
    _this.init = function(force, forceCalcSlides) {
        var _width = _this.h.getWidth(_this.container, false, params.roundLengths);
        var _height = _this.h.getHeight(_this.container, false, params.roundLengths);
        if (_width === _this.width && _height === _this.height && !force) return;
        _this.width = _width;
        _this.height = _height;
        var slideWidth, slideHeight, slideMaxHeight, wrapperWidth, wrapperHeight, slideLeft;
        var i; // loop index variable to avoid JSHint W004 / W038
        containerSize = isH ? _width : _height;
        var wrapper = _this.wrapper;
        if (force) {
            _this.calcSlides(forceCalcSlides);
        }
        if (params.slidesPerView === 'auto') {
            //Auto mode
            var slidesWidth = 0;
            var slidesHeight = 0;
            //Unset Styles
            if (params.slidesOffset > 0) {
                wrapper.style.paddingLeft = '';
                wrapper.style.paddingRight = '';
                wrapper.style.paddingTop = '';
                wrapper.style.paddingBottom = '';
            }
            wrapper.style.width = '';
            wrapper.style.height = '';
            if (params.offsetPxBefore > 0) {
                if (isH) _this.wrapperLeft = params.offsetPxBefore;
                else _this.wrapperTop = params.offsetPxBefore;
            }
            if (params.offsetPxAfter > 0) {
                if (isH) _this.wrapperRight = params.offsetPxAfter;
                else _this.wrapperBottom = params.offsetPxAfter;
            }
            if (params.centeredSlides) {
                if (isH) {
                    _this.wrapperLeft = (containerSize - this.slides[0].getWidth(true, params.roundLengths)) / 2;
                    _this.wrapperRight = (containerSize - _this.slides[_this.slides.length - 1].getWidth(true, params.roundLengths)) / 2;
                } else {
                    _this.wrapperTop = (containerSize - _this.slides[0].getHeight(true, params.roundLengths)) / 2;
                    _this.wrapperBottom = (containerSize - _this.slides[_this.slides.length - 1].getHeight(true, params.roundLengths)) / 2;
                }
            }
            if (isH) {
                if (_this.wrapperLeft >= 0) wrapper.style.paddingLeft = _this.wrapperLeft + 'px';
                if (_this.wrapperRight >= 0) wrapper.style.paddingRight = _this.wrapperRight + 'px';
            } else {
                if (_this.wrapperTop >= 0) wrapper.style.paddingTop = _this.wrapperTop + 'px';
                if (_this.wrapperBottom >= 0) wrapper.style.paddingBottom = _this.wrapperBottom + 'px';
            }
            slideLeft = 0;
            var centeredSlideLeft = 0;
            _this.snapGrid = [];
            _this.slidesGrid = [];
            slideMaxHeight = 0;
            for (i = 0; i < _this.slides.length; i++) {
                slideWidth = _this.slides[i].getWidth(true, params.roundLengths);
                slideHeight = _this.slides[i].getHeight(true, params.roundLengths);
                if (params.calculateHeight) {
                    slideMaxHeight = Math.max(slideMaxHeight, slideHeight);
                }
                var _slideSize = isH ? slideWidth : slideHeight;
                if (params.centeredSlides) {
                    var nextSlideWidth = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getWidth(true, params.roundLengths);
                    var nextSlideHeight = i === _this.slides.length - 1 ? 0 : _this.slides[i + 1].getHeight(true, params.roundLengths);
                    var nextSlideSize = isH ? nextSlideWidth : nextSlideHeight;
                    if (_slideSize > containerSize) {
                        if (params.slidesPerViewFit) {
                            _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                            _this.snapGrid.push(slideLeft + _slideSize - containerSize + _this.wrapperLeft);
                        } else {
                            for (var j = 0; j <= Math.floor(_slideSize / (containerSize + _this.wrapperLeft)); j++) {
                                if (j === 0) _this.snapGrid.push(slideLeft + _this.wrapperLeft);
                                else _this.snapGrid.push(slideLeft + _this.wrapperLeft + containerSize * j);
                            }
                        }
                        _this.slidesGrid.push(slideLeft + _this.wrapperLeft);
                    } else {
                        _this.snapGrid.push(centeredSlideLeft);
                        _this.slidesGrid.push(centeredSlideLeft);
                    }
                    centeredSlideLeft += _slideSize / 2 + nextSlideSize / 2;
                } else {
                    if (_slideSize > containerSize) {
                        if (params.slidesPerViewFit) {
                            _this.snapGrid.push(slideLeft);
                            _this.snapGrid.push(slideLeft + _slideSize - containerSize);
                        } else {
                            if (containerSize !== 0) {
                                for (var k = 0; k <= Math.floor(_slideSize / containerSize); k++) {
                                    _this.snapGrid.push(slideLeft + containerSize * k);
                                }
                            } else {
                                _this.snapGrid.push(slideLeft);
                            }
                        }
                    } else {
                        _this.snapGrid.push(slideLeft);
                    }
                    _this.slidesGrid.push(slideLeft);
                }
                slideLeft += _slideSize;
                slidesWidth += slideWidth;
                slidesHeight += slideHeight;
            }
            if (params.calculateHeight) _this.height = slideMaxHeight;
            if (isH) {
                wrapperSize = slidesWidth + _this.wrapperRight + _this.wrapperLeft;
                if (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'height') {
                    wrapper.style.width = (slidesWidth) + 'px';
                }
                if (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'width') {
                    wrapper.style.height = (_this.height) + 'px';
                }
            } else {
                if (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'height') {
                    wrapper.style.width = (_this.width) + 'px';
                }
                if (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'width') {
                    wrapper.style.height = (slidesHeight) + 'px';
                }
                wrapperSize = slidesHeight + _this.wrapperTop + _this.wrapperBottom;
            }
        } else if (params.scrollContainer) {
            //Scroll Container
            wrapper.style.width = '';
            wrapper.style.height = '';
            wrapperWidth = _this.slides[0].getWidth(true, params.roundLengths);
            wrapperHeight = _this.slides[0].getHeight(true, params.roundLengths);
            wrapperSize = isH ? wrapperWidth : wrapperHeight;
            wrapper.style.width = wrapperWidth + 'px';
            wrapper.style.height = wrapperHeight + 'px';
            slideSize = isH ? wrapperWidth : wrapperHeight;
        } else {
            //For usual slides
            if (params.calculateHeight) {
                slideMaxHeight = 0;
                wrapperHeight = 0;
                //ResetWrapperSize
                if (!isH) _this.container.style.height = '';
                wrapper.style.height = '';
                for (i = 0; i < _this.slides.length; i++) {
                    //ResetSlideSize
                    _this.slides[i].style.height = '';
                    slideMaxHeight = Math.max(_this.slides[i].getHeight(true), slideMaxHeight);
                    if (!isH) wrapperHeight += _this.slides[i].getHeight(true);
                }
                slideHeight = slideMaxHeight;
                _this.height = slideHeight;
                if (isH) wrapperHeight = slideHeight;
                else {
                    containerSize = slideHeight;
                    _this.container.style.height = containerSize + 'px';
                }
            } else {
                slideHeight = isH ? _this.height : _this.height / params.slidesPerView;
                if (params.roundLengths) slideHeight = Math.ceil(slideHeight);
                wrapperHeight = isH ? _this.height : _this.slides.length * slideHeight;
            }
            slideWidth = isH ? _this.width / params.slidesPerView : _this.width;
            if (params.roundLengths) slideWidth = Math.ceil(slideWidth);
            wrapperWidth = isH ? _this.slides.length * slideWidth : _this.width;
            slideSize = isH ? slideWidth : slideHeight;
            if (params.offsetSlidesBefore > 0) {
                if (isH) _this.wrapperLeft = slideSize * params.offsetSlidesBefore;
                else _this.wrapperTop = slideSize * params.offsetSlidesBefore;
            }
            if (params.offsetSlidesAfter > 0) {
                if (isH) _this.wrapperRight = slideSize * params.offsetSlidesAfter;
                else _this.wrapperBottom = slideSize * params.offsetSlidesAfter;
            }
            if (params.offsetPxBefore > 0) {
                if (isH) _this.wrapperLeft = params.offsetPxBefore;
                else _this.wrapperTop = params.offsetPxBefore;
            }
            if (params.offsetPxAfter > 0) {
                if (isH) _this.wrapperRight = params.offsetPxAfter;
                else _this.wrapperBottom = params.offsetPxAfter;
            }
            if (params.centeredSlides) {
                if (isH) {
                    _this.wrapperLeft = (containerSize - slideSize) / 2;
                    _this.wrapperRight = (containerSize - slideSize) / 2;
                } else {
                    _this.wrapperTop = (containerSize - slideSize) / 2;
                    _this.wrapperBottom = (containerSize - slideSize) / 2;
                }
            }
            if (isH) {
                if (_this.wrapperLeft > 0) wrapper.style.paddingLeft = _this.wrapperLeft + 'px';
                if (_this.wrapperRight > 0) wrapper.style.paddingRight = _this.wrapperRight + 'px';
            } else {
                if (_this.wrapperTop > 0) wrapper.style.paddingTop = _this.wrapperTop + 'px';
                if (_this.wrapperBottom > 0) wrapper.style.paddingBottom = _this.wrapperBottom + 'px';
            }
            wrapperSize = isH ? wrapperWidth + _this.wrapperRight + _this.wrapperLeft : wrapperHeight + _this.wrapperTop + _this.wrapperBottom;
            if (parseFloat(wrapperWidth) > 0 && (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'height')) {
                wrapper.style.width = wrapperWidth + 'px';
            }
            if (parseFloat(wrapperHeight) > 0 && (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'width')) {
                wrapper.style.height = wrapperHeight + 'px';
            }
            slideLeft = 0;
            _this.snapGrid = [];
            _this.slidesGrid = [];
            for (i = 0; i < _this.slides.length; i++) {
                _this.snapGrid.push(slideLeft);
                _this.slidesGrid.push(slideLeft);
                slideLeft += slideSize;
                if (parseFloat(slideWidth) > 0 && (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'height')) {
                    _this.slides[i].style.width = slideWidth + 'px';
                }
                if (parseFloat(slideHeight) > 0 && (!params.cssWidthAndHeight || params.cssWidthAndHeight === 'width')) {
                    _this.slides[i].style.height = slideHeight + 'px';
                }
            }
        }
        if (!_this.initialized) {
            _this.callPlugins('onFirstInit');
            if (params.onFirstInit) _this.fireCallback(params.onFirstInit, _this);
        } else {
            _this.callPlugins('onInit');
            if (params.onInit) _this.fireCallback(params.onInit, _this);
        }
        _this.initialized = true;
    };
    _this.reInit = function(forceCalcSlides) {
        _this.init(true, forceCalcSlides);
    };
    _this.resizeFix = function(reInit) {
        _this.callPlugins('beforeResizeFix');
        _this.init(params.resizeReInit || reInit);
        // swipe to active slide in fixed mode
        if (!params.freeMode) {
            _this.swipeTo((params.loop ? _this.activeLoopIndex : _this.activeIndex), 0, false);
            // Fix autoplay
            if (params.autoplay) {
                if (_this.support.transitions && typeof autoplayTimeoutId !== 'undefined') {
                    if (typeof autoplayTimeoutId !== 'undefined') {
                        clearTimeout(autoplayTimeoutId);
                        autoplayTimeoutId = undefined;
                        _this.startAutoplay();
                    }
                } else {
                    if (typeof autoplayIntervalId !== 'undefined') {
                        clearInterval(autoplayIntervalId);
                        autoplayIntervalId = undefined;
                        _this.startAutoplay();
                    }
                }
            }
        }
        // move wrapper to the beginning in free mode
        else if (_this.getWrapperTranslate() < -maxWrapperPosition()) {
            _this.setWrapperTransition(0);
            _this.setWrapperTranslate(-maxWrapperPosition());
        }
        _this.callPlugins('afterResizeFix');
    };
    /*==========================================
        Max and Min Positions
    ============================================*/
    function maxWrapperPosition() {
        var a = (wrapperSize - containerSize);
        if (params.freeMode) {
            a = wrapperSize - containerSize;
        }
        // if (params.loop) a -= containerSize;
        if (params.slidesPerView > _this.slides.length && !params.centeredSlides) {
            a = 0;
        }
        if (a < 0) a = 0;
        return a;
    }
    /*==========================================
        Event Listeners
    ============================================*/
    function initEvents() {
        var bind = _this.h.addEventListener;
        var eventTarget = params.eventTarget === 'wrapper' ? _this.wrapper : _this.container;
        //Touch Events
        if (!(_this.browser.ie10 || _this.browser.ie11)) {
            if (_this.support.touch) {
                bind(eventTarget, 'touchstart', onTouchStart);
                bind(eventTarget, 'touchmove', onTouchMove);
                bind(eventTarget, 'touchend', onTouchEnd);
            }
            if (params.simulateTouch) {
                bind(eventTarget, 'mousedown', onTouchStart);
                bind(document, 'mousemove', onTouchMove);
                bind(document, 'mouseup', onTouchEnd);
            }
        } else {
            bind(eventTarget, _this.touchEvents.touchStart, onTouchStart);
            bind(document, _this.touchEvents.touchMove, onTouchMove);
            bind(document, _this.touchEvents.touchEnd, onTouchEnd);
        }
        //Resize Event
        if (params.autoResize) {
            bind(window, 'resize', _this.resizeFix);
        }
        //Slide Events
        addSlideEvents();
        //Mousewheel
        _this._wheelEvent = false;
        if (params.mousewheelControl) {
            if (document.onmousewheel !== undefined) {
                _this._wheelEvent = 'mousewheel';
            }
            if (!_this._wheelEvent) {
                try {
                    new WheelEvent('wheel');
                    _this._wheelEvent = 'wheel';
                } catch (e) {}
            }
            if (!_this._wheelEvent) {
                _this._wheelEvent = 'DOMMouseScroll';
            }
            if (_this._wheelEvent) {
                bind(_this.container, _this._wheelEvent, handleMousewheel);
            }
        }
        //Keyboard
        function _loadImage(img) {
            var image, src;
            var onReady = function() {
                if (typeof _this === 'undefined' || _this === null) return;
                if (_this.imagesLoaded !== undefined) _this.imagesLoaded++;
                if (_this.imagesLoaded === _this.imagesToLoad.length) {
                    _this.reInit();
                    if (params.onImagesReady) _this.fireCallback(params.onImagesReady, _this);
                }
            };
            if (!img.complete) {
                src = (img.currentSrc || img.getAttribute('src'));
                if (src) {
                    image = new Image();
                    image.onload = onReady;
                    image.onerror = onReady;
                    image.src = src;
                } else {
                    onReady();
                }
            } else { //image already loaded...
                onReady();
            }
        }
        if (params.keyboardControl) {
            bind(document, 'keydown', handleKeyboardKeys);
        }
        if (params.updateOnImagesReady) {
            _this.imagesToLoad = $$('img', _this.container);
            for (var i = 0; i < _this.imagesToLoad.length; i++) {
                _loadImage(_this.imagesToLoad[i]);
            }
        }
    }
    //Remove Event Listeners
    _this.destroy = function(removeStyles) {
        var unbind = _this.h.removeEventListener;
        var eventTarget = params.eventTarget === 'wrapper' ? _this.wrapper : _this.container;
        //Touch Events
        if (!(_this.browser.ie10 || _this.browser.ie11)) {
            if (_this.support.touch) {
                unbind(eventTarget, 'touchstart', onTouchStart);
                unbind(eventTarget, 'touchmove', onTouchMove);
                unbind(eventTarget, 'touchend', onTouchEnd);
            }
            if (params.simulateTouch) {
                unbind(eventTarget, 'mousedown', onTouchStart);
                unbind(document, 'mousemove', onTouchMove);
                unbind(document, 'mouseup', onTouchEnd);
            }
        } else {
            unbind(eventTarget, _this.touchEvents.touchStart, onTouchStart);
            unbind(document, _this.touchEvents.touchMove, onTouchMove);
            unbind(document, _this.touchEvents.touchEnd, onTouchEnd);
        }
        //Resize Event
        if (params.autoResize) {
            unbind(window, 'resize', _this.resizeFix);
        }
        //Init Slide Events
        removeSlideEvents();
        //Pagination
        if (params.paginationClickable) {
            removePaginationEvents();
        }
        //Mousewheel
        if (params.mousewheelControl && _this._wheelEvent) {
            unbind(_this.container, _this._wheelEvent, handleMousewheel);
        }
        //Keyboard
        if (params.keyboardControl) {
            unbind(document, 'keydown', handleKeyboardKeys);
        }
        //Stop autoplay
        if (params.autoplay) {
            _this.stopAutoplay();
        }
        // Remove styles
        if (removeStyles) {
            _this.wrapper.removeAttribute('style');
            for (var i = 0; i < _this.slides.length; i++) {
                _this.slides[i].removeAttribute('style');
            }
        }
        // Plugins
        _this.callPlugins('onDestroy');
        // Check jQuery/Zepto data
        if (window.jQuery && window.jQuery(_this.container).data('swiper')) {
            window.jQuery(_this.container).removeData('swiper');
        }
        if (window.Zepto && window.Zepto(_this.container).data('swiper')) {
            window.Zepto(_this.container).removeData('swiper');
        }
        //Destroy variable
        _this = null;
    };
    function addSlideEvents() {
        var bind = _this.h.addEventListener,
            i;
        //Prevent Links Events
        if (params.preventLinks) {
            var links = $$('a', _this.container);
            for (i = 0; i < links.length; i++) {
                bind(links[i], 'click', preventClick);
            }
        }
        //Release Form Elements
        if (params.releaseFormElements) {
            var formElements = $$('input, textarea, select', _this.container);
            for (i = 0; i < formElements.length; i++) {
                bind(formElements[i], _this.touchEvents.touchStart, releaseForms, true);
                if (_this.support.touch && params.simulateTouch) {
                    bind(formElements[i], 'mousedown', releaseForms, true);
                }
            }
        }
        //Slide Clicks & Touches
        if (params.onSlideClick) {
            for (i = 0; i < _this.slides.length; i++) {
                bind(_this.slides[i], 'click', slideClick);
            }
        }
        if (params.onSlideTouch) {
            for (i = 0; i < _this.slides.length; i++) {
                bind(_this.slides[i], _this.touchEvents.touchStart, slideTouch);
            }
        }
    }
    function removeSlideEvents() {
        var unbind = _this.h.removeEventListener,
            i;
        //Slide Clicks & Touches
        if (params.onSlideClick) {
            for (i = 0; i < _this.slides.length; i++) {
                unbind(_this.slides[i], 'click', slideClick);
            }
        }
        if (params.onSlideTouch) {
            for (i = 0; i < _this.slides.length; i++) {
                unbind(_this.slides[i], _this.touchEvents.touchStart, slideTouch);
            }
        }
        //Release Form Elements
        if (params.releaseFormElements) {
            var formElements = $$('input, textarea, select', _this.container);
            for (i = 0; i < formElements.length; i++) {
                unbind(formElements[i], _this.touchEvents.touchStart, releaseForms, true);
                if (_this.support.touch && params.simulateTouch) {
                    unbind(formElements[i], 'mousedown', releaseForms, true);
                }
            }
        }
        //Prevent Links Events
        if (params.preventLinks) {
            var links = $$('a', _this.container);
            for (i = 0; i < links.length; i++) {
                unbind(links[i], 'click', preventClick);
            }
        }
    }
    /*==========================================
        Keyboard Control
    ============================================*/
    function handleKeyboardKeys(e) {
        var kc = e.keyCode || e.charCode;
        if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) return;
        if (kc === 37 || kc === 39 || kc === 38 || kc === 40) {
            var inView = false;
            //Check that swiper should be inside of visible area of window
            var swiperOffset = _this.h.getOffset(_this.container);
            var scrollLeft = _this.h.windowScroll().left;
            var scrollTop = _this.h.windowScroll().top;
            var windowWidth = _this.h.windowWidth();
            var windowHeight = _this.h.windowHeight();
            var swiperCoord = [
                [swiperOffset.left, swiperOffset.top],
                [swiperOffset.left + _this.width, swiperOffset.top],
                [swiperOffset.left, swiperOffset.top + _this.height],
                [swiperOffset.left + _this.width, swiperOffset.top + _this.height]
            ];
            for (var i = 0; i < swiperCoord.length; i++) {
                var point = swiperCoord[i];
                if (
                    point[0] >= scrollLeft && point[0] <= scrollLeft + windowWidth &&
                    point[1] >= scrollTop && point[1] <= scrollTop + windowHeight
                ) {
                    inView = true;
                }
            }
            if (!inView) return;
        }
        if (isH) {
            if (kc === 37 || kc === 39) {
                if (e.preventDefault) e.preventDefault();
                else e.returnValue = false;
            }
            if (kc === 39) _this.swipeNext();
            if (kc === 37) _this.swipePrev();
        } else {
            if (kc === 38 || kc === 40) {
                if (e.preventDefault) e.preventDefault();
                else e.returnValue = false;
            }
            if (kc === 40) _this.swipeNext();
            if (kc === 38) _this.swipePrev();
        }
    }
    _this.disableKeyboardControl = function() {
        params.keyboardControl = false;
        _this.h.removeEventListener(document, 'keydown', handleKeyboardKeys);
    };
    _this.enableKeyboardControl = function() {
        params.keyboardControl = true;
        _this.h.addEventListener(document, 'keydown', handleKeyboardKeys);
    };
    /*==========================================
        Mousewheel Control
    ============================================*/
    var lastScrollTime = (new Date()).getTime();
    function handleMousewheel(e) {
        var we = _this._wheelEvent;
        var delta = 0;
        //Opera & IE
        if (e.detail) delta = -e.detail;
        //WebKits
        else if (we === 'mousewheel') {
            if (params.mousewheelControlForceToAxis) {
                if (isH) {
                    if (Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY)) delta = e.wheelDeltaX;
                    else return;
                } else {
                    if (Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX)) delta = e.wheelDeltaY;
                    else return;
                }
            } else {
                delta = e.wheelDelta;
            }
        }
        //Old FireFox
        else if (we === 'DOMMouseScroll') delta = -e.detail;
        //New FireFox
        else if (we === 'wheel') {
            if (params.mousewheelControlForceToAxis) {
                if (isH) {
                    if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) delta = -e.deltaX;
                    else return;
                } else {
                    if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) delta = -e.deltaY;
                    else return;
                }
            } else {
                delta = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? -e.deltaX : -e.deltaY;
            }
        }
        if (!params.freeMode) {
            if ((new Date()).getTime() - lastScrollTime > 60) {
                if (delta < 0) _this.swipeNext();
                else _this.swipePrev();
            }
            lastScrollTime = (new Date()).getTime();
        } else {
            //Freemode or scrollContainer:
            var position = _this.getWrapperTranslate() + delta;
            if (position > 0) position = 0;
            if (position < -maxWrapperPosition()) position = -maxWrapperPosition();
            _this.setWrapperTransition(0);
            _this.setWrapperTranslate(position);
            _this.updateActiveSlide(position);
            // Return page scroll on edge positions
            if (position === 0 || position === -maxWrapperPosition()) return;
        }
        if (params.autoplay) _this.stopAutoplay(true);
        if (e.preventDefault) e.preventDefault();
        else e.returnValue = false;
        return false;
    }
    _this.disableMousewheelControl = function() {
        if (!_this._wheelEvent) return false;
        params.mousewheelControl = false;
        _this.h.removeEventListener(_this.container, _this._wheelEvent, handleMousewheel);
        return true;
    };
    _this.enableMousewheelControl = function() {
        if (!_this._wheelEvent) return false;
        params.mousewheelControl = true;
        _this.h.addEventListener(_this.container, _this._wheelEvent, handleMousewheel);
        return true;
    };
    /*=========================
      Grab Cursor
      ===========================*/
    if (params.grabCursor) {
        var containerStyle = _this.container.style;
        containerStyle.cursor = 'move';
        containerStyle.cursor = 'grab';
        containerStyle.cursor = '-moz-grab';
        containerStyle.cursor = '-webkit-grab';
    }
    /*=========================
      Slides Events Handlers
      ===========================*/
    _this.allowSlideClick = true;
    function slideClick(event) {
        if (_this.allowSlideClick) {
            setClickedSlide(event);
            _this.fireCallback(params.onSlideClick, _this, event);
        }
    }
    function slideTouch(event) {
        setClickedSlide(event);
        _this.fireCallback(params.onSlideTouch, _this, event);
    }
    function setClickedSlide(event) {
        // IE 6-8 support
        if (!event.currentTarget) {
            var element = event.srcElement;
            do {
                if (element.className.indexOf(params.slideClass) > -1) {
                    break;
                }
                element = element.parentNode;
            } while (element);
            _this.clickedSlide = element;
        } else {
            _this.clickedSlide = event.currentTarget;
        }
        _this.clickedSlideIndex = _this.slides.indexOf(_this.clickedSlide);
        _this.clickedSlideLoopIndex = _this.clickedSlideIndex - (_this.loopedSlides || 0);
    }
    _this.allowLinks = true;
    function preventClick(e) {
        if (!_this.allowLinks) {
            if (e.preventDefault) e.preventDefault();
            else e.returnValue = false;
            if (params.preventLinksPropagation && 'stopPropagation' in e) {
                e.stopPropagation();
            }
            return false;
        }
    }
    function releaseForms(e) {
        if (e.stopPropagation) e.stopPropagation();
        else e.returnValue = false;
        return false;
    }
    /*==================================================
        Event Handlers
    ====================================================*/
    var isTouchEvent = false;
    var allowThresholdMove;
    var allowMomentumBounce = true;
    function onTouchStart(event) {
        if (params.preventLinks) _this.allowLinks = true;
        //Exit if slider is already was touched
        if (_this.isTouched || params.onlyExternal) {
            return false;
        }
        // Blur active elements
        var eventTarget = event.target || event.srcElement;
        if (document.activeElement && document.activeElement !== document.body) {
            if (document.activeElement !== eventTarget) document.activeElement.blur();
        }
        // Form tag names
        var formTagNames = ('input select textarea').split(' ');
        // Check for no swiping
        if (params.noSwiping && (eventTarget) && noSwipingSlide(eventTarget)) return false;
        allowMomentumBounce = false;
        //Check For Nested Swipers
        _this.isTouched = true;
        isTouchEvent = event.type === 'touchstart';
        // prevent user enter with right and the swiper move (needs isTouchEvent)
        if (!isTouchEvent && 'which' in event && event.which === 3) {
            _this.isTouched = false;
            return false;
        }
        if (!isTouchEvent || event.targetTouches.length === 1) {
            _this.callPlugins('onTouchStartBegin');
            if (!isTouchEvent && !_this.isAndroid && formTagNames.indexOf(eventTarget.tagName.toLowerCase()) < 0) {
                if (event.preventDefault) event.preventDefault();
                else event.returnValue = false;
            }
            var pageX = isTouchEvent ? event.targetTouches[0].pageX : (event.pageX || event.clientX);
            var pageY = isTouchEvent ? event.targetTouches[0].pageY : (event.pageY || event.clientY);
            //Start Touches to check the scrolling
            _this.touches.startX = _this.touches.currentX = pageX;
            _this.touches.startY = _this.touches.currentY = pageY;
            _this.touches.start = _this.touches.current = isH ? pageX : pageY;
            //Set Transition Time to 0
            _this.setWrapperTransition(0);
            //Get Start Translate Position
            _this.positions.start = _this.positions.current = _this.getWrapperTranslate();
            //Set Transform
            _this.setWrapperTranslate(_this.positions.start);
            //TouchStartTime
            _this.times.start = (new Date()).getTime();
            //Unset Scrolling
            isScrolling = undefined;
            //Set Treshold
            if (params.moveStartThreshold > 0) {
                allowThresholdMove = false;
            }
            //CallBack
            if (params.onTouchStart) _this.fireCallback(params.onTouchStart, _this, event);
            _this.callPlugins('onTouchStartEnd');
        }
    }
    var velocityPrevPosition, velocityPrevTime;
    function onTouchMove(event) {
        // If slider is not touched - exit
        if (!_this.isTouched || params.onlyExternal) return;
        if (isTouchEvent && event.type === 'mousemove') return;
        var pageX = isTouchEvent ? event.targetTouches[0].pageX : (event.pageX || event.clientX);
        var pageY = isTouchEvent ? event.targetTouches[0].pageY : (event.pageY || event.clientY);
        //check for scrolling
        if (typeof isScrolling === 'undefined' && isH) {
            isScrolling = !!(isScrolling || Math.abs(pageY - _this.touches.startY) > Math.abs(pageX - _this.touches.startX));
        }
        if (typeof isScrolling === 'undefined' && !isH) {
            isScrolling = !!(isScrolling || Math.abs(pageY - _this.touches.startY) < Math.abs(pageX - _this.touches.startX));
        }
        if (isScrolling) {
            _this.isTouched = false;
            return;
        }
        // One way swipes
        if (isH) {
            if ((!params.swipeToNext && pageX < _this.touches.startX) || ((!params.swipeToPrev && pageX > _this.touches.startX))) {
                return;
            }
        } else {
            if ((!params.swipeToNext && pageY < _this.touches.startY) || ((!params.swipeToPrev && pageY > _this.touches.startY))) {
                return;
            }
        }
        //Check For Nested Swipers
        if (event.assignedToSwiper) {
            _this.isTouched = false;
            return;
        }
        event.assignedToSwiper = true;
        //Block inner links
        if (params.preventLinks) {
            _this.allowLinks = false;
        }
        if (params.onSlideClick) {
            _this.allowSlideClick = false;
        }
        //Stop AutoPlay if exist
        if (params.autoplay) {
            _this.stopAutoplay(true);
        }
        if (!isTouchEvent || event.touches.length === 1) {
            //Moved Flag
            if (!_this.isMoved) {
                _this.callPlugins('onTouchMoveStart');
                if (params.loop) {
                    _this.fixLoop();
                    _this.positions.start = _this.getWrapperTranslate();
                }
                if (params.onTouchMoveStart) _this.fireCallback(params.onTouchMoveStart, _this);
            }
            _this.isMoved = true;
            // cancel event
            if (event.preventDefault) event.preventDefault();
            else event.returnValue = false;
            _this.touches.current = isH ? pageX : pageY;
            _this.positions.current = (_this.touches.current - _this.touches.start) * params.touchRatio + _this.positions.start;
            //Resistance Callbacks
            if (_this.positions.current > 0 && params.onResistanceBefore) {
                _this.fireCallback(params.onResistanceBefore, _this, _this.positions.current);
            }
            if (_this.positions.current < -maxWrapperPosition() && params.onResistanceAfter) {
                _this.fireCallback(params.onResistanceAfter, _this, Math.abs(_this.positions.current + maxWrapperPosition()));
            }
            //Resistance
            if (params.resistance && params.resistance !== '100%') {
                var resistance;
                //Resistance for Negative-Back sliding
                if (_this.positions.current > 0) {
                    resistance = 1 - _this.positions.current / containerSize / 2;
                    if (resistance < 0.5)
                        _this.positions.current = (containerSize / 2);
                    else
                        _this.positions.current = _this.positions.current * resistance;
                }
                //Resistance for After-End Sliding
                if (_this.positions.current < -maxWrapperPosition()) {
                    var diff = (_this.touches.current - _this.touches.start) * params.touchRatio + (maxWrapperPosition() + _this.positions.start);
                    resistance = (containerSize + diff) / (containerSize);
                    var newPos = _this.positions.current - diff * (1 - resistance) / 2;
                    var stopPos = -maxWrapperPosition() - containerSize / 2;
                    if (newPos < stopPos || resistance <= 0)
                        _this.positions.current = stopPos;
                    else
                        _this.positions.current = newPos;
                }
            }
            if (params.resistance && params.resistance === '100%') {
                //Resistance for Negative-Back sliding
                if (_this.positions.current > 0 && !(params.freeMode && !params.freeModeFluid)) {
                    _this.positions.current = 0;
                }
                //Resistance for After-End Sliding
                if (_this.positions.current < -maxWrapperPosition() && !(params.freeMode && !params.freeModeFluid)) {
                    _this.positions.current = -maxWrapperPosition();
                }
            }
            //Move Slides
            if (!params.followFinger) return;
            if (!params.moveStartThreshold) {
                _this.setWrapperTranslate(_this.positions.current);
            } else {
                if (Math.abs(_this.touches.current - _this.touches.start) > params.moveStartThreshold || allowThresholdMove) {
                    if (!allowThresholdMove) {
                        allowThresholdMove = true;
                        _this.touches.start = _this.touches.current;
                        return;
                    }
                    _this.setWrapperTranslate(_this.positions.current);
                } else {
                    _this.positions.current = _this.positions.start;
                }
            }
            if (params.freeMode || params.watchActiveIndex) {
                _this.updateActiveSlide(_this.positions.current);
            }
            //Grab Cursor
            if (params.grabCursor) {
                _this.container.style.cursor = 'move';
                _this.container.style.cursor = 'grabbing';
                _this.container.style.cursor = '-moz-grabbin';
                _this.container.style.cursor = '-webkit-grabbing';
            }
            //Velocity
            if (!velocityPrevPosition) velocityPrevPosition = _this.touches.current;
            if (!velocityPrevTime) velocityPrevTime = (new Date()).getTime();
            _this.velocity = (_this.touches.current - velocityPrevPosition) / ((new Date()).getTime() - velocityPrevTime) / 2;
            if (Math.abs(_this.touches.current - velocityPrevPosition) < 2) _this.velocity = 0;
            velocityPrevPosition = _this.touches.current;
            velocityPrevTime = (new Date()).getTime();
            //Callbacks
            _this.callPlugins('onTouchMoveEnd');
            if (params.onTouchMove) _this.fireCallback(params.onTouchMove, _this, event);
            return false;
        }
    }
    function onTouchEnd(event) {
        //Check For scrolling
        if (isScrolling) {
            _this.swipeReset();
        }
        // If slider is not touched exit
        if (params.onlyExternal || !_this.isTouched) return;
        _this.isTouched = false;
        //Return Grab Cursor
        if (params.grabCursor) {
            _this.container.style.cursor = 'move';
            _this.container.style.cursor = 'grab';
            _this.container.style.cursor = '-moz-grab';
            _this.container.style.cursor = '-webkit-grab';
        }
        //Check for Current Position
        if (!_this.positions.current && _this.positions.current !== 0) {
            _this.positions.current = _this.positions.start;
        }
        //For case if slider touched but not moved
        if (params.followFinger) {
            _this.setWrapperTranslate(_this.positions.current);
        }
        // TouchEndTime
        _this.times.end = (new Date()).getTime();
        //Difference
        _this.touches.diff = _this.touches.current - _this.touches.start;
        _this.touches.abs = Math.abs(_this.touches.diff);
        _this.positions.diff = _this.positions.current - _this.positions.start;
        _this.positions.abs = Math.abs(_this.positions.diff);
        var diff = _this.positions.diff;
        var diffAbs = _this.positions.abs;
        var timeDiff = _this.times.end - _this.times.start;
        if (diffAbs < 5 && (timeDiff) < 300 && _this.allowLinks === false) {
            if (!params.freeMode && diffAbs !== 0) _this.swipeReset();
            //Release inner links
            if (params.preventLinks) {
                _this.allowLinks = true;
            }
            if (params.onSlideClick) {
                _this.allowSlideClick = true;
            }
        }
        setTimeout(function() {
            //Release inner links
            if (typeof _this === 'undefined' || _this === null) return;
            if (params.preventLinks) {
                _this.allowLinks = true;
            }
            if (params.onSlideClick) {
                _this.allowSlideClick = true;
            }
        }, 100);
        var maxPosition = maxWrapperPosition();
        //Not moved or Prevent Negative Back Sliding/After-End Sliding
        if (!_this.isMoved && params.freeMode) {
            _this.isMoved = false;
            if (params.onTouchEnd) _this.fireCallback(params.onTouchEnd, _this, event);
            _this.callPlugins('onTouchEnd');
            return;
        }
        if (!_this.isMoved || _this.positions.current > 0 || _this.positions.current < -maxPosition) {
            _this.swipeReset();
            if (params.onTouchEnd) _this.fireCallback(params.onTouchEnd, _this, event);
            _this.callPlugins('onTouchEnd');
            return;
        }
        _this.isMoved = false;
        //Free Mode
        if (params.freeMode) {
            if (params.freeModeFluid) {
                var momentumDuration = 1000 * params.momentumRatio;
                var momentumDistance = _this.velocity * momentumDuration;
                var newPosition = _this.positions.current + momentumDistance;
                var doBounce = false;
                var afterBouncePosition;
                var bounceAmount = Math.abs(_this.velocity) * 20 * params.momentumBounceRatio;
                if (newPosition < -maxPosition) {
                    if (params.momentumBounce && _this.support.transitions) {
                        if (newPosition + maxPosition < -bounceAmount) newPosition = -maxPosition - bounceAmount;
                        afterBouncePosition = -maxPosition;
                        doBounce = true;
                        allowMomentumBounce = true;
                    } else newPosition = -maxPosition;
                }
                if (newPosition > 0) {
                    if (params.momentumBounce && _this.support.transitions) {
                        if (newPosition > bounceAmount) newPosition = bounceAmount;
                        afterBouncePosition = 0;
                        doBounce = true;
                        allowMomentumBounce = true;
                    } else newPosition = 0;
                }
                //Fix duration
                if (_this.velocity !== 0) momentumDuration = Math.abs((newPosition - _this.positions.current) / _this.velocity);
                _this.setWrapperTranslate(newPosition);
                _this.setWrapperTransition(momentumDuration);
                if (params.momentumBounce && doBounce) {
                    _this.wrapperTransitionEnd(function() {
                        if (!allowMomentumBounce) return;
                        if (params.onMomentumBounce) _this.fireCallback(params.onMomentumBounce, _this);
                        _this.callPlugins('onMomentumBounce');
                        _this.setWrapperTranslate(afterBouncePosition);
                        _this.setWrapperTransition(300);
                    });
                }
                _this.updateActiveSlide(newPosition);
            }
            if (!params.freeModeFluid || timeDiff >= 300) _this.updateActiveSlide(_this.positions.current);
            if (params.onTouchEnd) _this.fireCallback(params.onTouchEnd, _this, event);
            _this.callPlugins('onTouchEnd');
            return;
        }
        //Direction
        direction = diff < 0 ? 'toNext' : 'toPrev';
        //Short Touches
        if (direction === 'toNext' && (timeDiff <= 300)) {
            if (diffAbs < 30 || !params.shortSwipes) _this.swipeReset();
            else _this.swipeNext(true, true);
        }
        if (direction === 'toPrev' && (timeDiff <= 300)) {
            if (diffAbs < 30 || !params.shortSwipes) _this.swipeReset();
            else _this.swipePrev(true, true);
        }
        //Long Touches
        var targetSlideSize = 0;
        if (params.slidesPerView === 'auto') {
            //Define current slide's width
            var currentPosition = Math.abs(_this.getWrapperTranslate());
            var slidesOffset = 0;
            var _slideSize;
            for (var i = 0; i < _this.slides.length; i++) {
                _slideSize = isH ? _this.slides[i].getWidth(true, params.roundLengths) : _this.slides[i].getHeight(true, params.roundLengths);
                slidesOffset += _slideSize;
                if (slidesOffset > currentPosition) {
                    targetSlideSize = _slideSize;
                    break;
                }
            }
            if (targetSlideSize > containerSize) targetSlideSize = containerSize;
        } else {
            targetSlideSize = slideSize * params.slidesPerView;
        }
        if (direction === 'toNext' && (timeDiff > 300)) {
            if (diffAbs >= targetSlideSize * params.longSwipesRatio) {
                _this.swipeNext(true, true);
            } else {
                _this.swipeReset();
            }
        }
        if (direction === 'toPrev' && (timeDiff > 300)) {
            if (diffAbs >= targetSlideSize * params.longSwipesRatio) {
                _this.swipePrev(true, true);
            } else {
                _this.swipeReset();
            }
        }
        if (params.onTouchEnd) _this.fireCallback(params.onTouchEnd, _this, event);
        _this.callPlugins('onTouchEnd');
    }
    /*==================================================
        noSwiping Bubble Check by Isaac Strack
    ====================================================*/
    function hasClass(el, classname) {
        return el && el.getAttribute('class') && el.getAttribute('class').indexOf(classname) > -1;
    }
    function noSwipingSlide(el) {
        /*This function is specifically designed to check the parent elements for the noSwiping class, up to the wrapper.
        We need to check parents because while onTouchStart bubbles, _this.isTouched is checked in onTouchStart, which stops the bubbling.
        So, if a text box, for example, is the initial target, and the parent slide container has the noSwiping class, the _this.isTouched
        check will never find it, and what was supposed to be noSwiping is able to be swiped.
        This function will iterate up and check for the noSwiping class in parents, up through the wrapperClass.*/
        // First we create a truthy variable, which is that swiping is allowd (noSwiping = false)
        var noSwiping = false;
        // Now we iterate up (parentElements) until we reach the node with the wrapperClass.
        do {
            // Each time, we check to see if there's a 'swiper-no-swiping' class (noSwipingClass).
            if (hasClass(el, params.noSwipingClass)) {
                noSwiping = true; // If there is, we set noSwiping = true;
            }
            el = el.parentElement; // now we iterate up (parent node)
        } while (!noSwiping && el.parentElement && !hasClass(el, params.wrapperClass)); // also include el.parentElement truthy, just in case.
        // because we didn't check the wrapper itself, we do so now, if noSwiping is false:
        if (!noSwiping && hasClass(el, params.wrapperClass) && hasClass(el, params.noSwipingClass))
            noSwiping = true; // if the wrapper has the noSwipingClass, we set noSwiping = true;
        return noSwiping;
    }
    function addClassToHtmlString(klass, outerHtml) {
        var par = document.createElement('div');
        var child;
        par.innerHTML = outerHtml;
        child = par.firstChild;
        child.className += ' ' + klass;
        return child.outerHTML;
    }
    /*==================================================
        Swipe Functions
    ====================================================*/
    _this.swipeNext = function(runCallbacks, internal) {
        if (typeof runCallbacks === 'undefined') runCallbacks = true;
        if (!internal && params.loop) _this.fixLoop();
        if (!internal && params.autoplay) _this.stopAutoplay(true);
        _this.callPlugins('onSwipeNext');
        var currentPosition = _this.getWrapperTranslate().toFixed(2);
        var newPosition = currentPosition;
        if (params.slidesPerView === 'auto') {
            for (var i = 0; i < _this.snapGrid.length; i++) {
                if (-currentPosition >= _this.snapGrid[i].toFixed(2) && -currentPosition < _this.snapGrid[i + 1].toFixed(2)) {
                    newPosition = -_this.snapGrid[i + 1];
                    break;
                }
            }
        } else {
            var groupSize = slideSize * params.slidesPerGroup;
            newPosition = -(Math.floor(Math.abs(currentPosition) / Math.floor(groupSize)) * groupSize + groupSize);
        }
        if (newPosition < -maxWrapperPosition()) {
            newPosition = -maxWrapperPosition();
        }
        if (newPosition === currentPosition) return false;
        swipeToPosition(newPosition, 'next', {
            runCallbacks: runCallbacks
        });
        return true;
    };
    _this.swipePrev = function(runCallbacks, internal) {
        if (typeof runCallbacks === 'undefined') runCallbacks = true;
        if (!internal && params.loop) _this.fixLoop();
        if (!internal && params.autoplay) _this.stopAutoplay(true);
        _this.callPlugins('onSwipePrev');
        var currentPosition = Math.ceil(_this.getWrapperTranslate());
        var newPosition;
        if (params.slidesPerView === 'auto') {
            newPosition = 0;
            for (var i = 1; i < _this.snapGrid.length; i++) {
                if (-currentPosition === _this.snapGrid[i]) {
                    newPosition = -_this.snapGrid[i - 1];
                    break;
                }
                if (-currentPosition > _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
                    newPosition = -_this.snapGrid[i];
                    break;
                }
            }
        } else {
            var groupSize = slideSize * params.slidesPerGroup;
            newPosition = -(Math.ceil(-currentPosition / groupSize) - 1) * groupSize;
        }
        if (newPosition > 0) newPosition = 0;
        if (newPosition === currentPosition) return false;
        swipeToPosition(newPosition, 'prev', {
            runCallbacks: runCallbacks
        });
        return true;
    };
    _this.swipeReset = function(runCallbacks) {
        if (typeof runCallbacks === 'undefined') runCallbacks = true;
        _this.callPlugins('onSwipeReset');
        var currentPosition = _this.getWrapperTranslate();
        var groupSize = slideSize * params.slidesPerGroup;
        var newPosition;
        var maxPosition = -maxWrapperPosition();
        if (params.slidesPerView === 'auto') {
            newPosition = 0;
            for (var i = 0; i < _this.snapGrid.length; i++) {
                if (-currentPosition === _this.snapGrid[i]) return;
                if (-currentPosition >= _this.snapGrid[i] && -currentPosition < _this.snapGrid[i + 1]) {
                    if (_this.positions.diff > 0) newPosition = -_this.snapGrid[i + 1];
                    else newPosition = -_this.snapGrid[i];
                    break;
                }
            }
            if (-currentPosition >= _this.snapGrid[_this.snapGrid.length - 1]) newPosition = -_this.snapGrid[_this.snapGrid.length - 1];
            if (currentPosition <= -maxWrapperPosition()) newPosition = -maxWrapperPosition();
        } else {
            newPosition = currentPosition < 0 ? Math.round(currentPosition / groupSize) * groupSize : 0;
            if (currentPosition <= -maxWrapperPosition()) newPosition = -maxWrapperPosition();
        }
        if (params.scrollContainer) {
            newPosition = currentPosition < 0 ? currentPosition : 0;
        }
        if (newPosition < -maxWrapperPosition()) {
            newPosition = -maxWrapperPosition();
        }
        if (params.scrollContainer && (containerSize > slideSize)) {
            newPosition = 0;
        }
        if (newPosition === currentPosition) return false;
        swipeToPosition(newPosition, 'reset', {
            runCallbacks: runCallbacks
        });
        return true;
    };
    _this.swipeTo = function(index, speed, runCallbacks) {
        index = parseInt(index, 10);
        _this.callPlugins('onSwipeTo', {
            index: index,
            speed: speed
        });
        if (params.loop) index = index + _this.loopedSlides;
        var currentPosition = _this.getWrapperTranslate();
        if (!isFinite(index) || index > (_this.slides.length - 1) || index < 0) return;
        var newPosition;
        if (params.slidesPerView === 'auto') {
            newPosition = -_this.slidesGrid[index];
        } else {
            newPosition = -index * slideSize;
        }
        if (newPosition < -maxWrapperPosition()) {
            newPosition = -maxWrapperPosition();
        }
        if (newPosition === currentPosition) return false;
        if (typeof runCallbacks === 'undefined') runCallbacks = true;
        swipeToPosition(newPosition, 'to', {
            index: index,
            speed: speed,
            runCallbacks: runCallbacks
        });
        return true;
    };
    function swipeToPosition(newPosition, action, toOptions) {
        var speed = (action === 'to' && toOptions.speed >= 0) ? toOptions.speed : params.speed;
        var timeOld = +new Date();
        function anim() {
            var timeNew = +new Date();
            var time = timeNew - timeOld;
            currentPosition += animationStep * time / (1000 / 60);
            condition = direction === 'toNext' ? currentPosition > newPosition : currentPosition < newPosition;
            if (condition) {
                _this.setWrapperTranslate(Math.ceil(currentPosition));
                _this._DOMAnimating = true;
                window.setTimeout(function() {
                    anim();
                }, 1000 / 60);
            } else {
                if (params.onSlideChangeEnd) {
                    if (action === 'to') {
                        if (toOptions.runCallbacks === true) _this.fireCallback(params.onSlideChangeEnd, _this, direction);
                    } else {
                        _this.fireCallback(params.onSlideChangeEnd, _this, direction);
                    }
                }
                _this.setWrapperTranslate(newPosition);
                _this._DOMAnimating = false;
            }
        }
        if (_this.support.transitions || !params.DOMAnimation) {
            _this.setWrapperTranslate(newPosition);
            _this.setWrapperTransition(speed);
        } else {
            //Try the DOM animation
            var currentPosition = _this.getWrapperTranslate();
            var animationStep = Math.ceil((newPosition - currentPosition) / speed * (1000 / 60));
            var direction = currentPosition > newPosition ? 'toNext' : 'toPrev';
            var condition = direction === 'toNext' ? currentPosition > newPosition : currentPosition < newPosition;
            if (_this._DOMAnimating) return;
            anim();
        }
        //Update Active Slide Index
        _this.updateActiveSlide(newPosition);
        //Callbacks
        if (params.onSlideNext && action === 'next' && toOptions.runCallbacks === true) {
            _this.fireCallback(params.onSlideNext, _this, newPosition);
        }
        if (params.onSlidePrev && action === 'prev' && toOptions.runCallbacks === true) {
            _this.fireCallback(params.onSlidePrev, _this, newPosition);
        }
        //'Reset' Callback
        if (params.onSlideReset && action === 'reset' && toOptions.runCallbacks === true) {
            _this.fireCallback(params.onSlideReset, _this, newPosition);
        }
        //'Next', 'Prev' and 'To' Callbacks
        if ((action === 'next' || action === 'prev' || action === 'to') && toOptions.runCallbacks === true)
            slideChangeCallbacks(action);
    }
    /*==================================================
        Transition Callbacks
    ====================================================*/
    //Prevent Multiple Callbacks
    _this._queueStartCallbacks = false;
    _this._queueEndCallbacks = false;
    function slideChangeCallbacks(direction) {
        //Transition Start Callback
        _this.callPlugins('onSlideChangeStart');
        if (params.onSlideChangeStart) {
            if (params.queueStartCallbacks && _this.support.transitions) {
                if (_this._queueStartCallbacks) return;
                _this._queueStartCallbacks = true;
                _this.fireCallback(params.onSlideChangeStart, _this, direction);
                _this.wrapperTransitionEnd(function() {
                    _this._queueStartCallbacks = false;
                });
            } else _this.fireCallback(params.onSlideChangeStart, _this, direction);
        }
        //Transition End Callback
        if (params.onSlideChangeEnd) {
            if (_this.support.transitions) {
                if (params.queueEndCallbacks) {
                    if (_this._queueEndCallbacks) return;
                    _this._queueEndCallbacks = true;
                    _this.wrapperTransitionEnd(function(swiper) {
                        _this.fireCallback(params.onSlideChangeEnd, swiper, direction);
                    });
                } else {
                    _this.wrapperTransitionEnd(function(swiper) {
                        _this.fireCallback(params.onSlideChangeEnd, swiper, direction);
                    });
                }
            } else {
                if (!params.DOMAnimation) {
                    setTimeout(function() {
                        _this.fireCallback(params.onSlideChangeEnd, _this, direction);
                    }, 10);
                }
            }
        }
    }
    /*==================================================
        Update Active Slide Index
    ====================================================*/
    _this.updateActiveSlide = function(position) {
        if (!_this.initialized) return;
        if (_this.slides.length === 0) return;
        _this.previousIndex = _this.activeIndex;
        if (typeof position === 'undefined') position = _this.getWrapperTranslate();
        if (position > 0) position = 0;
        var i;
        if (params.slidesPerView === 'auto') {
            var slidesOffset = 0;
            _this.activeIndex = _this.slidesGrid.indexOf(-position);
            if (_this.activeIndex < 0) {
                for (i = 0; i < _this.slidesGrid.length - 1; i++) {
                    if (-position > _this.slidesGrid[i] && -position < _this.slidesGrid[i + 1]) {
                        break;
                    }
                }
                var leftDistance = Math.abs(_this.slidesGrid[i] + position);
                var rightDistance = Math.abs(_this.slidesGrid[i + 1] + position);
                if (leftDistance <= rightDistance) _this.activeIndex = i;
                else _this.activeIndex = i + 1;
            }
        } else {
            _this.activeIndex = Math[params.visibilityFullFit ? 'ceil' : 'round'](-position / slideSize);
        }
        if (_this.activeIndex === _this.slides.length) _this.activeIndex = _this.slides.length - 1;
        if (_this.activeIndex < 0) _this.activeIndex = 0;
        // Check for slide
        if (!_this.slides[_this.activeIndex]) return;
        // Calc Visible slides
        _this.calcVisibleSlides(position);
        // Mark visible and active slides with additonal classes
        if (_this.support.classList) {
            var slide;
            for (i = 0; i < _this.slides.length; i++) {
                slide = _this.slides[i];
                slide.classList.remove(params.slideActiveClass);
                if (_this.visibleSlides.indexOf(slide) >= 0) {
                    slide.classList.add(params.slideVisibleClass);
                } else {
                    slide.classList.remove(params.slideVisibleClass);
                }
            }
            _this.slides[_this.activeIndex].classList.add(params.slideActiveClass);
        } else {
            var activeClassRegexp = new RegExp('\\s*' + params.slideActiveClass);
            var inViewClassRegexp = new RegExp('\\s*' + params.slideVisibleClass);
            for (i = 0; i < _this.slides.length; i++) {
                _this.slides[i].className = _this.slides[i].className.replace(activeClassRegexp, '').replace(inViewClassRegexp, '');
                if (_this.visibleSlides.indexOf(_this.slides[i]) >= 0) {
                    _this.slides[i].className += ' ' + params.slideVisibleClass;
                }
            }
            _this.slides[_this.activeIndex].className += ' ' + params.slideActiveClass;
        }
        //Update loop index
        if (params.loop) {
            var ls = _this.loopedSlides;
            _this.activeLoopIndex = _this.activeIndex - ls;
            if (_this.activeLoopIndex >= _this.slides.length - ls * 2) {
                _this.activeLoopIndex = _this.slides.length - ls * 2 - _this.activeLoopIndex;
            }
            if (_this.activeLoopIndex < 0) {
                _this.activeLoopIndex = _this.slides.length - ls * 2 + _this.activeLoopIndex;
            }
            if (_this.activeLoopIndex < 0) _this.activeLoopIndex = 0;
        } else {
            _this.activeLoopIndex = _this.activeIndex;
        }
        //Update Pagination
        if (params.pagination) {
            _this.updatePagination(position);
        }
    };
    /*==================================================
        Pagination
    ====================================================*/
    _this.createPagination = function(firstInit) {
        if (params.paginationClickable && _this.paginationButtons) {
            removePaginationEvents();
        }
        _this.paginationContainer = params.pagination.nodeType ? params.pagination : $$(params.pagination)[0];
        if (params.createPagination) {
            var paginationHTML = '';
            var numOfSlides = _this.slides.length;
            var numOfButtons = numOfSlides;
            if (params.loop) numOfButtons -= _this.loopedSlides * 2;
            for (var i = 0; i < numOfButtons; i++) {
                paginationHTML += '<' + params.paginationElement + ' class="' + params.paginationElementClass + '"></' + params.paginationElement + '>';
            }
            _this.paginationContainer.innerHTML = paginationHTML;
        }
        _this.paginationButtons = $$('.' + params.paginationElementClass, _this.paginationContainer);
        if (!firstInit) _this.updatePagination();
        _this.callPlugins('onCreatePagination');
        if (params.paginationClickable) {
            addPaginationEvents();
        }
    };
    function removePaginationEvents() {
        var pagers = _this.paginationButtons;
        if (pagers) {
            for (var i = 0; i < pagers.length; i++) {
                _this.h.removeEventListener(pagers[i], 'click', paginationClick);
            }
        }
    }
    function addPaginationEvents() {
        var pagers = _this.paginationButtons;
        if (pagers) {
            for (var i = 0; i < pagers.length; i++) {
                _this.h.addEventListener(pagers[i], 'click', paginationClick);
            }
        }
    }
    function paginationClick(e) {
        var index;
        var target = e.target || e.srcElement;
        var pagers = _this.paginationButtons;
        for (var i = 0; i < pagers.length; i++) {
            if (target === pagers[i]) index = i;
        }
        if (params.autoplay) _this.stopAutoplay(true);
        _this.swipeTo(index);
    }
    _this.updatePagination = function(position) {
        if (!params.pagination) return;
        if (_this.slides.length < 1) return;
        var activePagers = $$('.' + params.paginationActiveClass, _this.paginationContainer);
        if (!activePagers) return;
        //Reset all Buttons' class to not active
        var pagers = _this.paginationButtons;
        if (pagers.length === 0) return;
        for (var i = 0; i < pagers.length; i++) {
            pagers[i].className = params.paginationElementClass;
        }
        var indexOffset = params.loop ? _this.loopedSlides : 0;
        if (params.paginationAsRange) {
            if (!_this.visibleSlides) _this.calcVisibleSlides(position);
            //Get Visible Indexes
            var visibleIndexes = [];
            var j; // lopp index - avoid JSHint W004 / W038
            for (j = 0; j < _this.visibleSlides.length; j++) {
                var visIndex = _this.slides.indexOf(_this.visibleSlides[j]) - indexOffset;
                if (params.loop && visIndex < 0) {
                    visIndex = _this.slides.length - _this.loopedSlides * 2 + visIndex;
                }
                if (params.loop && visIndex >= _this.slides.length - _this.loopedSlides * 2) {
                    visIndex = _this.slides.length - _this.loopedSlides * 2 - visIndex;
                    visIndex = Math.abs(visIndex);
                }
                visibleIndexes.push(visIndex);
            }
            for (j = 0; j < visibleIndexes.length; j++) {
                if (pagers[visibleIndexes[j]]) pagers[visibleIndexes[j]].className += ' ' + params.paginationVisibleClass;
            }
            if (params.loop) {
                if (pagers[_this.activeLoopIndex] !== undefined) {
                    pagers[_this.activeLoopIndex].className += ' ' + params.paginationActiveClass;
                }
            } else {
                if (pagers[_this.activeIndex]) pagers[_this.activeIndex].className += ' ' + params.paginationActiveClass;
            }
        } else {
            if (params.loop) {
                if (pagers[_this.activeLoopIndex]) pagers[_this.activeLoopIndex].className += ' ' + params.paginationActiveClass + ' ' + params.paginationVisibleClass;
            } else {
                if (pagers[_this.activeIndex]) pagers[_this.activeIndex].className += ' ' + params.paginationActiveClass + ' ' + params.paginationVisibleClass;
            }
        }
    };
    _this.calcVisibleSlides = function(position) {
        var visibleSlides = [];
        var _slideLeft = 0,
            _slideSize = 0,
            _slideRight = 0;
        if (isH && _this.wrapperLeft > 0) position = position + _this.wrapperLeft;
        if (!isH && _this.wrapperTop > 0) position = position + _this.wrapperTop;
        for (var i = 0; i < _this.slides.length; i++) {
            _slideLeft += _slideSize;
            if (params.slidesPerView === 'auto')
                _slideSize = isH ? _this.h.getWidth(_this.slides[i], true, params.roundLengths) : _this.h.getHeight(_this.slides[i], true, params.roundLengths);
            else _slideSize = slideSize;
            _slideRight = _slideLeft + _slideSize;
            var isVisibile = false;
            if (params.visibilityFullFit) {
                if (_slideLeft >= -position && _slideRight <= -position + containerSize) isVisibile = true;
                if (_slideLeft <= -position && _slideRight >= -position + containerSize) isVisibile = true;
            } else {
                if (_slideRight > -position && _slideRight <= ((-position + containerSize))) isVisibile = true;
                if (_slideLeft >= -position && _slideLeft < ((-position + containerSize))) isVisibile = true;
                if (_slideLeft < -position && _slideRight > ((-position + containerSize))) isVisibile = true;
            }
            if (isVisibile) visibleSlides.push(_this.slides[i]);
        }
        if (visibleSlides.length === 0) visibleSlides = [_this.slides[_this.activeIndex]];
        _this.visibleSlides = visibleSlides;
    };
    /*==========================================
        Autoplay
    ============================================*/
    var autoplayTimeoutId, autoplayIntervalId;
    _this.startAutoplay = function() {
        if (_this.support.transitions) {
            if (typeof autoplayTimeoutId !== 'undefined') return false;
            if (!params.autoplay) return;
            _this.callPlugins('onAutoplayStart');
            if (params.onAutoplayStart) _this.fireCallback(params.onAutoplayStart, _this);
            autoplay();
        } else {
            if (typeof autoplayIntervalId !== 'undefined') return false;
            if (!params.autoplay) return;
            _this.callPlugins('onAutoplayStart');
            if (params.onAutoplayStart) _this.fireCallback(params.onAutoplayStart, _this);
            autoplayIntervalId = setInterval(function() {
                if (params.loop) {
                    _this.fixLoop();
                    _this.swipeNext(true, true);
                } else if (!_this.swipeNext(true, true)) {
                    if (!params.autoplayStopOnLast) _this.swipeTo(0);
                    else {
                        clearInterval(autoplayIntervalId);
                        autoplayIntervalId = undefined;
                    }
                }
            }, params.autoplay);
        }
    };
    _this.stopAutoplay = function(internal) {
        if (_this.support.transitions) {
            if (!autoplayTimeoutId) return;
            if (autoplayTimeoutId) clearTimeout(autoplayTimeoutId);
            autoplayTimeoutId = undefined;
            if (internal && !params.autoplayDisableOnInteraction) {
                _this.wrapperTransitionEnd(function() {
                    autoplay();
                });
            }
            _this.callPlugins('onAutoplayStop');
            if (params.onAutoplayStop) _this.fireCallback(params.onAutoplayStop, _this);
        } else {
            if (autoplayIntervalId) clearInterval(autoplayIntervalId);
            autoplayIntervalId = undefined;
            _this.callPlugins('onAutoplayStop');
            if (params.onAutoplayStop) _this.fireCallback(params.onAutoplayStop, _this);
        }
    };
    function autoplay() {
        autoplayTimeoutId = setTimeout(function() {
            if (params.loop) {
                _this.fixLoop();
                _this.swipeNext(true, true);
            } else if (!_this.swipeNext(true, true)) {
                if (!params.autoplayStopOnLast) _this.swipeTo(0);
                else {
                    clearTimeout(autoplayTimeoutId);
                    autoplayTimeoutId = undefined;
                }
            }
            _this.wrapperTransitionEnd(function() {
                if (typeof autoplayTimeoutId !== 'undefined') autoplay();
            });
        }, params.autoplay);
    }
    /*==================================================
        Loop
    ====================================================*/
    _this.loopCreated = false;
    _this.removeLoopedSlides = function() {
        if (_this.loopCreated) {
            for (var i = 0; i < _this.slides.length; i++) {
                if (_this.slides[i].getData('looped') === true) _this.wrapper.removeChild(_this.slides[i]);
            }
        }
    };
    _this.createLoop = function() {
        if (_this.slides.length === 0) return;
        if (params.slidesPerView === 'auto') {
            _this.loopedSlides = params.loopedSlides || 1;
        } else {
            _this.loopedSlides = Math.floor(params.slidesPerView) + params.loopAdditionalSlides;
        }
        if (_this.loopedSlides > _this.slides.length) {
            _this.loopedSlides = _this.slides.length;
        }
        var slideFirstHTML = '',
            slideLastHTML = '',
            i;
        var slidesSetFullHTML = '';
        /**
                loopedSlides is too large if loopAdditionalSlides are set.
                Need to divide the slides by maximum number of slides existing.
                @author        Tomaz Lovrec <tomaz.lovrec@blanc-noir.at>
        */
        var numSlides = _this.slides.length;
        var fullSlideSets = Math.floor(_this.loopedSlides / numSlides);
        var remainderSlides = _this.loopedSlides % numSlides;
        // assemble full sets of slides
        for (i = 0; i < (fullSlideSets * numSlides); i++) {
            var j = i;
            if (i >= numSlides) {
                var over = Math.floor(i / numSlides);
                j = i - (numSlides * over);
            }
            slidesSetFullHTML += _this.slides[j].outerHTML;
        }
        // assemble remainder slides
        // assemble remainder appended to existing slides
        for (i = 0; i < remainderSlides; i++) {
            slideLastHTML += addClassToHtmlString(params.slideDuplicateClass, _this.slides[i].outerHTML);
        }
        // assemble slides that get preppended to existing slides
        for (i = numSlides - remainderSlides; i < numSlides; i++) {
            slideFirstHTML += addClassToHtmlString(params.slideDuplicateClass, _this.slides[i].outerHTML);
        }
        // assemble all slides
        var slides = slideFirstHTML + slidesSetFullHTML + wrapper.innerHTML + slidesSetFullHTML + slideLastHTML;
        // set the slides
        wrapper.innerHTML = slides;
        _this.loopCreated = true;
        _this.calcSlides();
        //Update Looped Slides with special class
        for (i = 0; i < _this.slides.length; i++) {
            if (i < _this.loopedSlides || i >= _this.slides.length - _this.loopedSlides) _this.slides[i].setData('looped', true);
        }
        _this.callPlugins('onCreateLoop');
    };
    _this.fixLoop = function() {
        var newIndex;
        //Fix For Negative Oversliding
        if (_this.activeIndex < _this.loopedSlides) {
            newIndex = _this.slides.length - _this.loopedSlides * 3 + _this.activeIndex;
            _this.swipeTo(newIndex, 0, false);
        }
        //Fix For Positive Oversliding
        else if ((params.slidesPerView === 'auto' && _this.activeIndex >= _this.loopedSlides * 2) || (_this.activeIndex > _this.slides.length - params.slidesPerView * 2)) {
            newIndex = -_this.slides.length + _this.activeIndex + _this.loopedSlides;
            _this.swipeTo(newIndex, 0, false);
        }
    };
    /*==================================================
        Slides Loader
    ====================================================*/
    _this.loadSlides = function() {
        var slidesHTML = '';
        _this.activeLoaderIndex = 0;
        var slides = params.loader.slides;
        var slidesToLoad = params.loader.loadAllSlides ? slides.length : params.slidesPerView * (1 + params.loader.surroundGroups);
        for (var i = 0; i < slidesToLoad; i++) {
            if (params.loader.slidesHTMLType === 'outer') slidesHTML += slides[i];
            else {
                slidesHTML += '<' + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + '</' + params.slideElement + '>';
            }
        }
        _this.wrapper.innerHTML = slidesHTML;
        _this.calcSlides(true);
        //Add permanent transitionEnd callback
        if (!params.loader.loadAllSlides) {
            _this.wrapperTransitionEnd(_this.reloadSlides, true);
        }
    };
    _this.reloadSlides = function() {
        var slides = params.loader.slides;
        var newActiveIndex = parseInt(_this.activeSlide().data('swiperindex'), 10);
        if (newActiveIndex < 0 || newActiveIndex > slides.length - 1) return; //<-- Exit
        _this.activeLoaderIndex = newActiveIndex;
        var firstIndex = Math.max(0, newActiveIndex - params.slidesPerView * params.loader.surroundGroups);
        var lastIndex = Math.min(newActiveIndex + params.slidesPerView * (1 + params.loader.surroundGroups) - 1, slides.length - 1);
        //Update Transforms
        if (newActiveIndex > 0) {
            var newTransform = -slideSize * (newActiveIndex - firstIndex);
            _this.setWrapperTranslate(newTransform);
            _this.setWrapperTransition(0);
        }
        var i; // loop index
        //New Slides
        if (params.loader.logic === 'reload') {
            _this.wrapper.innerHTML = '';
            var slidesHTML = '';
            for (i = firstIndex; i <= lastIndex; i++) {
                slidesHTML += params.loader.slidesHTMLType === 'outer' ? slides[i] : '<' + params.slideElement + ' class="' + params.slideClass + '" data-swiperindex="' + i + '">' + slides[i] + '</' + params.slideElement + '>';
            }
            _this.wrapper.innerHTML = slidesHTML;
        } else {
            var minExistIndex = 1000;
            var maxExistIndex = 0;
            for (i = 0; i < _this.slides.length; i++) {
                var index = _this.slides[i].data('swiperindex');
                if (index < firstIndex || index > lastIndex) {
                    _this.wrapper.removeChild(_this.slides[i]);
                } else {
                    minExistIndex = Math.min(index, minExistIndex);
                    maxExistIndex = Math.max(index, maxExistIndex);
                }
            }
            for (i = firstIndex; i <= lastIndex; i++) {
                var newSlide;
                if (i < minExistIndex) {
                    newSlide = document.createElement(params.slideElement);
                    newSlide.className = params.slideClass;
                    newSlide.setAttribute('data-swiperindex', i);
                    newSlide.innerHTML = slides[i];
                    _this.wrapper.insertBefore(newSlide, _this.wrapper.firstChild);
                }
                if (i > maxExistIndex) {
                    newSlide = document.createElement(params.slideElement);
                    newSlide.className = params.slideClass;
                    newSlide.setAttribute('data-swiperindex', i);
                    newSlide.innerHTML = slides[i];
                    _this.wrapper.appendChild(newSlide);
                }
            }
        }
        //reInit
        _this.reInit(true);
    };
    /*==================================================
        Make Swiper
    ====================================================*/
    function makeSwiper() {
        _this.calcSlides();
        if (params.loader.slides.length > 0 && _this.slides.length === 0) {
            _this.loadSlides();
        }
        if (params.loop) {
            _this.createLoop();
        }
        _this.init();
        initEvents();
        if (params.pagination) {
            _this.createPagination(true);
        }
        if (params.loop || params.initialSlide > 0) {
            _this.swipeTo(params.initialSlide, 0, false);
        } else {
            _this.updateActiveSlide(0);
        }
        if (params.autoplay) {
            _this.startAutoplay();
        }
        /**
         * Set center slide index.
         *
         * @author        Tomaz Lovrec <tomaz.lovrec@gmail.com>
         */
        _this.centerIndex = _this.activeIndex;
        // Callbacks
        if (params.onSwiperCreated) _this.fireCallback(params.onSwiperCreated, _this);
        _this.callPlugins('onSwiperCreated');
    }
    makeSwiper();
};
Swiper.prototype = {
    plugins: {},
    /*==================================================
        Wrapper Operations
    ====================================================*/
    wrapperTransitionEnd: function(callback, permanent) {
        'use strict';
        var a = this,
            el = a.wrapper,
            events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],
            i;
        function fireCallBack(e) {
            if (e.target !== el) return;
            callback(a);
            if (a.params.queueEndCallbacks) a._queueEndCallbacks = false;
            if (!permanent) {
                for (i = 0; i < events.length; i++) {
                    a.h.removeEventListener(el, events[i], fireCallBack);
                }
            }
        }
        if (callback) {
            for (i = 0; i < events.length; i++) {
                a.h.addEventListener(el, events[i], fireCallBack);
            }
        }
    },
    getWrapperTranslate: function(axis) {
        'use strict';
        var el = this.wrapper,
            matrix, curTransform, curStyle, transformMatrix;
        // automatic axis detection
        if (typeof axis === 'undefined') {
            axis = this.params.mode === 'horizontal' ? 'x' : 'y';
        }
        if (this.support.transforms && this.params.useCSS3Transforms) {
            curStyle = window.getComputedStyle(el, null);
            if (window.WebKitCSSMatrix) {
                // Some old versions of Webkit choke when 'none' is passed; pass
                // empty string instead in this case
                transformMatrix = new WebKitCSSMatrix(curStyle.webkitTransform === 'none' ? '' : curStyle.webkitTransform);
            } else {
                transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
                matrix = transformMatrix.toString().split(',');
            }
            if (axis === 'x') {
                //Latest Chrome and webkits Fix
                if (window.WebKitCSSMatrix)
                    curTransform = transformMatrix.m41;
                //Crazy IE10 Matrix
                else if (matrix.length === 16)
                    curTransform = parseFloat(matrix[12]);
                //Normal Browsers
                else
                    curTransform = parseFloat(matrix[4]);
            }
            if (axis === 'y') {
                //Latest Chrome and webkits Fix
                if (window.WebKitCSSMatrix)
                    curTransform = transformMatrix.m42;
                //Crazy IE10 Matrix
                else if (matrix.length === 16)
                    curTransform = parseFloat(matrix[13]);
                //Normal Browsers
                else
                    curTransform = parseFloat(matrix[5]);
            }
        } else {
            if (axis === 'x') curTransform = parseFloat(el.style.left, 10) || 0;
            if (axis === 'y') curTransform = parseFloat(el.style.top, 10) || 0;
        }
        return curTransform || 0;
    },
    setWrapperTranslate: function(x, y, z) {
        'use strict';
        var es = this.wrapper.style,
            coords = {
                x: 0,
                y: 0,
                z: 0
            },
            translate;
        // passed all coordinates
        if (arguments.length === 3) {
            coords.x = x;
            coords.y = y;
            coords.z = z;
        }
        // passed one coordinate and optional axis
        else {
            if (typeof y === 'undefined') {
                y = this.params.mode === 'horizontal' ? 'x' : 'y';
            }
            coords[y] = x;
        }
        if (this.support.transforms && this.params.useCSS3Transforms) {
            translate = this.support.transforms3d ? 'translate3d(' + coords.x + 'px, ' + coords.y + 'px, ' + coords.z + 'px)' : 'translate(' + coords.x + 'px, ' + coords.y + 'px)';
            es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = translate;
        } else {
            es.left = coords.x + 'px';
            es.top = coords.y + 'px';
        }
        this.callPlugins('onSetWrapperTransform', coords);
        if (this.params.onSetWrapperTransform) this.fireCallback(this.params.onSetWrapperTransform, this, coords);
    },
    setWrapperTransition: function(duration) {
        'use strict';
        var es = this.wrapper.style;
        es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = (duration / 1000) + 's';
        this.callPlugins('onSetWrapperTransition', {
            duration: duration
        });
        if (this.params.onSetWrapperTransition) this.fireCallback(this.params.onSetWrapperTransition, this, duration);
    },
    /*==================================================
        Helpers
    ====================================================*/
    h: {
        getWidth: function(el, outer, round) {
            'use strict';
            var width = window.getComputedStyle(el, null).getPropertyValue('width');
            var returnWidth = parseFloat(width);
            //IE Fixes
            if (isNaN(returnWidth) || width.indexOf('%') > 0 || returnWidth < 0) {
                returnWidth = el.offsetWidth - parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-left')) - parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-right'));
            }
            if (outer) returnWidth += parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-left')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-right'));
            if (round) return Math.ceil(returnWidth);
            else return returnWidth;
        },
        getHeight: function(el, outer, round) {
            'use strict';
            if (outer) return el.offsetHeight;
            var height = window.getComputedStyle(el, null).getPropertyValue('height');
            var returnHeight = parseFloat(height);
            //IE Fixes
            if (isNaN(returnHeight) || height.indexOf('%') > 0 || returnHeight < 0) {
                returnHeight = el.offsetHeight - parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-top')) - parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-bottom'));
            }
            if (outer) returnHeight += parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue('padding-bottom'));
            if (round) return Math.ceil(returnHeight);
            else return returnHeight;
        },
        getOffset: function(el) {
            'use strict';
            var box = el.getBoundingClientRect();
            var body = document.body;
            var clientTop = el.clientTop || body.clientTop || 0;
            var clientLeft = el.clientLeft || body.clientLeft || 0;
            var scrollTop = window.pageYOffset || el.scrollTop;
            var scrollLeft = window.pageXOffset || el.scrollLeft;
            if (document.documentElement && !window.pageYOffset) {
                //IE7-8
                scrollTop = document.documentElement.scrollTop;
                scrollLeft = document.documentElement.scrollLeft;
            }
            return {
                top: box.top + scrollTop - clientTop,
                left: box.left + scrollLeft - clientLeft
            };
        },
        windowWidth: function() {
            'use strict';
            if (window.innerWidth) return window.innerWidth;
            else if (document.documentElement && document.documentElement.clientWidth) return document.documentElement.clientWidth;
        },
        windowHeight: function() {
            'use strict';
            if (window.innerHeight) return window.innerHeight;
            else if (document.documentElement && document.documentElement.clientHeight) return document.documentElement.clientHeight;
        },
        windowScroll: function() {
            'use strict';
            if (typeof pageYOffset !== 'undefined') {
                return {
                    left: window.pageXOffset,
                    top: window.pageYOffset
                };
            } else if (document.documentElement) {
                return {
                    left: document.documentElement.scrollLeft,
                    top: document.documentElement.scrollTop
                };
            }
        },
        addEventListener: function(el, event, listener, useCapture) {
            'use strict';
            if (typeof useCapture === 'undefined') {
                useCapture = false;
            }
            if (el.addEventListener) {
                el.addEventListener(event, listener, useCapture);
            } else if (el.attachEvent) {
                el.attachEvent('on' + event, listener);
            }
        },
        removeEventListener: function(el, event, listener, useCapture) {
            'use strict';
            if (typeof useCapture === 'undefined') {
                useCapture = false;
            }
            if (el.removeEventListener) {
                el.removeEventListener(event, listener, useCapture);
            } else if (el.detachEvent) {
                el.detachEvent('on' + event, listener);
            }
        }
    },
    setTransform: function(el, transform) {
        'use strict';
        var es = el.style;
        es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transform;
    },
    setTranslate: function(el, translate) {
        'use strict';
        var es = el.style;
        var pos = {
            x: translate.x || 0,
            y: translate.y || 0,
            z: translate.z || 0
        };
        var transformString = this.support.transforms3d ? 'translate3d(' + (pos.x) + 'px,' + (pos.y) + 'px,' + (pos.z) + 'px)' : 'translate(' + (pos.x) + 'px,' + (pos.y) + 'px)';
        es.webkitTransform = es.MsTransform = es.msTransform = es.MozTransform = es.OTransform = es.transform = transformString;
        if (!this.support.transforms) {
            es.left = pos.x + 'px';
            es.top = pos.y + 'px';
        }
    },
    setTransition: function(el, duration) {
        'use strict';
        var es = el.style;
        es.webkitTransitionDuration = es.MsTransitionDuration = es.msTransitionDuration = es.MozTransitionDuration = es.OTransitionDuration = es.transitionDuration = duration + 'ms';
    },
    /*==================================================
        Feature Detection
    ====================================================*/
    support: {
        touch: (window.Modernizr && Modernizr.touch === true) || (function() {
            'use strict';
            return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
        })(),
        transforms3d: (window.Modernizr && Modernizr.csstransforms3d === true) || (function() {
            'use strict';
            var div = document.createElement('div').style;
            return ('webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div);
        })(),
        transforms: (window.Modernizr && Modernizr.csstransforms === true) || (function() {
            'use strict';
            var div = document.createElement('div').style;
            return ('transform' in div || 'WebkitTransform' in div || 'MozTransform' in div || 'msTransform' in div || 'MsTransform' in div || 'OTransform' in div);
        })(),
        transitions: (window.Modernizr && Modernizr.csstransitions === true) || (function() {
            'use strict';
            var div = document.createElement('div').style;
            return ('transition' in div || 'WebkitTransition' in div || 'MozTransition' in div || 'msTransition' in div || 'MsTransition' in div || 'OTransition' in div);
        })(),
        classList: (function() {
            'use strict';
            var div = document.createElement('div');
            return 'classList' in div;
        })()
    },
    browser: {
        ie8: (function() {
            'use strict';
            var rv = -1; // Return value assumes failure.
            if (navigator.appName === 'Microsoft Internet Explorer') {
                var ua = navigator.userAgent;
                var re = new RegExp(/MSIE ([0-9]{1,}[\.0-9]{0,})/);
                if (re.exec(ua) !== null)
                    rv = parseFloat(RegExp.$1);
            }
            return rv !== -1 && rv < 9;
        })(),
        ie10: window.navigator.msPointerEnabled,
        ie11: window.navigator.pointerEnabled
    }
};
/*=========================
  jQuery & Zepto Plugins
  ===========================*/
if (window.$vf || window.jQuery || window.Zepto) {
    (function($) {
        'use strict';
        $.fn.swiper = function(params) {
            var firstInstance;
            this.each(function(i) {
                var that = $(this);
                var s = new Swiper(that[0], params);
                if (!i) firstInstance = s;
                that.data('swiper', s);
            });
            return firstInstance;
        };
    })(window.$vf || window.jQuery || window.Zepto);
}
// CommonJS support
if (typeof(module) !== 'undefined') {
    module.exports = Swiper;
    // requirejs support
} else if (typeof define === 'function' && define.amd) {
    define([], function() {
        'use strict';
        return Swiper;
    });
}
/*! VZRF Version 2.20.0 */
/* 
	VZRF carousel makes use of the idangerous.swiper.min.js plugin found in vzrf/js/vendor
	and uses the plugin's namespacing options to use the VZRF BEM naming convention.
	See http://www.idangero.us/sliders/swiper/api.php for full API
*/
function carouselInit(context) {
	var $context = getContext(context);

	// Prepare this Carousel. Each Carousel must have a unique data-carousel value
	$vf('[data-carousel]', $context).each(function () {
		var $this = $vf(this);
		$this.trigger('beforeCarouselInit');
		var id = $this.attr('data-carousel');

		var options = {
			// pagination selector
			pagination: '[data-carousel-pager='+ id +'] > [data-carousel-pager-list]',

			// VZRF BEM naming convention
			wrapperClass: 'carousel_list',
			slideClass: 'carousel_item',
			slideActiveClass: 'active',
			slideVisibleClass: 'visible',
			slideElement: 'li',
			noSwipingClass: 'm_no-swipe',
			paginationElement: 'span',
			paginationElementClass: 'carousel_pager-item',
			paginationActiveClass: 'active',
			paginationVisibleClass: 'visible',

			// Other vzrf default options
			loop: true,
			paginationClickable: true,
			roundLengths: true,
			cssWidthAndHeight: 'height',
			updateOnImagesReady:true,
			onSlideChangeStart: function (swiper) {
				var $container = $vf(swiper.container);
				$container.trigger('beforeCarouselSlideChange');
				// get the height of the newly active slide then set the height of the carousel to match
				var height = $vf(swiper.container).find('.carousel_item.active').height();
				$container.height(height);
			},
			onSlideChangeEnd: function(swiper) {
				var $container = $vf(swiper.container);
				// accessibility attributes
				$vf('.carousel_item', $container).attr({ 'aria-hidden': 'true', 'tabindex': '-1' });
				$vf('.carousel_item.active', $container).attr({ 'aria-hidden': 'false', 'tabindex': '0' });
				$vf('.carousel_item > div > [data-carousel-next]').attr('tabindex', -1);
				$vf('.carousel_item.active > div > [data-carousel-next]').attr('tabindex', 0);
				$vf('.carousel_item > div > [data-carousel-prev]').attr('tabindex', -1);
				$vf('.carousel_item.active > div > [data-carousel-prev]').attr('tabindex', 0);
				$container.trigger('afterCarouselSlideChange');
			},
			onInit: function(swiper) {
				var $container = $vf(swiper.container)
				var height = $container.find('.carousel_item.active').height();
				$container.height(height);

				// accessibility attributes
				$vf('.carousel_item', $container).attr({ 'aria-hidden': 'true', 'tabindex': '-1' });
				$vf('.carousel_item.active', $container).attr({ 'aria-hidden': 'false', 'tabindex': '0' });
				//$vf('[data-carousel-prev]', $container).attr({'aria-label':'previous', 'tabindex': '0'});
				$vf('[data-carousel-pager-list]', $container).attr('aria-label', 'carousel buttons');
				//$vf('[data-carousel-next]', $container).attr({ 'aria-label': 'next', 'tabindex': '0' });
				$vf('[data-carousel-next]').each(function () {
					var $this = $vf(this);
					// set tabindex to 0 if not set already
					if ($this[0].hasAttribute('tabindex') === false) {
						$this.attr('tabindex', 0);

					}

					$this.attr('aria-label', 'next');
				});
				$vf('[data-carousel-prev]').each(function () {
					var $this = $vf(this);
					// set tabindex to 0 if not set already
					if ($this[0].hasAttribute('tabindex') === false) {
						$this.attr('tabindex', 0);

					}

					$this.attr('aria-label', 'previous');
				});
			}
		}

		if ($this.is('[data-carousel-options]')) {
			var customOptionsText = $this.attr('data-carousel-options');
			var customOptions = JSON.parse(customOptionsText);
			$vf.extend(options, customOptions);
		}


		// reInit() if this carousel is already initialized. Prevents double initializing on run of vzrfInit()
		if ($this.is('[data-carousel-init=true]')) {
			// reInitialize Swiper if it's already been created by carouselToSwiper()
			bannerCarousels[id].reInit();			
		} else {
			// run carouselToSwiper() to create a Swiper instance for the first time. 
			carouselToSwiper(id, options);
		}

		$vf('.swiper-slide-duplicate > div >.button').attr('tabindex', -1);

		// Make work with Reveal Widget
		$this.closest('[data-reveal-content]').on('afterRevealShow', function() {
			bannerCarousels[id].resizeFix();
		});

		$this.trigger('afterCarouselInit');
	});

	// prev and next pager elements
	$vf('[data-carousel-prev]', $context).off('click keypress');
	$vf('[data-carousel-prev]', $context).on('click keypress', function(e) {
		if(keyClick(e) === true){ 
			var $this = $vf(this);
			var carouselId;
			if ($this.closest('[data-carousel-pager]').length) {
				carouselId = $this.closest('[data-carousel-pager]').attr('data-carousel-pager');
			} else {
				carouselId = $this.closest('[data-carousel]').attr('data-carousel');
			}
			bannerCarousels[carouselId].swipePrev();
		}
	});
	$vf('[data-carousel-next]', $context).off('click keypress');
	$vf('[data-carousel-next]', $context).on('click keypress', function(e) {
		if(keyClick(e) === true){ 
			var $this = $vf(this);
			var carouselId;
			if ($this.closest('[data-carousel-pager]').length) {
				carouselId = $this.closest('[data-carousel-pager]').attr('data-carousel-pager');
			} else {
				carouselId = $this.closest('[data-carousel]').attr('data-carousel');
			}
			bannerCarousels[carouselId].swipeNext();
		}
	});
}

var bannerCarousels = {};

function carouselToSwiper(carouselId, options) {
	var $carousel = $vf('[data-carousel=' + carouselId + ']');
	
	$carousel.trigger('beforeCarouselToSwiper');
	
	bannerCarousels[carouselId] = $carousel.swiper(options);
	// add a DOM flag that this carousel has been initialized.
	$carousel.attr('data-carousel-init', 'true');
	
	$carousel.trigger('afterCarouselToSwiper');
}

// Where context = id || jQuery object || undefined.
//Sanitize and encode all HTML in a user-submitted string to prevent XSS attacks.
var sanitizeHTML = function (str) {
	var temp = document.createElement('div');
	temp.textContent = str;
	return temp.innerHTML;
};
function appInit(context) {
	try {
		videoInit(context);
		stickyPageScroll(context);
		learnCmbCarouselModsInit(context);
		modalFocusInit(context);
		iframeModalInit(context);

	} catch (err) {
		try {
			fiosBostonInit(context);
		} catch (err) {

		}
	}
}

//Initialize carousel
carouselInit();

$('a.cta').click(function () {
	if (window.location.search) {
		var url = $(this).attr("href");
		if (url != undefined) {
			if (url.indexOf("?") > -1)
				url = url + "&" + window.location.search.substring(1);
			else
				url = url + window.location.search;
		}
		$(this).attr("href", url);
	}
});

function videoInit(a) {
	a = getContext(a);
	a.off("beforeCloseModal", "[data-modal].active");
	a.on("beforeCloseModal", "[data-modal].active", function (a) {
		$('video').trigger('pause');
	});
};

//Function to change rates
function changeRate() {
	var dropDownElement = document.getElementById('cboCountry');
	var allOptions = dropDownElement.options;
	if (allOptions) {
		for (i = 0; i < allOptions.length; i++) {
			allOptions[i].setAttribute("aria-selected", "false");
		}
	}
	var optionSelected = dropDownElement.options[dropDownElement.selectedIndex];
	optionSelected.setAttribute("aria-selected", "true");
	var rate = document.getElementById('cboCountry').value;
	var rateArray = new Array();
	rateArray = rate.split("^^");
	if (rateArray.length > 1) {
		document.getElementById('txtTolRate').innerHTML = "$" + encodeURI(rateArray[0]);
		document.getElementById('txtPremRate').innerHTML = "$" + encodeURI(rateArray[1]);
	} else {
		document.getElementById('txtTolRate').innerHTML = "";
		document.getElementById('txtPremRate').innerHTML = "";
	}
}
function escapeHtml(unsafe) {
	return unsafe
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&#039;");
}
/***********   Accessibility Code For Overlay ************ */
var modals = document.querySelectorAll('.w_modal.vzrf')
if (modals) {
	for (i = 0; i < modals.length; i++) {
		modals[i].addEventListener('keydown', function () {
			var focusable = this.querySelectorAll('button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])');
			var firstFocusable = focusable[0];
			var lastFocusable = focusable[focusable.length - 1]

			if (event.key == 'Tab' && (!event.shiftKey && event.target == lastFocusable) || (event.shiftKey && event.target == firstFocusable)) {
				event.preventDefault()
				var closeMe = this.querySelector('.modal_x')
				if (closeMe) closeMe.focus()
			}
		})
	}
}
/********* Accessibility END************/
// Where context = id || jQuery object || undefined.
function stickyPageScroll(context) {
    var $context = getContext(context);

    // check that the attribute exists before setting a value 
    var len = $(document).find('[data-get-fixed]').length;
    console.log('Length--' + len);
    if (len > 0) {
        // Element has this attribute  
        $context.on("scroll", onScroll);
        navHeight = $("#navBarSticky").outerHeight(true);
        // Code to scroll page within the sections 
        $context.off('click', '.tabs_tab_sticky a[href^="#"]');
        $context.on('click', '.tabs_tab_sticky a[href^="#"]', function (e) {
            e.preventDefault();
            //$(document).off("scroll");
            $('.tabs_tab_sticky a').each(function () {
                $(this).removeClass('active');
            });
            $(this).addClass('active');
            var target = this.hash,
                menu = target;
            $target = $(target);
			var tvalue = $target.offset().top;
			if(tvalue < 1000){
			 tvalue = 610;//setting min value in case the section to scroll is first section #VTM
			}
            $('html, body').stop().animate({
                'scrollTop':tvalue - navHeight
            }, 800, 'swing', function () {
                window.location.hash = target;
                $(document).on("scroll", onScroll);
            });
        });

        // Code to Scroll Page to top
        $context.off('click', '.scrollTop');
        $context.on('click', '.scrollTop', function (e) {
            $('html, body').stop().animate({
                'scrollTop': 0
            });
        });

        // Code to freeze Header Tab Navigation
        var stickyNavTop = $('[data-get-fixed]').offset().top;
        var stickyNav = function () {
            var scrollTop = $(window).scrollTop();
            if (scrollTop > stickyNavTop) {
                $('[data-get-fixed]').addClass('stickyNav');
                if (document.documentMode || /Edge/.test(navigator.userAgent)) {
                    //$(".stickyNav").css("top", 0);
                }
                else {
                    //$(".stickyNav").css("top", scrollTop);
                }
                $(".scrollTop").addClass('show').removeClass('hide');
            } else {
                $('[data-get-fixed]').removeClass('stickyNav');
                $(".scrollTop").removeClass('show').addClass('hide');
                $('#section_menu ul li a').removeClass("active");
            }
        };
        stickyNav();
        //Event to be triggered on scorll start
        $(window).scroll(function () {
            stickyNav();
        });
        $(window).load(function () {
            getHashValue();
        });
      //Sanitize and encode all HTML in a user-submitted string to prevent XSS attacks.
        var sanitizeHTML = function (str) {
        var temp = document.createElement('div');
        temp.textContent = str;
        return temp.innerHTML;
        };
        function getHashValue() {
            try{
            var hashval = window.location.hash;
            $('html, body').stop().animate({
                'scrollTop': escapeHtml($(hashval).offset().top - navHeight)
            }, 800, 'swing', function () {
                stickyNav();
            });
            console.log("onload");
            }catch(e){}
        }
  function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }
        // Code to add active class on header nav tabs
        function onScroll(event) {
            var scrollPos = $(document).scrollTop();
            $('#section_menu ul li a').each(function () {
                var currLink = $(this);
                var refElement = $(currLink.attr("href"));
                if (refElement.position().top - navHeight <= scrollPos && refElement.position().top + refElement.height() - navHeight > scrollPos) {
                    $('#section_menu ul li a').removeClass("active");
                    currLink.addClass("active");
                }
                else {
                    // currLink.removeClass("active");
                }
            });
        }
    }
}

function showSms(){
    document.getElementById("sms_show").style='display:block';
    document.getElementById("sucess_msg").style='display:none';
}

function sendSms(){
    document.getElementById("sms_show").style='display:none';
    document.getElementById("sucess_msg").style='display:block';
    var phoneNum = $("#ph_num").val();
    var appName;
    if(window.location.href.toLowerCase().indexOf("fios-tv-app")>-1){
        appName="FIOSTV";
    }else if(window.location.href.toLowerCase().indexOf("my-fios-app")>-1){
        appName="MYFIOS";
     }

$.ajax({    
    url: "/content/verizon/personal/services/sendsmsservice.all.html?mob="+phoneNum+"&apptype="+appName,
    async: false,
    global: false,
    error: function () {
    console.log("Error is occurred");
    
},
    success: function(result){
    console.log('success');
	    }
 });

}
'use strict';
var width = void 0,
	swiper = void 0,
	carousels = [],
	nocarousel = true,
	timeout = false, // holder for timeout id
	delay = 250; // delay after event is "complete" to run callback


// window.resize callback function
function initializeCorousel(element) {
	width = window.innerWidth;
	var slides = element.querySelectorAll(".carousel-cell").length;
	var carouselElement = void 0;
	var showSlider = false;
	var hidePrevNextButtons = false;
	var adaptiveHeight = true;
	var autoplay = false;
	var hideDots = false;
	var arrow = "M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z";
	if (element.dataset.toparrow == "navigation-right-top") {
		arrow = "M 40,0 L 40,0 L 50,0 L 15,45 L 100,45 L 100,55 L 15,55 L 50,100 L 40,100 L 0,50 Z";
	}
	if (width < 768) {
		if (slides > element.dataset.mobileColumn) {
			showSlider = true;
		}
		if (element.dataset.hidenextprevmobile == "hide")
			hidePrevNextButtons = true;
		if (element.dataset.hidedotsmobile == "hide")
			hidePrevNextButtons = true;
	} else if (width >= 768 && width <= 1024) {
		if (slides > element.dataset.ipadColumn) {
			showSlider = true;
		}
		if (element.dataset.hidenextprevmobile == "hide")
			hidePrevNextButtons = true;
		if (element.dataset.hidedotsmobile == "hide")
			hidePrevNextButtons = true;
	} else {
		if (slides > element.dataset.desktopColumn) {
			showSlider = true;
		}
	}
	if (showSlider) {
		if (element.dataset.hidenextprev == "hide")
			hidePrevNextButtons = true;
		if (element.dataset.hidedots == "hide")
			hideDots = true;
		if (hidePrevNextButtons && hideDots)
			showSlider = false;
	}
	if(element.dataset.adaptiveheight == "false")
		adaptiveHeight = false;
	if(element.dataset.autoplay == "true")
		autoplay = true;
	carouselElement = new Flickity(element, {
		cellAlign: 'left',
		arrowShape: arrow,
		groupCells: true,
		autoPlay: autoplay,
		adaptiveHeight: adaptiveHeight,
		draggable: showSlider,
		prevNextButtons: (showSlider && !hidePrevNextButtons),
		pageDots: (showSlider && !hideDots)
	});
	carousels.push(carouselElement);
}

function initializeCarouselElement() {
	swiper = document.getElementsByClassName("carousel");
	for (i = 0, length = carousels.length; i < length; i++) {
		try {
			carousels[i].destroy();
		} catch (e) {
		}
	}
	for (i = 0, length = swiper.length; i < length; i++) {
		initializeCorousel(swiper[i]);
	}
}

// window.resize event listener
window.addEventListener('resize', function () {
	// clear the timeout
	clearTimeout(timeout);
	// start timing for event "completion"
	timeout = setTimeout(initializeCarouselElement, delay);
});

if (
	document.readyState === "complete" ||
	(document.readyState !== "loading" && !document.documentElement.doScroll)
) {
	initializeCarouselElement();
	setTimeout(function () {
		if (carousels && carousels.length > 0) {
			for (i = 0, length = carousels.length; i < length; i++) {
				carousels[i].reloadCells();
			}
		}
	}, 1000);
} else {
	document.addEventListener('DOMContentLoaded', function () {
		initializeCarouselElement();
		setTimeout(function () {
			if (carousels && carousels.length > 0) {
				for (i = 0, length = carousels.length; i < length; i++) {
					carousels[i].reloadCells();
				}
			}
		}, 1000);
	});
}






var dscreenwidth = screen.width;
var internetPrice = 0;
var discountPrice = 0;
var internetSpeed = "";
var yourOffer = "";
var tvPrice = 0;
var tvSpec = "";
var tvOffer = "";
var extraCount = "";
var internetUsoc = "";
var extraUsoc = "";
var tvUsoc = "";
var extraPrice = 0;
var internetName = "";
var tvName = "";
var extraName = "";
var extraText = " Extra Services";
var internetModal = "";
var tvModal = "";
var orderbutton = "false";
var extraModal = [];
 var mm_flickity = "false";

function mixandmatch(){
    mm_flickity = "true";
    if ($(window).innerWidth() < 768) {
        if ($(".component-wrapper").attr("mob-image")) {
            var img = $(".component-wrapper").attr("mob-image")
            $(".component-wrapper").css('background-image', 'url(' + img + ')');
        }
        $(".checkAvailBtn").parent(".cta-test").removeClass("hero-black-cta padding-horiz-tiny");

        $(".checkAvailBtn").addClass("mobilemixcta button cta-text text-xlarge");
        $(".margin-top-zero.mobile-margin-zero").removeClass("tiny-header-h3");
        $(".margin-top-zero.mobile-margin-zero").addClass("tiny-header-h4");
    } else {
          $(".tabs_tab").filter("[data-tab='Youtube']").addClass("hid");
        if ($(".component-wrapper").attr("des-image")) {
            var img = $(".component-wrapper").attr("des-image")
            $(".component-wrapper").css('background-image', 'url(' + img + ')');
        }
        $(".checkAvailBtn").parent(".cta-test").addClass("hero-black-cta padding-horiz-tiny");
        $(".checkAvailBtn").addClass("offer-cta");
        $(".checkAvailBtn").removeClass("button cta-text text-xlarge");
        $(".margin-top-zero.mobile-margin-zero").addClass("tiny-header-h3");
        $(".margin-top-zero.mobile-margin-zero").removeClass("tiny-header-h3");
    }

    var buttonValue = $(".checkAvailBtn").text();
    if (buttonValue == 'Order now') {
        orderButton = "true";
        $(".checkAvailBtn").addClass("disabled");
    }

    $(".icon-form-checkbox").parents(".carousel-cell").addClass("grayout-cell");
    $(window).bind('scroll', function () {
        if($('.bottom-sticky').length > 0){
            if ($(window).scrollTop() >= $('.bottom-sticky').offset().top + $('.bottom-sticky').outerHeight() - window.innerHeight) {
                $("footer").css({
                    marginBottom: $('.bottom-sticky').outerHeight() + "px"
                });
            }
        }
    });







// radio-button event
    $(".icon-form-radio").change(function () {
        var buttonId = this.id;
        var product = this.name;
        console.log('product' + product);
        if (product == 'tv') {
            $('input[name="tvUsoc"]').each(function (index) {
                $(this).val("");
            });

            $('input[name="tvName"]').each(function (index) {
                $(this).val("");
            });

        }
        if (product == 'internet') {
            $('input[name="internetUsoc"]').each(function (index) {
                $(this).val("");
            });
            $('input[name="internetName"]').each(function (index) {
                $(this).val("");
            });

        }



        if ($(this).is(':checked')) {
            if ($(".icon-form-checkbox").filter(':checked').length >= 3) {
                $(".icon-form-checkbox").removeAttr('disabled');
                $(".extras-alert").addClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").removeClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").removeClass("disabled");
                }
                $(".icon-form-checkbox:not(:checked)").attr('disabled', 'disabled');
            } else {
                $(".icon-form-checkbox").removeAttr('disabled');
                $(".icon-form-checkbox").attr('aria-disabled','false');
                $(".extras-alert").addClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").removeClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").removeClass("disabled");
                }
            }


            var name = $(this).attr("name");
            $(".icon-form-radio").filter('[name="' + name + '"]').prop("checked", false);
            $(".icon-form-radio").filter('[name="' + name + '"]').closest(".flickity-slider").children().removeClass("red-top-border-4");
            if ($(".deskcarousel")) {
                $(".icon-form-radio").filter('[name="' + name + '"]').closest(".deskcarousel").children().removeClass("red-top-border-4");
            }


            $(this).prop("checked", true);


            // broder red
            $(this).closest(".flickity-slider").children().removeClass("red-top-border-4");
            $(this).closest(".flickity-slider").children().removeClass("border-black");

            $(this).closest(".flickity-slider").children().addClass("gray-top-border-4");

            if ($(".deskcarousel")) {
                $(this).closest(".deskcarousel").children().removeClass("red-top-border-4");
                $(this).closest(".deskcarousel").children().removeClass("border-black");
                $(this).closest(".deskcarousel").children().addClass("gray-top-border-4");
            }


            $(this).closest(".carousel-cell").removeClass("border-all");

            $(this).closest(".carousel-cell").addClass("red-top-border-4");



            if ($(this)[0].hasAttribute("internetPrice")) {
                var rawPrice =$(this).attr("internetPrice");
                if($(this).hasClass("comcpouninput")){
                    rawPrice = $(this).attr("discountPrice");
                }else{
                    rawPrice = $(this).attr("internetPrice");
                }
                 console.log('rawPrice'+rawPrice);
                var arrPrice = rawPrice.split("$");
                internetPrice = parseFloat(arrPrice[1]);
                if ($(this)[0].hasAttribute("internetSpeed")) {
                    internetSpeed = $(this).attr("internetSpeed");
                } else {
                    internetSpeed = "";
                }
                if ($(this)[0].hasAttribute("yourOffer")) {
                    var rawOff= $(this).attr("yourOffer");
                    var slic = rawOff.split('<span class="OfferText">');
                    yourOffer = slic[0];
                }

                /*$(this)[0].hasAttribute("internetModal") ? internetModal = $(this).attr("internetModal") : internetModal = " ";*/

                if ($(this)[0].hasAttribute("internetUsoc")) {
                    internetUsoc = $(this).attr("internetUsoc");
                    document.getElementById('uSoc' + buttonId).value = internetUsoc;

                }
                if ($(this)[0].hasAttribute("internetName")) {
                    internetName = $(this).attr("internetName");
                    document.getElementById('plan' + buttonId).value = internetName;
                } else {
                    yourOffer = "";
                }

            } else if ($(this)[0].hasAttribute("tvPrice")) {
                var rawPrice = $(this).attr("tvPrice");
                var arrPrice = rawPrice.split("$");

                tvPrice = parseFloat(arrPrice[1]);
                if ($(this)[0].hasAttribute("tvSpec")) {
                    tvSpec = $(this).attr("tvSpec");
                }

                if ($(this)[0].hasAttribute("tvOffer")) {
                    tvOffer = $(this).attr("tvOffer");
                }
                /* $(this)[0].hasAttribute("tvModal") ? tvModal = $(this).attr("tvModal") : tvtModal = " ";*/
                if ($(this)[0].hasAttribute("tvUsoc")) {
                    tvUsoc = $(this).attr("tvUsoc");
                    document.getElementById('uSoc' + buttonId).value = tvUsoc;

                }
                if ($(this)[0].hasAttribute("tvName")) {
                    tvName = $(this).attr("tvName");
                    document.getElementById('plan' + buttonId).value = tvName;
                } else {
                    tvOffer = "";
                }
            }
            packUpdate();


        } else {
            console.log("un-check" + buttonId);
            console.log("is" + $(this)[0].hasAttribute("internetUsoc"));
            if ($(".icon-form-radio").filter(':checked').length == 0) {
                $(".icon-form-checkbox").attr('disabled', 'disabled');
                $(".icon-form-checkbox").attr('aria-disabled','true');
                $(".extras-alert").removeClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").addClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").addClass("disabled");
                }
                $(".icon-form-checkbox").prop("checked", false);
                $(".icon-form-checkbox").closest(".carousel-cell").removeClass("red-top-border-4");
                extraPrice = 0;
                extraCount = 0;
                extraModal = [];
            } else {
                $(".icon-form-checkbox").removeAttr('disabled');
                $(".extras-alert").addClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").removeClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").removeClass("disabled");
                }
            }

            $(this).closest(".carousel-cell").removeClass("red-top-border-4");
            if ($(this)[0].hasAttribute("internetPrice")) {
                internetPrice = 0;
                discountPrice = 0;
                internetSpeed = "";
                yourOffer = "";
                internetModal = "";
            }
            if ($(this)[0].hasAttribute("tvPrice")) {
                tvPrice = 0;
                tvSpec = "";
                tvModal = "";
                tvOffer = "";
            }

            if (($(this)[0].hasAttribute("tvName")) || ($(this)[0].hasAttribute("internetName"))) {
                document.getElementById('plan' + buttonId).value = "";
            }
            if ($(this)[0].hasAttribute("internetUsoc")) {
                document.getElementById('uSoc' + buttonId).value = "";
            }
            if ($(this)[0].hasAttribute("tvUsoc")) {
                document.getElementById('uSoc' + buttonId).value = "";
            }
            packUpdate();

        }
        var checkedBoxCount = $('.icon-form-radio:checked').size();
        //console.log('checkedBoxCount'+checkedBoxCount);
        if (checkedBoxCount < 1) {
            $(".netSpeed").empty();
            $(".netOffer").empty();
            $(".netSpeed").append("Select any internet or TV plan to get started");
            $(".netOffer").append("Disney+ on us with select plans.");

        }
    });

    // dropdown event
    //dropDownInit();

    const carousels = document.querySelectorAll('.carousel-cell');
    var carouselStatus = document.querySelector('.carousel-status');
    var widcarousel_status = $(".widcarousel-status");
    var flk_status = new Flickity('.widcarousel', {
        cellAlign: 'left',
        contain: true,
    });

    var carouselContainers = document.querySelectorAll('.carousel-container');

    for (var i = 0; i < carouselContainers.length; i++) {
        var container = carouselContainers[i];
        initCarouselContainer(container);
    }

    function initCarouselContainer(container) {
        var carousel = container.querySelector('.car-container');
        var flkty;
        if (window.innerWidth <= 768) {
            flkty = new Flickity(carousel, {
                cellAlign: 'left',
                contain: true,
                groupCells: true,
            });
        } else {
            flkty = new Flickity(carousel, {
                cellAlign: 'left',
                contain: true,
                groupCells: 3,
            });
        }

        var carouselStatus = container.querySelector('.carousel-status');

        function updateStatus() {
            var slideNumber = flkty.selectedIndex + 1;
            var r = "";
            if(flkty.selectedCell){
                r = flkty.selectedCell.element;}
            var name = $(r).find("input.icon-form-radio.white-bg-checkbox").attr("tvname");
            if (name === "Fios TV Test Drive") {
                $(r).addClass("tv-selected");
            }
            if(flkty.slides){
                carouselStatus.textContent = slideNumber + '/' + flkty.slides.length;}
        }
        updateStatus();

        flkty.on('select', updateStatus);

    }





    /* function refreshCell(){
         for(var i=0; i<$(".widcarousel").length; i++){
             var flic = $(".widcarousel")[i];
             var flkty = new Flickity(flic, {
                 draggable: true,
                 pageDots: false,
                 leftToright: true,
                 resize: true,
                 cellAlign: 'left',
                 prevNextButtons: bool_condition,
             });


             setTimeout(myBoundMethod, 1.0*50);
             function myBoundMethod(){
             flkty.resize();
             }
         }
     }


     $(".tr-li").click(function(){
         refreshCell();

     });
     */
     youtubeAppend();


     function tabsHeightChange(){
         var a = $(this).attr("data-tab");
         if(a == "Live TV"){
             youtubeAppend();

         }else{

         }
         $(".deskcarousel").find(".fixbottom").removeClass("fixbottom");
         setTimeout(topPortion, 1.0 * 10);
         setTimeout(cardHeight, 1.0 * 10);
    }

     $(".tabs_tab").keydown(function(){
    	 var activeTabName ;
    	 var tabpanelList = document.querySelectorAll('.panel1 .carousel-container');
 		 var tabList = document.querySelectorAll('.w_tabs .tabs_tab');
    	 if(event.key !==null && (event.key ==="ArrowUp" || event.key ==="ArrowRight")){    		
    		 for(i =0; i< tabpanelList.length ; i++){
    			 tabpanelList[i].classList.remove("active");
    			 tabpanelList[i].style.display = "none";
    			 tabpanelList[i].setAttribute("hidden",true);
    		 }
    		 for(j =0; j< tabList.length ; j++){
    			 tabList[j].classList.remove("active");
    			 tabList[j].setAttribute("aria-selected","false");
    			 tabList[j].setAttribute("tabindex","-1");
    		 }
    		 
    		 if(event.target.nextElementSibling && !event.target.nextElementSibling.classList.contains("hid")){
    			 activeTabName = event.target.nextElementSibling.outerText;
    			 event.target.nextElementSibling.className += " active";
    			 event.target.nextElementSibling.setAttribute("aria-selected","true");
    			 event.target.nextElementSibling.setAttribute("tabindex","0");
    			 event.target.nextElementSibling.focus();
    			 
    		  }else{
    			 activeTabName = event.target.nextElementSibling.nextElementSibling.outerText;
    			 event.target.nextElementSibling.nextElementSibling.className += " active";
     			 event.target.nextElementSibling.nextElementSibling.setAttribute("aria-selected","true");
     			 event.target.nextElementSibling.nextElementSibling.setAttribute("tabindex","0");
     			 event.target.nextElementSibling.nextElementSibling.focus();
    		  }
    		 document.getElementById(activeTabName).removeAttribute("hidden");
    		 document.getElementById(activeTabName).className += " active";
    		 document.getElementById(activeTabName).style.display = "block";
    		 
    	  }else if(event.key !==null && (event.key ==="ArrowDown" || event.key ==="ArrowLeft")){    		
     		 for(i =0; i< tabpanelList.length ; i++){
     			 tabpanelList[i].classList.remove("active");
     			 tabpanelList[i].style.display = "none";
     			 tabpanelList[i].setAttribute("hidden",true);
     		 }
     		 for(j =0; j< tabList.length ; j++){
     			 tabList[j].classList.remove("active");
     			 tabList[j].setAttribute("aria-selected","false");
     			 tabList[j].setAttribute("tabindex","-1");
     		 }
    		  if(event.target.previousElementSibling && !event.target.previousElementSibling.classList.contains("hid")){
    			 activeTabName = event.target.previousElementSibling.outerText;
    			 event.target.previousElementSibling.className += " active";
    	    	 event.target.previousElementSibling.setAttribute("aria-selected","true");
    	    	 event.target.previousElementSibling.setAttribute("tabindex","0");
    	    	 event.target.previousElementSibling.focus();
    		  }else{
    			 activeTabName = event.target.previousElementSibling.previousElementSibling.outerText;
    			 event.target.previousElementSibling.previousElementSibling.className += " active";
     	    	 event.target.previousElementSibling.previousElementSibling.setAttribute("aria-selected","true");
     	    	 event.target.previousElementSibling.previousElementSibling.setAttribute("tabindex","0");
     	    	 event.target.previousElementSibling.previousElementSibling.focus();
    		  }
    		  document.getElementById(activeTabName).removeAttribute("hidden");
    		  document.getElementById(activeTabName).className += " active";
    		  document.getElementById(activeTabName).style.display = "block";
    	  }
		tabsHeightChange();
     });
     $(".tabs_tab").click(function(){
		tabsHeightChange();
     });
     function youtubeAppend(){
         try{
         // var youaa = [document.querySelector(`[data-exp-name="YOUTUBE_TV"] .Youtubestart`)];
         //         if(youaa.length > 0 && youaa[0]  !== null){
         //             youaa[0].innerHTML  = "As low as";
         //         }
             var s = $(".carousel-container").filter("[data-tabs-content='Live TV']");
             var n = s.find(".deskcarousel");
             var t = $(".carousel-container").filter("[data-tabs-content='Youtube']");
             n.append(t.find(".carousel-cell"));
     
         }catch(e){}
     }
    hideCheck();
    setTimeout(hideCheck, 1.0 * 50);



    topPortion();




    /*Arrow Condition*/
    setTimeout(arrowCondition, 1.0 * 50);

    function arrowCondition() {

        $(".widcarousel").each(function (i) {
            var p = $(".widcarousel")[i];
            var c = $(".widcarousel").children(".flickity-viewport").children(".flickity-slider")[i];
            console.log(i + " : " + c.childElementCount);
            c.childElementCount < 4 ? $(p).addClass("hide-arrow") : "";
        });
    }

    /* Resize */
 resizeFun();
 

   // cardHeight();
 }



 /*Check avail functionality changes*/
     $(".checkAvailFunc").click(function(){
         var rawID = $(this).attr("id");
         var arrayID = rawID.split("checkavail-");
         var actualID = arrayID[1];
     
         if(document.getElementById(actualID).hasAttribute("internetUsoc")){internetUsoc = $("#" +actualID+ "").attr("internetusoc");}
         if(document.getElementById(actualID).hasAttribute("internetName")){internetName = $("#" +actualID+ "").attr("internetname");}
     
         if(document.getElementById(actualID).hasAttribute("tvName")){tvName = $("#" +actualID+ "").attr("tvname");}
         if(document.getElementById(actualID).hasAttribute("tvUsoc")){tvUsoc= $("#" +actualID+ "").attr("tvusoc");}
     
     
     });


function updateToPDC() {
    var data = "";
    var tv = ""
    var extras = "";

    if (internetName != "") {
        data = "Data~" + internetName + "^" + internetUsoc;
    }
    if (tvName != "") {
        tv = "Tv~" + tvName + "^" + tvUsoc;
    }
    if (extraName != "") {
        extras = "Extras~" + extraName + "^" + extraUsoc;
    }
    $.ajax({
        type: 'GET',
        url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=writejson&VzOSEL=MixMatch-" + data + "|" + tv + "|" + extras,
        async: false,
        success: function (data) {
            console.log("Success");
        },
        error: function (e) {
            console.log(e);
        }
    });
}

function updateJSONToPDC() {
	if(window.location.pathname.indexOf("/home/moving/")>-1){
		updateMovePdcJSon();
	}else{
    var mixmatch = {};
    var DATA = {};
    var TV = {};
    var EXTRAS = {};
    var subProduct = [];
    EXTRAS.subProduct = subProduct;
    var subProdDetails1 = {}
    var subProdDetails2 = {}
    if ($("#uSoce1").val()) {
        subProdDetails1.prodId = $("#uSoce1").val().trim();
        subProdDetails1.prodName = $("#plane1").val().trim();
        EXTRAS.subProduct.push(subProdDetails1);
    }

    if ($("#uSoce2").val()) {
        subProdDetails2.prodId = $("#uSoce2").val();
        subProdDetails2.prodName = $("#plane2").val();
        EXTRAS.subProduct.push(subProdDetails2);
    }

    mixmatch.DATA = DATA;
    mixmatch.TV = TV;
    mixmatch.EXTRAS = EXTRAS;
    mixmatch.DATA.prodId = internetUsoc.trim();
    mixmatch.DATA.prodName = internetName.trim();
    mixmatch.TV.prodId = tvUsoc.trim();
    mixmatch.TV.prodName = tvName.trim();


    $.ajax({
        type: 'POST',
        url: "/content/verizon/personal/services/updatepdc.all.nocache.html",
        async: false,
        contentType: "application/json",
        data: JSON.stringify(mixmatch),
        success: function (data) {
            console.log("Success");
        },
        error: function (e) {
            console.log(e);
        }
    });

	}

}


function hideCheck() {

        $(".hide-check").each(function (i) {

            var c = $(".hide-check").children(".flickity-viewport").children(".flickity-slider")[i];


            $(".hide-check").find("label").addClass("hid");
            $(".hide-check").find("label").attr("aria-hidden", "true");
            $(".hide-check").find("input").attr("aria-hidden", "true");
            $(".hide-check").find("input").attr("tabindex", "-1");

            var d = $(".deskcarousel.hide-check").children(".carousel-cell")[i];
            $(d).find("label").addClass("hid");
        });
        $(".hide-cta").each(function (i) {
               $(".hide-cta").find(".mm-cta").addClass("hid");


        });
    }


 function cardHeight() {
         var i = $(".deskcarousel").children();
         $(i).css("height","");
       for (i = 0; i < $(".deskcarousel").length; i++) {
        var largeHeight = 0;
       console.log($(".deskcarousel")[i].children.length);
         for (j = 0; j < $(".deskcarousel")[i].children.length; j++) {

            if (largeHeight >  $(".deskcarousel")[i].children[j].clientHeight) {
                largeHeight = largeHeight
            } else {
                largeHeight =  $(".deskcarousel")[i].children[j].clientHeight;
            }
        }
          var cardle = $(".deskcarousel")[i].children
         $(cardle).css({
            "height": largeHeight
        });

      }
         $(".deskcarousel .carousel-cell").addClass("relative");
         if($(".deskcarousel .checkAvailFunc")){
             $(".deskcarousel .checkAvailFunc").addClass("fixbottom");
         }


    }

      function topPortion() {
       $(".deskcarousel").find(".compo-height").css("height","");
        //var largeHeight = 0;
        //for (j = 0; j < $(".compo-height").length; j++) {

        //    if (largeHeight > $(".compo-height")[j].clientHeight) {
        //        largeHeight = largeHeight
        //    } else {
        //        largeHeight = $(".compo-height")[j].clientHeight;
        //    }
        //}
        //$(".compo-height").css({
        //    "height": largeHeight
        //});

       for (i = 0; i < $(".deskcarousel").length; i++) {
            var largeHeight = 0;
           console.log($(".deskcarousel")[i].children.length);
         for (j = 0; j < $(".deskcarousel")[i].children.length; j++) {
             var y = $(".deskcarousel")[i].children[j];
             $(y).find(".compo-height")[0].clientHeight;

             if (largeHeight >  $(y).find(".compo-height")[0].clientHeight) {
                    largeHeight = largeHeight;
                } else {
                    largeHeight =  $(y).find(".compo-height")[0].clientHeight;
                }
            
            
        }
         var t = $(".deskcarousel")[i];
         $(t).find(".compo-height").css({
               "height": largeHeight
        });
         
      }
    }

function priceCheck(){
$(".icon-form-checkbox").change(function () {
        var checkbuttonId = this.id;

        if ($(".icon-form-checkbox").filter(':checked').length > 3) {
            $(".icon-form-checkbox:not(:checked)").attr('disabled', 'disabled');
        } else if ($(".icon-form-checkbox").filter(':checked').length == 3) {

            $(".icon-form-checkbox").removeAttr('disabled');
            if ($(this).is(':checked')) {
                // broder red
                $(this).closest(".carousel-cell").addClass("red-top-border-4");
                if ($(this)[0].hasAttribute("extraPrice")) {
                    var rawPrice = $(this).attr("extraPrice");
                    var arrPrice = rawPrice.split("$");

                    extraPrice += parseFloat(arrPrice[1]);
                    extraCount = $(".icon-form-checkbox:checked").length;
                }
                /*$(this)[0].hasAttribute("extraModal") ? extraModal.push( $(this).attr("extraModal")) : extraModal ;*/
                if ($(this)[0].hasAttribute("extraUsoc")) {
                    extraUsoc = $(this).attr("extraUsoc");
                    document.getElementById('uSoc' + checkbuttonId).value = extraUsoc;

                }
                if ($(this)[0].hasAttribute("extraName")) {
                    extraName = $(this).attr("extraName");
                    document.getElementById('plan' + checkbuttonId).value = extraName;

                }
                packUpdate();
            } else {
                $(this).closest(".carousel-cell").removeClass("red-top-border-4");
                if ($(this)[0].hasAttribute("extraPrice")) {
                    var rawPrice = $(this).attr("extraPrice");
                    var arrPrice = rawPrice.split("$");

                    extraPrice -= parseFloat(arrPrice[1]);
                    extraCount = extraCount - 1;
                }

                /* $(this)[0].hasAttribute("extraModal") ? extraModal =  extraModal.remove($(this).attr("extraModal")) : extraModal ;*/

                if ($(this)[0].hasAttribute("extraUsoc")) {
                    document.getElementById('uSoc' + checkbuttonId).value = "";
                }
                if ($(this)[0].hasAttribute("extraName")) {
                    document.getElementById('plan' + checkbuttonId).value = "";
                }
                packUpdate();
            }
            $(".icon-form-checkbox:not(:checked)").attr('disabled', 'disabled');
        } else {

            $(".icon-form-checkbox").removeAttr('disabled');
            if ($(this).is(':checked')) {
                // broder red
                $(this).closest(".carousel-cell").addClass("red-top-border-4");
                if ($(this)[0].hasAttribute("extraPrice")) {
                    var rawPrice = $(this).attr("extraPrice");
                    var arrPrice = rawPrice.split("$");

                    extraPrice += parseFloat(arrPrice[1]);
                    extraCount = $(".icon-form-checkbox:checked").length;
                }
                /* $(this)[0].hasAttribute("extraModal") ? extraModal.push( $(this).attr("extraModal")) : extraModal ;*/
                if ($(this)[0].hasAttribute("extraUsoc")) {
                    extraUsoc = $(this).attr("extraUsoc");
                    document.getElementById('uSoc' + checkbuttonId).value = extraUsoc;

                }
                if ($(this)[0].hasAttribute("extraName")) {
                    extraName = $(this).attr("extraName");
                    document.getElementById('plan' + checkbuttonId).value = extraName;

                }
                packUpdate();
            } else {
                $(this).closest(".carousel-cell").removeClass("red-top-border-4");
                if ($(this)[0].hasAttribute("extraPrice")) {
                    var rawPrice = $(this).attr("extraPrice");
                    var arrPrice = rawPrice.split("$");

                    extraPrice -= parseFloat(arrPrice[1]);
                    extraCount = extraCount - 1;
                }

                /*$(this)[0].hasAttribute("extraModal") ? extraModal =  extraModal.remove($(this).attr("extraModal")) : extraModal ;*/

                if ($(this)[0].hasAttribute("extraUsoc")) {
                    document.getElementById('uSoc' + checkbuttonId).value = "";
                }
                if ($(this)[0].hasAttribute("extraName")) {
                    document.getElementById('plan' + checkbuttonId).value = "";
                }
                packUpdate();
            }
        }
        //     if($('input.test').filter(':checked').length == 1)
        //     $('input.test:not(:checked)').attr('disabled', 'disabled');
        // else $('input.test').removeAttr('disabled');

    });
}

function packUpdate() {
        $(".netSpeed").empty();
        if (extraCount) {
            extraSpec = extraCount + extraText
        } else {
            extraSpec = '';
        }
        $(".netSpeed").append("<div>" + internetSpeed + "</div><div>" + tvSpec + "</div><div>" + extraSpec + "</div>");
        $(".netOffer").html("<div>" + yourOffer + "</div><div>" + tvOffer + "</div>");
        var netTotal = internetPrice + extraPrice + tvPrice;
        $(".netPrice").html(netTotal.toFixed(2));
        $("#finalPriceForSelectedItems").attr('aria-live','assertive');
    }

function hrefissue(){
var stickyClass= document.getElementsByClassName("bottom-sticky");
if(stickyClass.length > 0){

 staticurl = document.getElementsByClassName("bottom-sticky")[0].getElementsByClassName("offer-cta")[0];
 if (staticurl.hasAttribute("data-href")) {
     staticurl.removeAttribute("data-href");
     $(staticurl).attr("href", "/inhome/qualification")
 }
}
}

function dropDownInit(){
	$(".tr-li").click(function() {
               var selectedTag = $(this).attr("value");
               $(".w_dropdown_value").val(selectedTag);
               $(".compo-height").removeAttr("style");
               $('[data-m="onselected"]').removeClass("sshid");
               setTimeout(resizeFun, 1.0 * 25);
           });
           $(".w_dropdown").click(function () {
               if ($(".tr-ul").hasClass("hid")) {
                   $(".tr-ul").removeClass("hid");
                 //$('[data-m="onselected"]').removeClass("sshid");
				//resizeFun();

               } else {
                   //resizeFun();
                   $(".tr-ul").addClass("hid");
               }
           });
}
function resizeFun(){
				$(".widcarousel .flickity-viewport").css("height","");
            var deskcarouselContainers = document.querySelectorAll('.deskcarousel');

               for (var i = 0; i < deskcarouselContainers.length; i++) {
                   var container = deskcarouselContainers[i];
                   var flkty = new Flickity(container, {
                       cellAlign: 'left'
                   });
                   flkty.resize();
               }
               var carouselContainers = document.querySelectorAll('.widcarousel');
    
               for (var i = 0; i < carouselContainers.length; i++) {
                   var container = carouselContainers[i];
                   var flkty = new Flickity(container, {
                       cellAlign: 'left'
                   });
                   flkty.resize();
               }
           }



function radioCheck() {


    // radio-button event
    $(".icon-form-radio").change(function () {
        var buttonId = this.id;
        var product = this.name;
        console.log('product' + product);
        if (product == 'tv') {
            $('input[name="tvUsoc"]').each(function (index) {
                $(this).val("");
            });

            $('input[name="tvName"]').each(function (index) {
                $(this).val("");
            });

        }
        if (product == 'internet') {
            $('input[name="internetUsoc"]').each(function (index) {
                $(this).val("");
            });
            $('input[name="internetName"]').each(function (index) {
                $(this).val("");
            });

        }



        if ($(this).is(':checked')) {
            if ($(".icon-form-checkbox").filter(':checked').length >= 3) {
                $(".icon-form-checkbox").removeAttr('disabled');
                $(".extras-alert").addClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").removeClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").removeClass("disabled");
                }
                $(".icon-form-checkbox:not(:checked)").attr('disabled', 'disabled');
            } else {
                $(".icon-form-checkbox").removeAttr('disabled');
                $(".icon-form-checkbox").attr('aria-disabled','false');
                $(".extras-alert").addClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").removeClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").removeClass("disabled");
                }
            }


            var name = $(this).attr("name");
            $(".icon-form-radio").filter('[name="' + name + '"]').prop("checked", false);
            $(".icon-form-radio").filter('[name="' + name + '"]').closest(".flickity-slider").children().removeClass("red-top-border-4");
            if ($(".deskcarousel")) {
                $(".icon-form-radio").filter('[name="' + name + '"]').closest(".deskcarousel").children().removeClass("red-top-border-4");
            }


            $(this).prop("checked", true);


            // broder red
            $(this).closest(".flickity-slider").children().removeClass("red-top-border-4");
            $(this).closest(".flickity-slider").children().removeClass("border-black");

            $(this).closest(".flickity-slider").children().addClass("gray-top-border-4");

            if ($(".deskcarousel")) {
                $(this).closest(".deskcarousel").children().removeClass("red-top-border-4");
                $(this).closest(".deskcarousel").children().removeClass("border-black");
                $(this).closest(".deskcarousel").children().addClass("gray-top-border-4");
            }


            $(this).closest(".carousel-cell").removeClass("border-all");

            $(this).closest(".carousel-cell").addClass("red-top-border-4");



            if ($(this)[0].hasAttribute("internetPrice")) {
                var rawPrice =$(this).attr("internetPrice");
                if($(this).hasClass("comcpouninput")){
                    rawPrice = $(this).attr("discountPrice");
                }else{
                    rawPrice = $(this).attr("internetPrice");
                }
                 console.log('rawPrice'+rawPrice);
                var arrPrice = rawPrice.split("$");
                internetPrice = parseFloat(arrPrice[1]);
                if ($(this)[0].hasAttribute("internetSpeed")) {
                    internetSpeed = $(this).attr("internetSpeed");
                } else {
                    internetSpeed = "";
                }
                if ($(this)[0].hasAttribute("yourOffer")) {
                    var rawOff= $(this).attr("yourOffer");
                    var slic = rawOff.split('<span class="OfferText">');
                    yourOffer = slic[0];
                }

                /*$(this)[0].hasAttribute("internetModal") ? internetModal = $(this).attr("internetModal") : internetModal = " ";*/

                if ($(this)[0].hasAttribute("internetUsoc")) {
                    internetUsoc = $(this).attr("internetUsoc");
                    document.getElementById('uSoc' + buttonId).value = internetUsoc;

                }
                if ($(this)[0].hasAttribute("internetName")) {
                    internetName = $(this).attr("internetName");
                    document.getElementById('plan' + buttonId).value = internetName;
                } else {
                    yourOffer = "";
                }

            } else if ($(this)[0].hasAttribute("tvPrice")) {
                var rawPrice = $(this).attr("tvPrice");
                var arrPrice = rawPrice.split("$");

                tvPrice = parseFloat(arrPrice[1]);
                if ($(this)[0].hasAttribute("tvSpec")) {
                    tvSpec = $(this).attr("tvSpec");
                }

                if ($(this)[0].hasAttribute("tvOffer")) {
                    tvOffer = $(this).attr("tvOffer");
                }
                /* $(this)[0].hasAttribute("tvModal") ? tvModal = $(this).attr("tvModal") : tvtModal = " ";*/
                if ($(this)[0].hasAttribute("tvUsoc")) {
                    tvUsoc = $(this).attr("tvUsoc");
                    document.getElementById('uSoc' + buttonId).value = tvUsoc;

                }
                if ($(this)[0].hasAttribute("tvName")) {
                    tvName = $(this).attr("tvName");
                    document.getElementById('plan' + buttonId).value = tvName;
                } else {
                    tvOffer = "";
                }
            }
            packUpdate();


        } else {
            console.log("un-check" + buttonId);
            console.log("is" + $(this)[0].hasAttribute("internetUsoc"));
            if ($(".icon-form-radio").filter(':checked').length == 0) {
                $(".icon-form-checkbox").attr('disabled', 'disabled');
                $(".icon-form-checkbox").attr('aria-disabled','true');
                $(".extras-alert").removeClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").addClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").addClass("disabled");
                }
                $(".icon-form-checkbox").prop("checked", false);
                $(".icon-form-checkbox").closest(".carousel-cell").removeClass("red-top-border-4");
                extraPrice = 0;
                extraCount = 0;
                extraModal = [];
            } else {
                $(".icon-form-checkbox").removeAttr('disabled');
                $(".extras-alert").addClass("hide");
                $(".icon-form-checkbox").parents(".carousel-cell").removeClass("grayout-cell");
                if (orderButton = "true") {
                    $(".checkAvailBtn").removeClass("disabled");
                }
            }

            $(this).closest(".carousel-cell").removeClass("red-top-border-4");
            if ($(this)[0].hasAttribute("internetPrice")) {
                internetPrice = 0;
                discountPrice = 0;
                internetSpeed = "";
                yourOffer = "";
                internetModal = "";
            }
            if ($(this)[0].hasAttribute("tvPrice")) {
                tvPrice = 0;
                tvSpec = "";
                tvModal = "";
                tvOffer = "";
            }

            if (($(this)[0].hasAttribute("tvName")) || ($(this)[0].hasAttribute("internetName"))) {
                document.getElementById('plan' + buttonId).value = "";
            }
            if ($(this)[0].hasAttribute("internetUsoc")) {
                document.getElementById('uSoc' + buttonId).value = "";
            }
            if ($(this)[0].hasAttribute("tvUsoc")) {
                document.getElementById('uSoc' + buttonId).value = "";
            }
            packUpdate();

        }
        var checkedBoxCount = $('.icon-form-radio:checked').size();
        //console.log('checkedBoxCount'+checkedBoxCount);
        if (checkedBoxCount < 1) {
            $(".netSpeed").empty();
            $(".netOffer").empty();
            $(".netSpeed").append("Select any internet or TV plan to get started");
            $(".netOffer").append("Disney+ on us with select plans.");

        }
    });
}

var refparams = "";
var fivegParam = "";
function getQueryUrlParams() {
	var paramMap = {};
	if (location.search.length == 0) {
		return paramMap;
	}
	var parts = location.search.substring(1).split("&");

	for (var i = 0; i < parts.length; i++) {
		var component = parts[i].split("=");
		paramMap[decodeURIComponent(component[0])] = decodeURIComponent(component[1]);
	}
	return paramMap;
}
try {
	refparams = getQueryUrlParams();
	fivegParam = refparams['src'];

	document.addEventListener(adobe.target.event.CONTENT_RENDERING_SUCCEEDED, function (event) {
		$('a').unbind("click", linkClick);
		$('a').bind("click", linkClick);
		if (window.pdc_json && window.pdc_json.VzLQPro && window.pdc_json.VzLQPro.LQ || window.location.href.indexOf("src") > 1) {

			if (fivegParam == '5g' || fivegParam == '5G') {
				$(".offer-cta").text("Order now");
				$(".offer-cta").attr("href", "/inhome/qualification?src=5G");

			}
			else {
				$(".offer-cta").text("Order now");
				$(".checkAvailBtn").text("Order now");
			}

			//For HSI
			if (window.pdc_json && window.pdc_json.VzLQPro && window.pdc_json.VzLQPro.LQ && window.pdc_json.VzLQPro.LQ == 'PH') {

				if (window.location.href.indexOf("/info/dsl-services") <= 1) {
					$(".offer-cta").text("See available offers");
					$(".offer-cta").attr("href", "/info/dsl-services/");
				}
			}
			if (window.pdc_json && window.pdc_json.VzOSEL && window.pdc_json.VzOSEL.isMHFlow && window.pdc_json.VzOSEL.isMHFlow == 'Y') {

				$(".offer-cta").text("Order now");
				$(".checkAvailBtn").text("Order now");
			}


		}


		comCheck();
		initializeCarouselElement();
		//vzrfInit();
		carouselInit();

		omniPush();
		try {
			if ($('.widcarousel')) {
				var flk_status = new Flickity('.widcarousel', {
					cellAlign: 'left',
					contain: true,
				});
			}
		}
		catch (e) {

		}
		if (mm_flickity != undefined && mm_flickity != true) {
			mixandmatch();
		}

		if (window.location.search.indexOf("CMP") > -1 && window.location.search.indexOf("c") > -1 && window.location.search.indexOf("abr") > -1) {
			window.setTimeout(makeVendorValcall(), 2000);
		}
	});
} catch (e) { }

//Start of Code to add new DTM variable for tracking link clicks through keyboards.
var keyDownLinkClick = false;
try {
	document.body.addEventListener('keydown', function () {
		keyDownLinkClick = true;
	});
	document.body.addEventListener('mousedown', function () {
		keyDownLinkClick = false;
	});
} catch (e) {
	console.log(e);
}

// End of Code to add new DTM variable for tracking link clicks through keyboards.
var linkClick = function (e) {
	var tracking = $(this).text();
	if ($(this).closest(".exp-name").data("expName")) {
		if ($(this).data("identifier")) {
			tracking = $(this).closest(".exp-name").data("expName") + " : " + $(this).data("identifier") + " : " + $(this).text();
		}
		else {
			tracking = $(this).closest(".exp-name").data("expName") + " : " + $(this).text();
		}
	}

	try {
		if (null == $(this)["0"].attributes.onclick || $(this)["0"].attributes.onclick.value.indexOf('//aemgnav') == -1) {
			if (keyDownLinkClick) {
				scLinkTrackID(tracking + "_keyboardClick");
			} else {
				scLinkTrackID(tracking);
			}
		}
	} catch (err) {
		console.log(err);
	}
	try {
		if ($(this).hasClass("offer-cta")) {
			updateJSONToPDC();
		}
	} catch (e) {
		console.log(e);
	}
	try {
		if (window.location.pathname.indexOf("/home/moving") > -1) {
			if ($(this).hasClass("cta")) {
				updateMovePdcJSon();
			}
		}
	} catch (e) {
		console.log(e);
	}
	try {
		if (window.location.pathname.indexOf("/home/promo/walmart/") > -1) {
			if ($(this).hasClass("cta")) {
				updateWalmartPdcJSon();
			}
		}
	} catch (e) {
		console.log(e);
	}
	try {
		if (($(this).attr('href').indexOf("/inhome/qualification") > -1 || $(this).attr('href').indexOf("/foryourhome/ordering/checkavailabilitylq.aspx") > -1) && (null != getCookie("vendorflow") && getCookie("vendorflow") == "y")) {
			if (lochref.indexOf(vendorIntents.urlset.url) > -1) {
				$(this).attr('href', vendorIntents.urlset.targetURL);
			} else {
				$(this).attr('href', $(this).attr('href').indexOf("?") > -1 ? $(this).attr('href') + "&vflow=y" : $(this).attr('href') + "?vflow=y");
			}

		}
		if ($(this).attr('href').indexOf("verizonwireless.com") > -1) {
			SetBusinessunitcookie("wireless")
		}
		if ($(this).attr('href').indexOf("/business/gateway/") > -1) {
			SetBusinessunitcookie("business")
		}

	} catch (e) {
		console.log(e);
	}
};
$('a').unbind("click", linkClick);
$('a').bind("click", linkClick);

var lochref = window.location.href;
var intentType = "";
var vendorIntents = {
	urlset: { url: "/home/moving-ec/", intent: "moves", targetURL: "/inhome/movestart?vflow=y" }
};



$(".ecctaOverlay").on("click", function (e) {
	e.preventDefault();
	var ec_modal = '#' + $(this).attr('data-open-modal');
	$(ec_modal).show();
	var url = $(this).attr('href');
	var ifrm = document.createElement("iframe");
	ifrm.setAttribute("src", url);
	ifrm.setAttribute("class", "padding-top-large ec_iframe_Overlay");
	ifrm.scrolling = "yes";
	ifrm.frameBorder = 0;
	document.getElementById("iframecontent").innerHTML = "";
	document.getElementById("iframecontent").appendChild(ifrm);

});

function omniPush() {
	try {
		var offers = "";
		var ofr_len = ($('.offer-cta').length) / 2;
		for (i = 0; i < ofr_len; i++) {
			var offerids = $('.offer-cta')[i];
			if (offerids.attributes.getNamedItem('data-identifier')) {
				offers += offerids.attributes.getNamedItem('data-identifier').value + ",";
			}
		}
		if (offers.substring(0, offers.length - 1).indexOf(",")) {
			offers = offers.substring(0, offers.length - 1);
		}

		var pageName = window.location.pathname.split("/");
		pageName = pageName[pageName.length - 1];
		var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
		var device = "desktop";
		if (isMobile) {
			device = "mobile";
		}



		$.ajax({
			type: 'GET',
			url: "/content/verizon/personal/services/omnipush.all.nocache.html?offers=" + offers + "&pname=" + pageName + "&device=" + device,
			async: true,
			success: function (data) {
				console.log("Success");
				resp = data;
			},
			error: function (e) {
				console.log(e);
			}
		});
	} catch (err) {
		console.log(err);
	}
}


function makeVendorValcall() {

	const urlParams = new URLSearchParams(window.location.search);
	const cVal = urlParams.get('c');
	const cmp = urlParams.get('CMP');
	const abrVal = urlParams.get('abr');

	for (key in vendorIntents) {
		if (lochref.indexOf(vendorIntents[key].url) > -1) {
			intentType = vendorIntents[key].intent;
		}

	}
	var resp = null;
	$.ajax({
		type: 'GET',
		url: "/content/verizon/personal/services/vendorvalidate.all.nocache.html?abr=" + abrVal + "&c=" + cVal + "&cmp=" + cmp + "&intent=" + intentType,
		async: false,
		success: function (data) {
			console.log("Success");
			resp = data;
			//var date = new Date();
			//date.setTime(date.getTime()+(90*24*60*60*1000));
			//document.cookie = "vendorflow=y; expires=" + window.escape(date.toGMTString()) + "; domain=" + window.escape(document.getElementById('cookieDomain').value) + "; path=/";
		},
		error: function (e) {
			console.log(e);
		}
	});
	//return resp;	
}

function updatePDC(e) {
	var doid = e.currentTarget.href.substring(e.currentTarget.href.search("doid=") + 5).split('&');
	var resp;
	$.ajax({
		type: 'GET',
		url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=write&VzOSEL=DOID-" + doid,
		async: false,
		success: function (data) {
			console.log("Success");
		},
		error: function (e) {
			console.log(e);
		}
	});

}
function sendCustomEvent(evt) {
	if (window.dtm_doplugins) {
		// NORMAL sendCustomEvent CODE STARTS HERE
		if (document.createEvent && document.body.dispatchEvent) {
			var event = document.createEvent('Event');
			event.initEvent(evt, true, true)
			//can bubble, and is cancellable
			document.body.dispatchEvent(event);
		} else if (window.CustomEvent && document.body.dispatchEvent) {
			var event = new CustomEvent(evt, {
				bubbles: true,
				cancelable: true
			});
			document.body.dispatchEvent(event);
		}
		// NORMAL sendCustomEvent CODE END HERE
	} else {
		var dtmEventTimer = setTimeout(function () { sendCustomEvent(evt); }, 500);
	}
}


/*Loading offers with equal heights*/
window.addEventListener('load', function () {
	setTimeout(comCheck(), 1.0 * 50);
	setTimeout(hideCheck(), 1.0 * 50);
	setTimeout(radioCheck(), 1.0 * 50);
	setTimeout(hrefissue(), 1.0 * 50);

	setTimeout(priceCheck(), 1.0 * 50);
	setTimeout(cardHeight(), 1.0 * 100);
	setTimeout(topPortion(), 1.0 * 150);
	setTimeout(dropDownInit(), 1.0 * 50);
	setTimeout(showHideComp(), 0);
	amazonPageSetPdc();
	updateCustomerProfileToPdc();

	if (pdc_json.VzCart != null && pdc_json.VzCart.SmartCart == "Y" && document.getElementById("vcm_smart_cont_my_order") != null) {
		document.getElementById("vcm_smart_cont_my_order").href = "/inhome/resumecart?xpsid=" + pdc_json.VzCart.SmartCartMON + "&ordertype=SmartSave";
	}
});
//document.addEventListener('DOMContentLoaded', initializepageViewUpdate);

document.addEventListener('DOMContentLoaded', function () {
	initializepageViewUpdate();
	omniPageViewUpdate();
});


function initializepageViewUpdate() {
	window.digitalData = window.digitalData || {};
	if (window.PDC) {
		window.digitalData.PDC = window.PDC;
	}
	if (document.getElementById("redemErr") != null) {
		window.digitalData.page.dydetailPageName = $('#redemErr').val();
	}

	var newPageViewEvent = {
		eventInfo: { eventName: "pageViewUpdate", timeStamp: new Date(), processed: { adobeAnalytics: false } },
		page: window.digitalData.page,
		PDC: window.digitalData.PDC,
		scEvents: 'event3'
	};
	window.digitalData.events = window.digitalData.events || [];
	window.digitalData.events.push(newPageViewEvent);
	sendCustomEvent("pageViewUpdate");
	updateCTA();
	mixandmatch();
	omniPush();

	if (window.location.search.indexOf("CMP=") > -1 && window.location.search.indexOf("c=") > -1 && window.location.search.indexOf("abr=") > -1) {
		window.setTimeout(makeVendorValcall(), 2000);
	}


}


var visitor_id = '';
if (document.getElementById("visitorid") != null) {
    visitor_id = document.getElementById("visitorid").value;
}

function omniPageViewUpdate() {
	window.vzdl = window.vzdl || {};
	window.vzdl.event = { "value":""};
	window.vzdl.user.session = visitor_id;
	sendCustomEvent("pageViewOmni");   
	var islogin = getCookeValue();
    if(islogin != null & islogin !=""){
        window.vzdl.user.authStatus='logged in';

    }else{
		 window.vzdl.user.authStatus='anonymous';
    }
    console.log("islogin :: " + islogin);

}

function getCookeValue(){

    var ca = document.cookie.split(';');
     var nameEQ = "islogin=";
    var islogin="";
    //console.log(ca);
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) {
            islogin= c.substring(nameEQ.length,c.length);
        }
    }
    return islogin;
}


function updateCTA() {
	if (window.pdc_json && window.pdc_json.VzLQPro && window.pdc_json.VzLQPro.LQ || window.location.href.indexOf("src") > 1) {

		if (fivegParam == '5g' || fivegParam == '5G') {
			$(".offer-cta").text("Order now");
			$(".offer-cta").attr("href", "/inhome/qualification?src=5G");
		}
		else {
			$(".offer-cta").text("Order now");
			$(".checkAvailBtn").text("Order now");
		}

	}
	//For HSI
	if (window.pdc_json && window.pdc_json.VzLQPro && window.pdc_json.VzLQPro.LQ && window.pdc_json.VzLQPro.LQ == 'PH') {

		if (window.location.href.indexOf("/info/dsl-services") <= 1) {
			$(".offer-cta").text("See available offers");
			$(".offer-cta").attr("href", "/info/dsl-services/");
		}
	}
	if (window.pdc_json && window.pdc_json.VzOSEL && window.pdc_json.VzOSEL.isMHFlow && window.pdc_json.VzOSEL.isMHFlow == 'Y') {

		$(".offer-cta").text("Order now");
		$(".checkAvailBtn").text("Order now");
	}


	comCheck();
}

function comCheck() {

	if (window.pdc_json && window.pdc_json.VzCoMo && window.pdc_json.VzCoMo.LeadListID && window.pdc_json.VzCoMo.LeadListID != "") {
		if (window.pdc_json.VzCoMo.CouponExpiryDate != undefined && window.pdc_json.VzCoMo.CouponExpiryDate != "") {
			var couponexpDate = window.pdc_json.VzCoMo.CouponExpiryDate;
			couponexpDate = new Date(couponexpDate);
			console.log(couponexpDate);

			var dt = new Date();
			dt.toUTCString();
			Math.floor(dt.getTime() / 1000);
			var currentDate = new Date(dt.getUTCFullYear(), dt.getUTCMonth(), dt.getUTCDate(), dt.getUTCHours(), dt.getUTCMinutes(), dt.getUTCSeconds());

			console.log(currentDate);
			if (currentDate <= couponexpDate) {
				console.log("currnet date");
				$('.discountcoupon').removeClass("hide");
				$('.cominputdiscountcoupon').addClass("comcpouninput");
				$('.discountcoupon' + ".offer-price").addClass("hide");
				if (carousels && carousels.length > 0) {
					for (i = 0, length = carousels.length; i < length; i++) {
						carousels[i].reloadCells();
					}
				}
			}
		}
	}
}
function updateMovePdcJSon() {
	$.ajax({
		type: 'GET',
		url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=write&VzVendor=moversintent-" + true,
		async: false,
		success: function (data) {
			console.log("Success");
		},
		error: function (e) {
			console.log(e);
		}
	});
}

function updateCustomerProfileToPdc() {
	try {
		var profiletype = document.getElementById('profiletype').value;
		//if(profiletype !=null && profiletype != undefined && profiletype !=""){
		if (profiletype != null) {
			$.ajax({
				type: 'GET',
				//	url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=write&VzVendor="+document.getElementById('profiletype')+"-"+true,
				url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=write&VzVendor=" + profiletype + "-" + true,
				async: false,
				success: function (data) {
					console.log("Success for updateCustomerProfileToPdc");
				},
				error: function (e) {
					console.log(e);
				}
			});
		}
	} catch (e) {
		console.log(e);
	}

}


function amazonPageSetPdc() {

	if (window.location.search.indexOf("CMP") > -1) {
		var parts = location.search.substring(1).split("&");
		var x = "";
		for (var i = 0; i < parts.length; i++) {
			console.log('inside for condition');
			console.log(parts[i].indexOf('CMP='));
			if (parts[i].indexOf('CMP=') > -1) {
				x = parts[i];
			}
		}

		if (x.indexOf("AmznC2Chat") > -1 && x.indexOf("AmznC2Chat") > -1) {
			updateMovePdcJSon();
		}
	}

}
function updateWalmartPdcJSon() {
	$.ajax({
		type: 'GET',
		url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=write&VzVendor=walmartintent-" + true,
		async: false,
		success: function (data) {
			console.log("Success");
		},
		error: function (e) {
			console.log(e);
		}
	});
}

resetTokenForTfnSuppressionInfo();
var tfnsuppressioninfo;
function getTfnSuppressionInfo() {
	try {
		console.log("getTfnSuppressionInfo");
		var apiUrl = "https://api.verizon.com/atomapi/v1/addressqualification/suppression/callQueue";
		if (window.location.href.indexOf("wwwawssit.ebiz.verizon") > -1) {
			apiUrl = "https://api-qa.ebiz.verizon.com/atomapi/v1/addressqualification/suppression/callQueue";
		} else if (window.location.href.indexOf("www98.verizon") > -1) {
			apiUrl = "https://api-uat.verizon.com/atomapi/v1/addressqualification/suppression/callQueue";
		}
		//console.log(apiUrl);
		$.ajax({
			type: "GET",
			url: apiUrl,
			beforeSend: function (xhr) {
				xhr.setRequestHeader('Authorization', 'Bearer ' + document.getElementById('accessToken').value);
				xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
			},
			crossDomain: true,
			xhrFields: {
				withCredentials: true
			},
			data: JSON.stringify(""),
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			async: false,
			global: false,
			error: function (xhr) {
				console.log("XHR Token", xhr);
				if (xhr.responseJSON.RequestError.Text.includes("Invalid Access Token!") || xhr.responseJSON.RequestError.Text.includes("Access Token Has Expired")) {
					resetTokenForTfnSuppressionInfo();
				}
				else {
					console.log("getTfnSuppressionInfo : Errr is occured");
				}
			},
			success: function (result) {
				console.log("getTfnSuppressionInfo : result " + result);
				//window.digitalData.tfnsuppressioninfo=result.data.tfnsuppressioninfo;
				tfnsuppressioninfo = (result.data != null && result.data.tfnSuppressionInfoList != null) ?
					result.data.tfnSuppressionInfoList : null;
				console.log("tfnsuppressioninfo===" + tfnsuppressioninfo);
			}
		});
	} catch (exception) {
		console.log("getTfnSuppressionInfo :  " + exception);
	}
}

function resetTokenForTfnSuppressionInfo() {

	var authUrl = "https://www.verizon.com/content/verizon/personal/services/createauthtoken.oauth.nocache.json?nocache=true";
	if (window.location.href.indexOf("wwwawssit.ebiz.verizon") > -1) {
		authUrl = "https://wwwawssit.ebiz.verizon.com/content/verizon/personal/services/createauthtoken.oauth.nocache.json?nocache=true";
	} else if (window.location.href.indexOf("www98.verizon") > -1) {
		authUrl = "https://www98.verizon.com/content/verizon/personal/services/createauthtoken.oauth.nocache.json?nocache=true";
	}
	console.log(authUrl);
	$.ajax({
		url: authUrl,
		type: 'GET',
		contentType: 'json',
		success: function (result) {
			document.getElementById('accessToken').value = result.access_token;
			getTfnSuppressionInfo();
		},
		error: function () {
			console.log("Errr is occured");
		}
	});
}
/* mpesp */

/*

var MP = {

<!-- mp_trans_disable_start -->

  Version: '1.0.22',

  Domains: {'es':'espanol.verizon.com'},

  SrcLang: 'en',

<!-- mp_trans_disable_end -->

  UrlLang: 'mp_js_current_lang',

  SrcUrl: 'mp_js_orgin_url',

<!-- mp_trans_disable_start -->

  init: function(){

    if (MP.UrlLang.indexOf('p_js_')==1) {

      MP.SrcUrl=window.top.document.location.href;

      MP.UrlLang=MP.SrcLang;

  }

},

getCookie: function(name){

  var start=document.cookie.indexOf(name+'=');

  if(start < 0) return null;

  start=start+name.length+1;

  var end=document.cookie.indexOf(';', start);

  if(end < 0) end=document.cookie.length;

  while (document.cookie.charAt(start)==' '){ start++; }

  return unescape(document.cookie.substring(start,end));

},

setCookie: function(name,value,path,domain){

  var cookie=name+'='+escape(value);

  if(path)cookie+='; path='+path;

  if(domain)cookie+='; domain='+domain;

  var now=new Date();

  now.setTime(now.getTime()+1000*60*60*24*365);

  cookie+='; expires='+now.toUTCString();

  document.cookie=cookie;

},

switchLanguage: function(lang){

  if(lang!=MP.SrcLang){

    var script=document.createElement('SCRIPT');

    script.src=location.protocol+'//'+MP.Domains[lang]+'/'+MP.SrcLang+lang+'/?1023749632;'+MP.SrcUrl;

         document.body.appendChild(script);

  } else if(lang==MP.SrcLang && MP.UrlLang!=MP.SrcLang){

    var script=document.createElement('SCRIPT');

    script.src=location.protocol+'//'+MP.Domains[MP.UrlLang]+'/'+MP.SrcLang+MP.UrlLang+'/?1023749634;'+location.href;

         document.body.appendChild(script);

  }

  return false;

},

switchToLang: function(url) {

  window.top.location.href=url;

}



};
 
*/

function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }
function openTab(evt, tabName) {

  
/************************************************ 
	Fix for closest  IE9+  - START
*************************************************/    

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || 
                              Element.prototype.webkitMatchesSelector;
}

if (!Element.prototype.closest) {
  Element.prototype.closest = function(s) {
    var el = this;

    do {
      if (el.matches(s)) return el;
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1);
    return null;
  };
}  

/************************************************ 
	Fix  for closest  IE9+  - END
*************************************************/

  var i, tabcontent, tablinks;
  tabcontent = evt.target.closest(".tabnew").getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
    tabcontent[i].classList.remove("addBlock");
  }
  tablinks = evt.target.closest(".tabnew").getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
    tablinks[i].setAttribute("aria-selected","false");
    tablinks[i].setAttribute("tabindex","-1");
  }
  $('.img-wrepper').addClass("hide");
  document.getElementById(tabName).style.display = "block";
  if(evt.key !==null && (evt.key ==="ArrowUp" || evt.key ==="ArrowRight")){
	  evt.target.nextElementSibling.className += " active";
	  evt.target.nextElementSibling.setAttribute("aria-selected","true");
	  evt.target.nextElementSibling.setAttribute("tabindex","0");
	  evt.target.nextElementSibling.focus();
  }else if(evt.key !==null && (evt.key ==="ArrowDown" || evt.key ==="ArrowLeft")){
	  evt.target.previousElementSibling.className += " active";
	  evt.target.previousElementSibling.setAttribute("aria-selected","true");
	  evt.target.previousElementSibling.setAttribute("tabindex","0");
	  evt.target.previousElementSibling.focus();
  }else{
	  evt.currentTarget.className += " active";
	  evt.currentTarget.setAttribute("aria-selected","true");
	  evt.currentTarget.setAttribute("tabindex","0");
  }
  initializeCarouselElement();
}

// Code for accessibility.  
var tablinkLists= $('.tabnew .tab .tablinks');
if(tablinkLists !==null){
	tablinkLists.each(function() {
		$(this).on("keydown", function(e){
			var nextElementSibling = this.nextElementSibling;
			var previousElementSibling = this.previousElementSibling;
			if((e.keyCode == 38 || e.keyCode == 39) && nextElementSibling !==null && nextElementSibling.classList.contains("tablinks")){
				openTab(event,nextElementSibling.innerHTML.trim().replace(/&nbsp;/g, ''));
			} else if((e.keyCode == 37 || e.keyCode == 40) && previousElementSibling !==null && previousElementSibling.classList.contains("tablinks")){
				openTab(event,previousElementSibling.innerHTML.trim().replace(/&nbsp;/g, ''));
			}
			});
	})
}
$('[data-iframe-modal-trigger]').on('click', function (e){

		e.preventDefault();

		var iframeData = $("#banner-iframe").data('iframe-content');
        console.log(iframeData);
        $(".modal-iframe-wrapper").append(iframeData);

		var source 			= $(this).attr('href');
		var targetModal 	= $(this).attr('data-open-modal');
		var wrapperClass 	= $(this).attr('data-wrapper-class');

		$('[data-modal="' + targetModal + '"] iframe').attr({'src': source});

		if (wrapperClass.length) {
			console.log('has class');
			$('.modal-iframe-wrapper', '[data-modal="' + targetModal + '"]').addClass(wrapperClass);
		}
    });

var acc = document.getElementsByClassName("accordion callFeatures");

for (var i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function () {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }

    if ($(this).hasClass("sec1")) {
      this.classList.toggle("sec-convenience");
      $(this).children('h4').classList.toggle("open");
    }
    if ($(this).hasClass("sec2")) {
      this.classList.toggle("sec-privacy");
      $(this).children('h4').classList.toggle("open");
    }
  });
}

var paturl = window.location.href;
paturl = paturl.toLowerCase();


function openChkAvblty() {
	var addressUsed;
	var zipcodeUsed;
    var addr = $("#lraddress").val();
    var maddr = $("#lrmaddress").val();
    var zipcde = $("#lrzipcode").val();
    var mzipcde = $("#lrmzipcode").val();
	
	if(maddr==undefined || addr==undefined){
	    maddr = addr = $("#txtAddress").val();
	}
	
	if( addr.length>0 ){
		addressUsed = addr;
	}else if( maddr.length>0 ){
		addressUsed = maddr;
	}else{
		addressUsed="";
	}
    
	
	if( zipcde.length>0 ){
		zipcodeUsed = zipcde;
	}else if( mzipcde.length>0 ){
		zipcodeUsed = mzipcde;
	}else{
		zipcodeUsed="";
	}
	
	
    var remme = $("#RememberLocation1").prop("checked") ? "Y" : "N";
    var appendstr = "vzpers=RAWADDR-" + addressUsed + "&vzpers=zipcode-" + zipcodeUsed;
	
    
    if (remme == "Y") {
        appendstr = appendstr + "&RemembermeChecked=Y";
    }
    
    try {
        if (window.location.search.indexOf("CMP") != -1) {
            var lochref = window.location.href;
            campaignid = lochref.substring(lochref.search('CMP=') + 4).split('&')[0];
            setPDCVal("VzExp", "CMP", campaignid, "~");
        }
    } catch (e) {
        console.log("error while updating CMP");
    }

    try {
        if ((zipcde == "" && addr == "") && (mzipcde == "" && maddr == "")) {
            openLQModel();
        } else {
            $.ajax({
                url: "/content/verizon/personal/services/updatepdc.all.html?mode=write&" + appendstr,
                async: false,
                global: false,
                error: function () {
                    openLQModel();
                },
                success: function (result) {
                    openLQModel();
                }
            });
        }
    } catch (e) {
        console.log(e);
    };
}


function openLQModel() {
    $(".w_modal.lq").css({
        "display": "none"
    });
   
    var source = "";   
    
        if (paturl.indexOf('patriot') != -1) {
            var voteyn = "";
            if (paturl.indexOf('vote=n') != -1) {
                voteyn = "&vote=n";
            } else if (paturl.indexOf('vote=y') != -1) {
                voteyn = "&vote=y";
            };
            source = "https://" + document.domain + "/inhome/qualification?patriot=y" + voteyn;
        } else {
            source = "https://" + document.domain + "/inhome/qualification";
        }
    

   location.assign=escapeHtml(encodeURIComponent(source));
}
function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }
function autoPopulateCode(){
    var params = getUrlParams();
    var refcode = params['refcode']; 
    if(refcode!="" && refcode!=undefined) {
        document.getElementById('refCode').value = refcode;
    } else {
        //alert('Refcode cannot be empty');
    }
    //var refmode = params['refmode']; 
    //document.getElementById('refMode').value = refmode;
}


function getUrlParams() {
		 var paramMap = {};
	  	if (location.search.length == 0) {
			return paramMap;
		}
	  	var parts = location.search.substring(1).split("&");
	
	  	for (var i = 0; i < parts.length; i ++) {
			var component = parts[i].split("=");
			paramMap [decodeURIComponent(component[0])] = decodeURIComponent(component[1]);
	  	}
	  	return paramMap;
	}


function getRedemResp(){

				var status = null;
    			var response= null;
				var refcode = document.getElementById('refCode').value;
    			console.log('refcode'+refcode);
				if(refcode!="" && refcode!=undefined){


                     $.ajax({
                       type: 'GET',
                       url: "/content/verizon/personal/services/validateredemcode.all.nocache.html?refcode="+encodeURIComponent(refcode),
                       async: false,
                       contentType: "application/json",
                       success: function (data) {
                       console.log("Success");
						response = JSON.stringify(data);
                         console.log("response"+response);
						 var output= JSON.parse(response);
                         console.log(output.data);
                         if(output.data.leadListId != null){
                                console.log("success leadlist found"); 
                                if(output.data.reasonInvalid!=null && (output.data.reasonInvalid == 'MAX USED' ||output.data.reasonInvalid == 'EXPIRED')){
                          			$('#redemErr').val("ff_discountcode");scLinkTrackID('continue');
                                    $('#redemError').html('This code has no more uses. Please check with the person who sent you the code.');
                                }
                                else{
                            	 $('#redemErr').val("ff_discountcode");
                    			 scLinkTrackID('continue');
                            	window.location.href = "/home/mlp/friendsandfamilycodevalidated.html";}
                            }
						 else{
                            if(output.data.reasonInvalid!=null && (output.data.reasonInvalid == 'MAX USED' ||output.data.reasonInvalid == 'EXPIRED')){
								$('#redemErr').val("ff_discountcode");scLinkTrackID('continue');
                         		$('#redemError').html('This code has no more uses. Please check with the person who sent you the code.');
                     		}
                    		else{
                                 $('#redemErr').val("ff_discountcode error");
                                scLinkTrackID('continue_discountcode_error');
                            	$('#redemError').html('This code is not valid. Please try again or check with the person who sent you the code.');
                            }
                		 }
                       },
                       error: function (e) {
						   console.log(e);
                            $('#redemErr').val("ff_discountcode error");
                            scLinkTrackID('continue_discountcode_error');
						   $('#redemError').html('This code is not valid. Please try again or check with the person who sent you the code.');
                       }
                   });
			}else{

			}

}

/*changes for preventing the see the enter code screen if user comes with valid code*/

if (window.location.href.indexOf("refcode") > -1){	
    console.log('friendsandfamily condition');
    getUrlParams();
 	autoPopulateCode();
	getRedemResp();
}






function autoPopulate(){
    var params = getUrlParams();
    var refcode = params['refcode']; 
    if(refcode!="" && refcode!=undefined) {
        document.getElementById('refCode').value = refcode;
    } else {
        //alert('Refcode cannot be empty');
    }
    var refmode = params['refmode']; 
    document.getElementById('refMode').value = refmode;
}

function getUrlParams() {
		 var paramMap = {};
	  	if (location.search.length == 0) {
			return paramMap;
		}
	  	var parts = location.search.substring(1).split("&");
	
	  	for (var i = 0; i < parts.length; i ++) {
			var component = parts[i].split("=");
			paramMap [decodeURIComponent(component[0])] = decodeURIComponent(component[1]);
	  	}
	  	return paramMap;
	}

var sanitizeHTML = function (str) {
	var temp = document.createElement('div');
	temp.textContent = str;
	return temp.innerHTML;
	};

function getResp(){
	var xmlhttp = null;
				var status = null;
				var refcode = document.getElementById('refCode').value;
				var refmode = document.getElementById('refMode').value ;
				if(refcode!="" && refcode!=undefined){
				if (window.XMLHttpRequest){
					 xmlhttp=new XMLHttpRequest();
				}else{
					 xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
				}
				if(refmode!="" && refmode!=undefined && isValidParam(refmode)){	
                refmode	= refmode.toUpperCase();			
            	var url ="/content/verizon/personal/services/referralcodevalidate.all.nocache.html?refcode="+encodeURIComponent(refcode)+"&refmode="+encodeURIComponent(refmode);
				}else{
				var url ="/content/verizon/personal/services/referralcodevalidate.all.nocache.html?refcode="+encodeURIComponent(refcode)+"&refmode=OTHER";
				}
				xmlhttp.open("GET",escapeHtml(url),true);
				xmlhttp.onreadystatechange=function(){
				if (xmlhttp.readyState==4 && xmlhttp.status==200){  
                     status =xmlhttp.responseText;
					 fillResp(status);
					}
				}				
				
				xmlhttp.send();  
			}else{

			}
			
}
 

function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }

function fillResp(status){
	var resp = status;
	if(resp==0){
		var refmodalUrl;
		var refcode = document.getElementById('refCode').value;
		var refmode = document.getElementById('refMode').value;
		if(refmode=="" || refmode==undefined){
		refmode = "other";
		}
	$.ajax({
                    url: "/content/verizon/personal/services/updatepdc.all.nocache.html?mode=write&VZ_SNS=RC-"+refcode+"&VZ_SNS=REF-"+refmode,
                    async: false,
                    global: false,
                    error: function () {
                        console.log("Errr is occured");

                    },
                    success: function (result) {
                        console.log('pdc update success');

                        
                    }
                });
	    document.getElementById('result').value=resp;
    if(document.getElementById('result').innerHTML==0){
			refmodalUrl='/inhome/qualification';
        modalDynamicClick(refmodalUrl);}else{
           refmodalUrl='/inhome/qualification';
        modalDynamicClick(refmodalUrl);
        }

	}else{
	alert("Please enter a valid referral code");
	}
	}


	
 function isValidParam(refmode){
	var isValid = (refmode.toLowerCase()=='email' || refmode.toLowerCase()=='fb'|| refmode.toLowerCase()=='twt');
	if(isValid){
		return true;
	}else{
		return false;
	}
 }

 
function modalDynamicClick(url){
	console.log('clicked iframe trigger');
 		  // $(".loaderNew").css("display", "block");
			window.setTimeout(function(){	
			var source 			= url;
			var targetModal 	= "iframeModal";
			var wrapperClass 	= "lq";
			document.location.href = source;
			//$('[data-modal="' + targetModal + '"] iframe').attr({'src': source});

			/* if (wrapperClass.length) {
				console.log('has class');
				$('.modal-iframe-wrapper', '[data-modal="' + targetModal + '"]').addClass(wrapperClass);
			} */
			 /* var my_form = document.createElement('FORM');
                my_form.name = 'myForm';
                my_form.method = 'POST';
                my_form.action = source;
                
               document.body.appendChild(my_form);
                    $(".page-overlay.active").css({
                        "opacity": "0"
                    }); */
			},200);
		//openModal("iframeModal");	
			

}
function setvideofun(elem) {
    var videoid = document.getElementById(elem.id);
    var vvid1_id = videoid.id;
    var vvid3 = $("#" + vvid1_id).data("name");
    if (vvid3 == "controlonclick") {
        //vvid1_id[0].setAttribute("controls");
        videoid.setAttribute('controls', '');
        videoid.play();
    }
}  

$(document).ready(function () {

    var project = [];
    var stores = [];
    var states = [
        ['', ''],
        ['Connecticut', 'CT'],
        ['Delaware', 'DE'],
        ['District of Columbia', 'DC'],
        ['Maryland', 'MD'],
        ['Massachusetts', 'MA'],
        ['New Jersey', 'NJ'],
        ['New York', 'NY'],
        ['Pennsylvania', 'PA'],
        ['Rhode Island', 'RI'],
        ['Virginia', 'VA']
    ];

    var date = (new Date().toJSON().slice(0, 10)).split('-');
    date = date[1] + '/' + date[2] + '/' + date[0];
    var Vmobile = /iphone|ipod|ipad|android|blackberry|opera mini|opera mobi|skyfire|maemo|windows phone|palm|iemobile|symbian|symbianos|fennec/i.test(navigator.userAgent.toLowerCase());
    if (Vmobile == true) {
        $('.show-in-desktop').remove();
    } else {
        $('.show-in-mobile').remove();
    }

    function alert_text(store) {
        if ((store.alerts_to_date > store.alerts_from_date) &&
            (store.alerts_to_date >= date) &&
            (date >= store.alerts_from_date)) {
            return true;
        } else {
            return false;
        }
    }

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    function scrollIntoViewIfNeeded($target) {
        if ($target.position()) {
            if ($target.position().top < jQuery(window).scrollTop()) {
                //scroll up
                $('html,body').animate({
                    scrollTop: $target.offset().top
                }, 2000);
            }

        }
    }

    function checkForEmpty() {
        //console.log("checkForEmpty is called");

        if ($('#list-table').children(':visible').length === 0) {
            $('#noresults').addClass('noresults');
            var sorryMsg = "No results match your criteria. Please try again.";
            document.getElementById("noresults").style = "display:block";
        } else {
            $('#list-table').removeClass('superPadding');
            document.getElementById("noresults").style = "display:none";
        }
    }
    var state = $("#storeStates").val();
    //alert('state'+state);

    function getStoreResults(storeResults) {

        // $('#wait').show();
        var myList = [];
        var name = "";
        var alerts = "";
        //console.log(stores.length);
        $('#list-table').empty();
        //stores = storeResults;
        if (stores.length === 0) {
            //	$('.default_page').addClass('hide');
            //	var sorryMsg = "No results match your criteria. Please try again.";
            //	document.getElementById("list-table").innerHTML = sorryMsg;
            $('#list-table').addClass('superPadding');
        }
        //$('.default_page').removeClass('hide');
        //start
        for (var i = 0; i < stores.length; ++i) {

            myList =
                '<li id=' +
                stores[i].store_id +
                " class='medium-3 columns Store-list-item'>";
            myList += "<div class='.tiny-padding-all-tiny margin-all-tiny'> ";

            if (stores[i].channel == 'FSLA' || stores[i].channel == 'LA') {
                name = stores[i].store_name;
                if (stores[i].store_url != undefined && stores[i].store_url.length > 1) {
                    //	name = 'Verizon Retail Partner';
                    //myList +="<h5 class='margin-all-zero'>" + name + "</h5>";
                    myList += "<a class='myTitle margin-bottom-micro text-black' href=" + stores[i].store_url + "> <strong><u>" + name + "</u></strong></a>";
                } else {
                    myList +=
                        "<p class='myTitle margin-bottom-micro tiny-padding-bottom-xlarge small-padding-bottom-zero storeName'> " + name + "</p>";
                }
            } else if (stores[i].channel == 'KIOSK') {
                if (stores[i].store_url != undefined && stores[i].store_url.length > 1) {
                    name = 'Verizon Wireless';
                    name = stores[i].store_name;
                    myList += "<a class='myTitle margin-bottom-micro text-black' href=" + stores[i].store_url + "> <strong><u>Verizon Wireless </u></strong></a>";

                } else {
                    myList += "<p class='myTitle margin-bottom-micro storeName'> Verizon Wireless</p>"
                }
            } else if (stores[i].channel == 'LPC') {
                if (stores[i].store_url != undefined && stores[i].store_url.length > 1) {
                    name = 'Verizon Fios Store';
                    myList += "<a class='myTitle margin-bottom-micro text-black' href=" + stores[i].store_url + "> <strong><u>Verizon Fios Store </u></strong></a>";
                } else {
                    myList +=
                        "<p class='myTitle margin-bottom-micro storeName'> <h5>Verizon Fios Store </h5></p>";
                }
            }
            else{
                if(stores[i].store_name != null){name = stores[i].store_name;} else{name = 'Verizon Fios Store';}
                    myList +=
                        "<p class='myTitle margin-bottom-micro tiny-padding-bottom-xlarge small-padding-bottom-zero storeName'> " + name + "</p>";

            }

            if (stores[i].address_2) {
                myList +=
                    "<p class='address margin-all-zero'>" +
                    stores[i].address_1 +
                    ' ' +
                    stores[i].address_2 +
                    ', ' +
                    stores[i].city +
                    ' ' +
                    stores[i].state +
                    ' ' +
                    stores[i].zip +
                    '</p>';
            } else {
                myList +=
                    "<p class='address margin-all-zero'>" + stores[i].address_1 + '</p>';
            }

            // myList += "<p class='address margin-all-zero'>" + stores[i].city + " " + stores[i].state + " " + stores[i].zip +"</p>";
            myList += "<div class='row'>";
            myList += "<div class='columns tiny-4 medium-1 padding-left-zero'>";
            myList +=
                "<p class='phoneNum margin-all-tiny margin-left-zero'><strong>Phone</strong></p>";
            myList += '</div>';
            myList += "<div class='columns tiny-8 medium-7'>";
            var phone = stores[i].phone_number;
            phone = phone.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
            myList +=
                "<p class='phone phoneNum2 text margin-all-tiny margin-left-zero'>" + phone + '</p>';
            myList += '</div>';
            myList += "<div class='columns tiny-4 medium-1 padding-left-zero'>";
            if (stores[i].equipment_exchange != 'Y' && stores[i].bill_payments_accepted != 'Y') {
                // $('.service_main').addClass('hid');
                // myList +=
                // 	"<p class='phoneNum margin-all-tiny margin-left-zero service_main'><strong>Services:</strong></p>";
            } else {
                myList +=
                    "<p class='phoneNum margin-all-tiny margin-left-zero'><strong>Services:</strong></p>";
            }
            myList += '</div>';
            myList += "<div class='columns tiny-8 medium-3 large-padding-left-zero'>";
            if (stores[i].equipment_exchange === 'Y') {
                myList += "<p class='margin-top-tiny margin-left-zero margin-bottom-zero bold'>Fios equipment exchanges</p>";
            }
            if (stores[i].bill_payments_accepted === 'Y') {
                myList += "<p class='margin-all-zero bold  margin-pull-up-tiny'>Bill payments</p>";
            }

            // if (stores[i].equipment_exchange != 'Y' && stores[i].bill_payments_accepted != 'Y') {
            // 	$('.service_main').addClass('hid');
            // 	myList += "<p class='margin-all-tiny margin-left-zero service_main'>No services</p>";
            // }

            myList += '</div>';
            myList += '</div>';
            myList += "<div class='row'>";
            myList += "<div class='columns tiny-4 medium-1 padding-left-zero'>";
            myList += "<p class='hours margin-all-zero'><strong>Hours</strong></p>";
            myList += '</div>';
            myList += "<div class='columns tiny-8 medium-7 padding-all-right-tiny'>";

            if (stores[i].alert_from_date && stores[i].alert_from_date) {
                alerts = alert(stores[i]);
                if (alerts == true) {
                    myList +=
                        '<p id=' +
                        stores[i].store_id +
                        "class='margin-bottom-zero err alert'>" +
                        stores[i].alerts +
                        '</p>';
                } else {
                    if (stores[i].store_hrs_mf == stores[i].store_hrs_sat && stores[i].store_hrs_mf == stores[i].store_hrs_sun) {
                        myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_mf + '</p>';
                    } else if (stores[i].store_hrs_mf == stores[i].store_hrs_sat) {
                        myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_mf + '</p>';
                        myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                    } else if (stores[i].store_hrs_mf == "Mon: Closed,Tue: 9 AM - 6 PM,Wed: 9 AM - 6 PM,Thu: 9 AM - 6 PM,Fri: 9 AM - 6 PM") {
                        myList += "<p class='hour margin-bottom-zero'> Mon: Closed , Tue - Fri : 9 AM - 6 PM' </p>";
                        myList += "<p class='hour margin-all-zero'>" + stores[i].store_hrs_sat + '</p>';
                        myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                    } else {
                        myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_mf + '</p>';
                        myList += "<p class='hour margin-all-zero'>" + stores[i].store_hrs_sat + '</p>';
                        myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                    }
                }
            } else {

                if (stores[i].store_hrs_mf == stores[i].store_hrs_sat && stores[i].store_hrs_mf == stores[i].store_hrs_sun) {
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_mf + '</p>';
                } else if (stores[i].store_hrs_mf == stores[i].store_hrs_sat) {
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_mf + '</p>';
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                } else if (stores[i].store_hrs_mf == "Mon: Closed,Tue: 9 AM - 6 PM,Wed: 9 AM - 6 PM,Thu: 9 AM - 6 PM,Fri: 9 AM - 6 PM") {
                    myList += "<p class='hour margin-bottom-zero'> Mon: Closed </p>";
                    myList += "<p class='hour margin-all-zero'> Tue - " + stores[i].store_hrs_sat + '</p>';
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                } else if (stores[i].store_hrs_mf == "Mon: Closed,Tue: 10 AM - 6 PM,Wed: 10 AM - 6 PM,Thu: 10 AM - 6 PM,Fri: 10 AM - 6 PM") {
                    myList += "<p class='hour margin-bottom-zero'> Mon: Closed </p>";
                    myList += "<p class='hour margin-all-zero'> Tue - " + stores[i].store_hrs_sat + '</p>';
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                } else {
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_mf + '</p>';
                    myList += "<p class='hour margin-all-zero'>" + stores[i].store_hrs_sat + '</p>';
                    myList += "<p class='hour margin-bottom-zero'>" + stores[i].store_hrs_sun + '</p>';
                }
            }

            myList += '</div>';
            myList += "<div class='columns tiny-1'>";
            myList += "<p class='hours margin-all-zero'><strong></strong></p>";
            myList += '</div>';
            myList += "<div class='columns tiny-4 medium-3 padding-all-zero tiny-hide medium-hide large-show margin-pull-up-tiny'>";
            // if (stores[i].equipment_exchange === 'Y' && stores[i].bill_payments_accepted === 'Y') {
            // 	myList +="<p class='margin-all-zero bold'>Bill payments</p>";
            // }

            myList += '</div>';
            myList += '</div>';
            // for mobile Services 
            '<div class="row">'

            '</div>'
            // for mobile Services 
            myList += '</div>';
            myList += '</li>';

            //console.log(myList);
            document.getElementById('list-table').innerHTML += myList;
        }
        //end
		
        equalHeightsInit();
		
		if($("input[name='subscribe']:checked").val()=='fiossales'){
			$('#fiossales').attr('checked', false);
			$('#equipmentExchange').prop('checked',true);
		}
		
		filterByServices();
        //$('.default_page').removeClass('hide');
        clearcity();
        $('#wait').hide();
    }


    $("#Services").keypress(function () {
        var item = $("li .active").find('a');
        //var item = $(this).find('li');
       // console.log($(this).find(item));
        //console.log($(this).find('li').children().find('.active'));
    });

    var callBack = function () {
        var selected = $(this).find('a').text();
        option = "";
        document.getElementById("noresults").style = "display:none;";
        if (selected == 'Fios Equipment exchanges') {
            for (var i = 0; i < project.length; ++i) {

                if (project[i].equipment_exchange == 'N') {
                    var element = document.getElementById(project[i].store_id);
                    if (element) {
                        var idName = '#' + project[i].store_id;
                        $(idName).toggleClass('hid');
                    }
                }
            }
        } else if (selected == 'Bill payments') {
            for (var i = 0; i < project.length; ++i) {
                if (project[i].bill_payments_accepted == 'N') {
                    var element = document.getElementById(project[i].store_id);
                    if (element) {
                        var idName = '#' + project[i].store_id;
                        $(idName).toggleClass('hid1');
                    }

                }
            }

        } else if (selected == 'Hablamos Espanol') {
            for (var i = 0; i < project.length; ++i) {
                if (project[i].spanish_available == 'N') {
                    var element = document.getElementById(project[i].store_id);
                    if (element) {
                        var idName = '#' + project[i].store_id;
                        $(idName).toggleClass('hid2');
                    }
                }
            }

        }
        checkForEmpty();
        equalHeightsInit();
    };

    $("#Services").on('click', 'li', callBack);
    $("#States").on('click', 'li', function () {

        $("#Cities").val([]);
        //alert('Cities'+$("#Cities").val([]));
        $('#wait').show();
        scrollIntoViewIfNeeded($("#hero_btm"));
        var selected = $(this).find('a').text();
        var state = "";
        for (var i = 0; i < states.length; ++i) {
            if (states[i][0] == selected) {
                state = states[i][1];
                //alert("state click inside"+state);
            }
        }
        window.name = selected;
        getData(state);
    });

    function clearfilter() {
        $("#Cities").val([]);
        for (var i = 0; i < states.length; ++i) {
            if (states[i][0] == window.name) {
                state = states[i][1];
            }
        }
        //$('#equipmentExchange').attr('checked', false);
		$('#fiossales').attr('checked', false);
		$('#equipmentExchange').prop('checked',true);
		
        $(function () {
            $("#Cities .Alpha-item.Alpha-item--active").each(function () {
                $(this).removeClass('Alpha-item--active');
            });
        });
        getData(state);
    }


 /*   $('#equipmentExchange').change(function () {
        if (this.checked != true) {
            clearfilter();
        }
    });
	*/


    $("#clear_all").on('click', function () {
        clearfilter();
    });

    function clearcity() {
        $("#Cities .Alpha-item.Alpha-item--active").each(function () {
            $(this).removeClass('Alpha-item--active');
        });

        $('#equipmentExchange').attr('checked', true);
		$('#fiossales').attr('checked', false);
    }

    function filterByServices() {
        var noresult = 0;
        var selected = $(this.target).val();
		
        var checked = this.checked;
        for (var i = 0; i < stores.length; i++) {
            var store = stores[i];
			if($("input[name='subscribe']:checked").val()=='equipmentExchange'){
				var equipmentExchange = store.equipment_exchange === 'N';
				var storeItem = $('#' + store.store_id);

				if (equipmentExchange) {
					storeItem.addClass('hid1');

				} else {
					storeItem.removeClass('hid1');


				}
				
			}else if($("input[name='subscribe']:checked").val()=='fiossales'){
				var storeItem = $('#' + store.store_id);

				if (!checked ) {
					storeItem.addClass('hid1');

				} else {
					storeItem.removeClass('hid1');


				}
			}
            
        }
        checkForEmpty();
        filterbyserNcity();


    }

    $('.serviceChoice').change(filterByServices);

    function filterByCities() {
        var value = $(this).val() || $(this).attr('data-alpha-value');
        var selected = value.toLowerCase();
        if ($('.Alpha-list li').length > 1) {
            $('.Alpha-list li')
                .not(this)
                .removeClass('Alpha-item--active');
        } else if ($('.Alpha-list option').length > 1) {
            $('.Alpha-list option')
                .not(this)
                .removeClass('Alpha-item--active');
        }

        $('.Store-list-item').removeClass('hid');

        $(this).toggleClass('Alpha-item--active');
        for (var i = 0, len = stores.length; i < len; i++) {
            var store = stores[i];
            var current = $(this).hasClass('Alpha-item--active');
            var cityAlpha = store.city.trim().substring(0, 1).toLowerCase();
            var cityMatch = selected !== cityAlpha;
            var storeItem = $('#' + store.store_id);

            //mobile conditon
            if (Vmobile != true) {
                if (current && cityMatch) {
                    storeItem.addClass('hid');
                } else {
                    storeItem.removeClass('hid');
                }
            } else {
                if (cityMatch) {
                    storeItem.addClass('hid');
                } else {
                    storeItem.removeClass('hid');
                }

            }
            //mobile conditon

        }
        checkForEmpty();
    }

    //suresh 2nd filter 
    function filterbyserNcity() {
        for (var i = 0, len = document.querySelectorAll('#Cities .Alpha-item').length; i < len; i++) {
            var item = document.querySelectorAll('#Cities .Alpha-item')[i];
            var alphaChar = item.getAttribute('data-alpha-value').toLowerCase();
            var isfilterbyservice = stores.some(function (store) {
                return store.bill_payments_accepted === "Y" && store.equipment_exchange === "Y" && store.city.trim().substring(0, 1).toLowerCase() === alphaChar;
            });
            item.classList.remove('Alpha-item--disabled');

            if (!isfilterbyservice) {
                item.classList.add('Alpha-item--disabled');

            }


        }
    }

    function hideAlphaItems() {
        for (var i = 0, len = document.querySelectorAll('#Cities .Alpha-item').length; i < len; i++) {
            var item = document.querySelectorAll('#Cities .Alpha-item')[i];
            var alphaChar = item.getAttribute('data-alpha-value').toLowerCase();
            var isAvailable = stores.some(function (store) {
                return store.city.trim().substring(0, 1).toLowerCase() === alphaChar;
            });

            item.classList.remove('Alpha-item--disabled');

            //item.addEventListener('click', filterByCities);;
            if (Vmobile == true) {
                item.addEventListener('change', filterByCities);
            } else {
                item.addEventListener('click', filterByCities);
            }


           // console.log(isAvailable);
            if (!isAvailable) {
                item.classList.add('Alpha-item--disabled');
                //item.removeEventListener('click', filterByCities);
                if (Vmobile == true) {
                    item.addEventListener('change', filterByCities);
                    $(item).attr('disabled', 'disabled'); // disable in iphones.
                } else {
                    item.addEventListener('click', filterByCities);
                }
            }
        }
        checkForEmpty();
    }


    function hideMobileAlphaItems() {
        for (var i = 0, len = document.querySelectorAll('#Cities-select .Alpha-item').length; i < len; i++) {
            var item = document.querySelectorAll('#Cities-select .Alpha-item')[i];
            var alphaChar = item.value.toLowerCase();
            var isAvailable = stores.some(function (store) {
                return store.city.trim().substring(0, 1).toLowerCase() === alphaChar;
            });

            item.style.display = 'block';
            //item.addEventListener('click', filterByCities);
            if (Vmobile == true) {
                item.addEventListener('change', filterByCities);
            } else {
                item.addEventListener('click', filterByCities);
            }

            if (!isAvailable) {
                item.style.display = 'none';
            }
        }
    }

    var sanitizeHTML = function (str) {
    	var temp = document.createElement('div');
    	temp.textContent = str;
    	return temp.innerHTML;
    	};
    
    //$('#Cities-select').change(filterByCities);
    $('#Cities').change(filterByCities);

    $('#stateButton').click(function () {
    if (window.location.href.indexOf("home") > -1){
     $(this).attr("href", "/home/storelocatorresults"); 
    }
        window.name = $('#storeStates').val();
        //console.log(window.name);

    });

	var location=window.location.pathname;
  	if ((location === '/content/verizon/personal/learn/learn_pages/miscellaneous/store-results.html') || (location === '/home/storeresults') || (location === '/home/storelocatorresults')  || (location ==='/personal/storeresults') ||  (location ==='/personal/storelocatorresults')) {

        $('#wait').show();
        if (getParameterByName('State') != null) {
            for (var i = 0; i < states.length; ++i) {
                if (states[i][1] == getParameterByName('State')) {
                    window.name = states[i][0];
                }
            }
        } else {   
            if (window.name != "null") {

            	document.getElementById('init').innerHTML = escapeHtml(window.name);
            } else {

                document.getElementById('init').innerHTML = "Delaware";
                var state = "DE";
                var name="Delaware";
                
            }



        }
        if (window.name != "null" && window.name != "" && window.name != "undefined") {
            for (var i = 0; i < states.length; ++i) {
                if (states[i][0] == window.name) {
                    state = states[i][1];

                }
            }
            var name = window.name;
           
        } else {

        }
        getData(state);


        if ($('#Delaware').hasClass('active')) {
            $("#Delaware").removeClass("active");
        }

        document.getElementById(name).className += " active";
        document.getElementById('init').innerHTML = escapeHtml(name);
    }




    function getData(state) {

        $("#Services>li.active").removeClass("active");
        if (document.getElementById('init2')) {
            document.getElementById('init2').innerHTML = 'None';
        }
        //console.log('state'+state);
        var aurl = "/content/verizon/personal/services/getstore.all."+state+".html";

        console.log(aurl);

        var MAX_XHR_WAITING_TIME = 5000; // in ms

        var sendAjax = function (params) {
            var xhr = new XMLHttpRequest(),
                url = params.cache ? params.url + '&' + new Date().getTime() : params.url,
                timer = window.setTimeout(function () {
                    xhr.abort();
                    params.error && params.error();
                    params.complete && params.complete();
                }, MAX_XHR_WAITING_TIME);
            xhr.open(params.type, url);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    clearTimeout(timer);
                    if (xhr.status === 200 || xhr.status === 0) {
                        params.success && params.success(xhr.responseText);
                        params.complete && params.complete();
                    } else {
                        params.error && params.error(xhr.responseText);
                        params.complete && params.complete();
                    }
                }
            };
            params.beforeSend && params.beforeSend(xhr);
            xhr.send();

        };

        var getJSON = function (params) {
            sendAjax({
                type: 'get',
                url: params.url,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Accept', 'application/json, text/javascript');
                },
                success: function (res) {
                    params.success && params.success(JSON.parse(res));
                    project = JSON.parse(res);
                    stores = project.stores;
                    project = project.stores;

                   // console.log(stores.length);
                    getStoreResults()
                    hideAlphaItems();
                    hideMobileAlphaItems();
                },
                error: params.error,
                complete: params.complete,
                cache: true
            });
        };


        getJSON({
            url: aurl,
            success: function (json) {
                console.log('getJSON success');
                console.log(json);
            },
            error: function (error) {
                console.error('An error occured');
                console.error(error);
            },
            complete: function () {
                console.log('Complete');
            }
        });

        filterByServices();
    }


});
function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }

//Let the document know when the mouse is being used
document.body.addEventListener('mousedown', function() {
  document.body.classList.add('using-mouse');
});
document.body.addEventListener('keydown', function() {
  document.body.classList.remove('using-mouse');
});

//fix for DOPMO-94454
var heightOverlay = 100;
var heightContent = 100;
$('.w_modal').keydown(function(e) { 

    var modalOverlayWindow = (document.activeElement).querySelector('#modal_overlay');
    var modalContentWindow = modalOverlayWindow.getElementsByClassName('modal_content')[0];

    if(modalContentWindow && modalContentWindow.scrollHeight > modalContentWindow.clientHeight)
        innerScrollable = true;
    else innerScrollable = false;


if(modalOverlayWindow !==null && modalOverlayWindow !==undefined){

    if(!innerScrollable){
    
		if(e.keyCode == 40){//Down Arrow
            e.preventDefault();
            heightOverlay = heightOverlay + 100;
            modalOverlayWindow.scrollBy(0, 100);
            if(heightOverlay >= modalOverlayWindow.scrollHeight){
            heightOverlay = modalOverlayWindow.scrollHeight;
       		}
        }
        if(e.keyCode == 38){//Up Arrow
            e.preventDefault();

            if(heightOverlay <= 0){
                heightOverlay = 100;
            }

            else{

                heightOverlay = heightOverlay - 100;
            }
			modalOverlayWindow.scrollBy(0, -100);
        }
}
    else if(modalContentWindow !==null && modalContentWindow !==undefined){
		if(e.keyCode == 40){//Down Arrow
            e.preventDefault();
            heightContent = heightContent + 100;
            modalContentWindow.scrollBy(0, 100);
            if(heightContent >= modalContentWindow.scrollHeight - 300){

                modalOverlayWindow.scrollBy(0, modalContentWindow.scrollHeight);
                heightContent = modalContentWindow.scrollHeight;
        		}
        }
        if(e.keyCode == 38){//Up Arrow
            e.preventDefault();
            if(heightContent <= 0){
				heightContent=100;

                modalOverlayWindow.scrollBy(0, -(modalOverlayWindow.scrollHeight));
            }

            if(heightContent >= modalContentWindow.scrollHeight){
                heightContent = heightContent - modalContentWindow.clientHeight - 100;
            }
            else{
                heightContent = heightContent -100;
            }
            modalContentWindow.scrollBy(0, -100);
        }

    }
}

 });






if(window.location.href.indexOf("interstitial") != -1)
{
var ssoDomainUrl = "https://www.verizon.com/";
var offer;

window.onload=function(){
	try{
	 	onload1();
		loader();
	 	//onloadInterstitial();
		eDeskLoad();
	 	updateSC();
	 }catch(e){}
}

function iframeModalInit(context){
	var $context = getContext(context);
try{
	$('[data-iframe-modal-trigger]').on('click', function (e){
		e.preventDefault();
		var self = $(this);
		var lochref = window.location.href;
		console.log('clicked iframe trigger');
		var selectedid = $(this).parent().attr("id");
		var device="";
		window.setTimeout(function(){
		var targetModal 	= self.attr('data-open-modal');
		var wrapperClass 	= self.attr('data-wrapper-class');
		var actionurl = self.attr('href');
		var my_form=document.createElement('FORM');
		my_form.name='myForm';
		my_form.method='POST';
		my_form.action= actionurl;   
		
		$('[data-modal="' + targetModal + '"] iframe').contents().find('body').append(my_form);
				my_form.submit();
			if (wrapperClass.length) {
				console.log('has class');
				$('.modal-iframe-wrapper', '[data-modal="' + targetModal + '"]').addClass(wrapperClass);
			}
		},200);	
	});
}catch(e){console.log('Having Error');}
}


function redirectURL()  {
	$(".loaderNew").css("display","block");
var url = ssoDomainUrl + "consumer/myverizon/dashboard";
var lochref = window.location.href;
if (lochref.indexOf("target=")>-1){
	url = lochref.substring(lochref.search('target=') + 7).split('&')[0];
}


window.location.href = url;
console.log("url"+url);
    return false;
}

function postDatatoUrl(param){
//var qStr = window.location.search.substring(1).toLowerCase();
param=param.toUpperCase();
//var paramArr = qStr.split('&');

	    var ajaxurl = "/foryourhome/myaccount/ngen/pr/widgets/promo.aspx";
	    var reqUrl = ajaxurl+"?action=" + param+"&offer="+offer;
	    sendRequest(reqUrl);
	    //vzrequest.onreadystatechange = function(){
	    //do something with the response
	   //}
	   if(param=='LEARN_MORE'){
	   return;
	   }

		//setTimeout(function(){redirectURL();}, 3000);
		//window.setTimeout(function(){redirectURL();}, 100);
		redirectURL();

	}
	


function sendRequest(reqUrl){
	try{
	        vzrequest = new XMLHttpRequest();
	   }catch (e){
	        try{
	            vzrequest = new ActiveXObject("Microsoft.XMLHTTP");
	       }catch (e){
	           // alert("XMLHttpRequest error: " + e);
	       }
	   }
	    vzrequest.open("GET", reqUrl, true);
	    vzrequest.send(null);
	    return vzrequest;
}	

function getURLParameter(name){
    return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, null])[1]
    );
}

function loader(){
var newdiv = document.createElement("div");
newdiv.innerHTML = '<div class="loaderNew" style="display: none;"><div class="loader-image"><div class="spinner2"><img src="https://www.verizon.com/foryourhome/ordering/Common/ak-cached/24h/Pheonix/img/loading-spinner.png"></div></div></div>';
document.getElementById("footer").appendChild(newdiv);
}

$(document).ready(function(){

	var urlIdx = location.search.indexOf("token=author");

	 
	if(window.location.href.indexOf("wwwawssit.ebiz.verizon")>-1){
		ssoDomainUrl = "https://sso-np.ebiz.verizon.com/";
	}else if( window.location.href.indexOf("https://www98.verizon") > -1 ){
		ssoDomainUrl = "https://www98.verizon.com/";
	}else if( window.location.href.indexOf("https://wwwnte1aws.ebiz") > -1 ){
		ssoDomainUrl = "https://sso-np2.ebiz.verizon.com/";
	}else if(window.location.href.indexOf("https://wwwnte3aws.ebiz")>-1){
		ssoDomainUrl = "https://sso-np3.ebiz.verizon.com/";
	}
	 
	if(document.cookie.indexOf("islogin")== -1 && urlIdx == -1 && document.domain.indexOf("author-awssit.ebiz.verizon.com")== -1){
		location.href = ssoDomainUrl + "consumer/myverizon/dashboard";
	}
	
	 var ovrl = getURLParameter('showoverlay').toLowerCase();
	 //var offer = getURLParameter('offer').toLowerCase();
	 var pathArray = window.location.pathname.split('.');
	 var selector = pathArray[1];
     offer = selector.toLowerCase();
	try{
	$('#footer').append('<div class="w_modal rim" data-iframe-modal="" data-modal="iframeModal_rim"><a class="modal_x m_right" data-close-modal="" id="modalfrm" onclick="location.reload();"></a><div class="modal_content" data-modal-content="">	<div class="modal-iframe-wrapper"><iframe frameborder="0" scrolling="no" title="check address &amp; ordering flow"></iframe></div></div></div>');
	}catch(e){}
	 if(ovrl!=null && ovrl!='' && ovrl == 'y'){
		var axel = Math.random() + "";
		var aaxel = axel * 10000000000000;
		$("#rmdltr").attr("data-iframe-modal-trigger", ""); 
		$("#rmdltr").attr("data-wrapper-class", "rim"); 
		$("#rmdltr").attr("data-open-modal", "iframeModal_rim"); 
		$("#rmdltrdesk").attr("data-iframe-modal-trigger", ""); 
		$("#rmdltrdesk").attr("data-wrapper-class", "rim"); 
		$("#rmdltrdesk").attr("data-open-modal", "iframeModal_rim"); 
		var source = ssoDomainUrl + "consumer/myverizon/offers/rmdoverlay?offer="+offer+"&rnd="+aaxel;;
		//$("#rmdltr").attr("href", "/foryourhome/myaccount/ngen/pr/splash/rmdoverlay.aspx?rnd="+aaxel); 
		//$("#rmdltrdesk").attr("href", "/foryourhome/myaccount/ngen/pr/splash/rmdoverlay.aspx?rnd="+aaxel); 
		$( "#rmdltrdesk" ).click(function() {
			$(".loaderNew").css("display","block");
				try{
					scLinkTrackID('REMIND_LATER');
				}catch(e){}
			$('[data-modal="iframeModal_rim"] iframe').attr({'src': source});
			$(".loaderNew").css("display","none");
		});
		$( "#rmdltr" ).click(function() {
			$(".loaderNew").css("display","block");
			try{
				scLinkTrackID('REMIND_LATER');
			}catch(e){}
			$('[data-modal="iframeModal_rim"] iframe').attr({'src': source});
			$(".loaderNew").css("display","none");
		});
		$('#modalfrm').click(function() {
		   postDatatoUrl('Close_popup');
		});
		
	  }else{
	   $( "#rmdltr" ).click(function() {
			$(".loaderNew").css("display","block");
			try{
				scLinkTrackID('REMIND_LATER');
			}catch(e){}
			postDatatoUrl('REMIND_ME');
	   });
	   $( "#rmdltrdesk" ).click(function() {
			$(".loaderNew").css("display","block");
			try{
				scLinkTrackID('REMIND_LATER');
			}catch(e){}
			postDatatoUrl('REMIND_ME');
	   });
	  }
	  
	  
	  if($('#renewmob').length>0 || $('#renewdesk').length>0){
	    var desifrurl = "/personal/urc.html#!/signin?flowtype=af&subflowtype=renew&customerintent=renewal&source="+offer+"&test=bundle";
	    $("#renewmob").attr("href", desifrurl); 
		$("#renewdesk").attr("href", desifrurl); 
		$("#renewdesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#renewmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	 }else if($('#upgrademob').length>0 || $('#upgradedesk').length>0){
	    var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=urc_upgrade&frompersonalisation=y&flowrouteval=int_"+offer+"&source="+offer;
	    $("#upgrademob").attr("href", desifrurl); 
		$("#upgradedesk").attr("href", desifrurl); 
		$("#upgrademob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#upgradedesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#urcdesk').length>0 || $('#urcmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?frompersonalisation=y&source="+offer;
	    $("#urcdesk").attr("href", desifrurl); 
		$("#urcmob").attr("href", desifrurl); 
		$("#urcdesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#urcmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#nclckdesk').length>0 || $('#nclckmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=quantum&flowrouteval=nclick&source="+offer;
	    $("#nclckdesk").attr("href", desifrurl); 
		$("#nclckmob").attr("href", desifrurl); 
		$("#nclckdesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#nclckmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#accordesk').length>0 || $('#accordmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=quantum&flowrouteval=accordion&source="+offer;
	    $("#accordesk").attr("href", desifrurl); 
		$("#accordmob").attr("href", desifrurl); 
		$("#accordesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#accordmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#supdesk').length>0 || $('#supmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=quantum&source="+offer;
	    $("#supdesk").attr("href", desifrurl); 
		$("#supmob").attr("href", desifrurl); 
		$("#supdesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#supmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#migdesk').length>0 || $('#migmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=urc_migrate&flowrouteval=accordion&source="+offer;
	    $("#migdesk").attr("href", desifrurl); 
		$("#migmob").attr("href", desifrurl); 
		$("#migdesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#migmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#acctdesk').length>0 || $('#acctmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=urc_accountreview&flowrouteval=accordion&source="+offer;
	    $("#acctdesk").attr("href", desifrurl); 
		$("#acctmob").attr("href", desifrurl); 
		$("#acctdesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#acctmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#hbodesk').length>0 || $('#hbomob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/RegistrationBridge.aspx?flowroute=urc_streaming&source="+offer;
	    $("#hbodesk").attr("href", desifrurl); 
		$("#hbomob").attr("href", desifrurl); 
		$("#hbodesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#hbomob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else if($('#hbondesk').length>0 || $('#hbonmob').length>0){
	     var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=urc_channels&flowrouteval=accordion&source="+offer;
	    $("#hbondesk").attr("href", desifrurl); 
		$("#hbonmob").attr("href", desifrurl); 
		$("#hbondesk").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$("#hbonmob").click (function() {
		  postDatatoUrl('LEARN_MORE');
		 });
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }else{
	    var desifrurl = "/foryourhome/ordering/myverizonnew/registrationbridge.aspx?flowroute=quantum&frompersonalisation=y&flowrouteval=int_"+offer+"&source="+offer;
	    $("#upgrade").attr("href", desifrurl); 
		postDatatoUrl('LEARN_MORE');
		$('#modalfrm').click(function() {
		redirectURL();
		});
	  }
	 
});



var offer = getURLParameter('offer').toLowerCase();
 
 $( "#nthnks" ).click(function() {
    $(".loaderNew").css("display","block");
	try{
    scLinkTrackID('NO_THANKS');
	}catch(e){}
	postDatatoUrl('NO_THANKS');
 });


 $( "#nthnksdesk" ).click(function() {
    $(".loaderNew").css("display","block");
	try{
    scLinkTrackID('NO_THANKS');
	}catch(e){}
	postDatatoUrl('NO_THANKS');
 });
 
 $( "#update" ).click(function() {
   postDatatoUrl('LEARN_MORE');
 });

}
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);


var youtube_iframe_video = [];

function onYouTubeIframeAPIReady() {
    var videos = document.getElementsByClassName("video-youtube");
    for (i = 0, length = videos.length; i < length; i++) {
        var videoElement;
        videoElement = new YT.Player(videos[i].id, {
            width: '100%',
            height: '100%',
            videoId: videos[i].dataset.videoId,
            playerVars: {
            	'autoplay': 0,
            	'controls': 1
        	},
            events: {
            	'onReady': onPlayerReady
            }
        });
        youtube_iframe_video.push(videoElement);
    }
}

function onPlayerReady(event) {
    setInterval(function () {
       var video = document.getElementById(event.target.i.id);
        if($(video).closest(".w_modal").length > 0 ) {
            if(!$(video).closest(".w_modal").hasClass("active")) {
                event.target.stopVideo();
            }
        }
    }, 500);
}


var storeId, selectValue, mySelect, SUBMIT_BUTTON, tabimage1, tabimage2, tabimage3, imgStore, pathArray, selector, dropDown, slectLocation, butonList, index;

try {
    pathArray = window.location.pathname.split('.');
    selector = pathArray[1];
    slectLocation = document.getElementById(selector);
    selectValue = document.getElementById("storeID");
    mySelect = document.getElementById("selectStore");
    dropDown = document.getElementById('Dropdown-list');
    butonList = document.getElementsByClassName('button-020');
    SUBMIT_BUTTON = document.getElementById("submit-storid");
    SUBMIT_BUTTON.style.opacity = "0.2";


    tabimage1 = document.getElementById("imageTabBlock1").value;
    tabimage2 = document.getElementById("imageTabBlock2").value;
    tabimage3 = document.getElementById("imageTabBlock3").value;

    imgStore = [tabimage1, tabimage2, tabimage3];


} catch (err) { }

function storeValurUpdate(s) {
	 $("#errorm").css('display', 'none');
	var selectedValue =$("#"+selector).text();
    event.preventDefault();
    dropDown.style.display = "block";
    //storeId = s[s.selectedIndex].value;
    if (selectedValue !== 'Store location') {
        selectValue.style.display = "block";
    } else {
        selectValue.style.display = "none";
    }

}
index = 0;
function changeValue(e) {
    butonList[index].style.borderLeft = 'none';
    index = Array.prototype.slice.call(e.target.parentElement.children).indexOf(e.target);
    slectLocation.innerHTML = e.target.value;
    storeId = e.target.value;
    e.target.style.borderLeft = '4px solid red';
    dropDown.style.display = "none";
}

function storeIdChange(el) {
    var val = el.target.value.replace(/\s/g, "");
    var regex = /O2O[a-zA-Z][a-zA-Z][0-9][0-9]/;
    if (regex.test(val)) {
        SUBMIT_BUTTON.style.opacity = "1";
         $("#errorm").css('display', 'none');
         $("#submit-storid").removeAttr("disabled");

    } else {
        SUBMIT_BUTTON.style.opacity = "0.2";
        $("#errorm").css('display', 'block');
        $("#submit-storid").attr("disabled","");

    }

}
function submitO2OID() {
    var vendorName = window.location.href.substring(window.location.href.search('login=') + 6);
    //setCookie('O2O',vendorName,null);

    if ($("#vzO2oId").val() != "") {

        $.when(setO2OPDCVal("VzVendor", "Storeid", storeId, "-"), setO2OPDCVal("VzVendor", "Repid", $("#vzO2oId").val(), "-")).done(function () {

            location.assign = window.location.pathname + "?abr=O2O&CMP=" + "OLA_CON_ACQ_99999_NA_20180521_" + storeId + "_" + $("#vzO2oId").val() + "&c=" + $("#vzO2oId").val();

        });
    }

}
function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }
function setO2OPDCVal(dic, key, value, splchar) {
    var xmlhttp = null;
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest();
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    
	 xmlhttp.open("GET", "/content/verizon/personal/services/updatepdc.all.nocache.html?Mode=write&" + dic + "=" + key + splchar + value, false);
   	       xmlhttp.onreadystatechange=function(){
				if (xmlhttp.readyState==4 && xmlhttp.status==200){  
                    console.log("xmlhttp.responseText");
									}
				}		
    xmlhttp.send(null);
}
/*******************SHARDA UPDATED THIS AREA********************** */
$(".img-tab").click(function () {


    $('.img-wrepper').addClass("hide");
    if (window.innerWidth > 750) {
        $('.tabcontent').addClass('hide');
    }
});

function o2oTab(evt, tabName) {
    $('.modal_x').click();
    $('#deskimg' + evt.target.id).click();
    /* $('.img-tab').each(function (index, value) {
 
         if (value == tabName) {
             console.log("index"+index);
         }
     });*/


}


/***************************************************************************MY AREA END */
$(document).ready(function () {
    if (window.location.href.indexOf(selector) > -1) {
		$('.imageTab').addClass("o2oImageBlocks");
        $('.imgtablinks').removeClass("active");
        $('.imgtablinks').addClass('img-tab');
        $('.mobiletablinks').addClass('mob-img-tab');

    }

    if (window.location.href.indexOf("abr") > -1) {

        $('.o2oFiosLogo').addClass("hide");
        $('.imageTab').removeClass("o2oImageBlocks");
        $('.store-row').addClass("reduceFormHeight");
        $('#storeDropdown').addClass("hide");
        $('.tabnew').removeClass("hide");

    }



    var venList = ['mguru', 'bwireless', 'pwireless', 'rcellular', 'wplaza', 'wzone', 'vair', 'rwireless', 'tcc', 'imwireless'];
    var venaliaList = ['O2OMOGU', 'O2OBAW', 'O2OPING', 'O2ORUCE', 'O2OWIPL', 'O2OWIRZ', 'O2OVAIR', 'O2ORELW', 'O2OTCC', 'O2OIW'];

    //var venName = location.search.substring(1).split("login=");
    var venName = selector;

    var venList = ['mguru', 'bwireless', 'pwireless', 'rcellular', 'wplaza', 'wzone', 'vair', 'rwireless', 'tcc', 'imwireless'];
    for (var i = 0; i < venList.length; i++) {
        if (venList[i] != venName) {
            $("button[id=" + venList[i] + "]").remove();
        }
    }
    $('.img-tab').each(function (index) {
        $(this).css('background-image', 'url("' + imgStore[index] + '")');

    });

    $('.mob-img-tab').each(function (index) {
        $(this).css('background-image', 'url("' + imgStore[index] + '")');
    });



});


/*Function to close the DIV of the image*/
function closeDiv() {
   $('#IDcontentexperiencefragmentsauthoringo2ostorelocatorformmasterjcrcontentrootbanner').remove();   
}
/*function to handle the tab open functionality in o2o if we have two tab components in a page*/

function openNewTab(evt, tabName) {

    console.log("TAB");
    /************************************************ 
	Fix for closest  IE9+  - START
    *************************************************/    

    if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || 
                                Element.prototype.webkitMatchesSelector;
    }

    if (!Element.prototype.closest) {
        Element.prototype.closest = function(s) {
            var el = this;

            do {
            if (el.matches(s)) return el;
            el = el.parentElement || el.parentNode;
            } while (el !== null && el.nodeType === 1);
            return null;
        };
    }  
    /************************************************ 
        Fix  for closest  IE9+  - END
    *************************************************/

    var i, tabcontent, tablinks;
    tabcontent = evt.target.closest(".newTab").getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
        tabcontent[i].classList.remove("addBlock");
    }
    tablinks = evt.target.closest(".newTab").getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    $('.img-wrepper').addClass("hide");
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
    initializeCarouselElement();

	var dup = [];
    $("[data-equal-height]").each(function(index){
        var ele = $("[data-equal-height]")[index];
        var lel = $(ele).attr("data-equal-height");
          dup.push(lel);
    });    
    var uniqueNames = [];
    $.each(dup, function(i, el){
        if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
    });
    equalHeights(uniqueNames);
    /*equalHeights();*/
}
try
{
    if(screen.orientation !==null && screen.orientation  !== undefined){
    	screen.orientation.addEventListener('change', function() {
    		var dup = [];
    	    $("[data-equal-height]").each(function(index){
    	        var ele = $("[data-equal-height]")[index];
    	        var lel = $(ele).attr("data-equal-height");
    	          dup.push(lel);
    	    });    
    	    var uniqueNames = [];
    	    $.each(dup, function(i, el){
    	        if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
    	    });
    	    equalHeights(uniqueNames);
    	});
    }
}catch(ex3){
}
function scbFnGetGotoQS(s) {
  var strGotoRetval = null;
  if (!s) s = '';
  var strGotoQS = window.location.search;
  if (strGotoQS.substring(0, 1) == '?') {
    strGotoQS = strGotoQS.substr(1);
  }
  var arrGotoQS = new Array();
  arrGotoQS = strGotoQS.split('&');
  for (var i = 0; i < arrGotoQS.length; i++) {
    // var thisQS='';
    var arrThisGotoQS = new Array();
    arrThisGotoQS = arrGotoQS[i].split('=');
    if (scbTrim(arrThisGotoQS[0]).toLowerCase() == scbTrim(s).toLowerCase()) {
      if (scbTrim(s).toLowerCase() == 'goto' && arrThisGotoQS.length > 2) {
        strGotoRetval = unescape(strGotoQS.split('goto=')[1]);
      } else {
        strGotoRetval = unescape(arrThisGotoQS[1]);
      }
      strGotoRetval = strGotoRetval.replace(/\+/g, ' ');
      break;
    }
  }
  return strGotoRetval;
}

var currDomain = document.domain;
var myvzdomain ='www.verizon.com';
var myvzrouter ='%2Fconsumer%2Fmyverizon%2Frouter';

if(currDomain.indexOf("www.verizon.com")==-1){
	if(currDomain.indexOf("wwwnte1aws.ebiz.verizon.com")>-1){
		myvzdomain='sso-np2.ebiz.verizon.com'
	}else if(currDomain.indexOf("wwwnte3aws.ebiz.verizon.com")>-1){
		myvzdomain='sso-np3.ebiz.verizon.com'
	}else if(currDomain.indexOf("orderinglite.verizon.com")>-1){
		myvzdomain='orderinglite.verizon.com'
		myvzrouter='%2Fforyourhome%2Fmyaccount%2Fngen%2Fpr%2Fcommon%2Fergcon.aspx';
	}else if(currDomain.indexOf("www98.verizon.com")>-1){
		myvzdomain='www98.verizon.com';
	}else{
		myvzdomain='sso-np.ebiz.verizon.com'
	}
		
}



var ssoNewDomain='https://ssoauth.verizon.com';
if (currDomain.indexOf('www98.verizon.com')!=-1 || currDomain.indexOf('tvuat02.verizon.com')!=-1 || currDomain.indexOf('dev.powerplay.verizon.com') !=-1 || currDomain.indexOf('ci.powerplay.verizon.com') !=-1 || currDomain.indexOf('qa.powerplay.verizon.com') !=-1){
	ssoNewDomain='https://pprd-ssoauth.verizon.com';
}else if(currDomain.indexOf('.ebiz.verizon.com')!=-1){
	ssoNewDomain='https://sit-ssoauth.verizon.com';
}
     

//qry string append start-
//qry string append start-
var gotoQS = "";
var sourceQS = "";
var ecrmQS = "";
var gotoCusTarget ={path1: {url: "/home/mlp/sign-in-accessories.html",customGoto:window.location.origin+"/home/accessories/cpr-call-blocker-shield/"}}
var gotoCusTarget ={path1: {url: "/home/mlp/sign-in-accessories-stv",customGoto:window.location.origin+"/home/accessories/verizon-stream-tv/"}}
try {
  gotoQS = unescape(scbFnGetGotoQS('goto'));
  gotoQS = gotoQS.replace(":443", "");
  gotoQS = gotoQS.replace(":80", "");
  gotoQS = gotoQS.replace(".verizon.com/?lid", ".verizon.com/");
  if (gotoQS != '') {
    if (
      (gotoQS.indexOf(vzHost + '/home/') > 0 && gotoQS.indexOf('verizon.com/home/accessories') == -1) ||
      gotoQS == vzHost + '/foryourhome/registration/reg/unifiedhelperlogin.aspx' ||
      gotoQS == vzHost + '/foryourhome/myaccount/ngen/upr/error/errnotify.aspx' ||
      gotoQS == vzHost + '/foryourhome/myaccount/ngen/pr/error/errnotify.aspx' ||
      gotoQS.indexOf(removeHttps(vzSignIn) + '/sso/') == 0 ||
      gotoQS.indexOf('www.verizon.net/ssowebapp/') == 0 ||
      gotoQS == vzHost + '/home/myverizon/') {
      gotoQS = "";
    } else {
      sourceQS = scbFnGetGotoQS('source');
      if (null != sourceQS  && ''!= sourceQS  && 'ecrm' == sourceQS.toLowerCase()) {
        ecrmQS = '&sourcetype=' + scbFnGetGotoQS('sourcetype') + '&source=' + sourceQS + '&email=' + scbFnGetGotoQS('email');
      }

      gotoQS = encodeURIComponent(encodeURIComponent(encodeURIComponent(gotoQS + ecrmQS)));
    }
    for(key in gotoCusTarget){
    	if(window.location.pathname.indexOf(gotoCusTarget[key].url)>-1){
    		 gotoQS = encodeURIComponent(encodeURIComponent(encodeURIComponent(gotoCusTarget[key].customGoto + ecrmQS)));
    	}
    	
    }
  }

  if(gotoQS.indexOf('tv-sit.verizon.com')>-1 || gotoQS.indexOf('tv-stg.verizon.com')>-1 || gotoQS.indexOf('tv-dit.verizon.com')>-1 ){
      ssoNewDomain='https://ssoauth.verizon.com';
      myvzdomain ='www.verizon.com';
      myvzrouter ='%2Fconsumer%2Fmyverizon%2Frouter';
  }
  
  var ssoClientid = 'atlassigninpage';

  if (/iphone|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase())) {
    ssoClientid = 'atlassigninmobileweb';
  }

} catch (e) { }

var ssoIFrameSRC = "";
if(gotoQS.indexOf('inhome')>-1)
	{
	 ssoIFrameSRC = ssoNewDomain +
  '/vzauth/UI/Login?realm=vzw&service=WlnOneVerizonChain&mode=i&fromVZT=Y&clientId=' + ssoClientid + '&userNameOnly=false&goto=https%3A%2F%2F' +
  myvzdomain + myvzrouter+'%3FTarget%3D' + encodeURIComponent(encodeURIComponent(gotoQS));
	}else if(gotoQS.indexOf('callingEntity')>-1){
		ssoIFrameSRC = ssoNewDomain +
		  '/vzauth/UI/Login?realm=vzw&service=WlnOneVerizonChain&mode=i&fromVZT=Y&clientId=' + ssoClientid + '&userNameOnly=false&goto=https%3A%2F%2F' +
		  myvzdomain + myvzrouter+'%3FTarget%3D' + encodeURIComponent(encodeURIComponent(gotoQS));
	}else if(gotoQS.indexOf('offers')>-1){
		ssoIFrameSRC = ssoNewDomain +
		  '/vzauth/UI/Login?realm=vzw&service=WlnOneVerizonChain&mode=i&fromVZT=Y&clientId=' + ssoClientid + '&userNameOnly=false&goto=https%3A%2F%2F' +
		  myvzdomain + myvzrouter+'%3FTarget%3D' + encodeURIComponent(encodeURIComponent(gotoQS));
	}
	else if(gotoQS.indexOf('FlowRoute')>-1){
		ssoIFrameSRC = ssoNewDomain +
		  '/vzauth/UI/Login?realm=vzw&service=WlnOneVerizonChain&mode=i&fromVZT=Y&clientId=' + ssoClientid + '&userNameOnly=false&goto=https%3A%2F%2F' +
		  myvzdomain + myvzrouter+'%3FTarget%3D' + encodeURIComponent(encodeURIComponent(gotoQS));
	}
else{
	   ssoIFrameSRC = ssoNewDomain +
	  '/vzauth/UI/Login?realm=vzw&service=WlnOneVerizonChain&mode=i&fromVZT=Y&clientId=' + ssoClientid + '&userNameOnly=false&goto=https%3A%2F%2F' +
	  myvzdomain + myvzrouter+'%3FTarget%3D' + gotoQS; 
  }

  
if(document.getElementById('dvSSOIFrame')){
	console.log("ssoIFrameSRC"+escapeHtml(ssoIFrameSRC));
	document.getElementById('dvSSOIFrame').innerHTML = '<iframe src="' + escapeHtml(ssoIFrameSRC) +
    '" id="DOMWindowIframe" style="height:417px;width:361px;border-left: 20px solid #fff!important;min-height: 402px !important;border-right: 26px solid #fff !important;border-top: 14px solid #fff !important; " wspace="0" hspace="0" scrolling="no" marginheight="0"  marginwidth="0" name="DOMWindowIframe152" title="Sign In" ></iframe>';
}

function encodedURI(x) {
    try
    {
      if((x.length == decodeURIComponent(x).length) || (x.indexOf('?')>-1) )
      {
        console.log("true ---->"+encodeURIComponent(x));
        return encodeURIComponent(x);
      }
    }catch(e){}
    console.log("false---->"+x);
    return x;}

function escapeHtml(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }
var RepeatVisitor="";
var CouponType="";
var CouponDescription ="$5 Bundle discount for 24mos";
var LoopQual="";
var AddressID="";
var MLstatus = null;
var cartinfo ="";
//Sanitize and encode all HTML in a user-submitted string to prevent XSS attacks.
var sanitizeHTML = function (str) {
var temp = document.createElement('div');
temp.textContent = str;
return temp.innerHTML;
};

function setChatAgentInfo(agentId, chatSessionId, agentSalesCode, timeStamp) {
	try{
		 var pagePath = window.location.pathname;
		 /*var pageName = window.location.pathname.split("/");
		 if(pagePath.substring(pagePath.length,pagePath.length-1).indexOf("/")>-1){
			 pageName = pageName[pageName.length-2];
		 }else{
			 pageName = pageName[pageName.length-1];
		 }*/
		 var xhttp = new XMLHttpRequest();
			xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
			    if(this.responseText == null || this.responseText == ''){
					console.log("chat info failed");
			      } else {
				       console.log("chat info success");
			           
					}
			  }
			};
			xhttp.open("GET", "/content/verizon/personal/services/chatdetails.all.nocache.html?agtid="+agentId+"&trkid="+chatSessionId+"&asid="+agentSalesCode+"&pname="+pagePath, true);
			xhttp.send();
		 
	}catch (e) {
	    console.log(e);
	}
}


function checkMLStatus(){
var xmlhttp = null;

	try {
	    if(MLstatus!=undefined && MLstatus !='' ){
			 var resML = MLstatus.match(/CHAT/i);
	     if (resML != null && resML[0].toLowerCase() == 'chat') {
            LaunchTCCustomEvent('VZT-Machine-Learning-Threshold-Reached');
           }
		}
       }
       catch (e) {
         console.log(e);
        }
}

function getCookie(name){
	var dcookie=document.cookie;
	var cname=name + '=';
	var clen=dcookie.length;
	var cbegin=0;
	while (cbegin < clen){
		var vbegin=cbegin + cname.length;
		if(dcookie.substring(cbegin, vbegin)==cname){
			var vend=dcookie.indexOf (';', vbegin);
			if(vend==-1) vend=clen;
			return unescape(dcookie.substring(vbegin, vend));
		}
		cbegin=dcookie.indexOf(' ', cbegin) + 1;
		if(cbegin==0) break;
	}
	return null;
}

function getSubCookie(masterCookieName,subCookieName){
	var cookie = getCookie(masterCookieName);
	if(cookie == null){
		return null;
	}
	var subCookie = cookie.split("&");

	for(var element in subCookie){
	        var subCookieDetails = subCookie[element].split("=");
			if(subCookieDetails[0]==subCookieName && subCookieDetails.length > 1){
				return subCookieDetails[1];
			}
		}

	return null;
}


 function chatData() {
    try{ 
    var Lq =  (window.pdc_json.VzLQPro!=undefined && window.pdc_json.VzLQPro.LQ!=undefined) ? window.pdc_json.VzLQPro.LQ:"";
    //var coupon = (window.pdc_json.VzCoMo!=undefined && window.pdc_json.VzCoMo.Coupon!=undefined) ? window.pdc_json.VzCo.Coupon:"";
    var addiD = (window.pdc_json.vzpers!=undefined && window.pdc_json.vzpers.AID!=undefined) ? window.pdc_json.vzpers.AID:"";
    var comcpn = (window.pdc_json.VzCoMo!=undefined && window.pdc_json.VzCoMo.LeadListID!=undefined) ? window.pdc_json.VzCoMo.LeadListID:"";
    var MLst = (window.pdc_json.VZDev!=undefined && window.pdc_json.VZDev.PINTERV!=undefined) ? window.pdc_json.VZDev.PINTERV:"";
    var savecart = (window.pdc_json.VzCart!=undefined && window.pdc_json.VzCart.SmartCart!=undefined) ? window.pdc_json.VzCart.SmartCart:"";
    var userStatusVal=getCookie("UST");
    var countVal=0;
    if(userStatusVal !=null){
    	var countCookie="c";
        countVal= getSubCookie("UST",countCookie);
    }
    RepeatVisitor = (countVal!=undefined && countVal>1) ? "Y":"N";
    console.log("RepeatVisitor"+RepeatVisitor);
	console.log("CouponType"+comcpn);
	console.log("CouponDescription"+CouponDescription);
	console.log("LoopQual"+Lq);
    console.log("AddressID"+addiD);
	console.log("ML Status"+MLst);
	   
	 if(comcpn !=undefined && comcpn!=""){ 
		 if(comcpn=="LC10000356"){
			 CouponType="Multiuse";
		 }else{
			 CouponType="com";
		 }
	 } 
     if(CouponType!=""){	 
      CouponDescription ="$5 Bundle discount for 24mos";
	 }
     LoopQual=Lq;
     AddressID=addiD;
	 MLstatus = MLst;
	 cartinfo= savecart;

     if(window.location.href!='https://'+document.domain+'/home/verizonglobalhome/ghp_landing.aspx'){
     if (typeof setCustomerInfo != "undefined") {
	 if(RepeatVisitor !=""){
	 setCustomerInfo('RepeatVisitor',"Y");}
	 
      try {
    	  if(window.pdc_json.VzCoMo !=null && window.pdc_json.VzCoMo !=undefined && window.pdc_json.VzCoMo.CouponExpiryDate!=undefined && window.pdc_json.VzCoMo.CouponExpiryDate!=""){
            var couponexpDate = window.pdc_json.VzCoMo.CouponExpiryDate != undefined ? window.pdc_json.VzCoMo.CouponExpiryDate : "";
            if (CouponType != "" && couponexpDate != "") {
                couponexpDate = new Date(couponexpDate);
                console.log(couponexpDate);
                var dt = new Date();
                dt.toUTCString();
                Math.floor(dt.getTime() / 1000);
                var currentDate = new Date(dt.getUTCFullYear(), dt.getUTCMonth(), dt.getUTCDate(), dt.getUTCHours(), dt.getUTCMinutes(), dt.getUTCSeconds());
                console.log(currentDate);
                if (currentDate <= couponexpDate) {
                    if (CouponType == "Multiuse") {
                        setCustomerInfo('MULTI_USE_COUPON_APPLICABLE', 'Y');
                    } else {
                        setCustomerInfo('COM_COUPON_APPLICABLE', 'Y');
                    }
                }
            }
    	  }
         } catch (e1) {
                console.log(e1);
         }

	  
	  
	  if(CouponType !=""){
	  setCustomerInfo('CouponDescription',CouponDescription);}
	  if(LoopQual !=""){
	  setCustomerInfo('LoopQual',"Y");}
	  if(cartinfo !=""){
	  setCustomerInfo('SAVED_CART_VISITOR',cartinfo);}
	  if(AddressID !=""){
	  setCustomerInfo('AddressID',AddressID);}
	  if(RepeatVisitor !="" && LoopQual !="" && MLstatus ==''){
	     reInit("38315384");
	    }
	  else{
		  reInit();
      }
   }

    }
	}catch(e){
    console.log(e);
    }   

}
  
function readCookie(name) {
    var nameEQ = name + "=";
    var ca = sanitizeHTML(document.cookie.split(';'));
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
}


var gsmid='';
var domainName = window.document.domain;
domainName = domainName.substring(0, 5);
if(domainName ==  "wwwaw") {
	gsmid = readCookie('GlobalSessionID_awssit');
	
} else if (domainName == "www98"){
		gsmid = readCookie('GlobalSessionID_98');
		 //console.log(gsmid);
}else{
		gsmid = readCookie('GlobalSessionID');
	    //console.log(gsmid);
	}


$(window).load(function(){
 chatData();
 checkMLStatus();
});
 
window.setTimeout(function () {
if (typeof setExtraCustomerInfo != "undefined") {
     setExtraCustomerInfo('GlobalSessionID',gsmid);
	 init(); 
    }
}, 3000);

window.setTimeout(function () {
if(window.location.href!='https://'+document.domain+'/?lid=//global//residential'&& window.location.href!='https://'+document.domain+'/home/verizonglobalhome/ghp_landing.aspx'
&& window.location.href !='https://'+document.domain+'/home/verizonglobalhome/ghp_landing.aspx https://www.verizon.com/?lid=//global//residential'){
if (typeof setCustomerInfo != "undefined") {
	 if(RepeatVisitor !=""){
	 setCustomerInfo('RepeatVisitor',"Y");}
	  if(CouponType !=""){
	  setCustomerInfo('CouponType',CouponType);}
	  if(CouponType !=""){
	  setCustomerInfo('CouponDescription',CouponDescription);}
	  if(LoopQual !=""){
	  setCustomerInfo('LoopQual',"Y");}
	  if(cartinfo !=""){
	  setCustomerInfo('SAVED_CART_VISITOR',cartinfo);}
	  if(AddressID !=""){
	  setCustomerInfo('AddressID',AddressID);}
	  if(RepeatVisitor !="" && LoopQual !="" && MLstatus ==''){
	     reInit("38315384");
	    }
	  else{
		  reInit();
      }
   }
  }
}, 3000);


function emailVal(sEmail) {
	sEmail = sEmail.value;
    if (sEmail == "") {
		document.getElementById("emaiID").style="border-color:red;";
        return false;
	}

    if (sEmail.length > 0) {
        // Return false if e-mail field does not contain a '@' and '.' .
        if (sEmail.indexOf('@', 0) == -1 || sEmail.indexOf('.', 0) == -1) {
			document.getElementById("emaiID").style="border-color:red;";
            return false;
        }
        if (CheckEmailid(sEmail)){
			document.getElementById("emaiID").style="border-color:#777;";
            return true;
		}else{
			 document.getElementById("emaiID").style="border-color:red;";
            return false;
		}
        
    }
	document.getElementById("emaiID").style="border-color:#777;";
    return true;
}


function CheckEmailid(lemailStr) {
    if (lemailStr == '')
        return '';
    var Mesg = "Invalid EmailID";
    var lemailPat = /^(.+)@(.+)$/;
    var lspecialChars = "\\(\\)<>@,;:\\\\\\\"\\.\\[\\]";
    var lvalidChars = "\[^\\s" + lspecialChars + "\]";
    var lfirstChars = lvalidChars;
    var lquotedUser = "(\"[^\"]*\")";
    var lipDomainPat = /^\[(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\]$/;
    var latom = "(" + lfirstChars + lvalidChars + "*" + ")";
    var lword = "(" + latom + "|" + lquotedUser + ")";
    var luserPat = new RegExp("^" + lword + "(\\." + lword + ")*$");
    var ldomainPat = new RegExp("^" + latom + "(\\." + latom + ")*$");
    var lmatchArray = lemailStr.match(lemailPat);
    if (lmatchArray == null) {
        return false;
    }
    var luser = lmatchArray[1];
    var ldomain = lmatchArray[2];

    if (luser.match(luserPat) == null) {
        return false;
    }
    var lIPArray = ldomain.match(lipDomainPat)
    if (lIPArray != null) {
        for (var li = 1; li <= 4; li++) {
            if (lIPArray[li] > 255) {
                return false;
            }
        }
    }

    var ldomainArray = ldomain.match(ldomainPat);
    if (ldomainArray == null) {
        return false
    }
    var latomPat = new RegExp(latom, "g");
    var ldomArr = ldomain.match(latomPat);
    var llen = ldomArr.length;


    if (ldomArr[ldomArr.length - 1].length == 1 && llen < 3) {
        return false;
    }

    if (ldomArr[ldomArr.length - 1].length == 3 && llen < 2) {
        return false;
    }

    var reg = /^([a-zA-Z0-9_.\-'])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$/;
    if (reg.test(lemailStr) == false) {
        return false;
    }
    return true;
}

function isNNumeric(e) {
    var keyCode = (e.which) ? e.which : e.keyCode;

    if ((keyCode > 47 && keyCode < 58) || (keyCode == 8) || (keyCode == 9) || (keyCode == 13)) {
		//ValidatePassKey(e)
        return true;
    }
    else {
        if (e.returnValue) {
            e.returnValue = false;
            return false;
        }
        else if (e.preventDefault) {
            e.preventDefault();
            return false;
        }
        this.event.returnValue = false;
        return false;
    }
}


function ValidatePassKey(tb) {
	//tb = tb.target;
  if (tb.value.length >= 3){
    document.getElementById(tb.id + 1).focus();
  }
}
function clearData(){
	try{
		document.getElementById('1').value="";
		document.getElementById('11').value="";
		document.getElementById('111').value="";
		document.getElementById('emaiID').value="";
	}catch(e){}
}
function submitEmail(){
var maild = document.getElementById('emaiID').value;
if(maild!=undefined && maild!="" && maild!=null){
             $.ajax({
                    url: "/home/customerdetails?custype=AF&cusemail="+maild,
                    async: false,
                    global: false,
                    error: function () {
                        console.log("Errr is occured");
						 openModal('modal-2');
                    },
                    success: function (result) {
                        console.log("sucess");
                        openModal('modal-1');
                    }
                });
}else{
document.getElementById("emaiID").style="border-color:red;";	
}
}
var currentTime =  new Date();
function create_UUID(){
    var dt = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = (dt + Math.random()*16)%16 | 0;
        dt = Math.floor(dt/16);
        return (c=='x' ? r :(r&0x3|0x8)).toString(16);
    });
    return uuid;
}

function submitPropdetails(){
	var checkVal = false;
	var fname = document.getElementById('first_name').value;
	var lname = document.getElementById('last_name').value;
	var p_id = document.getElementById('property_id').value;
	var p_name = document.getElementById('property_name').value;
	var email = document.getElementById('emaiID').value;
	var phone = document.getElementById('phone').value;
	var add_1 = document.getElementById('address_line_1').value;
	var add_2 = document.getElementById('address_line_2').value;
	var city = document.getElementById('city').value;
	var state = document.getElementById('state').value;
	var p_code = document.getElementById('postal_code').value;  
	var source = document.getElementById('source').value; 

	if (source == 'd2d') {
        if( fname=="" || lname=="" || email=="" || phone=="" || add_1=="" || city=="" || state=="" || p_code=="" ) {
            checkVal=false;
            openModal('incomp_data');
            scLinkTrackID(source+' incomp_data');
        } else {
            checkVal=true;
        }
    } else if (fname=="" || lname=="" || p_id =="" || email=="" || phone=="" || add_1=="" || city=="" || state=="" || p_code=="") {
        checkVal=false;
        openModal('incomp_data');
    } else {
        checkVal=true;
    }
    if(checkVal ==true){
    	var uuid = create_UUID();
    	var formData = {
    	          "visitorid": "NES0Xl8KCF3WtQYeae28mMBWQ%3D%3D",
    	          "uuid":uuid,
    	          "addr_1": add_1,
    	          "addr_2": add_2,
    	          "addr_id": "",
    	          "app_id": "",
    	          "businessname": "",
    	          "city": city,
    	          "comments": "",
    	          "contact_phone": "",
    	          "create_date": "",
    	          "cust_first_name": fname,
    	          "cust_last_name": lname,
    	          "email": email,
    	          "existing_customer": "",
    	          "global_session_id": "",
    	          "is_dsl_need": "",
    	          "is_dtv_need": "",
    	          "is_fdv_need": "",
    	          "is_fttp_need": "",
    	          "is_ftv_need": "",
    	          "is_onebill_need": "",
    	          "is_vasip_need": "",
    	          "modify_timestamp": "",
    	          "notify_permission": "",
    	          "nsi_ind": "",
    	          "property_id": p_id,
    	          "property_name": p_name,
    	          "source": source,
    	          "state": state,
    	          "tel_nbr": "",
    	          "unknown_addr": "",
    	          "vz_phone": phone,
    	          "zip_code": p_code,
    	          "create_date":currentTime
    		}




	if(document.getElementById('permission').checked){
		var apiUrl = "https://api.verizon.com/atomapi/v1/channellookup/channels/futurecustinfo";
		if(window.location.href.indexOf("wwwawssit.ebiz.verizon")>-1){
			apiUrl = "https://api-qa.ebiz.verizon.com/atomapi/v1/channellookup/channels/futurecustinfo";
		}else if(window.location.href.indexOf("www98.verizon")>-1){
			apiUrl = "https://api-qa.ebiz.verizon.com/atomapi/v1/channellookup/channels/futurecustinfo";
		}
		
           //alert(JSON.stringify(formData));
           console.log(formData);
     		$.ajax({
                   type: "POST",
				    url:apiUrl,
				    beforeSend: function (xhr) {
				    	
		                   xhr.setRequestHeader('Authorization', 'Bearer '+document.getElementById('accessToken').value);
                        xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
		                  },
		                   crossDomain: true,
		                   xhrFields: {
		                    withCredentials: true
		                 },
					data: JSON.stringify(formData),
					contentType: "application/json; charset=utf-8",
					dataType: "json",
					async: false,
                    global: false,
					error: function (xhr) {
						console.log("XHR Token",xhr);
					   if(xhr.responseJSON.RequestError.Text.includes("Invalid Access Token!") || xhr.responseJSON.RequestError.Text.includes("Access Token Has Expired" )){
						   resetToken();
                       }
					   else{
							console.log("Errr is occured");
							openModal('modal-2');
							 try{
	                                if(document.getElementById('source').value=='d2d'){
		                            	scLinkTrackID('D2D Form submit error');
		                            }
	                            }catch(e){}
						}
                    },
                    success: function (result) {
                        console.log("sucess");
                        clearD2DForm();
                        openModal('modal_success');
                        try{
                            if(document.getElementById('source').value=='d2d'){
                        		scLinkTrackID('D2D Form registered successfully');
                       		 }
                        }catch(e){}

                    }
                });

		
	}else{
		 openModal('modal_tos');
		 try{
             if(source=='d2d'){
                 scLinkTrackID(source+' tos unchecked');
             }
       }catch(e){}
	}
    }
}

function resetToken(){

	var authUrl ="https://www.verizon.com/content/verizon/personal/services/createauthtoken.oauth.nocache.json?nocache=true";
	if(window.location.href.indexOf("wwwawssit.ebiz.verizon")>-1){
		authUrl = "https://wwwawssit.ebiz.verizon.com/content/verizon/personal/services/createauthtoken.oauth.nocache.json?nocache=true";
	}else if(window.location.href.indexOf("www98.verizon")>-1){
		authUrl = "https://www98.verizon.com/content/verizon/personal/services/createauthtoken.oauth.nocache.json?nocache=true";
	}
	console.log(authUrl);
	$.ajax({
	url:authUrl,
	type : 'GET',
	contentType: 'json',
	success: function (result) {
            document.getElementById('accessToken').value=result.access_token;
            submitPropdetails();

           
    },
    error: function () {
		console.log("Errr is occured");

		
    }});


}

function clearD2DForm(){
	try{
		 document.getElementById('first_name').value="";
		 document.getElementById('last_name').value="";
		 document.getElementById('property_id').value="";
		 document.getElementById('property_name').value="";
		 document.getElementById('emaiID').value="";
		 document.getElementById('phone').value="";
		 document.getElementById('address_line_1').value="";
		 document.getElementById('address_line_2').value="";
		 document.getElementById('city').value="";
		 document.getElementById('state').selectedIndex = 0;
		 document.getElementById('postal_code').value="";   
	}
	catch(e){
		LOG.error("Exception : clearD2DForm", e);
	}
}

//Sanitize and encode all HTML in a user-submitted string to prevent XSS attacks.
var sanitizeHTML = function (str) {
var temp = document.createElement('div');
temp.textContent = str;
return temp.innerHTML;
};
function getCookie(name){
	var dcookie=document.cookie;
	var cname=name + '=';
	var clen=dcookie.length;
	var cbegin=0;
	while (cbegin < clen){
		var vbegin=cbegin + cname.length;
		if(dcookie.substring(cbegin, vbegin)==cname){
			var vend=dcookie.indexOf (';', vbegin);
			if(vend==-1) vend=clen;
			return unescape(dcookie.substring(vbegin, vend));
		}
		cbegin=dcookie.indexOf(' ', cbegin) + 1;
		if(cbegin==0) break;
	}
	return null;
}


function getSubCookie(masterCookieName,subCookieName){
	var cookie = getCookie(masterCookieName);
	if(cookie == null){
		return null;
	}
	var subCookie = cookie.split("&");

	for(var element in subCookie){
	        var subCookieDetails = subCookie[element].split("=");
			if(subCookieDetails[0]==subCookieName && subCookieDetails.length > 1){
				return subCookieDetails[1];
			}
		}

	return null;
}

function deleteCookie(name){
	var domainName=document.domain.indexOf(".verizon.com") != -1 ? ".verizon.com" : "localhost";
	if(getCookie(name) != null){
		if(getCookie(name).length > 0){
			document.cookie = name + "=;path=/;domain="+domainName+";expires=Thu, 01-Jan-1970 00:00:01 GMT;"
		}
	}
}

function deleteSubCookie(masterCookieName,subCookieName){

	var domainName=document.domain.indexOf(".verizon.com") != -1 ? ".verizon.com" : "localhost";
	var cookie = getCookie(masterCookieName);
	if (cookie == null) {
		return true;
	}else{
		var subCookieVal = getSubCookie(masterCookieName,subCookieName);
		if(cookie.indexOf(subCookieName)!=-1){
            		document.cookie=masterCookieName +'='+ cookie + ';path=/;domain='+domainName+";expires=Thu, 01-Jan-1970 00:00:01 GMT;";

			//cookie =cookie.replace(subCookieName+"="+subCookieVal,"");
			//cookie =cookie.replace("&&", "&");
		}
		/*if(cookie!="" && cookie.substring(0,1).equals("&")){
			cookie = cookie.substring(1, value.length());
		}
		if(!subCookieVal.isEmpty() && cookie.substring(cookie.length-1, cookie.length)=="&"){
			cookie = cookie.substring(0, cookie.length-1) ;
		}*/
		return true;
	}
}

function setCookie(b,d,a){
	var e = new Date();
	 var domainName=document.domain.indexOf(".verizon.com") != -1 ? ".verizon.com" : "localhost";
	e.setDate(e.getDate()+a);
	document.cookie=b+"="+escape(d)+";path=/;domain="+domainName+((a==null)?";":";expires="+e.toGMTString())
 }

function SetBusinessunitcookie(businessunit){
	
	var strbusinessUnit = businessunit;
	if(strbusinessUnit == 'wireless'){
		deleteSubCookie('VZ_ATLAS_SITE_PERS','BusinessUnit');
			setMasterCookie('BusinessUnit','wireless',60);
		//window.location.href = "https://www.verizonwireless.com/?intcmp=VZ-GHOME-D-WIRELESS";
		return false;
	}else if(strbusinessUnit == '5GChallenge'){
	
		deleteSubCookie('VZ_ATLAS_SITE_PERS','BusinessUnit');
			setMasterCookie('BusinessUnit','wireless',60);

		return false;
	}else if(strbusinessUnit == 'business'){

		deleteSubCookie('VZ_ATLAS_SITE_PERS','BusinessUnit');
			setMasterCookie('BusinessUnit','business',60);

		//window.location.href = 'https://www.verizon.com/business/gateway/';
		return false;
	}else if(strbusinessUnit == 'residential'){

		deleteSubCookie('VZ_ATLAS_SITE_PERS','BusinessUnit');
			setMasterCookie('BusinessUnit','residential',60);
		     return false;
	}
}

function setMasterCookie(c_name,value,expiredays){

    var domainName=document.domain.indexOf(".verizon.com") != -1 ? ".verizon.com" : "localhost";
    var exdate=new Date();
	var domain = document.domain;
	
    exdate.setDate(exdate.getDate()+expiredays);
    var today = new Date();
    var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
    // var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
    //var currentDate = date+':'+time;
    //var edate = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+(today.getDate()+1);
    //var etime = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
    //var endDate = edate+':'+etime;
    var currentDate = date;

	var master = getCookie("VZ_ATLAS_SITE_PERS");
	if(master==null){
        //deleteCookie('UST');
        var masterCookie=c_name +'='+escape(value);
		//setting master and revisit cookie
        document.cookie = 'VZ_ATLAS_SITE_PERS='+c_name+'='+value+';path=/;domain='+domainName+((expiredays==null) ? ";" : ";expires="+exdate.toGMTString());
        //document.cookie = escape('UST=')+escape(endTime)+'='+escape(currentDate)+"&"+escape(countCookie)+'='+escape(countVal)+escape(';path=/;domain='+domainName+((expiredays==null) ? ";" : ";expires="+exdate.toGMTString()));
	}else{
       if(master.indexOf(c_name+"=")!=-1){
			var start = master.indexOf(c_name+"=");
			var len = start+c_name.length+1;
			var end = master.indexOf("&",len);
			if (end == -1) end = master.length;
			var subcookie = master.substring(start,end);
			master = master.replace(subcookie,"");
			master =master.replace("&&", "&");
			if(master!="" && master.substring(0,1)=="&"){
				master = master.substring(1, master.length);
			}
			if(master!="" && master.substring(master.length-1, master.length)=="&"){
				master = master.substring(0, master.length-1) ;
			}
			if(master==""){
				master=c_name +"="+escape(value);
			}else{
				master=master+"&"+c_name +"="+escape(value);
			}
		}else{
			master=master+"&"+c_name +"="+escape(value);
		}
		document.cookie='VZ_ATLAS_SITE_PERS='+master+';path=/;domain='+domainName+((expiredays==null) ? ";" : ";expires="+exdate.toGMTString());
	}
}


function setUSTCookie(expiredays){
	var domainName=document.domain.indexOf(".verizon.com") != -1 ? ".verizon.com" : "localhost";
	var exdate=new Date();
	exdate.setDate(exdate.getDate()+expiredays);
	var today = new Date();
    var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
    var currentDate = date;
	var countCookie="c";
    var firstVisit="fv";
    var endTime="et";
	var countVal=0;
	
	var userStatusVal=getCookie("UST");
    if(userStatusVal !=null){
     var countVal= getSubCookie("UST",countCookie);
     var endPeriod= getSubCookie("UST",endTime); 
     var revisit="rv";
	        if((currentDate>endPeriod)){
	            countVal++;
	            document.cookie ='UST='+endTime+'='+escape(endPeriod)+"&"+escape(countCookie)+'='+escape(countVal)+"&"+'UT='+escape(revisit)+(';path=/;domain='+domainName+((expiredays==null) ? ";" : ";expires="+exdate.toGMTString()));
	        }else{
	        	countVal++;
	        	document.cookie = 'UST='+endTime+'='+escape(currentDate)+"&"+escape(countCookie)+'='+escape(countVal)+(';path=/;domain='+domainName+((expiredays==null) ? ";" : ";expires="+exdate.toGMTString()));
	        }
     }else{
    	 countVal++;
     	 document.cookie = 'UST='+endTime+'='+escape(currentDate)+"&"+escape(countCookie)+'='+escape(countVal)+(';path=/;domain='+domainName+((expiredays==null) ? ";" : ";expires="+exdate.toGMTString()));
     }
}

$(document).ready(function(){
  if((window.location.href.indexOf("verizonwireless") == -1) && (window.location.href.indexOf("business") == -1) && (window.location.href.indexOf("/home/verizonglobalhome/ghp_landing.aspx") == -1)
		  && (window.location.href.indexOf("/info/landing") == -1) && (window.location.href.indexOf("/info/bridge") == -1)){
        try{
         setUSTCookie(60);
         SetBusinessunitcookie("residential");
        }catch(ex){
          console.log('Exception in setting global cookie' + ex);
        }
   }
   
   //New Cookie Addeed homeinternet for learn pages 
	if ((window.location.href.indexOf("home") > -1) || (window.location.href.indexOf("info") > -1) || (window.location.href.indexOf("inhome") > -1) || (window.location.href.indexOf("sports") > -1 )) {
		try {
			setUSTCookie(60);
			deleteSubCookie('VZ_ATLAS_SITE_PERS', 'BusinessUnit');
			setMasterCookie('BusinessUnit', 'home-internet', 60);
			return false;
		} catch (ex) {
			console.log('Exception in setting global cookie' + ex);
		}
	}
	//New Cookie Addeed homeinternet for learn pages

});


var sanitizeHTML = function (str) {
    	var temp = document.createElement('div');
    	temp.textContent = str;
    	return temp.innerHTML;
    	};
    	
function onLoadMethod() {
    var qsAcctid = fnGetQS('accountid');
    var qsMonNumber = fnGetQS('MON');
    var redirect = "?redirect=test1";
    var redirect2 = "?redirect=test2";
    var fullQString = window.location.search;
    
    	
    if (qsAcctid != 'undefined' && (qsAcctid && qsAcctid.length > 0)) {
      var atlasBID = document.getElementsByClassName('modal_video')[0];
      var queryStrings = location.href.split('?')[1];
      var billvideoURL = '/foryourhome/billview/up/billvideo.aspx?' + queryStrings;
      var atlasDiv = document.createElement('div');
      atlasDiv.id = 'videoContent';
      atlasDiv.innerHTML = "<iframe id='ifrmBillVideo' src=" + billvideoURL + " height='400' width='99%' title='myverizon'></iframe>"
      atlasBID.appendChild(atlasDiv);
      document.getElementsByClassName('billVideo')[0].click();
      setTimeout(function() { 
    	  var len = document.querySelectorAll(".w_modal.vzrf.active");
    	        for(i=1; i< len.length; i++){
    	        len[i].remove();
    	        }
    	        var frame = $("#ifrmBillVideo")[0];
    	        frame.closest(".modal_content").style.height = parseInt(frame.height)+44 +"px";
    	        frame.style.height = parseInt(frame.height)+"px";
    	  }, 2000);
    }

    if (qsMonNumber != 'undefined' && (qsMonNumber && qsMonNumber.length > 0)) {
      var atlasBID = document.getElementsByClassName('modal_video')[0];
      var queryStrings = location.href.split('?')[1];
      var billvideoURL = '/foryourhome/billview/up/SmartVideo.aspx?' + queryStrings;
      var atlasDiv = document.createElement('div');
      atlasDiv.id = 'videoContent';
      atlasDiv.innerHTML = "<iframe id='ifrmBillVideo' src=" + billvideoURL + " height='400' width='99%' title='myverizon'></iframe>"
      atlasBID.appendChild(atlasDiv);
      document.getElementsByClassName('billVideo')[0].click();
      setTimeout(function() { 
    	  var len = document.querySelectorAll(".w_modal.vzrf.active");
    	        for(i=1; i< len.length; i++){
    	        len[i].remove();
    	        }
    	        var frame = $("#ifrmBillVideo")[0];
    	        frame.closest(".modal_content").style.height = parseInt(frame.height)+44 +"px";
    	        frame.style.height = parseInt(frame.height)+"px";
    	  }, 2000);
    }

    if (fullQString == redirect || fullQString == redirect2) {
      openModal('ServicePOPup');
    }


  }

if (window.addEventListener) {
    window.addEventListener('load', onLoadMethod, false);
  } else if (window.attachEvent) {
    window.attachEvent('onload', onLoadMethod);
  }


function fnGetQS(s){
	var strRetval=null;
	if(!s)s='';
	var strQS=window.location.search;
	if(strQS.substring(0,1)=='?'){
	strQS=strQS.substr(1);
	}
	var arrQS=new Array();
	arrQS=strQS.split('&');
	for(var i=0;i<arrQS.length;i++){
	var thisQS='';
	var arrThisQS=new Array();
	arrThisQS=arrQS[i].split('=');
	if(scbTrim(arrThisQS[0]).toLowerCase()==scbTrim(s).toLowerCase()){
	strRetval=unescape(arrThisQS[1]);
	strRetval=strRetval.replace(/\+/g,' ');
	break;
	}
	}
	return strRetval;
}

function scbTrim(str){return str.replace(/^\s+|\s+$/g,'');}

function closeVideo() {
      document.getElementById('ifrmBillVideo').src = ' ';
    }
if(!$){
  $ = jQuery;
}

$(function() {
  var $wrappers = $('.a11y-tooltip'),
   $texttooltipwrappers = $('.a11y-tooltip.text-tooltip'),
   $contents = $('.a11y-tooltip span:first-of-type'),
  tooltipLabel = 'Show Tooltip information',
  target = false,
  tooltip = false,
  title = false,
  userIsTouching = false,
  tooltipArrowPosition,
  targetLeftPostion,
  containerSpace,
  $targets,
  domTarget,
  ttClose = null;

$wrappers.prepend('<a aria-label="'+ tooltipLabel +'" href="#"></a>');
$targets = $('.a11y-tooltip a:first-of-type');
$targets.attr('role','button');
$targets.attr('aria-expanded','false');
$contents.attr('aria-hidden','true');
$contents.attr('tabindex','-1');
$texttooltipwrappers.each(function(){
$(this).find('a:first-of-type').text($(this).attr('data-text'));
});


$targets.on('touchstart', function(e) {
  userIsTouching = true;
});

/*document.addEventListener("touchstart", eventStart, false);

function eventStart(e){
    if((typeof(tooltip) != "undefined") && (tooltip) ){
        tooltip.remove();
    }else{
    }
}*/

$targets.on('mouseenter', function(e) {
  if(!userIsTouching){// touch screens pass mouseenter event after touchstart, we don't want this, we want click
     tooltipOpen(e)
  }
});

$targets.on('mouseleave', function(e) {
  if(!userIsTouching){// touch screens pass mouseenter event after touchstart, we don't want this, we want click
     tooltipClose(e)
  }
});	

$targets.on('click', function(e) {
  if(!$('#tooltip').length) {
      tooltipOpen(e);
  } else{
      tooltipClose(e);
  }
});

$targets.on('keypress', function(e) {
	if(e.keyCode == 13 || e.keyCode == 32){
			e.preventDefault();
			e.target.click();
	}
	
});

var tooltipOpen = function(e) {
  e.stopPropagation();
  e.preventDefault();
  $("#tooltip").remove();
  target = $(e.target);
  domTarget = e.target;
  ttClose = null;
  target.attr('aria-expanded','true');
  tipId = target.next().attr('id');
  tip = target.next().html(); 
  if (e.type === 'click') { // close button is added only for click events and not for mouseHover
	   tooltip = $('<div id="tooltip"><span class="tooltip-arrow"></span><div class="tooltip-content"><button class="tooltip-close" aria-label="Click here or press escape key to close tooltip Information" tabindex="0">&times;</button></div></div>');	   
      
		tooltip.find('.tooltip-content').append(tip);
		target.attr('aria-describedby', tipId);
	   
  } else{
	  tooltip = $('<div id="tooltip"><span class="tooltip-arrow"></span><div class="tooltip-content"></div></div>');
	  tooltip.find('.tooltip-content').html(tip);
  }
  if (!tip || tip == '') {
      return false;
  }  
  //$('body').after(tooltip);
  positionOfToolTipPopUpDiv(tooltip);	// positioning the tool-tip pop up div just before the footer content  
  tooltipInit(tooltip);
  
}

var positionOfToolTipPopUpDiv = function(tooltip) {
	var footerContainerId = document.querySelector('#vz-gf20');
	if (footerContainerId){
		footerContainerId.insertBefore(tooltip.get(0), footerContainerId.firstChild);		
	}else{ //in absence of footer
		$('body').after(tooltip);
	}	
}

var tooltipInit = function(tooltip) {
  
  var viewPortWidth = $(window).width(),
      viewPortHeight = $(window).height(),
      pos_left = target.offset().left + (target.outerWidth() / 2) - (tooltip.outerWidth() / 2),
      pos_top = 0,
      excessive_height = false,
      scroll_left = window.scrollX || window.pageXOffset || document.body.scrollLeft + (document.documentElement && document.documentElement.scrollLeft || 0),
      scroll_top = window.scrollY || window.pageYOffset || document.body.scrollTop + (document.documentElement && document.documentElement.scrollTop || 0),
      target_left = parseInt(domTarget.getBoundingClientRect().left),
      target_top = parseInt(domTarget.getBoundingClientRect().top),
      addClass = '',
      margin = viewPortWidth < 768 ? 15 : 20;

  // position box ABOVE trigger based on target position and bubble height
  if(target_top >= viewPortHeight/2){
    // If tooltip bubble is too tall, try to widen the bubble until it fits without exceeding viewport width
    while(tooltip.outerHeight() > target_top - 20 && tooltip.outerWidth() < viewPortWidth - 40){
      tooltip.width(tooltip.width()+10);
    }
    if(tooltip.outerHeight()> target_top - 20){
      excessive_height = true
    }else{
      pos_top += (scroll_top + target_top - tooltip.outerHeight() - 6);
    }  
  }
  // position box BELOW trigger based on target position and bubble height
  if(target_top < viewPortHeight/2 || excessive_height){
    // If tooltip bubble is too tall, try to widen the bubble until it fits without exceeding viewport width
    while(tooltip.outerHeight()+target_top + 40 > viewPortHeight+scroll_top && tooltip.outerWidth() < viewPortWidth - 40){
      tooltip.width(tooltip.width()+10);
    }
    pos_top += (scroll_top + target_top + 25);
    addClass = 'arrow-top';
  }
  
  // position toward left or right of trigger based on screen position
  pos_left = target_left + 8 - tooltip.outerWidth()/2 ;
  if (tooltip.outerWidth() > (viewPortWidth - 40)) {
      pos_left = (viewPortWidth - tooltip.outerWidth())/2;
  }else if(pos_left < 20){
    pos_left = 20;
  }else if(pos_left + tooltip.outerWidth() > viewPortWidth - 20){
    pos_left = viewPortWidth - 20 - tooltip.outerWidth();
  }

  tooltip.css({
      left: pos_left,
      top: pos_top
  }).addClass(addClass)

  tooltipArrowPosition = target.offset().left - tooltip.offset().left + target.width()/2 - 7;        
  if(tooltipArrowPosition <= 2){
    tooltipArrowPosition = target.width()/2 - 6;
  }

  tooltip.find('.tooltip-arrow').css('left', tooltipArrowPosition);
  if( event.type !== undefined && event.type!== null & event.type!=="mouseover"){
	  //$('#tooltip .tooltip-content').focus();
	  window.toolTipContentTarget = $('#tooltip .tooltip-close');
	  setTimeout('window.toolTipContentTarget.focus()', 10)
	  
  }
  
  $('#tooltip .tooltip-close').on('blur', function(e) {	
		  tooltipClose(e);
	      
  });
  $('#tooltip .tooltip-close').on('click', function(e) {
	     tooltipClose(e); 
  });
  $('#tooltip .tooltip-close').on('keyup', function(e) { 
	if(e.keyCode !== undefined && e.keyCode!== null && (e.keyCode ===27)){ // close the tool tip on press of Escape key
		tooltipClose(e);
	}
	
  });
 
};

	var tooltipClose = function(e) {
	  e.stopPropagation();
	  e.preventDefault();
	  $('#tooltip').remove();
	  if(e.type === 'click' || e.type === 'blur' || (e.keyCode !==null && e.keyCode !==null & (e.keyCode ===27))){
		  $targets.each(function() {
				var attr = $(this).attr('aria-expanded');
				if (typeof attr !== typeof undefined && attr !== false && attr.indexOf("true")>-1) {
					//window.toolTipIconTarget = (this);
					  //setTimeout('window.toolTipIconTarget.focus()', 10)
					this.focus();
					return false;
				}
			});
	  }  
	  $targets.attr('aria-expanded','false');
	  $targets.removeAttr('aria-describedby');	 
	  
	};
});

$(window).load(function(){

for(var i = 0; i < $(".a11y-tooltip span[data-tooltip]").length; i++){
    var currentEle = $(".a11y-tooltip span[data-tooltip]")[i];
    var currentEleAttr = $(currentEle).attr("data-tooltip");
    var migrateValue = $("#"+ currentEleAttr +"")[0].innerHTML;
    $(currentEle).append(migrateValue);
    $(currentEle).attr('id',currentEleAttr);
}
});

try{
    $(window).load(function(){

	if(document.getElementById("addressID") != null && window.pdc_json && window.pdc_json.VzOSEL && window.pdc_json.VzOSEL.isMHFlow && window.pdc_json.VzOSEL.isMHFlow=='Y'){
     var x=JSON.parse(document.getElementById("pdc_json").value);
        var addressObj=x.vzpers;
        if((addressObj != null || addressObj != undefined)){
        	var addr1=addressObj.adr1;
        	var street=addr1.substring(addr1.indexOf(' ',1)+1,addr1.indexOf(' ',addr1.indexOf(' ',1)+1));
			var addr_1=addr1.replace(street, capitalizeFirstLetter(street.toLowerCase()));
			var city = (addressObj.CITY).length>4 ? capitalizeFirstLetter(addressObj.CITY.toLowerCase()) : addressObj.CITY;
            var address=addr_1+" "+city+", "+addressObj.STATE +" "+addressObj.ZIPCODE +'&nbsp;&nbsp;&nbsp;';
            //var address=addressObj.adr1+""+capitalizeFirstLetter(addressObj.CITY.toLowerCase())+","+addressObj.STATE +""+addressObj.ZIPCODE;
            $("#addressID").append(address);



        }

        function capitalizeFirstLetter(string) {
          return string.charAt(0).toUpperCase() + string.slice(1);
        }
    }
     //showHideComp();

});

} catch (err) { }

function showHideComp(){
	try{
		if(window.location.hostname.indexOf("verizon.com")>-1 && document.getElementById("show-adr-comp") !=null){
	       if(window.pdc_json && window.pdc_json.VzOSEL && window.pdc_json.VzOSEL.isMHFlow && window.pdc_json.VzOSEL.isMHFlow=='Y') { 
	        	document.getElementById("show-adr-comp").style.display="block";
			}else{
	        document.getElementById("show-adr-comp").style.display="none";
	    }

		}
	} catch (err) {
		console.log(err);
		}
}

