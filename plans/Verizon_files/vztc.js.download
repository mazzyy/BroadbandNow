var oneBotDataPass={}; 
var careBotFlag=false;
var asappChatData={};
var lpChatUrlConfig={
	"prod":"https://collaborateext.verizon.com",
	"sit":"https://collaborateextst.verizon.com",
	"stg":"https://collaborateextstg.verizon.com"
}
var lpLeMtagConfig={
	"prod":"le-mtaconfig-prod.js",
	"sit":"le-mtaconfig-qa.js",
	"stg":"le-mtaconfig-qa.js"
}
var oneBotFlag=false;
var ccaiBotLoadLibCount = 0;

//Speed test changes...
var downloadSpeed="";
var global_jwt="";
var uploadSpeed="";
		var  isChatInProgress= function(){
			var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
			if(aCky != 'undefined'&&aCky!=null)
			{
				if(aCky=="Y")
				{
					return true;
				}else{
					return false;
				}
			}
			return false;
		};
		var isAgentChatInProgress=function(){
			var flag=false;
			ASAPP('getState', function(state) {
				if(state.isLiveChat==true)
				{
					flag= true;
				}else{
					flag= false;
				}
			});
			return flag;
		};
		var isBotChatInProgress=function(){
		    var botflag=false;
			ASAPP('getState', function(state) {
				if(state.isLiveChat==false&&state.isOpen==true)
				{
					botflag= true;
				}else{
				    botflag= false;
				}
			});
			return botflag;
		};
////////////////////////////////////////
var lpConnectionsDiscountValue = "";

var chatLib = (function(window, document) {	
	var tcDataDefault = {
		"PRODUCTS_VIEWED" : "",
		"PRODUCTS_IN_CART" : "",
		"CART_TOTAL" : "",
		"DISCOUNTS" : "",
		"SEARCH_TERM" : "",
		"ERROR_DETAILS" : "",
		"LOGIN_FAILED" : "",
		"CUSTOMER_DETAILS" : {
			"customerName" : "",				
			"visionAccountId" : "",
			"visionCustomerId" : "",
			"pcan": "",
			"can": "",
			"state":"",
			"btn":"",
			"ban":"",
			"visionId":""
		},
		"EXISTING_CUST_PRODUCTS" : "",
		"MOVES" : "",
		"FIOS_DETAILS" : {
			"fiosReady" : "",
			"quantumEligible" : ""
		},
		"LOCALIZATION_DETAILS" : {
			"address" : "",
			"city" : "",
			"state" : "",
			"zipCode": ""
		},
		"APPLICABLE_PRODUCTS" : "",
		"PRODUCTS_REMOVED" : "",
		"PRODUCTS_ELIGIBLE_FOR_UPGRADE" : "",
		"CHANGE_IN_VALUE" : "",
		"EXISTING_CUST_ADDRESS" : "",
		"MOVE_CUST_ADDRESS" : "",
		"NEW_CUST_ADDRESS" : "",
		"BAN" : "",
		"BTN" : "",
		"STATE" : "",
		"VISIONID": ""
	};
	
	
	var CHAT_DATA_FORMAT = {
		"JSON" : "JSON",
		"XML" : "XML"
	}
	var chatData = {
		"customer-data": {
			"CUSTOMER_DETAILS" : {},
			"FIOS_DETAILS" : {},
			"LOCALIZATION_DETAILS" : {}
		}, 		
		"customer-data-extra": {} 
	};
	
	
	function setASAPPDataPass(name, value){

		try{			
              //--------------ASAPP FLOW BEGINS-------------------------------------------------
              if("downloadSpeed"==name){
              	asappChatData["downloadSpeed"]=value;
              }
              if("uploadSpeed"==name){
              	asappChatData["uploadSpeed"]=value;
              }
			  if(value ==null  || value == '' || value == 'na' || value == 'NA'){
					return;
			  }
	
				if("Customer_State" == name || "state" == name.toLowerCase() || "vzstate" == name.toLowerCase() ){
					asappChatData["state"] = value;
				}
				if("APPLICABLE_SEVICES" == name || "applicable_sevices" == name.toLowerCase()  || "applicableservices" == name.toLowerCase() ||  "EXISTING_SEVICES" == name || "existing_services" == name.toLowerCase() ){
							 var chtProdTypes= value;
							try{
									chtProdTypes=unescape(chtProdTypes);
									chtProdTypes=chtProdTypes.toUpperCase();
									chtProdTypes=chtProdTypes.replace(/ /g,'');
									chtProdTypes=chtProdTypes.replace(/\+/g,'');
									chtProdTypes=chtProdTypes.replace(/\|/g,',');
									chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
									chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
									chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
									chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
								}catch(eex){}
								value=chtProdTypes;

				}
				if("APPLICABLE_SEVICES" == name || "applicable_sevices" == name.toLowerCase() || "applicableservices" == name.toLowerCase()){
						totalAvailable = value;
				}
				if("Customer_Name" == name || "name" == name.toLowerCase()){
					asappChatData["customerName"] = value;
				}
				if("customertype" == name.toLowerCase()) {
					if(value.toLowerCase() == 'con' || value.toLowerCase() == 'residential' ) {
						asappChatData["CustomerType"] = 'Consumer';
					}
				}		
				if("customertype" == name.toLowerCase()){
					 if(value.toLowerCase() == 'bus' ||  value.toLowerCase() == 'business'   ||  value.toLowerCase() == 'smb'    ){
							asappChatData["CustomerType"] = 'S';
						}
				}
				if("lob" == name.toLowerCase()) {
						if(value.toLowerCase() == 'con' ||  value.toLowerCase() == 'residential'  ){
							asappChatData["CustomerType"] = 'C';
						}
						else if(value.toLowerCase() == 'bus' ||  value.toLowerCase() == 'business'  ){
							asappChatData["CustomerType"] = 'S';
						}
				}

				if("visionAccountId" == name || "visionaccountid" == name.toLowerCase()  ){
						asappChatData["visionAccountId"] = value;
				}
				if("visionCustomerId" == name || "visioncustomerid" == name.toLowerCase()  ){
						asappChatData["visionCustomerId"] = value;
				}
				if("Customer_PCAN" == name || "pcan" == name.toLowerCase() ){
						asappChatData["pcan"] = value;
				}
				if("Customer_CAN" == name || "can" == name.toLowerCase()  || "billingcan" == name.toLowerCase() ){
						asappChatData["can"] = value;
				}
				if("Customer_BAN" == name || "ban" == name.toLowerCase() ){
						asappChatData["ban"] = value;
				}
				if("Customer_BTN" == name || "btn" == name.toLowerCase()  || "tn" == name.toLowerCase() ){
						asappChatData["btn"] = value;
				}

				if(null != asappChatData["visionAccountId"]  && null != asappChatData["visionCustomerId"]) {
					asappChatData["VISIONID"] = asappChatData["visionAccountId"] + asappChatData["visionCustomerId"];						
				}
				else {
					if("visionAccountId" == name || "visionaccountid" == name.toLowerCase()  || "visionCustomerId" == name || "visioncustomerid" == name.toLowerCase() ) {
						asappChatData["VISIONID"] = value;
					}
				}	
				if("FiOS Ready" == name || "fios ready" == name.toLowerCase() || "fiosready" == name.toLowerCase() ){
					asappChatData["fiosReady"] = value;
				}

				if("Quantum Eligible" == name || "quantum eligible" == name.toLowerCase() || "quantumeligible" == name.toLowerCase() ){
					asappChatData["quantumEligible"] = value;
				}

				if( "FiOS Self install" == name || "fios self install" == name.toLowerCase() || "fiosselfinstall" == name.toLowerCase() ){
					asappChatData["fiosSelfInstall"] = value;
				}

				if("address" == name || "city" == name || "state" == name || "zipCode" == name) {
					asappChatData[name] = value;
				}	
				if("visionid" == name.toLowerCase() ) {
						name= name.toUpperCase();
				}

				if("pageId" == name || "PageId" == name || "Page-Id" == name || "page-id" == name) {
					if(null != value && value.length > 0) {
						inqSiteID = parseInt(value);
						asappChatData[name] = value;
					}
				}		
				else {
					asappChatData[name] = value;
				}
				//--------------ASAPP FLOW ENDS-------------------------------------------------
		}catch(e){}
	
	}
	
	//APIs to DotCom.
	function setCustomerInfo(name, value) {
			try {
				if(typeof name != 'undefined' && typeof value != 'undefined' && name != null && value != null && name == "VZ_CONNECTIONS_DISCOUNT" && value.toUpperCase() == "Y") {
					lpConnectionsDiscountValue = value;
					createTCCookie("VZ_CONNECTIONS_DISCOUNT", "Y");
				}
			}
			catch(e){ 
				// console.log(e, "error in messaging exclude")
			}
            try{ 		
            	setASAPPDataPass(name, value);
            }catch(e){}		
        //    if(setChatLibIfEnabled()=="L"){	
            try{ 		
            	setLPDataPass(getLPParamName(name), value);
            }catch(e){}	
        //    }
			try{			              
				  if(value ==null  || value == '' || value == 'na' || value == 'NA'){
						return;
				  }		
					if("Customer_State" == name || "state" == name.toLowerCase() || "vzstate" == name.toLowerCase() ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["state"] = value;
					}
					if("APPLICABLE_SEVICES" == name || "applicable_sevices" == name.toLowerCase()  || "applicableservices" == name.toLowerCase() ||  "EXISTING_SEVICES" == name || "existing_services" == name.toLowerCase() ){
								 var chtProdTypes= value;
								try{
										chtProdTypes=unescape(chtProdTypes);
										chtProdTypes=chtProdTypes.toUpperCase();
										chtProdTypes=chtProdTypes.replace(/ /g,'');
										chtProdTypes=chtProdTypes.replace(/\+/g,'');
										chtProdTypes=chtProdTypes.replace(/\|/g,',');
										chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
										chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
										chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
										chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
									}catch(eex){}
									value=chtProdTypes;
	
					}
					if("APPLICABLE_SEVICES" == name || "applicable_sevices" == name.toLowerCase() || "applicableservices" == name.toLowerCase()){
							totalAvailable = value;
					}
					if("Customer_Name" == name || "name" == name.toLowerCase()){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["customerName"] = value;
					}
					if("customertype" == name.toLowerCase()) {
						if(value.toLowerCase() == 'con' || value.toLowerCase() == 'residential' ) {
							chatData["customer-data"]["CustomerType"] = 'Consumer';
						}
					}		
					if("customertype" == name.toLowerCase()){
						 if(value.toLowerCase() == 'bus' ||  value.toLowerCase() == 'business'   ||  value.toLowerCase() == 'smb'    ){
								chatData["customer-data"]["CustomerType"] = 'SMB';
							}
					}
					if("lob" == name.toLowerCase()) {
							if(value.toLowerCase() == 'con' ||  value.toLowerCase() == 'residential'  ){
								chatData["customer-data"]["CustomerType"] = 'Consumer';
							}
							else if(value.toLowerCase() == 'bus' ||  value.toLowerCase() == 'business'  ){
								chatData["customer-data"]["CustomerType"] = 'SMB';
							}
					}
	
					if("visionAccountId" == name || "visionaccountid" == name.toLowerCase()  ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["visionAccountId"] = value;
					}
					if("visionCustomerId" == name || "visioncustomerid" == name.toLowerCase()  ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["visionCustomerId"] = value;
					}
					if("Customer_PCAN" == name || "pcan" == name.toLowerCase() ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["pcan"] = value;
					}
					if("Customer_CAN" == name || "can" == name.toLowerCase()  || "billingcan" == name.toLowerCase() ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["can"] = value;
					}
					if("Customer_BAN" == name || "ban" == name.toLowerCase() ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["ban"] = value;
					}
					if("Customer_BTN" == name || "btn" == name.toLowerCase()  || "tn" == name.toLowerCase() ){
							chatData["customer-data"]["CUSTOMER_DETAILS"]["btn"] = value;
					}
	
					if(null != chatData["customer-data"]["CUSTOMER_DETAILS"]["visionAccountId"]  && null != chatData["customer-data"]["CUSTOMER_DETAILS"]["visionCustomerId"]) {
						chatData["customer-data"]["VISIONID"] = chatData["customer-data"]["CUSTOMER_DETAILS"]["visionAccountId"] + chatData["customer-data"]["CUSTOMER_DETAILS"]["visionCustomerId"];
						chatData["customer-data"]["CUSTOMER_DETAILS"]["VISIONID"] = chatData["customer-data"]["CUSTOMER_DETAILS"]["visionAccountId"] + chatData["customer-data"]["CUSTOMER_DETAILS"]["visionCustomerId"];
					}
					else {
						if("visionAccountId" == name || "visionaccountid" == name.toLowerCase()  || "visionCustomerId" == name || "visioncustomerid" == name.toLowerCase() ) {
							chatData["customer-data"]["VISIONID"] = value;
						}
					}	
					if("FiOS Ready" == name || "fios ready" == name.toLowerCase() || "fiosready" == name.toLowerCase() ){
						chatData["customer-data"]["FIOS_DETAILS"]["fiosReady"] = value;
					}
	
					if("Quantum Eligible" == name || "quantum eligible" == name.toLowerCase() || "quantumeligible" == name.toLowerCase() ){
						chatData["customer-data"]["FIOS_DETAILS"]["quantumEligible"] = value;
					}
	
					if( "FiOS Self install" == name || "fios self install" == name.toLowerCase() || "fiosselfinstall" == name.toLowerCase() ){
						chatData["customer-data"]["FIOS_DETAILS"]["fiosSelfInstall"] = value;
					}
	
					if("address" == name || "city" == name || "state" == name || "zipCode" == name) {
						chatData["customer-data"]["LOCALIZATION_DETAILS"][name] = value;
					}	
					if("visionid" == name.toLowerCase() ) {
							name= name.toUpperCase();
					}
	
					if("pageId" == name || "PageId" == name || "Page-Id" == name || "page-id" == name) {
						if(null != value && value.length > 0) {
							inqSiteID = parseInt(value);
							chatData["customer-data"][name] = value;
						}
					}		
					else {
						chatData["customer-data"][name] = value;
					}
			}catch(e){}
		
	}
	
	function setCustomerInfoExtra(name, value) {
		setCustomerInfo(name, value);
	}
	//ends here...
	
	function addUserCookieDetails(){
		var chat_userInfo = readTCCookieInfo('userinfo');
		if(chat_userInfo != null && chat_userInfo != "" && chat_userInfo.toLowerCase() != "null") {
			if(readTCCookieInfo('islogin') != null && readTCCookieInfo('islogin') != "" && readTCCookieInfo('islogin').toLowerCase() != "null") {
				setCustomerInfo("LOGIN_FLAG", "Yes");
			}
		}
		else
			setCustomerInfo("LOGIN_FLAG", "No");
	}
	
	
	function setDataPass(flag, tcPageId) {
		try{
			addUserCookieDetails();			
		if(true == flag) 
		{
			tcData = mergeProps({}, chatData["customer-data"], chatData["customer-data-extra"]);
			tcData.LOB="VZT";
			//tcData.segmentID='15483104,15847721,15971937';
			//tcData.MULTI_USE_COUPON_APPLICABLE='Y';
			try
			{
				if(tcData !=null){
				     //DMP changes
						 if((typeof tcData.segmentID == 'undefined' ||   tcData.segmentID == null) && typeof _satellite!='undefined'&& _satellite!=null)
						 {
							 var segmentDmpId=_satellite.getVar('dl_aamSegmentId');
							if(typeof segmentDmpId!='undefined'&&segmentDmpId!=null)
							{
								if(segmentDmpId!="nosegid")
						 		{
						 			tcData.segmentID=segmentDmpId;
							 	}
							 }
						  }
					
					if(typeof tcData.globalSessionId == 'undefined' ||   tcData.globalSessionId == null)
					{
						var aTCGlobalSessionId=getdotcomGlobalSessionId();
						try{
								if(aTCGlobalSessionId !=null && aTCGlobalSessionId != "" ){
									tcData.globalSessionId = aTCGlobalSessionId;
								}
						}catch(err){}						
					}
				} 

			}catch(ee){}
				
				
			if (typeof Inq != "undefined" && Inq != null && window.inqFrame && window.inqFrame.Inq && window.inqFrame.Inq.CM && window.inqFrame.Inq.CM.initialized == true)
			{ 		
				 if(tcPageId !=null && tcPageId !="")
				{
					Inq.reinitChat(tcPageId);						
				}else if(typeof inqSiteID != "undefined" && inqSiteID != null && inqSiteID !="") 
				{ 
						//Inq.reinitChat(inqSiteID);	
						Inq.reinitChat(inqSiteID);					
				}else{
					Inq.reinitChat();	
				}				 
			}
		}
		else {
			tcData = mergeProps({}, chatData["customer-data"], chatData["customer-data-extra"]);
			tcData.LOB="VZT";
			//tcData.segmentID='15483104,15847721,15971937';
			//tcData.MULTI_USE_COUPON_APPLICABLE='Y';
			try
			{
				if(tcData !=null){
				     //DMP changes
						 if((typeof tcData.segmentID == 'undefined' ||   tcData.segmentID == null) && typeof _satellite!='undefined'&& _satellite!=null)
						 {
							 var segmentDmpId=_satellite.getVar('dl_aamSegmentId');
							if(typeof segmentDmpId!='undefined'&& segmentDmpId!=null)
							{
								if(segmentDmpId!="nosegid")
						 		{
						 			tcData.segmentID=segmentDmpId;
							 	}
							 }
						  }
					
					if(typeof tcData.globalSessionId == 'undefined' ||   tcData.globalSessionId == null)
					{
						var aTCGlobalSessionId=getdotcomGlobalSessionId();
						try{
								if(aTCGlobalSessionId !=null && aTCGlobalSessionId != "" ){
									tcData.globalSessionId = aTCGlobalSessionId;
								}
						}catch(err){}						
					}
				} 

			}catch(ee){}
		}	
		}catch(e){}
	}
	
	function mergeProps(){
		for(var i=1; i<arguments.length; i++) {
			for(var key in arguments[i]) {
				if(arguments[i].hasOwnProperty(key)) {
					arguments[0][key] = arguments[i][key];
				}
			}
		}
		return arguments[0];
	}		
		
	
	/*
	if no data, wait for 500ms, and do it for 1500, 2000.
	even after no data, call touch commerce.	
	*/
	//APIs for Touch-Commerce.
	function getChatData(dataFormat) {
		var chatDataInfo = null;
		if(null == dataFormat || dataFormat.trim().length == 0) {
			dataFormat = CHAT_DATA_FORMAT.JSON;
		}
		
		if("JSON" == CHAT_DATA_FORMAT[dataFormat]) {
			chatDataInfo = getJSONData();
		}
		else if("XML" == CHAT_DATA_FORMAT[dataFormat]) {		
			chatDataInfo = getXMLData();
		}		
		return chatDataInfo;
	}
	//ends here...
	
	//Utility functions...
	function getXMLData() {		
		/*
		* 	<chat-data>
				<name>girig</name>
				<btn>1234567890</btn>
				<params>
					<param>	
						<name>others</name><value>Learn</value>
					</param>
				</params>
			</chat-data>"
		*/
	
		var customerXMLData = "<chat-data>";
		var customerData = chatData["customer-data"];
		if(null != customerData) {
			for (var key in customerData) {
				if (customerData.hasOwnProperty(key)) {
					customerXMLData += "<" + key + ">" + encodeURIComponent( customerData[key] ) + "</" + key + ">";
				}
			}		
		}
		
		var customerDataExtra = chatData["customer-data-extra"];
		var params = "";
		if(null != customerDataExtra) {
			params = "<params>";
			for (var key in customerDataExtra) {
				if (customerDataExtra.hasOwnProperty(key)) {
					params += "<param><name>" + key + "</name><value>" + encodeURIComponent( customerDataExtra[key] ) + "</value></param>";
				}
			}		
			params += "</params>";
		}
		
		customerXMLData += params;
		customerXMLData += "</chat-data>";
		return customerXMLData;
		
	}
	function getJSONData() {
		return chatData;
	}
	
	String.prototype.trim = function() {
		var value = this.replace(/(^\s+)/g, "");
		value = value.replace(/(\s+$)/g, "");
		return value;
	}	
	//ends here...
	
	
	
	return {
		//public methods exposed to clients.
		setCustomerInfo : setCustomerInfo, 				//ChatLib.setCustomerInfo("name", "girig");
		setCustomerInfoExtra : setCustomerInfoExtra, 	//ChatLib.setCustomerInfoExtra("others", "Learn");
		getChatData : getChatData, //ChatLib.getChatData("XML") or ChatLib.getChatData("JSON")
		getASAPPDataPass : getASAPPDataPass,
		setDataPass: setDataPass
		//ends here...
	}
})(window, document);



	
	//var chatLib = null;
	var pendingCalls = [];

	var jsLibNameTC = "inqChatLaunch10004593.js";
	var jsLibPathTC = "/chatskins/launch/";

	var jsLibName = "chatlibtc.js";
	var jsLibPath = "/comm/chatlib/";
	//var jsLibPath = "/SayHello/chatlib/";

	//var jqLibName = "jquery-1.7.2.min.js";
	var jqLibName = "jquery-3.4.1.min.js";
	var jqLibPath = "/comm/includes/scripts/jquery/ui/jquery-ui-1.8.20.custom/js/";

	
	//logger info.
	var clientLogServletName = "ClientLogger.serv";
	var clientLogServletPath = "/comm/chat/";
	
	//TC Variables.	
	var inqSiteID = "";//default value...
	var tcData = {};
	var jscheckstatus=0;
	
	var tcHostConfig = {
		"PROD" : "https://verizon.inq.com",
		"NON-PROD": "https://verizon-dev.inq.com"	
	}
	
	var dotComHostConfig = {
			"SIT" : "https://wwwawssit.ebiz.verizon.com",
			"PROD": "https://www.verizon.com",
			"STG": "https://www98.verizon.com"
				
		}
	
	var chatHostConfig = {
		"PROD": "https://collaborateext.verizon.com",
		"SIT": "https://collaborateextst.verizon.com",
		"STG": "https://collaborateextstg.verizon.com"
	}
	
	function getdotcomGlobalSessionId(){
		var aTCGlobalSessionId="";
		try{
		    //var gsid_chat_cookie = ;
            if (typeof readTCCookieInfo('chat_gsid') != 'undefined' && readTCCookieInfo('chat_gsid') != null) {
                aTCGlobalSessionId = readTCCookieInfo('chat_gsid');
            }
			else if(typeof readTCCookieInfo('visitor_id') !='undefined' && readTCCookieInfo('visitor_id') !=null && readTCCookieInfo('visitor_id') != "" ){
				createTCCookie('chat_gsid',readTCCookieInfo('visitor_id'));
				aTCGlobalSessionId=readTCCookieInfo('visitor_id');
			}
			else if(typeof window.digitalData.userProfile.sessionIDs !='undefined' && window.digitalData.userProfile.sessionIDs !=null){
				createTCCookie('chat_gsid',window.digitalData.userProfile.sessionIDs);
				aTCGlobalSessionId=window.digitalData.userProfile.sessionIDs;
			}
			return aTCGlobalSessionId;
			
		}catch(err){}
		
		try{
		    aTCGlobalSessionId= readTCCookieInfo('GlobalSessionID');
			if(typeof aTCGlobalSessionId!='undefined'&&aTCGlobalSessionId!=null)
			{
            	createTCCookie('chat_gsid',aTCGlobalSessionId);
			}
			else if((typeof aTCGlobalSessionId == 'undefined' || aTCGlobalSessionId == null) && readTCCookieInfo('GlobalSessionID_awssit') !=null ){
				aTCGlobalSessionId= readTCCookieInfo('GlobalSessionID_awssit');
				createTCCookie('chat_gsid',aTCGlobalSessionId);
			}
			else if((typeof aTCGlobalSessionId == 'undefined' || aTCGlobalSessionId == null) && readTCCookieInfo('GlobalSessionID_98') !=null ){
				aTCGlobalSessionId= readTCCookieInfo('GlobalSessionID_98');
			    createTCCookie('chat_gsid',aTCGlobalSessionId);
			}			
		}catch(err){}
		return aTCGlobalSessionId;
	}
	
	function checkLoginStatus(){
		try{
			if (typeof Inq != "undefined" && Inq != null && window.inqFrame && window.inqFrame.Inq && window.inqFrame.Inq.CM && window.inqFrame.Inq.CM.initialized == true)
			{ 		
				var customerId=inqFrame.Inq.getCustID();
				var customernt=inqFrame.Inq.getCustIP();
				if(((customerId !=null && customerId != "")||(customernt !=null && customernt !="")) && readTCCookieInfo('CUSTOMER_EXISTS') == null){
				
				var chatData = {
						"session-id" :customerId,
						"customer_nt" :customernt						
						};
				var log = {
						"log-message" : chatData,
						"log-level" : "warn",
						"log-action" : "SAVE_CUST_DATA",
						"LOG-TO-DB" : "true",
						"log-time-stamp" : new Date().getTime()
					};
				var postParams = "log="+JSON.stringify(log);
				getLogStatus(postParams, "updateLoginStatus");
				}else if(readTCCookieInfo('CUSTOMER_EXISTS') == null)
				{
					jscheckstatus++;
					if(jscheckstatus <6){
						setTimeout("checkLoginStatus()",1000);
					}
				}
			}else if(readTCCookieInfo('CUSTOMER_EXISTS') == null)
			{
				jscheckstatus++;
				if(jscheckstatus <6){
					setTimeout("checkLoginStatus()",1000);
				}
			}
			
		}catch(e){}
	}
	
	
	function checkLoginStatusTC(customerId, customerIp, cs, tcSessionId){
		try{
			var sessionChgd=false;
                if(readTCCookieInfo('CUSTOMER_TCSESSION') != null){
						var ssNC=readTCCookieInfo('CUSTOMER_TCSESSION');
						if (ssNC != tcSessionId)
						{
								sessionChgd = true;
						}
				}

				if(((customerId !=null && customerId != "")||(customerIp !=null && customerIp !="")) && readTCCookieInfo('CUSTOMER_EXISTS') == null){
				var chatData = {
						"session-id" :customerId,
						"customer_nt" :customerIp						
						};
				var log = {
						"log-message" : chatData,
						"log-level" : "warn",
						"log-action" : "SAVE_CUST_DATA",
						"LOG-TO-DB" : "true",
						"log-time-stamp" : new Date().getTime()
					};
				var postParams = "log="+JSON.stringify(log);
				getLogStatus(postParams, "updateLoginStatus", customerId, customerIp, cs, tcSessionId);
				}else if(readTCCookieInfo('CUSTOMER_EXISTS') == null)
				{
					jscheckstatus++;
					if(jscheckstatus <6){
						setTimeout("checkLoginStatus()",1000);
					}
				}			
		}catch(e){}
	}
	
	//APIs to DotCom.
	function setCustomerInfo(name, value) {
		/*if(null == chatLib) {
			pendingCalls.push(function() {
				setCustomerInfo(getTCParamName(name),value);
			});
			return;
		}*/
		try {
			if(setChatLibIfEnabled()=="L")
			{
			    chatLib.setCustomerInfo(name, value);	
			}else
			{
			chatLib.setCustomerInfo(getTCParamName(name), value);
			}	
		}
		catch(ex) {}
		
	}
	
	function setExtraCustomerInfo(name, value) {
		/*if(null == chatLib) {
			pendingCalls.push(function() {
				setExtraCustomerInfo(getTCParamName(name),value);
			});
			return;
		}*/
		try {
			chatLib.setCustomerInfoExtra(getTCParamName(name), value);
		}
		catch(ex) {}
	}
	
	/*
	DotCom calls this method, whenever the order details are ready.
	The same would be informed to tc by setting order related tc variables.
	*/
	var inqSalesProducts = null;
	var inqSalesQuantities = null;
	var inqSalesPrices = null;
	var inqClientOrderNum = null;
	var inqSalesProductTypes = null;
	var inqOrderType = null;
	var totalAvailable = null;
	var inqOtherInfo = null;
	
	function chatOrderSubmissionDetails(chatTracVar, aimsOrderObject,isChatAssistedOrder){
		var tcchatLogError="";
				try {
					if(setChatLibIfEnabled()=="L"&&isChatAssistedOrder){
						  lpChatOrderSubmissionDetails(chatTracVar,aimsOrderObject);
					}
		else if(typeof aimsOrderObject != "undefined") {		
			if(null != aimsOrderObject) {
			try{
			inqSalesProducts="";
			inqSalesQuantities="";
			inqSalesPrices="";
			inqClientOrderNum="";
			inqSalesProductTypes="";
			inqOrderType="";
			inqOtherInfo="";
				if(typeof aimsOrderObject.ca != "undefined") {		
					inqSalesProducts = aimsOrderObject.ca;  
					inqSalesProducts=inqSalesProducts.replace(/\|/g,',');
					inqSalesProducts=inqSalesProducts.replace(/-/g, "~");
				}
				if(typeof aimsOrderObject.qn != "undefined") {		
					inqSalesQuantities = aimsOrderObject.qn; 
					try{
					inqSalesQuantities=inqSalesQuantities.replace(/\|/g,',');
					}catch(exx){}
				}
				if(typeof aimsOrderObject.ot != "undefined") {		
					inqOrderType = aimsOrderObject.ot;  
				}
				if(typeof chatTracVar != "undefined"  &&  chatTracVar.indexOf("-" ) !=-1) {	
					try
						{
					    if(chatTracVar.indexOf('MRC=-') != -1 || chatTracVar.indexOf('NRC=-')  ||  chatTracVar.indexOf('TCNRC=-') != -1 || chatTracVar.indexOf('TCMRC=-') != -1){
							chatTracVar=chatTracVar.replace('MRC=-',"MRC=|");	
							chatTracVar=chatTracVar.replace('NRC=-',"NRC=|");	
							chatTracVar=chatTracVar.replace('TCNRC=-',"TCNRC=|");	
							chatTracVar=chatTracVar.replace('TCMRC=-',"TCMRC=|");	
					  }
					  var achttemp =chatTracVar.split('-');
					  var  vchtOtherinfo="";
							for(var i=0; i <achttemp.length; i++)
							{									
									if(achttemp[i] !=null && achttemp[i].indexOf("MRC=") !=-1 && achttemp[i].indexOf("MRC=") ==0 )
										{
											var salesPrice=null;
											salesPrice=achttemp[i].substring(achttemp[i].indexOf("MRC=")+4);
											if(salesPrice !=null && salesPrice.length>0){
												try{
													if(salesPrice.indexOf('|') !=-1){
														salesPrice=salesPrice.replace('|','-');
													}
												salesPrice= parseInt(salesPrice)/100;
												inqSalesPrices=""+salesPrice+"";
												achttemp[i]="MRC="+salesPrice;												
												}catch(eex){}
											}											
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("MON=") !=-1)
										{											
											inqClientOrderNum=achttemp[i].substring(achttemp[i].indexOf("MON=")+4);											
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("PROD_SOLD=") !=-1)
										{
											//inqSalesProductTypes=achttemp[i].substring(achttemp[i].indexOf("PROD_SOLD=")+10);											
											var chtProdTypes=achttemp[i].substring(achttemp[i].indexOf("PROD_SOLD=")+10);	
												try{
												chtProdTypes=unescape(chtProdTypes);
												chtProdTypes=chtProdTypes.toUpperCase();
												chtProdTypes=chtProdTypes.replace(/ /g,'');
												chtProdTypes=chtProdTypes.replace(/\+/g,'');
												chtProdTypes=chtProdTypes.replace(/\|/g,',');
												chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
												chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
												if(chtProdTypes.indexOf('FIOSINTERNET') !=-1 &&  chtProdTypes.length >13 && chtProdTypes.indexOf('FIOSINTERNET')==0 &&  !(chtProdTypes.indexOf('FIOSINTERNET,')==0)){
													chtProdTypes=chtProdTypes.replace('FIOSINTERNET','FIOSINTERNET,');
												}
												}catch(eex){}
												inqSalesProductTypes=	chtProdTypes;			
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("NRC=") !=-1 && achttemp[i].indexOf("NRC=") ==0)
										{
											var salesPrice=null;
											salesPrice=achttemp[i].substring(achttemp[i].indexOf("NRC=")+4);
											if(salesPrice !=null && salesPrice.length>0){
												try{
														if(salesPrice.indexOf('|') !=-1){
															salesPrice=salesPrice.replace('|','-');
													}
												salesPrice= parseInt(salesPrice)/100;
												achttemp[i]="NRC="+salesPrice;
												}catch(eex){}
											}											
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("TCNRC=|") !=-1){
												achttemp[i]=achttemp[i].replace('|','-');
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("TCMRC=|") !=-1 ){
												achttemp[i]=achttemp[i].replace('|','-');
										}
										if(vchtOtherinfo !=""){
											vchtOtherinfo=vchtOtherinfo+"~"+achttemp[i];
										}else{
												vchtOtherinfo=achttemp[i];
										}										
								}
							if(totalAvailable != null) {
								inqOtherInfo = vchtOtherinfo+"~Applicable_Products="+totalAvailable;
							}
							else
								inqOtherInfo = vchtOtherinfo;						
					}catch(e1){}
					if((inqSalesPrices ==null || inqSalesPrices =="" )   && typeof aimsOrderObject.pc != "undefined") {		
							inqSalesPrices = aimsOrderObject.pc;  
					}	
					 if(( inqSalesProductTypes ==null || inqSalesProductTypes ==""  ) && typeof aimsOrderObject.attr1 != "undefined") {		
						 	var chtProdTypes=aimsOrderObject.attr1;  				
												try{
												chtProdTypes=unescape(chtProdTypes);
												chtProdTypes=chtProdTypes.toUpperCase();
												chtProdTypes=chtProdTypes.replace(/ /g,'');
												chtProdTypes=chtProdTypes.replace(/\+/g,'');
												chtProdTypes=chtProdTypes.replace(/\|/g,',');
												chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
												chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
												if(chtProdTypes.indexOf('FIOSINTERNET') !=-1 &&  chtProdTypes.length >13 && chtProdTypes.indexOf('FIOSINTERNET')==0 &&  !(chtProdTypes.indexOf('FIOSINTERNET,')==0)){
													chtProdTypes=chtProdTypes.replace('FIOSINTERNET','FIOSINTERNET,');
												}
												}catch(eex){}
												inqSalesProductTypes=	chtProdTypes;			
								//inqSalesProductTypes = chtProdTypes;
									
					}
				}else
				{
						 if(typeof aimsOrderObject.attr1 != "undefined")
							 {		

							 	var chtProdTypes=aimsOrderObject.attr1;  				
												try{
												chtProdTypes=unescape(chtProdTypes);
												chtProdTypes=chtProdTypes.toUpperCase();
												chtProdTypes=chtProdTypes.replace(/ /g,'');
												chtProdTypes=chtProdTypes.replace(/\+/g,'');
												chtProdTypes=chtProdTypes.replace(/\|/g,',');
												chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
												chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
												if(chtProdTypes.indexOf('FIOSINTERNET') !=-1 &&  chtProdTypes.length >13 && chtProdTypes.indexOf('FIOSINTERNET')==0 &&  !(chtProdTypes.indexOf('FIOSINTERNET,')==0)){
													chtProdTypes=chtProdTypes.replace('FIOSINTERNET','FIOSINTERNET,');
												}
												}catch(eex){}
												inqSalesProductTypes=	chtProdTypes;			
								//inqSalesProductTypes = chtProdTypes;
							}
				}
			}catch(err){}
				reInitTCSubmitOrderDetails();
			}
		}
		}
		catch(ex) { 
			tcchatLogError +="Error in chatOrderSubmissionDetails"+ex.description;
		}
		try{
				var aTCGlobalSessionId="";
				var aTCGlobalSessionId25="";
				try{						
					aTCGlobalSessionId= getdotcomGlobalSessionId();													
					if((typeof aTCGlobalSessionId == 'undefined' || aTCGlobalSessionId == null) && readTCCookieInfo('GlobalSessionID_awssit') !=null ){
						aTCGlobalSessionId= readTCCookieInfo('GlobalSessionID_awssit');
					}
					else if((typeof aTCGlobalSessionId == 'undefined' || aTCGlobalSessionId == null) && readTCCookieInfo('GlobalSessionID_98') !=null ){
						aTCGlobalSessionId= readTCCookieInfo('GlobalSessionID_98');
					}
					if(aTCGlobalSessionId !=null && aTCGlobalSessionId !=""){
						aTCGlobalSessionId=escape(aTCGlobalSessionId);
					}
						
				}catch(err){}

				try{
						aTCGlobalSessionId25= readTCCookieInfo('GlobalSessionID_25');
						if(aTCGlobalSessionId25 !=null){
							aTCGlobalSessionId25=escape(aTCGlobalSessionId25);
						}						
				}catch(err){}
				setTimeout(function() {
					
					var aTCRef=escape(document.referrer);
					if(aTCRef !=null){
						aTCRef=aTCRef.substring(0,100);
					}
                    var ts = new Date().getTime();
                    
                    //Added by girig on 12th May 2017.
                    /*var chatInitiatedPage = "";
                    try {                                                                                                                        
                                    chatInitiatedPage = encodeURIComponent(limitGetUrl(window.location.href));
                    }
                    catch(e) {
                                    chatInitiatedPage = encodeURIComponent(document.referrer);
                    }*/
                    //ends here...
				
					var chatData = {
						"SalesProducts" :inqSalesProducts,
						"SalesQuantities" : inqSalesQuantities,   				
						"SalesPrices" : inqSalesPrices,
						"ClientOrderNum" : inqClientOrderNum,
						"SalesProductTypes" : inqSalesProductTypes,
						"OrderType" : inqOrderType,		
						"ERROR-MESSAGE" : tcchatLogError,		
						"OtherInfo" : inqOtherInfo,						
						"global-session-id" : aTCGlobalSessionId,
						"global-session-id25" : aTCGlobalSessionId25,
						"referrer" : aTCRef
					};
					
					//,"chatInitiatedPage": chatInitiatedPage
					try {
						var log = {
						"log-message" : chatData,
						"log-level" : "warn",
						"log-action" : "ORDER_SUBMISSION",
						"LOG-TO-DB" : "false",
						"log-time-stamp" : new Date().getTime()
					};
					logDetails(log);				
					}catch(e) {
				}			
			}, 200);

		}catch(ex){}
	}

	function callChatOrderConf(isChatAssistedOrder) {
		var tcchatLogError="";
		try {
	if(setChatLibIfEnabled()=="L"&&isChatAssistedOrder){
				lpChatOrderSubmissionDetails(aimsTrackingVar,order);
		  }
		else if(typeof order != "undefined") {		
			if(null != order) {
			try{
			inqSalesProducts="";
			inqSalesQuantities="";
			inqSalesPrices="";
			inqClientOrderNum="";
			inqSalesProductTypes="";
			inqOrderType="";
			inqOtherInfo="";
				if(typeof order.ca != "undefined") {		
					inqSalesProducts = order.ca;  
					inqSalesProducts=inqSalesProducts.replace(/\|/g,',');
					inqSalesProducts=inqSalesProducts.replace(/-/g, "~");
				}
				if(typeof order.qn != "undefined") {		
					inqSalesQuantities = order.qn; 
					try{
					inqSalesQuantities=inqSalesQuantities.replace(/\|/g,',');
					}catch(exx){}
				}
				if(typeof order.ot != "undefined") {		
					inqOrderType = order.ot;  
				}
				if(typeof aimsTrackingVar != "undefined"  &&  aimsTrackingVar.indexOf("-" ) !=-1) {	
					try
						{
					    if(aimsTrackingVar.indexOf('MRC=-') != -1 || aimsTrackingVar.indexOf('NRC=-')  ||  aimsTrackingVar.indexOf('TCNRC=-') != -1 || aimsTrackingVar.indexOf('TCMRC=-') != -1){
							aimsTrackingVar=aimsTrackingVar.replace('MRC=-',"MRC=|");	
							aimsTrackingVar=aimsTrackingVar.replace('NRC=-',"NRC=|");	
							aimsTrackingVar=aimsTrackingVar.replace('TCNRC=-',"TCNRC=|");	
							aimsTrackingVar=aimsTrackingVar.replace('TCMRC=-',"TCMRC=|");	
					  }
					  var achttemp =aimsTrackingVar.split('-');
					  var  vchtOtherinfo="";
							for(var i=0; i <achttemp.length; i++)
							{									
									if(achttemp[i] !=null && achttemp[i].indexOf("MRC=") !=-1 && achttemp[i].indexOf("MRC=") ==0 )
										{
											var salesPrice=null;
											salesPrice=achttemp[i].substring(achttemp[i].indexOf("MRC=")+4);
											if(salesPrice !=null && salesPrice.length>0){
												try{
													if(salesPrice.indexOf('|') !=-1){
														salesPrice=salesPrice.replace('|','-');
													}
												salesPrice= parseInt(salesPrice)/100;
												inqSalesPrices=""+salesPrice+"";
												achttemp[i]="MRC="+salesPrice;												
												}catch(eex){}
											}											
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("MON=") !=-1)
										{											
											inqClientOrderNum=achttemp[i].substring(achttemp[i].indexOf("MON=")+4);											
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("PROD_SOLD=") !=-1)
										{
											//inqSalesProductTypes=achttemp[i].substring(achttemp[i].indexOf("PROD_SOLD=")+10);											
											var chtProdTypes=achttemp[i].substring(achttemp[i].indexOf("PROD_SOLD=")+10);	
												try{
												chtProdTypes=unescape(chtProdTypes);
												chtProdTypes=chtProdTypes.toUpperCase();
												chtProdTypes=chtProdTypes.replace(/ /g,'');
												chtProdTypes=chtProdTypes.replace(/\+/g,'');
												chtProdTypes=chtProdTypes.replace(/\|/g,',');
												chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
												chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
												if(chtProdTypes.indexOf('FIOSINTERNET') !=-1 &&  chtProdTypes.length >13 && chtProdTypes.indexOf('FIOSINTERNET')==0 &&  !(chtProdTypes.indexOf('FIOSINTERNET,')==0)){
													chtProdTypes=chtProdTypes.replace('FIOSINTERNET','FIOSINTERNET,');
												}
												}catch(eex){}
												inqSalesProductTypes=	chtProdTypes;			
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("NRC=") !=-1 && achttemp[i].indexOf("NRC=") ==0)
										{
											var salesPrice=null;
											salesPrice=achttemp[i].substring(achttemp[i].indexOf("NRC=")+4);
											if(salesPrice !=null && salesPrice.length>0){
												try{
														if(salesPrice.indexOf('|') !=-1){
															salesPrice=salesPrice.replace('|','-');
													}
												salesPrice= parseInt(salesPrice)/100;
												achttemp[i]="NRC="+salesPrice;
												}catch(eex){}
											}											
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("TCNRC=|") !=-1){
												achttemp[i]=achttemp[i].replace('|','-');
										}
										else if(achttemp[i] !=null && achttemp[i].indexOf("TCMRC=|") !=-1 ){
												achttemp[i]=achttemp[i].replace('|','-');
										}
										if(vchtOtherinfo !=""){
											vchtOtherinfo=vchtOtherinfo+"~"+achttemp[i];
										}else{
												vchtOtherinfo=achttemp[i];
										}										
								}
								inqOtherInfo = vchtOtherinfo+"~Applicable_Products="+totalAvailable;						
					}catch(e1){}
					if((inqSalesPrices ==null || inqSalesPrices =="" )   && typeof order.pc != "undefined") {		
							inqSalesPrices = order.pc;  
					}	
					 if(( inqSalesProductTypes ==null || inqSalesProductTypes ==""  ) && typeof order.attr1 != "undefined") {		
						 	var chtProdTypes=order.attr1;  				
												try{
												chtProdTypes=unescape(chtProdTypes);
												chtProdTypes=chtProdTypes.toUpperCase();
												chtProdTypes=chtProdTypes.replace(/ /g,'');
												chtProdTypes=chtProdTypes.replace(/\+/g,'');
												chtProdTypes=chtProdTypes.replace(/\|/g,',');
												chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
												chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
												if(chtProdTypes.indexOf('FIOSINTERNET') !=-1 &&  chtProdTypes.length >13 && chtProdTypes.indexOf('FIOSINTERNET')==0 &&  !(chtProdTypes.indexOf('FIOSINTERNET,')==0)){
													chtProdTypes=chtProdTypes.replace('FIOSINTERNET','FIOSINTERNET,');
												}
												}catch(eex){}
												inqSalesProductTypes=	chtProdTypes;			
								//inqSalesProductTypes = chtProdTypes;
									
					}
				}else
				{
						 if(typeof order.attr1 != "undefined")
							 {		

							 	var chtProdTypes=order.attr1;  				
												try{
												chtProdTypes=unescape(chtProdTypes);
												chtProdTypes=chtProdTypes.toUpperCase();
												chtProdTypes=chtProdTypes.replace(/ /g,'');
												chtProdTypes=chtProdTypes.replace(/\+/g,'');
												chtProdTypes=chtProdTypes.replace(/\|/g,',');
												chtProdTypes=chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
												chtProdTypes=chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
												chtProdTypes=chtProdTypes.replace(/DTV/g, "DIRECTTV");
												if(chtProdTypes.indexOf('FIOSINTERNET') !=-1 &&  chtProdTypes.length >13 && chtProdTypes.indexOf('FIOSINTERNET')==0 &&  !(chtProdTypes.indexOf('FIOSINTERNET,')==0)){
													chtProdTypes=chtProdTypes.replace('FIOSINTERNET','FIOSINTERNET,');
												}
												}catch(eex){}
												inqSalesProductTypes=	chtProdTypes;			
								//inqSalesProductTypes = chtProdTypes;
							}
				}
			}catch(err){
					tcchatLogError +="Error in 1111 callChatOrderConf"+err.description;
			}
				reInitTCSubmitOrderDetails();
			}
		}
		}
		catch(ex) { 
			tcchatLogError +="Error in callChatOrderConf"+ex.description;
		}
try{
				var aTCGlobalSessionId=getdotcomGlobalSessionId();
				var aTCGlobalSessionId25="";
				try{
					if(aTCGlobalSessionId !=null && aTCGlobalSessionId !=""){
						aTCGlobalSessionId=escape(aTCGlobalSessionId);
					}
				}catch(err){}
				try{
						aTCGlobalSessionId25= readTCCookieInfo('GlobalSessionID_25');
						if(aTCGlobalSessionId25 !=null){
							aTCGlobalSessionId25=escape(aTCGlobalSessionId25);
						}						
				}catch(err){}
				setTimeout(function() {
					var aTCRef=escape(document.referrer);
					if(aTCRef !=null){
						aTCRef=aTCRef.substring(0,100);
					}
				
					var chatData = {
						"SalesProducts" :inqSalesProducts,
						"SalesQuantities" : inqSalesQuantities,   				
						"SalesPrices" : inqSalesPrices,
						"ClientOrderNum" : inqClientOrderNum,
						"SalesProductTypes" : inqSalesProductTypes,
						"OrderType" : inqOrderType,		
						"ERROR-MESSAGE" : tcchatLogError,		
						"OtherInfo" : inqOtherInfo,						
						"global-session-id" : aTCGlobalSessionId,
						"global-session-id25" : aTCGlobalSessionId25,
						"referrer" : aTCRef
					};
					try {
						var log = {
						"log-message" : chatData,
						"log-level" : "warn",						
     					"log-action" : "ORDER_SUBMISSION",
						"LOG-TO-DB" : "false",
						"log-time-stamp" : new Date().getTime()
					};
					logDetails(log);				
					}catch(e) {
				}			
			}, 200);

		}catch(ex){}
	}	
	
	
	function readTCCookieInfo(cookieName) {
		var cookieValue = null;
		cookieName= cookieName+"=";
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {				
                var cookie = cookies[i].trim();			
                if (cookie.substring(0, cookieName.length) == (cookieName)) {
                    cookieValue = cookie.substring(cookieName.length);
                    break;
                }
            }
        }
        return cookieValue;	
	}
	
	function verifyy() 
	{
		var chatInProgressFlag = false;
		var chatInProgressCookieInfo = readTCCookieInfo("CHAT_IN_PROGRESS");
		if(null != chatInProgressCookieInfo) {
			chatInProgressFlag = ("Y"==chatInProgressCookieInfo) ? true : false;
		}
		
	
		
		if(false == chatInProgressFlag ) {
			return true;
		}
		return false;
	}
function triggerLpReinit(){
	if(!lp_reinit_called)
	{
		setTimeout("reInit()",2000);
	}
}
	if (window.addEventListener) {
		window.addEventListener('load', triggerLpReinit, false); 
				
	} 
	else if (window.attachEvent) {
		window.attachEvent('onload', triggerLpReinit);		
	}
	var lp_reinit_called=false;
	function reInit(aPgId) {
		lp_reinit_called=true;
		if (setChatLibIfEnabled() == "L"&&readTCCookieInfo("lp_jwt_wln")!=null&&readTCCookieInfo("lp_jwt_wln")!=""&&typeof lpTag!='undefined') {
			window.lpTag = window.lpTag || {};
			lpTag.section = document.location.host.indexOf('verizonwireless') > -1 ? ['l1:wireless'] : ['l1:wireline'];
			section_array = document.location.pathname.split('/').filter(Boolean);
			if((null!=readTCCookieInfo("loggedIn")&&(readTCCookieInfo("loggedIn")==true||readTCCookieInfo("loggedIn")=='true'))||(null!=readTCCookieInfo("userinfo")&&readTCCookieInfo("userinfo")!=''))
        	{
        		var filteredValue = window.location.hash.split('#').filter(Boolean)[0]
        		if (null != filteredValue && filteredValue != undefined && filteredValue != ''){
        			filteredValue = filteredValue.replace(/[^a-zA-Z0-9 ]/g, "");
                    section_array.push(filteredValue);
        	    }
        	}
			section_array.forEach(transformLpSectionArray);
			section_array.push("lob:VZT");
			if((null!=readTCCookieInfo("loggedIn")&&(readTCCookieInfo("loggedIn")==true||readTCCookieInfo("loggedIn")=='true'))||(null!=readTCCookieInfo("userinfo")&&readTCCookieInfo("userinfo")!=''))
        	{
				var asKeywordsArray=[];
				var wlnssocookieId="";
				var userInfo="";
			section_array.push("Auth:true");
			try{
				if(readTCCookieInfo("wlnwmssoid")!=null){
					ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid");
					wlnssocookieId="token:"+ssoCookieIdforASAPP;
					asKeywordsArray.push(wlnssocookieId);
				}else if (readTCCookieInfo("wlnwmssoid_sit")!=null)
				{
					ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid_sit");
					wlnssocookieId="token:"+ssoCookieIdforASAPP;
					asKeywordsArray.push(wlnssocookieId);
				}else if (readTCCookieInfo("wlnwmssoid_pprd")!=null){
					ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid_pprd");
					wlnssocookieId="token:"+ssoCookieIdforASAPP;
					asKeywordsArray.push(wlnssocookieId);
				}
			if(readTCCookieInfo("userinfo")!=null)
			{
				userInfo="userprofile:"+readTCCookieInfo("userinfo");
				asKeywordsArray.push(userInfo);
			}
			lpTag.sdes.push({
				type: "searchInfo",
				keywords: asKeywordsArray
			  });
			}catch(e){};
			}
		
			if (window.location.href.indexOf('AmznC2Chat') != -1 && section_array.indexOf("AmznC2Chat") == -1){
				section_array.push("AmznC2Chat");
			}
			lpTag.section = lpTag.section.concat(section_array);
			try {
				if (lpConnectionsDiscountValue.toUpperCase() == "Y"){
					if(typeof readTCCookieInfo('LP_CHAT_IN_PROGRESS') == 'undefined' || readTCCookieInfo('LP_CHAT_IN_PROGRESS') == null || readTCCookieInfo('LP_CHAT_IN_PROGRESS') =='N')
					{
						lp_Global_Hide_Count = 0;
						hideLPChatButtonForGlobal()
						var section = (lpTag && lpTag.section) || [];
						section.push("messagingExclude");
						lpTag.newPage(location.href, {
							section: section,
							sdes: [
							], taglets: {
							}
						});
					}				
				}
			}
			catch(e){ 
				// console.log(e, "error in messaging exclude")
			}
			if (lp_service_activity_array.length>0) {
				var lpSdeArray=new Array();
				var lp_service_activity = {};
				lp_service_activity.type = "service";
				lp_service_activity.service = lp_service_activity_array;
				lpSdeArray.push(lp_service_activity);
				lpTag.sdes.push(lpSdeArray);
			}
			if (lp_lead_array.length>0) {
				var lpSdeArray=new Array();
				var lp_lead = {};
				lp_lead.type = "lead";
				lp_lead.lead = lp_lead_array;
				lpSdeArray.push(lp_lead);
				lpTag.sdes.push(lpSdeArray);
		
			}
			// if (typeof lp_mrktInfo!='undefined'&&!lp_mrktInfo.isEmpty()) {
				// var lpSdeArray=new Array();
				// lpSdeArray.push(lp_mrktInfo);
				// lpTag.sdes.push(lpSdeArray);
			// }
		
			if (lpPersonalAddrObj != "" && lpPersonalJson["personal"]["contacts"][0]["address"]["country"] == "") {
				lpPersonalJson["personal"]["contacts"][0]["address"]["region"] = "primary";
				lpPersonalJson["personal"]["contacts"][0]["address"]["country"] = lpPersonalAddrObj;
			}
		
			if (lpStatusVal != "") {
				lpCtmrInfo["info"]["cstatus"] = lpStatusVal;
			}
			    var lpSdeArray=new Array();
				lpSdeArray.push(lpCtmrInfo);
				lpTag.sdes = lpTag.sdes || [];
				lpTag.sdes.push(lpSdeArray);
			if (lpVisionId != "" && (typeof lpCtmrInfo["info"]["username"] == 'undefined' || lpCtmrInfo["info"]["username"] == "")) {
				auth_ctmrInfo["info"]["userName"] = lpVisionId.replace(/\+/g,'acepl');
			}
// 			auth_sde_array.push(lpPersonalJson);
// 			auth_sde_array.push(auth_ctmrInfo);
			if(readTCCookieInfo("lp_sub_wln")!=null&&readTCCookieInfo('lp_sub_wln')!="")
			{
			    makeLpAjaxCall(auth_sde_array);
			}else{
				if(window.location.href.indexOf('specials') != -1){
					getLpDotComreInitSessionId(reinitGSID);
				}else {
					getLpDotComreInitVisitorId(reinitGSID);
				}
			}
			
					
			if (typeof lp_cart_update_products != 'undefined' && lp_cart_update_products.length > 0) {
				var cart = {};
				cart.type = "cart";
				cart.products = lp_cart_update_products;
				cart.currency = "USD";
				var lpSdeArray=new Array();
				lpSdeArray.push(cart);
				lpTag.sdes = lpTag.sdes || [];
				lpTag.sdes.push(lpSdeArray);
			}
		
			//          setTimeout(function() {
			// // 			lpPersonalJson=JSON.stringify(lpPersonalJson,lpreplaceUndefinedOrNull);
			// 			var lpSdeArray=new Array();
			// 			lpSdeArray.push(lpPersonalJson);
			// 			lpTag.sdes = lpTag.sdes || [];
			//             lpTag.sdes.push(lpSdeArray);
			// 		}, 100);
		
		
		}else if(setChatLibIfEnabled() == "L"&&readTCCookieInfo("lp_jwt_wln")==null&&readTCCookieInfo("lp_jwt_wln")!="")
		{
			if(window.location.href.indexOf('specials') != -1){
				getLpDotComreInitSessionId(reinitGSID);
			}else {
				getLpDotComreInitVisitorId(reinitGSID);
			}
		}
	    else if(loadASAPPComplete==true && setChatLibIfEnabled()=="A"){
			sendASAPPDataPass();
		}else{			
			try{
			if(false == verifyy()) {
				return false;
			}		
	
			var GsamAct=	readTCCookieInfo('vfyh');
			if(GsamAct !=null && (GsamAct=='8' || GsamAct=='8usa'  ||  GsamAct=='8USA'   || (GsamAct.indexOf('gsl=8') != -1))){
				var aCky= readTCCookieInfo("TC_CHAT_IN_PROGRESS");
				if(aCky  ==null  || aCky == '' || aCky == 'N'){
					try{
						document.getElementById('tc-chat-container-01').style.display='none';				
					}catch(e){}
					return;
				}
			}
	
			if(typeof aPgId!= 'undefined' && aPgId !=null ){
				if( aPgId =='38315384'  || aPgId ==38315384){
					aPgId=38374167;
				}			
				if(aPgId =='38144183'  || aPgId ==38144183 || aPgId =='38144184'  || aPgId ==38144184 || aPgId =='38144185'  || aPgId ==38144185 || aPgId =='38144180'  || aPgId ==38144180 || aPgId =='38144132'  || aPgId ==38144132 || aPgId =='38144133'  || aPgId ==38144133 || aPgId =='38144134'  || aPgId ==38144134 || aPgId =='37060825'  || aPgId ==37060825 || aPgId =='36975300'  || aPgId ==36975300 || aPgId =='36485553'  || aPgId ==36485553 || aPgId == '36485581' || aPgId == 36485581 || aPgId == '36975301' || aPgId == 36975301 || aPgId == '36975299' || aPgId == 36975299){
					inqSiteID=aPgId;						
				}else{
					// inqSiteID=aPgId;
					return;
				}
			}
				
			setTimeout(function() {
				chatLib.setDataPass(true, aPgId);
			}, 100);
			}catch(e){}
		}
	}

	function LaunchTCCustomEvent(aCntxt){
		try{
			if(aCntxt !=null && (aCntxt=='VZT-Machine-Learning-Threshold-Reached' || aCntxt.toLowerCase()=='vzt-machine-learning-threshold-reached')){
				setTimeout("triggerMachineLearning()",5000);
			}
		}catch(e){}
	}
	
	

	function triggerMachineLearning(){
			Inq.fireCustomEvent('VZT-Machine-Learning-Threshold-Reached');
	}

	function triggerChatOnOfferDeclined(){
		    try{
					setTimeout("launchChatOnOfferDeclined()",3000);
			}catch(e){}
	}
    
	function launchChatOnOfferDeclined(){
		try{
			Inq.fireCustomEvent('ProjectRestoreOfferDeclined');
		}catch(e){}
	}
//CVC chat (credit failure)
	function refreshTCChat() {
	try {
		if (false == verifyy()) {
			return false;
		}
		if (typeof aimsChatCreditFlow != "undefined" && aimsChatCreditFlow != null && aimsChatCreditFlow == 1) {
			if (setChatLibIfEnabled()=="L") {
				var urc_section_array = (window.lpTag && window.lpTag.section) || [];
// 			var urc_section_array=[];
				if (document.cookie.indexOf("blockInvites_checkout") > -1){
					document.cookie = "blockInvites_checkout"+'=; Max-Age=-99999999;';
				}
				lpAutoClickFlag=false;
				urc_section_array.push('creditfail');
			
					lpTag.newPage(location.href, {
						section: urc_section_array,
						sdes: [lp_error
						], taglets: {
						}
					});
				
			} else {
				inqSiteID = 36745144;
			}

		} else {
			inqSiteID = "";
		}


		setTimeout(function () {
			chatLib.setDataPass(true);
		}, 100);
	} catch (e) { }
}



	function reInitTestPage(aPgId) {	
		try{
		if(false == verifyy()) {
			return false;
		}		

		if(typeof aPgId!= 'undefined' && aPgId !=null){
			inqSiteID=aPgId;
			//return;
		}
		
				
		setTimeout(function() {
			chatLib.setDataPass(false);
		}, 100);
		}catch(e){}
	}

var isInitDone=false;

	function reInitTCSubmitOrderDetails() {	
		try{
		if(false == verifyy() || false == isInitDone) {
			return false;
		}		

		setTimeout(function() {
			chatLib.setDataPass(true);
		}, 100);
		}catch(e){}
	}

	function init() {
				
		isInitDone=true;
		if(false == verifyy()) {
			return false;
		}
		setTimeout(function() {
			chatLib.setDataPass(false);
		}, 100);
	}	
	//ends here...
	
	//APIs for Touch-Commerce.
	function getChatData(dataFormat) {
		/*if(null == chatLib) {
			pendingCalls.push(function() {
				getChatData(dataFormat);
			});
			return;
		}*/	
		return chatLib.getChatData(dataFormat);
	}		
	
	//var TCSSOTimer=null;
	
	function stopTCSSOTimer(){
		try{
			
			
			setTimeout("try{stopSessionTimoutTimer();}catch(e){}", 1000);
			//var url = getDotComHostTC(getHost())+"/foryourhome/ordering/ChatAjax.aspx";
			//var url = "https://sit-signin.verizon.com/sso/authsso/keepSessionAlive.jsp";
			//makeOneWayRequest(url);
			//if(TCSSOTimer ==null){
				//TCSSOTimer=setInterval("makeOneWayRequest('"+url+"');",60000);
			//}
			
		}catch(e){
			//alert(e.description);
		}
		
		
	}
	
	function stopTCSSOTimerRefresh(){
		try{
			
			
			setTimeout("try{stopSessionTimoutTimer();}catch(e){}", 30000);
			//var url = getDotComHostTC(getHost())+"/foryourhome/ordering/ChatAjax.aspx";
			//var url = "https://sit-signin.verizon.com/sso/authsso/keepSessionAlive.jsp";
			//makeOneWayRequest(url);
			//if(TCSSOTimer ==null){
				//TCSSOTimer=setInterval("makeOneWayRequest('"+url+"');",60000);
			//}
			
		}catch(e){
			//alert(e.description);
		}
		
		
	}
	
	
/*	function refreshSSOJSFile(){
		var scriptPathTC = "https://sit-signin.verizon.com/sso/resources/js/sessionAlert.js?cRand="+Math.random();
		var chatLibScriptTagTC = document.createElement('script');
		chatLibScriptTagTC.setAttribute("type", "text/javascript");
		chatLibScriptTagTC.setAttribute("src", scriptPathTC);
		if (chatLibScriptTagTC.readyState) {
			chatLibScriptTagTC.onreadystatechange = function () { 
			if (this.readyState == 'complete' || this.readyState == 'loaded') {
				//alert("TC script loaded successfully");
				//load chat library (bridge).
				//initializeChatLib();
			}
		  };
		} 
		else { 
		  chatLibScriptTagTC.onload = function(){
			//alert("TC script loaded successfully");
			//load chat library (bridge).
			//initializeChatLib();			
		  };
		}
		(document.getElementsByTagName("head")[0] || document.documentElement).appendChild(chatLibScriptTagTC);	
		
	}
	*/
	function startTCSSOTimer(){
		try{	
			setTimeout("try{startSessionTimeoutTimer();}catch(e){}", 10000);						
		}catch(e){
			//alert(e.description);
		}
		
		
	}
	
	function captureCustJourney(){
		var aTCGlobalSessionId=getdotcomGlobalSessionId();
		
		try{
			if(aTCGlobalSessionId !=null && aTCGlobalSessionId !=""){
				aTCGlobalSessionId=escape(aTCGlobalSessionId);
			}
		}catch(err){}

				
		try {
			var aTCRef=escape(document.referrer);
			if(aTCRef !=null){
				aTCRef=aTCRef.substring(0,100);
			}
			
			var aDtURL=escape(top.location.href);
			if(aDtURL !=null){
				aDtURL=aDtURL.substring(0,100);
			}
			
			var chatData = {
					
					"global-session-id" : aTCGlobalSessionId,
					"LOG-TO-DB" : "TRUE",
					"EVENT" : "CUST_JOURNEY",
					"dotcomURL" : aDtURL,
					"referrer" : aTCRef
				};	
						var log = {
						"log-message" : chatData,
						"log-level" : "warn",
						"log-action" : "CUST_JOURNEY",
						"LOG-TO-DB" : "true",
						"log-time-stamp" : new Date().getTime()
						
					};
					logDetails(log);				
			}catch(e) {}
	}

	var createTCCookie = function(name, value) {			
		document.cookie = name+"="+escape(value)+";path=/;";
	};
	var deleteLpCookie = function(name) {	
		document.cookie = name+"=;path=/";
	};
	
	var createTCCookieTime = function(name, value) {			
		document.cookie = name+"="+escape(value)+"; max-age=3600;expires=0; path=/;";
	};
	
	var session = {};
	/******** LISTENERS *******/
	/* Chat Launched Listener Example */
	var chatLaunchedListener = {
		onChatLaunched: function(evt) {
			//alert("Chat Launched: chatID=" + evt.chatID + ", customerID = " + evt.customerID);
			session["chat-session-id"] = evt.chatID;
			session["chat-customer-id"] = evt.customerID;
			session["local-time-stamp"] = new Date().getTime();
            //On 16th Aug. 2017 - to capture logged-in user cookie info.
            try {
                  var userInfoCookie = readTCCookieInfo("userinfo");
                  if(null != userInfoCookie) {
                         session["customer-cookie"] = userInfoCookie;
                         var log = {
                                       "log-message" : session,
                                       "log-level" : "warn",
                                       "log-action" : "SAVE_CUSTOMER_COOKIE",
                                       "LOG-TO-DB" : "true",
                                       "log-time-stamp" : new Date().getTime()
                         };
                         logDetails(log);
                         //var postParams = "log="+JSON.stringify(log);                         
                         //saveUserInfoDataTC(postParams);                                                                                
                  }                          
            }
            catch(e) {           
            }                                               
            //ends here...

			//set the cookie TC_CHAT_IN_PROGRESS
			createTCCookie("TC_CHAT_IN_PROGRESS", "Y");			
			stopTCSSOTimer();
			//evts	
			if(typeof chatEventListeners["onChatLaunched"] != "undefined" && typeof chatEventListeners["onChatLaunched"] === "function") {
				chatEventListeners["onChatLaunched"](JSON.stringify(session));
			}
			
		}
	};
	
	/* Chat Closed Event Listener Example */
	var chatClosedListener = {
		onChatClosed: function(evt) {
			var logMsg = "Chat Closed: chatID=" + evt.chatID + ", customerID = " + evt.customerID + ", agentID = " + evt.agentID;
			//remove the cookie TC_CHAT_IN_PROGRESS
			deleteLpCookie("TC_CHAT_IN_PROGRESS");			
			startTCSSOTimer();
			try {
				var log = {
					"log-message" : logMsg,
					"log-level" : "warn",
					"log-action" : "CLOSE_CHAT",
					"LOG-TO-DB" : "false",
					"log-time-stamp" : new Date().getTime()
				};
				logDetails(log);							
			}
			catch(e) {
			
			}
			
			//evts	
			if(typeof chatEventListeners["onChatClosed"] != "undefined" && typeof chatEventListeners["onChatClosed"] === "function") {
				chatEventListeners["onChatClosed"](JSON.stringify(session));
			}
			
		}
	};		
	
	
	/* C2C Displayed Listener Example */
	var c2cDisplayed = {
		onC2CDisplayed: function(evt) {
			//alert("C2C Displayed");
		}
	};
	/* C2C Clicked Listener Example */
	var c2cClickedListener = {
		onC2CClicked: function(evt) {
			//alert("C2C Clicked");
		}
	};

	/* Agent Listener Example */
	var agentListener = {
		onAgentAssigned: function(evt) {
			//alert("agentID=" + evt.agentID + ", agentAttributes=" + evt.agtAttrs + ", buID=" + evt.businessUnitID + ", agentGroupID=" + evt.agentGroupID);
			//0719
			var agentSalesCode = "VZID";
			try {
				if(null != evt.agtAttrs) { 
					var agentAttrs = evt.agtAttrs;
					var agentSalesCodeIdx = agentAttrs.indexOf("agentSalesCode");
					if(agentSalesCodeIdx != -1) {
						var commaIdx = agentAttrs.indexOf(",", agentSalesCodeIdx+1);
						if(commaIdx != -1) {
							agentSalesCode = agentAttrs.substring(agentSalesCodeIdx, commaIdx);
						}
						else {
							agentSalesCode = agentAttrs.substring(agentSalesCodeIdx);
						}			
						//0721
						if(null != agentSalesCode) {
							var eqIdx = agentSalesCode.indexOf("=");
							if(eqIdx != -1) {
								agentSalesCode = agentSalesCode.substring(eqIdx+1);
							}
						}
						//ends here...					
					}
				}							
			}
			catch(e) {
				
			}
			session["agent-sales-code"] = agentSalesCode;						
			//ends here...
			
			session["agent-id"] = evt.agentID;									
			//setAgentInfo(session);		

			//evts	
			if(typeof chatEventListeners["onAgentAssigned"] != "undefined" && typeof chatEventListeners["onAgentAssigned"] === "function") {
				chatEventListeners["onAgentAssigned"](JSON.stringify(session));
			}			
		}
	};

	/* Click to Chat State Changed Example */
	var c2cStateChanged = {
		onC2CStateChanged: function(evt) {
			//alert("C2C State Changed - rule= " + evt.bizRuleName + ", oldstate: " + evt.oldState + ", newstate: " + evt.newState);
		}
	};	
	
	 

	var chatStatusListener = {
	       onChatStatusAlert: function(evt) {
	              //handle evt object here
	              //evt.customerID: the customer ID (string)
	              //evt.customerIP: the customer's IP address (string)
	              //evt.sessionID: the session ID (string)
	              //evt.engagementID: the engagement ID if a chat window is open (string)	              	    	
	    	   checkLoginStatusTC(evt.customerID, evt.customerIP, evt.cs, evt.sessionID);
       }
	};
	
	/* Initialize the Sale Landing Listener
	product: "<string value>, quantity: "<string value> */
	var saleLandingListener = {
		onSaleEvent: function(evt) {
			//alert("Sale Landing: products=" + evt.products + ", quantities = " + evt.quantities);
		}
	};
	
	/* Sale Qualified Event Listener */
	var saleQualifiedListener = {
		onSaleQualifiedEvent: function(evt) {
//			alert("Sale Qualified: chatID=" + evt.chatID + ", customerID = " + evt.customerID + ", agentID = " + evt.agentID + ", bizRuleName = " + evt.bizRuleName);
			try{
			if(typeof session["agent-id"] == 'undefined'  || session["agent-id"] ==null || session["agent-id"] == 'undefined' || session["agent-id"] == ''){
				session["agent-id"] = evt.agentID;
			}
			if(typeof session["chat-session-id"] == 'undefined'  || session["chat-session-id"]==null || session["chat-session-id"] == 'undefined' || session["chat-session-id"] == ''){
				session["chat-session-id"] = evt.chatID;
			}
			if(typeof session["agent-sales-code"] == 'undefined'  || session["agent-sales-code"]==null || session["agent-sales-code"] == 'undefined' || session["agent-sales-code"] == ''){
				session["agent-sales-code"] ="VZID";
			}
			}catch(e){}
			//ends here...
			
			setAgentInfo(session);		
				if( typeof _satellite != 'undefined' && typeof digitalData != 'undefined' && digitalData !=null){
			    	
			    	//--------------------------------------------DTM Integration ----------------------------------------------
			    	
			    	try{

						var ctProp2="residential";
						var ctProp3="learn";	
						var agentId = session["agent-id"];
						if(null != agentId) 
						{
							var atIndex = agentId.indexOf("@");
							if(atIndex != -1) 
								{
									agentId = agentId.substring(0, atIndex);
								}
						}
						
						if (typeof digitalData.page.businessUnit != 'undefined'){
							ctProp2= digitalData.page.businessUnit;
						}
						if (typeof digitalData.page.pageType != 'undefined'){
							ctProp3= digitalData.page.pageType;
						}

				    	var chatUpdateEvent = { 
				    			 eventInfo: 
				    			 { 
				    			 eventName: "pageViewUpdate", 
				    			 type: "interactiveChat", 
				    			 action: "tcChat", 
				    			 timeStamp: new Date(), 
				    			 processed: 
				    			 { 
				    			 adobeAnalytics: false //dtm will change this to true once processed 
				    			 } 
				    			 }, 
				    			 page: 
				    			 { 
				    			 pfxID:"cht",
				    			 pageName: "TCchatwindow", //same value as #hdn_simplepageName 
				    			 detailPageName: "TC initiated chat"+"|"+ctProp2+" _"+ctProp3, //same value as #hdn_detailpageName 
				    			 applicationName: "TouchCommercechat",
								 chatRepID:agentId 
				    			 },
				    			 userProfile:
				    			 {
				    			 profileID:"Chat User "+session["chat-session-id"]+"| EnterpriseID "+agentId
				    			 },	
								 scEvents: "event48" //String of events as in #hdn_events
				    			 }; 

				    			 //Push it onto the event array on digitalData object 
				    			 window.digitalData = window.digitalData || {}; 
	 							 window.digitalData.page.chatRepID= agentId;
				    			 window.digitalData.events = digitalData.events || []; 
				    			 window.digitalData.events.push(chatUpdateEvent); 


				    			 //Create and dispatch an event trigger 
				    			 if (typeof sendCustomEvent !='undefined'){
				    				 sendCustomEvent("pageViewUpdate");
				    			 }else{
				    				 sendCustomEventChat("pageViewUpdate");
				    			 }
				    	}catch(ee){
							//alert(ee.description);
						}
			    	
			    	//--------------------------------------DTM integration end--------------------------------------------------
			    	
			    }else{				
					try{
						//sitecatalyst calls
						var temp_pfxID = s_837.pfxID;
						var temp_simplepageName = s_837.simplepageName;
						var temp_prop5 = s_837.prop5;
						var temp_prop48 = s_837.prop48;
						var temp_detailpageName = s_837.detailpageName;
					    var temp_events=s_837.events;
						var temp_prop3 = s_837.prop3;
						var agentId = session["agent-id"];
						if(null != agentId) 
						{
							var atIndex = agentId.indexOf("@");
							if(atIndex != -1) 
								{
									agentId = agentId.substring(0, atIndex);
								}
						}	
						s_837.pfxID="cht";
						s_837.simplepageName="TCchatwindow";
						s_837.prop5="Chat User "+session["chat-session-id"]+"| EnterpriseID "+agentId;
						s_837.prop48="TouchCommercechat";
						s_837.detailpageName= "TC initiated chat"+"|"+s_837.prop2+" _"+s_837.prop3; 
						s_837.events="event48";
						if(typeof IsAccessoriesCompFlow != 'undefined' && IsAccessoriesCompFlow !=null && (IsAccessoriesCompFlow == true || IsAccessoriesCompFlow.toLowerCase() == 'true')){
								s_837.prop3 = "accessories";
						}
						var s_code=s_837.t();
						setTimeout("resetSiteCatParams('"+temp_pfxID+"','"+temp_simplepageName+"','"+temp_prop5+"','"+temp_prop48+"' ,'"+temp_detailpageName+"' ,'"+temp_prop3+"' ,'"+temp_events+"');",500);
					}catch(e){}
			    }
		}
	};
	

		function sendCustomEventChat(evt) {
		  if (document.createEvent && document.body.dispatchEvent) {
		    var event = document.createEvent('Event');
		    event.initEvent(evt, true, true); //can bubble, and is cancellable
		    document.body.dispatchEvent(event);
		  } else if (window.CustomEvent && document.body.dispatchEvent) {
		    var event = new CustomEvent(evt, {
		      bubbles: true,
		      cancelable: true
		    });
		    document.body.dispatchEvent(event);
		  }
		}


	/* Sold listener example */
	var soldListener = {
		onSoldEvent: function(evt) {
			//alert("Sale Completed: saleID=" + evt.saleID + ", agentID = " + evt.agentID + ", products = " + evt.products + ", quantities = " + evt.quantities);
		}
	};
	
	/* Survey Launch listener example */
	var surveyLaunchListener = {
		onSurveyLaunchEvent: function(evt) {
			//evt.evtType values: LAUNCHED or CLOSED
			//alert("Survey Launched: chatType=" + evt.chatType + ", evtType = " + evt.evtType);			
		}
	};
	
	
	/* Chat Engaged Listener Example */
	var chatEngagedListener = {
		onChatEngagedEvent: function(evt) {
			//evt.chatType values: C2C,POPUP, or PERSISTENT	
			//alert("Chat Engaged: chatID=" + evt.chatID + ", chatType=" + evt.chatType + ", evtType=" + evt.evtType);
		}
	};	
	//ends here...
	/******** END OF LISTENERS *******/
	
	/* register all listeners */
	var InqRegistry = {
		chatListeners: [chatLaunchedListener, chatClosedListener, agentListener],
		listeners: [c2cDisplayed, c2cClickedListener, c2cStateChanged, chatStatusListener],
		saleListeners: [saleLandingListener, saleQualifiedListener, soldListener, surveyLaunchListener, chatEngagedListener]
	};	
	/* end of register all listeners */
	
	function firePendingCalls() {
		if(null != pendingCalls && pendingCalls.length > 0) {
			for(var idx=0; idx < pendingCalls.length; idx++) {
				(pendingCalls[idx])();
			}
		}
	}

	function resetSiteCatParams(stpfxID, stsimplepageName, stprop5, stprop48, stdetailpageName, stprop3, stEvent)
	{
					s_837.pfxID=stpfxID;
					s_837.simplepageName=stsimplepageName;
					s_837.prop5=stprop5;
					s_837.prop48 =  stprop48;
					s_837.detailpageName =  stdetailpageName;
					s_837.events =stEvent;
					s_837.prop3=stprop3;
	}

	function getHost() {
		var chatLibTag = document.getElementById("chatLib");
		var sourceInfo = "";
		var sourceHost = "";
		if(null != chatLibTag) {
			if (chatLibTag.getAttribute.length !== undefined) {
				sourceInfo = chatLibTag.src;
			} else {
				sourceInfo = chatLibTag.getAttribute('src', -1);
			}
			
			if(null != sourceInfo){
				var sourceInfoArr = sourceInfo.split("/");
				if( (sourceInfoArr instanceof Array) && (sourceInfoArr.length >= 2) ){
					sourceHost = sourceInfoArr[0] + "//" + sourceInfoArr[2];
				}
			}			
		}
		else {
			//added a temporary code as per the request.
			if(null != window.location.href && (window.location.href.indexOf("vzrewards.verizon.com") != -1 || window.location.href.indexOf("shop.verizon.com") != -1)) {
				return chatHostConfig["PROD"];
			}
			//ends here...
			
			//added a generic code on 20th July 2017 to handle any urls.
            if (null != document.querySelector) {
                  try {
                         var chatScriptTag = document.querySelector("script[src$='vztc.js']");
                         if(null != chatScriptTag) {
                                var chatScriptSrc = chatScriptTag.src;
                                if(null != chatScriptSrc){
                                       var sourceInfoArr = chatScriptSrc.split("/");
                                       if( (sourceInfoArr instanceof Array) && (sourceInfoArr.length >= 2) ){
                                              sourceHost = sourceInfoArr[0] + "//" + sourceInfoArr[2];
                                              return sourceHost;
                                       }
                                }                    
                         }                                 
                  }
                  catch(e) {
                         //let the below flow continue to identify host based on url.
                  }
            }
            //ends here...
			//Go by URL to identify the host.
			var urlInfo = window.location.href;
			if(null != urlInfo) {			

				if(urlInfo.indexOf("sit-activate") != -1 ||  urlInfo.indexOf("wwwawssit.ebiz.verizon.com") != -1 || urlInfo.indexOf("wwwawsuat.ebiz.verizon.com") != -1 || urlInfo.indexOf("www25.verizon.com") != -1 || urlInfo.indexOf("www26.verizon.com") != -1  || urlInfo.indexOf("www35.verizon.com") != -1 || urlInfo.indexOf("shopawssit.ebiz") != -1) {
					//SIT
					sourceHost = chatHostConfig["SIT"];
				}
				else if(urlInfo.indexOf("stg-") != -1 ||  urlInfo.indexOf("vznspecials") != -1 ||  urlInfo.indexOf("www98.verizon.com") != -1 || urlInfo.indexOf("smallbizrewardstest") != -1  || urlInfo.indexOf("vzrewardstest-stg") != -1  || urlInfo.indexOf("wwwnte1aws") != -1) {
					//STG
					sourceHost = chatHostConfig["STG"];
				}
				else if(urlInfo.indexOf("www.verizon.com") != -1) {
					//PROD
					sourceHost = chatHostConfig["PROD"];
				}
				else {
					//Set the default to PROD.
					//Before setting the default to PROD, check the Environment and set the environment's host accordingly.
					if(urlInfo.indexOf("sit-chat.ebiz.verizon.com") != -1 || urlInfo.indexOf("collaborateextst.verizon.com") != -1) {
						//Just in case if it is accessed from test page in SIT.
						sourceHost = chatHostConfig["SIT"];
					}
					else if(urlInfo.indexOf("stg-chat.ebiz.verizon.com") != -1 || urlInfo.indexOf("collaborateextstg.verizon.com") != -1) {
						//Just in case if it is accessed from test page in STG.
						sourceHost = chatHostConfig["STG"];
					}
					else if(urlInfo.indexOf("chat.ebiz.verizon.com") != -1 || urlInfo.indexOf("collaborateext.verizon.com") != -1) {
						//Just in case if it is accessed from test page in PROD.
						sourceHost = chatHostConfig["PROD"];
					}				
					else {
						//Set the default to PROD.
						sourceHost = chatHostConfig["PROD"];
					}					
				}
			}
			else {
				//Set the default to PROD.
				sourceHost = chatHostConfig["PROD"];
			}
		}		
		
		return sourceHost;
	}


function	updateSalesQualificationDetails(tcaChatID, tcaAgentId, tcaAgentSalesCode, tcaAgentGroupId) {

				if(typeof setChatAgentInfo == 'undefined'){
						var tcchatLogError="";
						var SourceApp="sales-contactus";
						if(typeof IsAccessoriesCompFlow != 'undefined' && IsAccessoriesCompFlow !=null && (IsAccessoriesCompFlow == true || IsAccessoriesCompFlow.toLowerCase() == 'true')){
							SourceApp = "accessories";
						}
						try
						{			
							if(null != tcaAgentId) 
							{
								var atIndex = tcaAgentId.indexOf("@");
								if(atIndex != -1) {
									tcaAgentId = tcaAgentId.substring(0, atIndex);
								}
							}
							
						}
						catch(err) 
						{
			   				tcchatLogError +="Error in setChatAgentInfo"+err.description;
						}
						var aTCGlobalSessionId=getdotcomGlobalSessionId();
						var aTCGlobalSessionId25="";
						try{	
								if(aTCGlobalSessionId !=null && aTCGlobalSessionId !=""){
									aTCGlobalSessionId=escape(aTCGlobalSessionId);
								}
						}catch(err){}
						try{
								aTCGlobalSessionId25= readTCCookieInfo('GlobalSessionID_25');				
								if(aTCGlobalSessionId25 !=null){
										aTCGlobalSessionId25=escape(aTCGlobalSessionId25);
								}			
							}catch(err){}
						setTimeout(function() {
							var aTCRef=escape(document.referrer);							
							if(aTCRef !=null){
								aTCRef=aTCRef.substring(0,100);
							}
							
							var aDtURL=escape(top.location.href);
							if(aDtURL !=null){
								aDtURL=aDtURL.substring(0,100);
							}
							
							var ts = new Date().getTime();
							
							//Added by girig on 12th May 2017.
							/*var chatInitiatedPagechatInitiatedPage = "";
							try {								
								chatInitiatedPage = encodeURIComponent(limitGetUrl(window.location.href));
							}
							catch(e) {
								chatInitiatedPage = encodeURIComponent(document.referrer);
							} */
							//ends here...
							
							var chatData = {
								"chat-session-id" : tcaChatID,
								"agent-Id" : tcaAgentId,
								"agent-sales-code" : tcaAgentSalesCode,
								"agent-group-id" :tcaAgentGroupId,
								"global-session-id" : aTCGlobalSessionId,
								"global-session-id25" : aTCGlobalSessionId25,
								"LOG-TO-DB" : "TRUE",
								"source-app" : SourceApp,
								"lob" : "consumer",
								"chatCompensationFlow":"true",
								"ERROR" : tcchatLogError,
								"EVENT" : "INTERACTIVE_CHAT",
								"dotcomURL" : aDtURL,
								"referrer" : aTCRef
								// "chatInitiatedPage": chatInitiatedPage
							};
							
							//,"chatInitiatedPage": chatInitiatedPage
							
							try {
								//Yet to save into DB.
								var log = {
								"log-message" : chatData,
								"log-level" : "warn",
								"log-action" : "INTERACTIVE_CHAT",
								"LOG-TO-DB" : "true",
								"log-time-stamp" : new Date().getTime()
								};
								logDetails(log);				
							}			
							catch(e) {
					}			
				}, 200);
			}
}
	
	function limitGetUrl(url) {
		var MAX_SIZE = 200;
		var newUrl = url;
		try {
			if(null !=url) {
				var len = url.length;
				if(len > MAX_SIZE) {
					newUrl = url.substring(0, MAX_SIZE);					
				}
			}
		}
		catch(e) {
			throw e;
		}
		return newUrl;
	}
	function setAgentInfo(session) {
	
		var agentId = session["agent-id"];
		var tcchatLogError="";
		try {			
			if(null != agentId) {
				var atIndex = agentId.indexOf("@");
				if(atIndex != -1) {
					agentId = agentId.substring(0, atIndex);
				}
			}
			//0719
			setChatAgentInfo(agentId, session["chat-session-id"], session["agent-sales-code"]);
		}
		catch(err) {
			   		tcchatLogError +="Error in setChatAgentInfo"+err.description;
		}
	    var aTCGlobalSessionId=getdotcomGlobalSessionId();
		var aTCGlobalSessionId25="";

		try{
			if(aTCGlobalSessionId !=null && aTCGlobalSessionId != "" ){
				tcData.globalSessionId = aTCGlobalSessionId;
				aTCGlobalSessionId = escape(aTCGlobalSessionId);
			}
		}catch(err){}

		try{
				aTCGlobalSessionId25= readTCCookieInfo('GlobalSessionID_25');				
					if(aTCGlobalSessionId25 !=null){
							aTCGlobalSessionId25=escape(aTCGlobalSessionId25);
						}			
		}catch(err){}

		setTimeout(function() {
			/*saveAgentInfo();				
			1.	 chatSessionId (primary)
			2.	agentSalesCode
			3.	timestamp
			4.	dotcom map data
			5.	dotcomsessionId
			6.	globalsessionId
			7.	referrer
			*/
	
			var aTCRef=escape(document.referrer);
			if(aTCRef !=null){
				aTCRef=aTCRef.substring(0,100);
			}
			var aDtURL=escape(top.location.href);
			if(aDtURL !=null){
				aDtURL=aDtURL.substring(0,100);
			}
			var ts = new Date().getTime();
			var chatData = {
				"chat-session-id" : session["chat-session-id"],
				"agent-Id" : agentId,
				"agent-sales-code" : session["agent-sales-code"],
				"global-session-id" : aTCGlobalSessionId,
				"global-session-id25" : aTCGlobalSessionId25,
				"LOG-TO-DB" : "TRUE",
				"lob" : "consumer",
				"chatCompensationFlow":"false",
				"ERROR" : tcchatLogError,
				"EVENT" : "INTERACTIVE_CHAT",
				"dotcomURL" : aDtURL,
				"referrer" : aTCRef
			};					
			try {
				//Yet to save into DB.
				var log = {
					"log-message" : chatData,
					"log-level" : "warn",
					"log-action" : "INTERACTIVE_CHAT",
					"LOG-TO-DB" : "true",
					"log-time-stamp" : new Date().getTime()
				};
				logDetails(log);				
			}			
			catch(e) {
			
			}			
		}, 200);
		
	}
	
	//it will be registered with on-load.
	function triggerTouchCommerce(timeInMillis) {
		setTimeout(function() {
			var data = null;
			var chatData = getChatData("JSON");
			if(null != chatData) {
				data = chatData["customer-data"];				
			}
			if(null == data) {
				//If the data is not available after 3 attempts within 2 sec, then call the init();
				if(2000 === timeInMillis) {
					init();
					return;
				}
				//Lets wait for few ms...ex: 0.5 sec, 1 sec and 2 sec.
				timeInMillis = timeInMillis + 500;				
				triggerTouchCommerce(timeInMillis);
				return;
			}
			init();			
		}, timeInMillis);
	}

	//0721
	function setTouchCommerceChatLibIfEnabled() {
		try{
			var aCky= readTCCookieInfo("TC_CHAT_IN_PROGRESS");
			if(aCky  !=null && aCky == 'Y'){
				return true;
			}
		}catch(e){}
		var hashText = location.hash;
		if(loadASAPPDefault ==true || (typeof home_ccai_chat_vendor != 'undefined' && home_ccai_chat_vendor == 'A')){
			 return false;
		}
		
		if(hashText.indexOf( "#enable-tcchat-dev-users") !=-1) {			
			return true;
		}
		
		return false;
	}
	
	//Params config prep for TC
	var paramsMappingConfig = {	
		"aimsSessionId" : ["AIMSSessionID"], 
		"PaperFreeEnrolled" : ["PFBEnrolledProfile"], 
		"AutoPayEnrolled" : ["autopayexistprofile"], 
		"actCode" : ["ActCode"], 
		"BAN": ["BAN", "Customer_BAN", "CustomerBAN", "ban"], 
		"BTN": ["Customer_BTN", "tn", "altbtn", "btn", "tnl", "CustomerBTN"],
		"CAN" :["Customer_CAN", "AccountNumber", "accountNumber", "accountnumber", "billingcan", "CustomerCAN"],		
		"PCAN" : ["Customer_PCAN", "pcan", "CustomerPCAN"],
		"businessAddress" : ["Business_Address"],
		"businessName" : ["Business_Name"],
		"crr" : ["CRR"],
		"customerSavedOrder" : ["CUSTOMER_SAVED_ORDER"],
		"chatType" : ["ChatType"],
		"city" : ["City", "CITY"],
		"coupon" : ["Coupon"],
		"CustomerType" : ["CustomerType", "customerType", "custType", "customerType", "custype"],
		"address": ["Address", "Customer_ServiceAddress", "MOVE_CUST_ADDRESS", "AddressLine1", "Customer_BillingAddress", "CustomerBillingAddress"],
		"state" : ["Customer_State", "state", "vzstate", "STATE", "SPECIAL STATE"],
		"dotcomSessionId" : ["DOTCOM_SESSIONID", "DOTCOMSESSIONID", "dotcomsid"],
		"globalSessionId" : ["GlobalSessionID", "GlobalSessionId", "globalsessionid", "globalSessionID", "GlobalSessionid"],
		"email" : ["email", "Email", "CustomerEmail", "E-mail"],
		"fiosReady": ["FiOSReady", "FiOS Ready", "fiosReady", "fiosready"],
		"fiosSelfInstall": ["FiOSSelfInstall", "selfinstall", "fiosSelfInstall", "FiOS Self install"],
		"guiSessionId": ["GUI_SESSION_ID", "GUISessionId", "GUI_SESSION_ID", "GuiSessionId", "guisessionid"],
		"isTablet": ["isTablet", "IsTablet"],
		"lob": ["lob", "LOB", "lobl", "lobType"],
		"LOB": ["CCPA_LOB"],
		"mon": ["mon", "MON", "MasterOrderNumber", "Master_Order_Number", "ORDER_NUMBER"],
		"name": ["name", "Name", "CustName", "custname", "customerName"],
		"other": ["other", "OTHER"],
		"quantumEligible": ["quantumEligible", "QuantumEligible", "Quantum Eligible", "quantumeligible", "quantumEligible"],
		"questionCategory": ["questCategory", "QuestionCategory", "Category", "FromCenter",	"WorkGroup", "QuestionType", "SupportCategory"],
		"question": ["question", "Question"], 
		"questionCatId": ["questionCatId", "QuestionCategoryId", "questCategoryId"],
		"quet": ["Quet"],
		"quetCatId": ["QuetCatId"],
		"quetCategory": ["QuetCategory"],
		"quetSubCategory": ["QuetSubCategory"],
		"queueId": ["QueueId", "queueId", "Queueid", "queueid"],
		"rbiIndicatory" : ["RBI_Indicator"],
		"salesIndicator": ["salesIndicator"],
		"siDescription": ["SI_Description", "SI_description"],
		"siIssue": ["SI_Issue"],
		"siEligible": ["SI_eligible", "Selfinstall", "selfInstall"],
		"sourcePage": ["Source_PAGE", "SourcePage", "Source_Page", "SOURCE_PAGE", "sourcePage", "sourcepage", "Source Page"],
		"specialState": ["SPECIAL_STATE", "Special_State"],
		"subCategory": ["SUBCATEGORY"],
		"searchTerm": ["SearchTerm"],
		"techScheduled": ["TechScheduled"],
		"userId": ["UserId", "userid"],
		"vodIndicator": ["VOD_Indicator"],
		"verbage": ["Verbage"],
		"visionAccountId": ["VisionAccountId", "visionAccountId", "visionaccountid", "visionaccid"], 
		"visionCustomerId": ["visioncustomerid", "VisioncustomerId", "VisionCustomerID", "VisionCustomerId", "visioncustid"],
		"VISIONID": ["VISIONID", "VisionID", "visionId"],
		"zipCode": ["ZIP_CODE", "ZipCode", "Zipcode", "zipcode", "zip"],
		"addressId": ["addressid", "AddressID", "addressId"],
		"aimsFlow": ["aimsFlow"],
		"aimsUrl": ["aimsUrl"],
		"appId": ["AppID", "appId", "appid"],
		"contactUs": ["contactUs"],
		"contactUsRegistration": ["contactUsRegistration"],
		"customerVerificationFieldName": ["customerVerificationFieldName"],
		"customerVerificationFieldValue": ["customerVerificationFieldValue"],		
		"isMobile": ["isMobile", "isMobileFlow"],
		"lang": ["lang", "language"],
		"mobileGUISession": ["mobileGUISession"], 
		"productCode": ["productcode"],
		"section": ["section"],
		"service": ["service"],
		"FIOSINTERNET": ["FIOS INTERNET"],
		"FiOS": ["FIOS"],
		"FiOSTV": ["FIOSTV", "FIOS TV"],
		"street": ["st"],
		"channel": ["ChName"],
		"applicableServices": ["applicable_services", "APPLICABLE_SEVICES"],
		"loginFlag": ["LoginFlag", "Login_Flag", "LOGIN_FLAG"],
		"CRV_Number": ["CRV_Number", "CRV_NUMBER"],
        "EXISTING_SERVICES": ["EXISTING_SEVICES", "existing_sevices"], 
		"videocktId": ["videocktid", "VideocktId"]		
        
	}

	var tcParamsMap = (function(config) {
		var paramsMap = {};
		try {
			if(null == config) {
				return paramsMap;
			}			
			for(var configKey in config) {
				var configArr = config[configKey];
				if(null != configArr && configArr.length > 0) {
					var arraySize = configArr.length;
					for(var idx=0; idx < arraySize ; idx++) {
						paramsMap[configArr[idx]] = configKey;
					}
				}
			}
		}
		catch(e) {
		
		}
		return paramsMap;
	})(paramsMappingConfig)
	
	function getTCParamName(paramName) {		
		var tcParamName = "";
		if(typeof tcParamsMap == "undefined" || null == tcParamsMap) {
			tcParamName = paramName;
		}else{		
			tcParamName = tcParamsMap[paramName];
		}
		if(null == tcParamName) {
			tcParamName = paramName;
		}					
		return tcParamName;
	}

	//logger.
	var makeOneWayRequest = function(url) {
		var img  = new Image();
		img.src = url;			
	};
	
	function makeAjaxRequest(url, postParams, callback, customerId, customerIp, cs, tcSessionId){
		var xmlhttp = null			
		try{
			if (window.XMLHttpRequest){/* code for IE7+, Firefox, Chrome, Opera, Safari */
				xmlhttp=new XMLHttpRequest();
			}else{/* code for IE6, IE5 */
				xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
			}
			xmlhttp.onreadystatechange=function(){
				if (xmlhttp.readyState==4 && xmlhttp.status ==200 ){
					if(xmlhttp.responseText !=null && (xmlhttp.responseText==true || xmlhttp.responseText=="true"))
					{
						var customerBrowserInfo=inqFrame.Inq.getFullBrowserInfo();
						if(customerBrowserInfo !=null && customerBrowserInfo.indexOf('Windows IE') !=-1){
							createTCCookie("CUSTOMER_EXISTS", "Y");
						}else{
							createTCCookieTime("CUSTOMER_EXISTS", "Y");
						}
						if(cs != true || cs != "true" ){
							Inq.fireCustomEvent("nuanceUCS", { setCS: true });
							Inq.reinitChat();
						}						
						var aTCGlobalSessionId=getdotcomGlobalSessionId();
								try{	
										if(aTCGlobalSessionId !=null && aTCGlobalSessionId !=""){
											aTCGlobalSessionId=escape(aTCGlobalSessionId);
										}
						
								}catch(err){}
						
						var chatData = {
								"customer-id" : customerId,
								"customerIP" : customerIp,
								"customerBrowserInfo" : customerBrowserInfo,
								"customerSessionId" : tcSessionId,
								"aTCGlobalSessionId":aTCGlobalSessionId	
								// "chatInitiatedPage": chatInitiatedPage
							};
						var log = {
								"log-message" : chatData,
								"log-level" : "warn",
								"log-action" : "LOG_REP_DATA",
								"LOG-TO-DB" : "true",
								"log-time-stamp" : new Date().getTime()
								};
								logDetails(log);				
						
					}else{						
						var customerBrowserInfo=inqFrame.Inq.getFullBrowserInfo();
						if(customerBrowserInfo !=null && customerBrowserInfo.indexOf('Windows IE') !=-1){
							createTCCookie("CUSTOMER_EXISTS", "Y");
						}else{
							createTCCookieTime("CUSTOMER_EXISTS", "Y");
						}
						if(cs == true || cs == "true" ){
							Inq.fireCustomEvent("nuanceUCS", { setCS: false });
							Inq.reinitChat();
						}
					}
				}
			}
			xmlhttp.open("POST",url,true);
			if(postParams!=null && typeof postParams!="undefined" ){				
				postParams += "&timestamp=" + new Date().getTime();
				xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				xmlhttp.send(postParams);
			}else{
			    xmlhttp.send();
			}
		}catch(e){			
		}
	}
	
	function callSACData(){
		try {			
            var userInfoCookie = readTCCookieInfo("userinfo");
            if(null != userInfoCookie) {
            	var chatData = {
    					"customer-cookie" :userInfoCookie    						
    					};
                   var log = {
                                 "log-message" : chatData,
                                 "log-level" : "warn",
                                 "log-action" : "CHECK_SAC_DATA",
                                 "LOG-TO-DB" : "true",
                                 "log-time-stamp" : new Date().getTime()
                   };
                   var postParams = "log="+JSON.stringify(log);                         
                   saveUserInfoDataTC(postParams);                                                                                
            }                          
      }
      catch(e) {           
      }          
	}
	
	
	
	function saveUserInfoDataTC(postParams){
		
		var xmlhttp = null			
		var url = getHost() + clientLogServletPath + clientLogServletName; 
		try{
			if (window.XMLHttpRequest){/* code for IE7+, Firefox, Chrome, Opera, Safari */
				xmlhttp=new XMLHttpRequest();
			}else{/* code for IE6, IE5 */
				xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
			}
			xmlhttp.onreadystatechange=function(){
				if (xmlhttp.readyState==4 && xmlhttp.status ==200 ){
					if(xmlhttp.responseText !=null && (xmlhttp.responseText==true || xmlhttp.responseText=="true"))
					{
						setCustomerInfo("SUB_ACCOUNT", 'Y');
						reInit();					
					}
					createTCCookie("CSA_D", "Y");
				}
			}
			xmlhttp.open("POST",url,true);
			if(postParams!=null && typeof postParams!="undefined" ){				
				postParams += "&timestamp=" + new Date().getTime();
				xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				xmlhttp.send(postParams);
			}else{
			    xmlhttp.send();
			}
		}catch(e){			
		}
	}
	
	function getLogStatus(postParams, callback, customerId, customerIp, cs, tcSessionId){
		try {
			var url = getHost() + clientLogServletPath + clientLogServletName; 
			makeAjaxRequest(url,postParams,callback, customerId, customerIp, cs, tcSessionId);
		}			
		catch(e) {	}
	}
	
	function updateLoginStatus(aStatus){
		if(aStatus !=null && (aStatus==true || aStatus=="true")){
			createTCCookie("CUSTOMER_EXISTS", "Y");
		}else{
			createTCCookie("CUSTOMER_EXISTS", "N");
		}
	}
	
	function logDetails(log) {
		try {
			var logString = JSON.stringify(log);
			var url = getHost() + clientLogServletPath + clientLogServletName + "?log="+logString; 
			makeOneWayRequest(url);
		}			
		catch(e) {	}
	}
	
	//evts
	/*
	If the caller interested to consume chat events, they can
	override the events and make use of it.
	*/
	var chatEventListeners = {
		onChatLaunched : function(evt) {},
		onChatClosed: function(evt) {},		
		onAgentAssigned: function(evt) {}
	};	
	
	//0727.
	function initializeJQuery(){
		$ = window.jQuery.noConflict(true);
	}	
	function loadJQueryIfNotAvailable(){
		if (window.jQuery === undefined) {
			var scriptSourceHostJQ = getHost();
			var scriptNameJQ = jqLibName;
			var scriptPathJQ = scriptSourceHostJQ + jqLibPath + scriptNameJQ;
			
			
			
		    var jqScriptTag = document.createElement('script');
		    jqScriptTag.setAttribute("type","text/javascript");

		    jqScriptTag.setAttribute("src", scriptPathJQ);
		    if (jqScriptTag.readyState) {
		    	jqScriptTag.onreadystatechange = function () { // For old versions of IE
		          if (this.readyState == 'complete' || this.readyState == 'loaded') {
		        	  initializeJQuery();
		          }
		      };
		    } else { // Other browsers
		    	jqScriptTag.onload = function(){
		    	  initializeJQuery();
		      };
		    }
		    // Try to find the head, otherwise default to the documentElement
		    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(jqScriptTag);
		}
	}
	
	//loadJQueryIfNotAvailable();
	//ends here...
	
	//initializeChatLib();
	
	/*String.prototype.trim = function() {
		alert(this);
		var value = this.replace(/(^\s+)/g, "");
		value = value.replace(/(\s+$)/g, "");
		return value;
	}*/
	//http://sit-chat.ebiz.verizon.com/chat/chatlib/Chat.js 
	
	function loadTouchCommerceChatLib() {
		if(setChatLibIfEnabled()!='N'){
			return;
		}
	
		//0721
		//If AIMS Chat is enabled, dont load the TC Script.
		
	//runtimeChatLib=0;
	var GsamAct=	readTCCookieInfo('vfyh');
	//alert(readTCCookieInfo("TC_CHAT_IN_PROGRESS"));
	if(GsamAct !=null && (GsamAct=='8' || GsamAct=='8usa'  ||  GsamAct=='8USA'   || (GsamAct.indexOf('gsl=8') != -1))){
		var aCky= readTCCookieInfo("TC_CHAT_IN_PROGRESS");
			if(aCky  ==null  || aCky == '' || aCky == 'N'){
				return;
			}
	 }
	
	try{
		var aCky= readTCCookieInfo("CSA_D");
			if(aCky  ==null || aCky != 'Y'){
				callSACData();
			}
	}catch(ec){}
	
	try{
		var aCky= readTCCookieInfo("CHAT_DISABLED");
			if(aCky  !=null && aCky == 'Y'){
				return;
			}
	}catch(ec){}
	
		try{
		    var aCky_tc= readTCCookieInfo("TC_CHAT_IN_PROGRESS");
			var aCky_ap= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
			if((aCky_tc  ==null || aCky_tc != 'Y') && (aCky_ap  ==null || aCky_ap != 'Y') && null != window.location.href && window.location.href.toLowerCase().indexOf("incid=") != -1 )
			{
				createTCCookie("CHAT_DISABLED", "Y");
				return;
			}
		}catch(ec){}

		if(setChatLibIfEnabled()=="A"||setChatLibIfEnabled()=="L"){
			return;
		}
	/*try{
		var aCky= readTCCookieInfo("CUSTOMER_EXISTS");
			if(aCky  !=null && aCky == 'Y'){
				return;
			}else if (aCky == null){
				setTimeout("checkLoginStatus()",1000);
			}
	}catch(ec){}
	*/
	     
		//ends here...
	
		var scriptSourceHostTC = getHostTC(getHost());
		var scriptNameTC = jsLibNameTC;
		var scriptPathTC = scriptSourceHostTC + jsLibPathTC + scriptNameTC;
		var chatLibScriptTagTC = document.createElement('script');
		chatLibScriptTagTC.setAttribute("type", "text/javascript");
		chatLibScriptTagTC.setAttribute("src", scriptPathTC);
		if (chatLibScriptTagTC.readyState) {
			chatLibScriptTagTC.onreadystatechange = function () { 
			if (this.readyState == 'complete' || this.readyState == 'loaded') {
				//alert("TC script loaded successfully");
				//load chat library (bridge).
				//initializeChatLib();
			}
		  };
		} 
		else { 
		  chatLibScriptTagTC.onload = function(){
			//alert("TC script loaded successfully");
			//load chat library (bridge).
			//initializeChatLib();			
		  };
		}
		(document.getElementsByTagName("head")[0] || document.documentElement).appendChild(chatLibScriptTagTC);	
		var aCky= readTCCookieInfo("TC_CHAT_IN_PROGRESS");
			if(aCky  !=null && aCky == 'Y'){
				stopTCSSOTimerRefresh();
			}else{
				startTCSSOTimer();
			}
			
			try{
				//captureCustJourney();				
			}catch(e){}
			
			startTCEventListeners();
	}

	function getHostTC(hostInfo) {
		var hostTC = tcHostConfig["PROD"];
		if(null == hostInfo) {
			//returning the Prod Url of TC Lib.
			return hostTC; 
		}
		switch(hostInfo) {
			case chatHostConfig["SIT"]:
				hostTC = tcHostConfig["NON-PROD"];
				break;
				
			case chatHostConfig["STG"]:
				hostTC = tcHostConfig["NON-PROD"];
				break;
				
			case chatHostConfig["PROD"]:
				hostTC = tcHostConfig["PROD"];
				break;
		
			default:
				hostTC = tcHostConfig["PROD"];
		}
		return hostTC;		
	}
	
	function getDotComHostTC(hostInfo) {
		var hostTC = dotComHostConfig["PROD"];
		if(null == hostInfo) {
			//returning the Prod Url of TC Lib.
			return hostTC; 
		}
		switch(hostInfo) {
			case chatHostConfig["SIT"]:
				hostTC = dotComHostConfig["SIT"];
				break;
				
			case chatHostConfig["STG"]:
				hostTC = dotComHostConfig["STG"];
				break;
				
			case chatHostConfig["PROD"]:
				hostTC = dotComHostConfig["PROD"];
				break;
		
			default:
				hostTC = dotComHostConfig["PROD"];
		}
		return hostTC;		
	}
	
	function initializeChatLib() {
		var scriptSourceHost = getHost();
		var scriptName = jsLibName;
		var scriptPath = scriptSourceHost + jsLibPath + scriptName;
	    var chatLibScriptTag = document.createElement('script');
	    chatLibScriptTag.setAttribute("type", "text/javascript");
	    chatLibScriptTag.setAttribute("src", scriptPath);
	    if (chatLibScriptTag.readyState) {
			chatLibScriptTag.onreadystatechange = function () { 
	        if (this.readyState == 'complete' || this.readyState == 'loaded') {
				chatLib = window.tcChatLib;
				//alert("Chat Library script loaded successfully");
				firePendingCalls();
			}
	      };
	    } 
		else { 
	      chatLibScriptTag.onload = function(){
	    	  chatLib = window.tcChatLib;
			  //alert("Chat Library script loaded successfully");
			  firePendingCalls();
	      };
	    }
	    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(chatLibScriptTag);
		
	};
	
	function startTCEventListeners() {
		if (window.addEventListener) {
			window.addEventListener('load', triggerTouchCommerce, false); 
			//0721
			window.addEventListener('hashchange', setTouchCommerceChatLibIfEnabled, false);			
		} 
		else if (window.attachEvent) {
			window.attachEvent('onload', triggerTouchCommerce);
			//0721
			window.attachEvent('onhashchange', setTouchCommerceChatLibIfEnabled);			
		}
	}
/*********************************************************************/
/*						ends here...								 */	
/*********************************************************************/
	
/*********************************************************************/
/*						ASAPP Starts here...						*/	
/*********************************************************************/
	
if(window.location.hash.indexOf("enable-asapp-uat-env") !=-1||readTCCookieInfo("CHAT_SET_UAT_HASH")=="Y")
	{
		if(readTCCookieInfo("CHAT_SET_UAT_HASH")==null||typeof readTCCookieInfo("CHAT_SET_UAT_HASH")=='undefined'){
			createTCCookie("CHAT_SET_UAT_HASH", "Y");
		}
	var asappHostConfig = {
			"PROD" : "verizon.asapp.com",
			"SIT": "verizon-demo.test.asapp.com",
			"UAT": "verizon-uat.test.asapp.com"			
		}
	}else{
		var asappHostConfig = {
			"PROD" : "verizon.asapp.com",
			"SIT": "verizon-demo.test.asapp.com",
			"UAT": "verizon.preprod.asapp.com"			
		}
	}
	
	var asappHostURLConfig = {
			"PROD" : "https://sdk.asapp.com",
			"SIT": "https://sdk.uat.asapp.com",
			"UAT": "https://sdk.uat.asapp.com"			
		}
	
	var asappSSOIdConfig = {
			"PROD" : "wlnvztssoid",
			"SIT": "wlnvztssoid_sit",
			"UAT": "wlnvztssoid_pprd"			
		}
	
	var ssoCookieIdforASAPP=null;
	var encrCustIdforASAPP =null;
	var globalSessionIdforASAPP=null;
	var userInfoforASAPP=null;
	var loadASAPPComplete=false;
	var isSubAccount=false;
	
	function getHostASAPP(hostInfo) {
		var hostTC = asappHostConfig["PROD"];
		if(null == hostInfo) {
			//returning the Prod Url of TC Lib.
			return hostTC; 
		}
		switch(hostInfo) {
			case chatHostConfig["SIT"]:
				hostTC = asappHostConfig["SIT"];
				break;
				
			case chatHostConfig["STG"]:
				hostTC = asappHostConfig["UAT"];
				break;
				
			case chatHostConfig["PROD"]:
				hostTC = asappHostConfig["PROD"];
				break;
		
			default:
				hostTC = asappHostConfig["PROD"];
		}
		return hostTC;		
	}
	
	function getASAPPSSOId(hostInfo) {
		var hostTC = asappSSOIdConfig["PROD"];
		if(null == hostInfo) {
			//returning the Prod Url of TC Lib.
			return hostTC; 
		}
		switch(hostInfo) {
			case chatHostConfig["SIT"]:
				hostTC = asappSSOIdConfig["SIT"];
				break;
				
			case chatHostConfig["STG"]:
				hostTC = asappSSOIdConfig["UAT"];
				break;
				
			case chatHostConfig["PROD"]:
				hostTC = asappSSOIdConfig["PROD"];
				break;
		
			default:
				hostTC = asappSSOIdConfig["PROD"];
		}
		return hostTC;		
	}
	
	function getHostASAPPURL(hostInfo) {
		var hostTC = asappHostURLConfig["PROD"];
		if(null == hostInfo) {
			//returning the Prod Url of TC Lib.
			return hostTC; 
		}
		switch(hostInfo) {
			case chatHostConfig["SIT"]:
				hostTC = asappHostURLConfig["SIT"];
				break;
				
			case chatHostConfig["STG"]:
				hostTC = asappHostURLConfig["UAT"];
				break;
				
			case chatHostConfig["PROD"]:
				hostTC = asappHostURLConfig["PROD"];
				break;
		
			default:
				hostTC = asappHostURLConfig["PROD"];
		}
		return hostTC;		
	}
	var ASAPPchatLibValue=null;
	//to bypass till Adobe target 
	function setChatLibIfEnabled() {

		if(window.location.href.indexOf("social/TCSocial")!=-1)
		{
			return "N";
		}
		var lpCht=readTCCookieInfo("LP_CHAT_IN_PROGRESS");
		if(lpCht !=null && lpCht=='Y' ){
			ASAPPchatLibValue="L";
			return "L";
		}
		
		var tcCht=readTCCookieInfo("TC_CHAT_IN_PROGRESS");
		if(tcCht !=null && tcCht=='Y' ){
			ASAPPchatLibValue="N";
			return "N";
		}
		// var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
		// try{			
		// 	if(aCky  !=null && aCky == 'Y'){
		// 		ASAPPchatLibValue= "A";
		// 		return "A";
		// 	}
		// }catch(e){}
		
		var hbChat = window.sessionStorage.getItem("home_bot_sId");
		try{			
			if(hbChat != null && hbChat != ''){
				ASAPPchatLibValue= "B";
				return "B";
			}
		}catch(e){}

		if(ASAPPchatLibValue !=null){
			return ASAPPchatLibValue;
		}
		if(setLpEnabledByDefault()==true || loadLPDefault == true){
			return "L";
		}
		//Speed test changes
		if(typeof isSpeedTestFlow!='undefined'&&isSpeedTestFlow==true)
		{
			return "B";
		}
		/////
		// - do not send to production
		/*if(typeof loadNuanceChatDefault  != "undefined" && loadNuanceChatDefault ==true && (aCky==null || aCky != 'Y' )){
			ASAPPchatLibValue=false;
			return false;
		}*/
		// chat_vendor='L';
		var hashText = location.hash;
		// if(loadASAPPDefault==true || (typeof home_ccai_chat_vendor != 'undefined' && home_ccai_chat_vendor == 'A') || hashText.indexOf( "enable-asapp-dev-users") !=-1){
		// 	ASAPPchatLibValue= "A";
		// 	return "A";
		// }
		if((typeof chat_vendor != 'undefined' && chat_vendor == 'L') || hashText.indexOf( "enable-lp-dev-users") !=-1){
			ASAPPchatLibValue= "L";
			return "L";
		}
		if((typeof home_ccai_chat_vendor != 'undefined' && home_ccai_chat_vendor == 'B') || hashText.indexOf( "enable-one-bot-dev-users") !=-1){
			ASAPPchatLibValue= "B";
			return "B";
		}
		// if(hashText.indexOf( "override-asapp-dev-users") !=-1) {			
		// 	ASAPPchatLibValue= "A";
		// 	return "A";
		// }
		if(typeof home_ccai_chat_vendor== 'undefined'&&careBotFlag==true)
		{
			return "B";
			// return "A";
		}
		if(ASAPPchatLibValue==null){
			ASAPPchatLibValue= "L";
		}
		return "L";
	}

	function setLpEnabledByDefault(){
		if(window.location.href.indexOf('specials') != -1||window.location.href.indexOf('/rnb/') != -1||window.location.href.indexOf('/rb/') != -1)
		{
			return true;
		}
			return false;
	}
	
	
	function isVendorChatInProgress(){
		var tcCht=readTCCookieInfo("TC_CHAT_IN_PROGRESS");
		if(tcCht !=null && tcCht=='Y' ){			
			return true;
		}
		try{			
			var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
			if(aCky  !=null && aCky == 'Y'){				
				return true;
			}
			if(loadASAPPComplete==true && typeof  document.getElementById('asapp-chat-sdk-badge') != 'undefined'){
				return true;
			}
			var hbChat = window.sessionStorage.getItem("home_bot_sId");
			try{			
				if(hbChat != null && hbChat != ''){
					return true;
				}
			}catch(e){}
		}catch(e){}
		return false;
	}
	
	function loadASAPPChatLib(win, doc, hostname, namespace, script) {
		
		if(setChatLibIfEnabled()!="A"){
			return;
		}	
		try{
			var aCky= readTCCookieInfo("CHAT_DISABLED");
				if(aCky  !=null && aCky == 'Y'){
					return;
				}
		}catch(ec){}
		
			try{
			    var aCky_tc= readTCCookieInfo("TC_CHAT_IN_PROGRESS");
			    var aCky_ap= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
				if((aCky_tc  ==null || aCky_tc != 'Y') && (aCky_ap  ==null || aCky_ap != 'Y') && null != window.location.href && window.location.href.toLowerCase().indexOf("incid=") != -1 )
				{
					createTCCookie("CHAT_DISABLED", "Y");
					return;
				}
		}catch(ec){}
		
	    script = doc.createElement('script');
	    win[namespace] = win[namespace] || function() {
	        (win[namespace]._ = win[namespace]._ || []).push(arguments)
	    }
	    win[namespace].Host = hostname;
	    script.async = 1;
	    script.src = hostname + '/chat-sdk.js';
	    script.type = 'text/javascript';
	    doc.head.appendChild(script);	  
	    if(typeof chatbotParams != 'undefined' && chatbotParams!=null){
	    	setTimeout("retrieveInfoASAPP()",1000);	    	
	    }else{
	    	setTimeout("retrieveInfoASAPP()",500);
	    }
	}
	
		var chatIVRAttempt=0;
		var loadASAPPDefault=false;
		
		
	    function reCheckIVRParam(){
	    	if(chatIVRAttempt<10){
	    		chatIVRAttempt++;
	    		setTimeout("retrieveInfoASAPP()",1000);
	    	}
	    	return;
	    }
	
		function startASAPPListeners() {
			if (window.addEventListener) {
				window.addEventListener('load', retrieveInfoASAPP, false); 

			} 
			else if (window.attachEvent) {
				window.attachEvent('onload', retrieveInfoASAPP);
				
			}
		}

		var adobetargetLoadCount=0;
		var loadLPDefault = false;
		(function() {
			
			if (isChatInProgress() == false &&typeof isSpeedTestFlow != 'undefined'&&isSpeedTestFlow == true)
			{
				//disable asapp from loading...
			} else{
				var urlInfo = window.location.href;
				if(null != urlInfo) {	
					urlInfo=urlInfo.toLowerCase();
					if(urlInfo.indexOf("/support/") != -1 ||  urlInfo.indexOf("/support/consumer/") != -1|| urlInfo.indexOf("info/corona-virus/service-and-support") != -1 || urlInfo.indexOf("/register/") != -1 
					|| urlInfo.indexOf("/vzrepair/") != -1 || urlInfo.indexOf("/myaccount/") != -1  || urlInfo.indexOf("/foryourhome/equickpay/") != -1  
					|| urlInfo.indexOf("/ebillpay/") != -1 || urlInfo.indexOf("/billview/") != -1 || urlInfo.indexOf("/foryourhome/fiostv/") != -1
					|| urlInfo.indexOf("/billdetails/") != -1 || urlInfo.indexOf("/mybill/") != -1 || urlInfo.indexOf("/comparebill/") != -1 
					|| urlInfo.indexOf("/myverizon") != -1 || urlInfo.indexOf("/disputebill/") != -1 || urlInfo.indexOf("/expresspay/") != -1
					|| urlInfo.indexOf("/paymentarrangement/") != -1 || urlInfo.indexOf("/paymentmethods/") != -1 
					|| urlInfo.indexOf("/billhistory/") != -1 || urlInfo.indexOf("/downloadbill/") != -1 || urlInfo.indexOf("/payment/") != -1 
					|| urlInfo.indexOf("/paymenthistory/") != -1  ||  urlInfo.indexOf("/autopay/") != -1 || urlInfo.indexOf("/search/") != -1 || urlInfo.indexOf("ssoauth.verizon.com") != -1 || urlInfo.indexOf("secure.verizon.com") != -1) {
						careBotFlag=true;
						home_ccai_chat_vendor = "B";
						/*if(urlInfo.indexOf("/contact-us/") != -1){
							loadASAPPDefault=true;
						}*/
						
						// if(urlInfo.indexOf("/contact-us/") != -1 ){
				//		|| urlInfo.indexOf("/activate.verizon.com/register/loginError") !=-1 
					//	|| urlInfo.indexOf("/stg-activate.verizon.com/register/loginError") !=-1 
						//|| urlInfo.indexOf("/sit-activate.verizon.com/register/loginError") !=-1){
// 							if((location.hash!=""&&location.hash=="#enable-one-bot-dev-users") || (typeof chat_vendor != 'undefined' && chat_vendor != null && chat_vendor.toUpperCase() == 'B'))	
// 							{
								
// 							}else{
// 								loadASAPPDefault=true;
// 							}
						
						// }
						
						if(loadASAPPDefault ==false && typeof home_ccai_chat_vendor == 'undefined' && adobetargetLoadCount<10){
							adobetargetLoadCount++;
							setTimeout("checkAdobeTargetLoadCount()",1000);
						}else{
							decideAndLoadChatVendor();
						}
					}
					else{
						// setTimeout("checkAdobeTargetLoadCount()",1000);
						try {
							chat_vendor = 'L';
						}
						catch(e){}
						loadLPDefault = true;
						decideAndLoadChatVendor();
					}
				}else{
					try {
						chat_vendor = 'L';
					}
					catch(e){}
					loadLPDefault = true;
					decideAndLoadChatVendor();
				}
		}})();
		
function displayRAPChat()
{
//For SelfInstall-ASAPP integration
/*chat_vendor="A";
ASAPPchatLibValue=null; 

if(document.getElementById('tc-chat-anchored-wireline') !=null && document.getElementById('tc-chat-anchored-wireline')!='undefined')
{
document.getElementById('tc-chat-anchored-wireline').style.display = 'none'; 
}

loadASAPPChatLib(window, document, getHostASAPPURL(getHost()), 'ASAPP'); 

if(loadASAPPComplete==true && setASAPPChatLibIfEnabled() && typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true){
		launchASAPPContactusChat();
}


var inter=setInterval(()=>{
if(document.getElementById('asapp-chat-sdk-badge') !=null && document.getElementById('asapp-chat-sdk-badge') !='undefined')
{
clearInterval(inter);
document.getElementById('asapp-chat-sdk-badge').style.display = ''; 
document.getElementById('asapp-chat-sdk-badge').click(); 
}
}
,1000);*/
}
		
		function checkAdobeTargetLoadCount(){
			if(loadASAPPDefault ==false && typeof home_ccai_chat_vendor == 'undefined' && adobetargetLoadCount<15 ){
				adobetargetLoadCount++;
				setTimeout("checkAdobeTargetLoadCount()",1000);
			}else{
				decideAndLoadChatVendor();
			}
		}
		
		//var loadChatVendor=false;
		function decideAndLoadChatVendor(){		
		//	loadChatVendor=true;
			var urlInfo = window.location.href;
 			if(urlInfo.indexOf("verizon.com/privacy/secure") != -1 ) {	
// 			   //This is CCPA Page so make Ajax call here
// 			   checkCCPAHeaders();
// 			   return;
				setCustomerInfo('CCPA_LOB','VZT');
				tcData.LOB='VZT';
				inqSiteID=38442021;
				var btn = document.createElement("div"); 
				btn.id="divchatbot";
				document.body.appendChild(btn);
				//inqSiteID=38442021;
				//event listener registered
				window.addEventListener("message", receiveMessageVZTC, false);
				document.addEventListener('mousedown',function(e){
					var iframeEl = document.querySelectorAll("iframe#chatBotFO")[0]; 
					var ele = document.getElementById('chatBot')
					
						   if(e.target && e.target.id== 'chatBot'){
							   ele.style.cursor = 'all-scroll';
							   
								 var offsetX = e.clientX - parseInt(window.getComputedStyle(ele).left);
								 var offsetY = (e.clientY - parseInt(window.getComputedStyle(ele).top) ) || 0;
								 function mouseMoveHandler(e) {
								   ele.style.top = (e.clientY - offsetY) + 'px';
								   ele.style.left = (e.clientX - offsetX) + 'px';
								 }
							 
								 function reset() {
								   window.removeEventListener('mousemove', mouseMoveHandler);
								   window.removeEventListener('mouseup', reset);
								 }
							 
								 window.addEventListener('mousemove', mouseMoveHandler);
								 window.addEventListener('mouseup', reset);
							}
				});
				enableChatVZTC();
				return;
			 }
			 if (location.href.indexOf("//global//residential")!=-1 || location.href.indexOf("verizonglobalhome/ghp_landing")!=-1){
				if(readTCCookieInfo('LP_CHAT_IN_PROGRESS')!=null&&readTCCookieInfo('LP_CHAT_IN_PROGRESS')=='Y')
				{
					loadLPChatLib(getHostLPURL(getHost()),lpInitCallback);
				}
			 }else{
				loadLPChatLib(getHostLPURL(getHost()),lpInitCallback);
			 }
			loadTouchCommerceChatLib();
// 			if((location.hash!=""&&location.hash=="#enable-one-bot-dev-users") || (typeof chat_vendor != 'undefined' && chat_vendor != null && chat_vendor.toUpperCase() == 'B'))
// 			{
// 				loadOneBotChatLib();
// 			} 
            if ((location.hash!=""&&location.hash=="#enable-asapp-dev-users")||setChatLibIfEnabled()=="A"){
				loadASAPPChatLib(window, document, getHostASAPPURL(getHost()), 'ASAPP');
			}else {
				var hbChat = window.sessionStorage.getItem("home_bot_sId");
				if ((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true)&&hbChat==null) {
                    return;    
		        }
				loadOneBotChatLib();
				// loadASAPPChatLib(window, document, getHostASAPPURL(getHost()), 'ASAPP');
			}
			
		}

// --------------------- ccpa bot code -------------------------

var countvztc=0;
function displayChatBotVZTC()
{
    countvztc++;
    var chaturl="";
	document.getElementById("chatIcon").style.display="none";
	document.getElementById("chatIcon").style.opacity="0";
	document.getElementById("chatBot").style.display="block";
    document.getElementById("chatBot").style.opacity = "1";
	 //var chatBotFO = document.getElementById("chatBotFO");
	 
	chaturl = 'https://www.verizon.com/vzbot/vzbotproxy/web?b=ccp'
	if (window.location.href.indexOf("www98") > -1) {
		chaturl = 'https://www98.verizon.com/vzbot/vzbotproxy/web?b=ccp';
	}
    if(countvztc==1)
	{
		var chatbotfo=document.createElement("iframe");
		chatbotfo.id="chatBotFO";
		chatbotfo.name="CCPBOT";
		chatbotfo.style.width="100%";
		chatbotfo.style.height="100%";
		chatbotfo.style.border="0px";
		chatbotfo.src=chaturl;
		document.getElementById("chatBot").appendChild(chatbotfo);

		if(document.getElementById("chatIconImage").length>0){
		//	document.getElementById("chatIconImage").style.display="none";
		//	document.getElementById("chatIconImage").style.opacity="0";
		}
	}
}



        //chatbot enabled
        function enableChatVZTC() {
            var divchatbot=document.getElementById("divchatbot");
            //chat icon added 
            var chaticon=document.createElement("div");
            chaticon.id="chatIcon";
            chaticon.style.zIndex="10000";
            //chaticon.style.width="400px";
            chaticon.style.padding="15px 42px";
            chaticon.style.textAlign="center";
            chaticon.style.position="fixed";
            chaticon.style.bottom="6px";
            chaticon.style.right="6px";
            chaticon.style.color="#ffffff";
            chaticon.style.fontSize="13px";
            chaticon.style.cursor="pointer";
            chaticon.style.fontWeight="bolder";
            chaticon.style.borderRadius="50px";
            chaticon.style.border="2px solid white";
            chaticon.style.backgroundColor="#000000"; 	
            chaticon.tabIndex="0";
            
            var chaticonimage=document.createElement("img");
            chaticonimage.id="chatIconImage";
            chaticonimage.alt = "Chat with us"
            chaticonimage.src = "https://scache.vzw.com/askverizon/content/images/svg/chatbubbleIcon.svg"
           
            chaticonimage.style.width = "16px"
            chaticonimage.style.marginRight = "4px"
            chaticonimage.style.top = "3px"
            chaticonimage.style.position="relative"
            chaticon.appendChild(chaticonimage)
        
            var chatwithusText = document.createElement('span')
            chatwithusText.innerHTML="Chat with us";
            chaticon.appendChild(chatwithusText)
            
            divchatbot.appendChild(chaticon);
            //chatbot appended
            var chatbot=document.createElement("div");
            chatbot.id="chatBot";
            chatbot.style.zIndex="100000";
            chatbot.style.display="none";
            chatbot.style.width="425px";
            chatbot.style.height="600px";
            chatbot.style.textAlign="center";
            chatbot.style.position="fixed";
            chatbot.style.bottom="6px";
            chatbot.style.right="6px";
            chatbot.style.border="2px solid black";
            chatbot.style.padding="10px 2px 10px 2px";
            chatbot.style.background="white";
            divchatbot.appendChild(chatbot);
            document.getElementById("chatIcon").onclick=displayChatBotVZTC;

            
            // document.getElementById("divchatbot").appendChild(chaticonimage);
            //document.getElementById("chatIcon").click();
        } 

        //event handler
        function receiveMessageVZTC(event) {
            //minimize event
            if (event.data == 'min') {
                document.getElementById("chatBot").style.display = "none";
                document.getElementById("chatIcon").style.display = "block";
                document.getElementById("chatBot").style.opacity = 0;
                document.getElementById("chatIcon").style.opacity = 1;
            }
            //close event
            else if (event.data == 'close') {
                document.getElementById("chatBot").style.display = "none";
                document.getElementById("chatIcon").style.display = "block";
                document.getElementById("chatBot").style.opacity = 0;
                document.getElementById("chatIcon").style.opacity = 1;
            }
            else {
                document.getElementById("chatIconImage").style.display = "";
                document.getElementById("chatIconImage").opacity = 1;
            }
        }







//-------------------- ccpa bot code end ------------------------

		var asapp_Chat_Auto_Opened = false;
		var lp_Chat_Auto_Opened = false;
		function disableChatOnSupportPages()
		{
			var disableChat=false;
			var urlInfo = window.location.href;
			if(null != urlInfo) {	
if(urlInfo.indexOf("/support/residential/") != -1 ) {						
					
		if(
urlInfo.indexOf("/support/residential/contact-us/homepage.htm") != -1 || 
urlInfo.indexOf("/support/residential/internet/equipment/open-source-software") != -1 || 
urlInfo.indexOf("/support/consumer/equipmentreturn") != -1 || 
urlInfo.indexOf("/support/residential/account") != -1 ||
urlInfo.indexOf("/support/residential/account/manage-account/lifeline-discount") != -1  || 
urlInfo.indexOf("/support/residential/account/manage-account/refer-friend") != -1 ||
urlInfo.indexOf("/support/residential/account/manage-account/registration") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/rewards") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security/arbitration-mediation") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security/change-notification") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security/copyright-faq") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security/security-assist-team") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security/security-control-center") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-account/security/unlawful-call-assist") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/add-change") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/move") != -1 ||
urlInfo.indexOf("/support/residential/account/manage-service/netflix-redemption-faqs") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/order-status") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/prepaid") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/public-inspection-files-locations") != -1 ||
urlInfo.indexOf("/support/residential/account/manage-service/samsung-redemption-faqs") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/store-locations") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/vacation-service") != -1  ||
urlInfo.indexOf("/support/residential/account/manage-service/xbox-redemption-faqs") != -1  ||
urlInfo.indexOf("/support/residential/account/pay-bill/arrangements") != -1  ||
urlInfo.indexOf("/support/residential/account/pay-bill/confirm-payment") != -1  ||
urlInfo.indexOf("/support/residential/account/pay-bill/how-to") != -1 ||
urlInfo.indexOf("/support/residential/account/pay-bill/locations") != -1  ||
urlInfo.indexOf("/support/residential/account/pay-bill/setup-autopay") != -1  ||
urlInfo.indexOf("/support/residential/account/understand-bill/billing-glossary") != -1  ||
urlInfo.indexOf("/support/residential/account/understand-bill/billing-migration") != -1  ||
urlInfo.indexOf("/support/residential/account/understand-bill/bill-went-up") != -1  ||
urlInfo.indexOf("/support/residential/account/understand-bill/faqs") != -1  ||
urlInfo.indexOf("/support/residential/account/understand-bill/overview") != -1  ||
urlInfo.indexOf("/support/residential/account/view-bill/online") != -1  ||
urlInfo.indexOf("/support/residential/account/view-bill/paper-free") != -1  ||
urlInfo.indexOf("/support/residential/account/view-bill/trouble-accessing") != -1  ||
urlInfo.indexOf("/support/residential/homephone") != -1  ||
urlInfo.indexOf("/support/residential/internet") != -1  ||
urlInfo.indexOf("/support/residential/internet/connectivity/no-connection") != -1  ||
urlInfo.indexOf("/support/residential/internet/equipment/actiontec-gt784wnv") != -1 ||
urlInfo.indexOf("/support/residential/internet/equipment/dlink-2750b") != -1  ||
urlInfo.indexOf("/support/residential/internet/equipment/network-adapter") != -1  ||
urlInfo.indexOf("/support/residential/internet/equipment/network-extender") != -1  ||
urlInfo.indexOf("/support/residential/internet/equipment/other-equipment") != -1 ||
urlInfo.indexOf("/support/residential/internet/getting-started/fios-gigabit") != -1 ||
urlInfo.indexOf("/support/residential/service-outage") != -1 ||
urlInfo.indexOf("/support/residential/tv") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/alexa") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/cable-card") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/chs-335-hd-stb") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/chs-435-hd-dvr") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/esata") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/motorola-2500-sd-stb") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/motorola-DCT700-stb") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/remote-control") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/remote-control/audio-amplifier-remote-codes") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/remote-control/audio-receiver-remote-codes") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/remote-control/dvd-remote-codes") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/remote-control/tv-input-control") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/remote-control/tv-remote-codes") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr/ipc1100") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr/motorola-7100-p1-hd-stb") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr/motorola-7100-p2-hd-stb") != -1  ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr/motorola-7216-hd-dvr") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr/motorola7232-p2-hd-dvr") != -1 ||
urlInfo.indexOf("/support/residential/tv/equipment/stb-dvr/vms1100") != -1 ||
urlInfo.indexOf("/support/residential/tv/getting-started/activation") != -1 ||
urlInfo.indexOf("/support/residential/tv/getting-started/watch-before-install") != -1 ||
urlInfo.indexOf("/support/residential/tv/mobile/fios-tv-app") != -1)
				{
						disableChat=false;
					}
					
					else{
						disableChat=true;
					}
				}
			}
			return disableChat;
		}
		
		var ivr_chat_intent='VZ_IVR_BILLPAY';
		//IVR flow for on-load
		function triggerASAPP_IVR() {
			if(setChatLibIfEnabled()!="A"){
				return;
			}
			if(isSubAccount==true){
				return;
			}
			if(typeof chatbotParams !='undefined' && chatbotParams !=null && typeof chatbotParams.intent !='undefined' && chatbotParams.intent !=null&& chatbotParams.intent!='')
    		{
				if(chatbotParams.intent.toLowerCase()!='vz_ivr_operator')
				{
				ivr_chat_intent=chatbotParams.intent;
				}else if(chatbotParams.intent.toLowerCase()=='vz_ivr_operator'){
					ivr_chat_intent='';
				}
			}
			var aASAPPHostName=getHostASAPP(getHost());
					ASAPP('Load', {
					APIHostname: aASAPPHostName,
					AppId: 'fios',
					BadgeType : 'tray',
					Align : 'right',
					Display: {AlwaysShowMinimize: true},
					BadgeText: 'Chat With Us',
					CustomerId: uniquerandomId,
					ContextProvider: contextProviderHandler_IVR,
					Intent:{
						Code:ivr_chat_intent,  // whatever the intent code is for this flow.
					 },   
				    UserLoginHandler: ASAPPSSOLoginWidget,
					onLoadComplete: function(isDisplayingChat){
						loadASAPPComplete=true;
						if (isDisplayingChat) {
						    // badge_onclick();
							sendASAPPDataPass();
							registerListenerEvents();
							document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
							document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
							try{
								var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
								if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true)) && (aCky  ==null || aCky != 'Y')) {
									   if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
											//do nothing.. display chat icon
										}else{
											document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
										}
								}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
									try{
										try{
											/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												document.getElementById('tc-support-chat').style.display = 'none';
												document.getElementById('asap-chat-container').style.display = '';
											}*/												
										}catch(eee){}
										asappChatInProgress();
									}catch(ee){}
								}
							}catch(e){}
							try{
								var $asappStyle = document.createElement('style');
								var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
								    + '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
								    +'.asappChatSDKNotification__icon {fill: #388dfa;}'
								    +'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
								    + '#asapp-chat-sdk-badge .icon{fill:#fff;}'
								    + '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
								    + '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
								    + '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
	
								$asappStyle.textContent = selectors;
								document.head.appendChild($asappStyle);
							}catch(e){}
							asapp_Chat_Auto_Opened = true;
							ASAPP('show');
							// focusOnInput();
						}
				    }
				});		
		}

		function triggerASAPP_SP(){
			if(setChatLibIfEnabled()!="A"){
				return;
			}
			if(isSubAccount==true){
				return;
			}
			var aASAPPHostName=getHostASAPP(getHost());
			var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
			if(isMobile){
			    var speed_test_data=JSON.stringify({"downloadSpeed":downloadSpeed,"uploadSpeed":uploadSpeed});
				ASAPP('Load', {
					APIHostname: aASAPPHostName,
					AppId: 'fios',
					Align : 'right',
					Display: {AlwaysShowMinimize: true},
					CustomerId: encrCustIdforASAPP,
					ContextProvider: contextProviderHandler,
				    Intent:{Code: "VZ_SPEEDTEST_RESULT",Data:speed_test_data},
				    UserLoginHandler: ASAPPSSOLoginWidget,
					onLoadComplete: function(isDisplayingChat){
						loadASAPPComplete=true;
						if (isDisplayingChat) {
						    // badge_onclick();
							sendASAPPDataPass();
							registerListenerEvents();
							document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
							document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
							try{
								var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
								if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true) ) && (aCky  ==null || aCky != 'Y')) {
										if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
											//do nothing.. display chat icon
										}else{
											document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
										}
								}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
									try{
										try{
											/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												document.getElementById('tc-support-chat').style.display = 'none';
												document.getElementById('asap-chat-container').style.display = '';
											}*/												
										}catch(eee){}
										asappChatInProgress();
									}catch(ee){}
								}
							}catch(e){}
							try{
								var $asappStyle = document.createElement('style');
								var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
								    + '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
								    +'.asappChatSDKNotification__icon {fill: #388dfa;}'
								    +'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
								    + '#asapp-chat-sdk-badge .icon{fill:#fff;}'
								    + '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
								    + '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
								    + '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
	
								$asappStyle.textContent = selectors;
								document.head.appendChild($asappStyle);
								asapp_Chat_Auto_Opened = true;
								ASAPP('show');
								// focusOnInput();
							}catch(e){}
						}
				    }
				});
			}else{
			    var speed_test_data=JSON.stringify({"downloadSpeed":downloadSpeed,"uploadSpeed":uploadSpeed});
					ASAPP('Load', {
					APIHostname: aASAPPHostName,
					AppId: 'fios',
					BadgeType : 'tray',
					Align : 'right',
					Display: {AlwaysShowMinimize: true},
					BadgeText: 'Chat With Us',					
					CustomerId: encrCustIdforASAPP,
					ContextProvider: contextProviderHandler,
				    Intent:{Code: "VZ_SPEEDTEST_RESULT",Data:speed_test_data},
				    UserLoginHandler: ASAPPSSOLoginWidget,
					onLoadComplete: function(isDisplayingChat){
						loadASAPPComplete=true;
						if (isDisplayingChat) {
						    // badge_onclick();
							sendASAPPDataPass();
							registerListenerEvents();
							document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
							document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
							try{
								var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
								if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true) ) && (aCky  ==null || aCky != 'Y')) {
										if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
											//do nothing.. display chat icon
										}else{
											document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
										}
								}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
									try{
										try{
											/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												document.getElementById('tc-support-chat').style.display = 'none';
												document.getElementById('asap-chat-container').style.display = '';
											}*/												
										}catch(eee){}
										asappChatInProgress();
									}catch(ee){}
								}
							}catch(e){}
							try{
								var $asappStyle = document.createElement('style');
								var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
								    + '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
								    +'.asappChatSDKNotification__icon {fill: #388dfa;}'
								    +'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
								    + '#asapp-chat-sdk-badge .icon{fill:#fff;}'
								    + '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
								    + '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
								    + '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
	
								$asappStyle.textContent = selectors;
								document.head.appendChild($asappStyle);
								asapp_Chat_Auto_Opened = true;
								ASAPP('show');
								// focusOnInput();
							}catch(e){}
						}
				    }
				});
			}
		}
		
		//non-IVR flow for on-load
			//it will be registered with on-load.
		function triggerASAPP() {
			if(setChatLibIfEnabled()!="A"){
				return;
			}
			if(isSubAccount==true){
				return;
			}
			var aASAPPHostName=getHostASAPP(getHost());
			var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
			if(typeof chatbotParams !='undefined' && chatbotParams !=null && typeof chatbotParams.intent !='undefined' && chatbotParams.intent !=null&&typeof chatbotParams.callingEntity !='undefined'&&chatbotParams.callingEntity!=null&&chatbotParams.callingEntity.toLowerCase()=="ivr")
    		{
				if(chatbotParams.intent.toLowerCase()!='vz_ivr_operator')
				{
				ivr_chat_intent=chatbotParams.intent;
				}else if(chatbotParams.intent.toLowerCase()=='vz_ivr_operator'){
					ivr_chat_intent='';
				}
				if(isMobile){
					ASAPP('Load', {
						APIHostname: aASAPPHostName,
						AppId: 'fios',
						Align : 'right',
						Display: {AlwaysShowMinimize: true},
						CustomerId: encrCustIdforASAPP,
						ContextProvider: contextProviderHandler_unauth_IVR,
						Intent:{
							Code:ivr_chat_intent,  // whatever the intent code is for this flow.
						 },  
						UserLoginHandler: ASAPPSSOLoginWidget,
						onLoadComplete: function(isDisplayingChat){
							loadASAPPComplete=true;
							if (isDisplayingChat) {
								// badge_onclick();
								sendASAPPDataPass();
								registerListenerEvents();
								document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
								document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
								try{
									var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
									if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true) ||  disableChatOnSupportPages()==true) && (aCky  ==null || aCky != 'Y')) {
											if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												//do nothing.. display chat icon
											}else{
												document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
											}
									}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
										try{
											try{
												/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
													document.getElementById('tc-support-chat').style.display = 'none';
													document.getElementById('asap-chat-container').style.display = '';
												}*/												
											}catch(eee){}
											asappChatInProgress();
										}catch(ee){}
									}
								}catch(e){}
								try{
									var $asappStyle = document.createElement('style');
									var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
										+ '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
										+'.asappChatSDKNotification__icon {fill: #388dfa;}'
										+'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
										+ '#asapp-chat-sdk-badge .icon{fill:#fff;}'
										+ '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
										+ '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
										+ '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
		
									$asappStyle.textContent = selectors;
									document.head.appendChild($asappStyle);
								}catch(e){}
								asapp_Chat_Auto_Opened = true;
								ASAPP('show');

							}
						}
					});
				}else{
	
						ASAPP('Load', {
						APIHostname: aASAPPHostName,
						AppId: 'fios',
						BadgeType : 'tray',
						Align : 'right',
						Display: {AlwaysShowMinimize: true},
						BadgeText: 'Chat With Us',					
						CustomerId: encrCustIdforASAPP,
						ContextProvider: contextProviderHandler_unauth_IVR,
						Intent:{
							Code:ivr_chat_intent,  // whatever the intent code is for this flow.
						 },  
						UserLoginHandler: ASAPPSSOLoginWidget,
						onLoadComplete: function(isDisplayingChat){
							loadASAPPComplete=true;
							if (isDisplayingChat) {
								// badge_onclick();
								sendASAPPDataPass();
								registerListenerEvents();
								document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
								document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
								try{
									var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
									if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true) ||  disableChatOnSupportPages()==true) && (aCky  ==null || aCky != 'Y')) {
											if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												//do nothing.. display chat icon
											}else{
												document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
											}
									}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
										try{
											try{
												/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
													document.getElementById('tc-support-chat').style.display = 'none';
													document.getElementById('asap-chat-container').style.display = '';
												}*/												
											}catch(eee){}
											asappChatInProgress();
										}catch(ee){}
									}
								}catch(e){}
								try{
									var $asappStyle = document.createElement('style');
									var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
										+ '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
										+'.asappChatSDKNotification__icon {fill: #388dfa;}'
										+'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
										+ '#asapp-chat-sdk-badge .icon{fill:#fff;}'
										+ '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
										+ '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
										+ '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
		
									$asappStyle.textContent = selectors;
									document.head.appendChild($asappStyle);
								}catch(e){}
								asapp_Chat_Auto_Opened = true;
								ASAPP('show');
							}
						}
					});
				}
			}else{
			if(isMobile){
				ASAPP('Load', {
					APIHostname: aASAPPHostName,
					AppId: 'fios',
					Align : 'right',
					Display: {AlwaysShowMinimize: true},
					CustomerId: encrCustIdforASAPP,
					ContextProvider: contextProviderHandler,
				    UserLoginHandler: ASAPPSSOLoginWidget,
					onLoadComplete: function(isDisplayingChat){
						loadASAPPComplete=true;
						if (isDisplayingChat) {
						    // badge_onclick();
							sendASAPPDataPass();
							registerListenerEvents();
							document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
							document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
							try{
								var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
								if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true)) && (aCky  ==null || aCky != 'Y')) {
										if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
											//do nothing.. display chat icon
										}else{
											document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
										}
								}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
									try{
										try{
											/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												document.getElementById('tc-support-chat').style.display = 'none';
												document.getElementById('asap-chat-container').style.display = '';
											}*/												
										}catch(eee){}
										asappChatInProgress();
									}catch(ee){}
								}
							}catch(e){}
							try{
								var $asappStyle = document.createElement('style');
								var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
								    + '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
								    +'.asappChatSDKNotification__icon {fill: #388dfa;}'
								    +'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
								    + '#asapp-chat-sdk-badge .icon{fill:#fff;}'
								    + '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
								    + '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
								    + '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
	
								$asappStyle.textContent = selectors;
								document.head.appendChild($asappStyle);
							}catch(e){}
						}
				    }
				});
			}else{

					ASAPP('Load', {
					APIHostname: aASAPPHostName,
					AppId: 'fios',
					BadgeType : 'tray',
					Align : 'right',
					Display: {AlwaysShowMinimize: true},
					BadgeText: 'Chat With Us',					
					CustomerId: encrCustIdforASAPP,
					ContextProvider: contextProviderHandler,
				    UserLoginHandler: ASAPPSSOLoginWidget,
					onLoadComplete: function(isDisplayingChat){
						loadASAPPComplete=true;
						if (isDisplayingChat) {
						    // badge_onclick();
							sendASAPPDataPass();
							registerListenerEvents();
							document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";		
							document.getElementById('asapp-chat-sdk-badge').style.zIndex = "9999";	
							try{
								var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");															
								if (((typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true)) && (aCky  ==null || aCky != 'Y')) {
										if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
											//do nothing.. display chat icon
										}else{
											document.getElementById('asapp-chat-sdk-badge').style.display = 'none';
										}
								}else if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true && aCky  !=null && aCky == 'Y') {
									try{
										try{
											/*if(typeof loadNuanceChatDefault != 'undefined' && loadNuanceChatDefault ==true ){
												document.getElementById('tc-support-chat').style.display = 'none';
												document.getElementById('asap-chat-container').style.display = '';
											}*/												
										}catch(eee){}
										asappChatInProgress();
									}catch(ee){}
								}
							}catch(e){}
							try{
								var $asappStyle = document.createElement('style');
								var selectors = '#asapp-chat-sdk-badge{background-color:#398DFA;}'
								    + '#asapp-chat-sdk-badge .asappChatSDKBadge__text{color:#fff;}'
								    +'.asappChatSDKNotification__icon {fill: #388dfa;}'
								    +'.asappChatSDKNotification__button {border-color: #388dfa;color:#388dfa;}'
								    + '#asapp-chat-sdk-badge .icon{fill:#fff;}'
								    + '#asapp-chat-sdk-badge:focus,#asapp-chat-sdk-badge:hover,#asapp-chat-sdk-badge:active{background-color:#fff;}'
								    + '#asapp-chat-sdk-badge:focus .asappChatSDKBadge__text,#asapp-chat-sdk-badge:hover .asappChatSDKBadge__text,#asapp-chat-sdk-badge:active .asappChatSDKBadge__text{color:#398DFA;}'
								    + '#asapp-chat-sdk-badge:focus .icon,#asapp-chat-sdk-badge:hover .icon,#asapp-chat-sdk-badge:active .icon{fill:#398DFA;}';
	
								$asappStyle.textContent = selectors;
								document.head.appendChild($asappStyle);
							}catch(e){}
						}
				    }
				});
			}
		}
	}
		
		//var awlnvztId= "wlnvztssoid_sit";
		function ASAPPSSOLoginWidget(){
			scbResSSO();
		}


		function scbResSSO() {
			try {
				if(window.location.host.indexOf("wwwawssit.ebiz.verizon.com")!=-1)
				{
				location.href = dotComHostConfig["SIT"] + "/home/myverizon/";
				}else if(window.location.host.indexOf("www98.verizon.com")!=-1)
				{
					location.href = dotComHostConfig["STG"] + "/home/myverizon/";
				}else{
					location.href = dotComHostConfig["PROD"] + "/home/myverizon/";
				}
				scLinkTrackID('//ghdr//signin//chat');
			} catch (e) {
				console.log('E - scbResSSO::' + e);
			}
		}
		
		function contextProviderHandler_unauth_IVR(callback, needsRefresh) {
			var asapp_ucid=encrCustIdforASAPP;
			if(typeof chatbotParams.ucid!='undefined'&&chatbotParams.ucid!=null&&chatbotParams.ucid!=''){
				asapp_ucid=asapp_ucid+"|"+chatbotParams.ucid;
			}
			if(needsRefresh){
				ASAPPSSOLoginWidget();
				return;
			}
			//var asappSSOCookieID=getASAPPSSOId(getHost());
			if(ssoCookieIdforASAPP ==null ){
				userInfoforASAPP=null;
			}
			if(getHost()== chatHostConfig["SIT"]){
			    const contextObject = Object.assign(
			        {},
			        {},
			        {"ExternalSessionId": globalSessionIdforASAPP},
					{"ExternalSessionType": "GlobalSessionID"},
				
			        {
			            "Auth": {
			                "Cookies": {
			                	"wlnvztssoid_sit": ssoCookieIdforASAPP		                	
			                },
			                "Headers": {
			                    "userinfo": userInfoforASAPP
			                },
							ExternalIntent:ivr_chat_intent
			            }
			        },
			        {
			        	"PartnerAnalytics": {
			        		CustomerActId: asapp_ucid,
			        		Source: "ivr-url"
			        		}
			        }
			    );			    
			    callback(contextObject);
			}else if(getHost()== chatHostConfig["STG"]){
			    const contextObject = Object.assign(
				        {},
				        {},
				        {"ExternalSessionId": globalSessionIdforASAPP},
						{"ExternalSessionType": "GlobalSessionID"},
					
				        {
				            "Auth": {
				                "Cookies": {
				                	"wlnvztssoid_pprd": ssoCookieIdforASAPP		                	
				                },
				                "Headers": {
				                    "userinfo": userInfoforASAPP
								},
								ExternalIntent:ivr_chat_intent
				                
				            }
				        },
						{
							"PartnerAnalytics": {
								CustomerActId: asapp_ucid,
								Source: "ivr-url"
								}
						}
				    );	
			    callback(contextObject);
				}else{
					 const contextObject = Object.assign(
						        {},
						        {},
						        {"ExternalSessionId": globalSessionIdforASAPP},
								{"ExternalSessionType": "GlobalSessionID"},
							
						        {
						            "Auth": {
						                "Cookies": {
						                	"wlnvztssoid": ssoCookieIdforASAPP		                	
						                },
						                "Headers": {
						                    "userinfo": userInfoforASAPP
										},							
										ExternalIntent:ivr_chat_intent
						                
						            }
						        },
								{
									"PartnerAnalytics": {
										CustomerActId: asapp_ucid,
										Source: "ivr-url"
										}
								}
						    );	
					 callback(contextObject);
				}
			

		    
		}
		
		//ContextHandler for IVR flow
		function contextProviderHandler_IVR(callback, needsRefresh) {
			var ivr_asapp_auth_ucid=encrCustIdforASAPP;
			if(typeof chatbotParams !='undefined' && chatbotParams !=null && typeof chatbotParams.callingEntity !='undefined' && chatbotParams.callingEntity !=null)
    		{
				if(typeof chatbotParams.ucid!='undefined'&&chatbotParams.ucid!=null&&chatbotParams.ucid!='')
				{
					ivr_asapp_auth_ucid=encrCustIdforASAPP+'|'+chatbotParams.ucid;
				}
			}
			if(needsRefresh){
				ASAPPSSOLoginWidget();
				return;
			}			
			if(ssoCookieIdforASAPP ==null ){
				userInfoforASAPP=null;
			}			
			const contextObject = Object.assign(
					{},
			        {},
			        {"ExternalSessionId": globalSessionIdforASAPP},
					{"ExternalSessionType": "GlobalSessionID"},
			        {"Auth": {
			                "Cookies": {
			                	"wlnivrtokenid": ssoCookieIdforASAPP	//sso token	                	
			                },
			                "Headers": {
			                    "userinfo": userInfoforASAPP,
				                "walletinfo":walletExists,   //wallet info
				                "ivr_restrict":IVRrestriction  //ivr restriction info
			                },
							Scopes: ['gated'],
							ExternalIntent:ivr_chat_intent
			            }						
			        },
			        {
			        	"PartnerAnalytics": {
			        		CustomerActId: ivr_asapp_auth_ucid,
			        		Source: "ivr-url"
			        		}
			        }
			    );			    
			    callback(contextObject);
		    
		}
		
		
		//ContextHandler for non-IVR flow
		function contextProviderHandler(callback, needsRefresh) {
			if(needsRefresh){
				ASAPPSSOLoginWidget();
				return;
			}
			//var asappSSOCookieID=getASAPPSSOId(getHost());
			if(ssoCookieIdforASAPP ==null ){
				userInfoforASAPP=null;
			}
			if(getHost()== chatHostConfig["SIT"]){
			    const contextObject = Object.assign(
			        {},
			        {},
			        {"ExternalSessionId": globalSessionIdforASAPP},
					{"ExternalSessionType": "GlobalSessionID"},
				
			        {
			            "Auth": {
			                "Cookies": {
			                	"wlnvztssoid_sit": ssoCookieIdforASAPP		                	
			                },
			                "Headers": {
			                    "userinfo": userInfoforASAPP
			                }
			                
			            }
			        }
			    );			    
			    callback(contextObject);
			}else if(getHost()== chatHostConfig["STG"]){
			    const contextObject = Object.assign(
				        {},
				        {},
				        {"ExternalSessionId": globalSessionIdforASAPP},
						{"ExternalSessionType": "GlobalSessionID"},
					
				        {
				            "Auth": {
				                "Cookies": {
				                	"wlnvztssoid_pprd": ssoCookieIdforASAPP		                	
				                },
				                "Headers": {
				                    "userinfo": userInfoforASAPP
				                }
				                
				            }
				        }
				    );	
			    callback(contextObject);
				}else{
					 const contextObject = Object.assign(
						        {},
						        {},
						        {"ExternalSessionId": globalSessionIdforASAPP},
								{"ExternalSessionType": "GlobalSessionID"},
							
						        {
						            "Auth": {
						                "Cookies": {
						                	"wlnvztssoid": ssoCookieIdforASAPP		                	
						                },
						                "Headers": {
						                    "userinfo": userInfoforASAPP
						                }
						                
						            }
						        }
						    );	
					 callback(contextObject);
				}
			

		    
		}

		
		
var userInfoCookie=null;
var ssoCookieIdIVR=null;
var walletExists=null;
var IVRrestriction=null;
var uniquerandomId="IVRtest";
		
function retrieveInfoASAPP()
{
	try
	{
		globalSessionIdforASAPP=getdotcomGlobalSessionId();
		var userInfoCookie = readTCCookieInfo("userinfo");
        if(null != userInfoCookie) 
        {
        	userInfoforASAPP=userInfoCookie;
        }
        if(readTCCookieInfo("wlnwmssoid")!=null){
        	ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid");
        }else if (readTCCookieInfo("wlnwmssoid_sit")!=null)
        {
        	ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid_sit");
        }else if (readTCCookieInfo("wlnwmssoid_pprd")!=null){
        	ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid_pprd");
        }
        if(null != userInfoCookie && ssoCookieIdforASAPP !=null) 
        {
        	session["customer-cookie"] = userInfoCookie;
            var log = {
                   "log-message" : session,
                   "log-level" : "warn",
                   "log-action" : "RETRIEVE_CUST_INFO",
                   "LOG-TO-DB" : "true",
                   "log-time-stamp" : new Date().getTime()
            };
            getASAPPLogStatus("log="+JSON.stringify(log));
        }else
        {
        	if(typeof chatbotParams !='undefined' && chatbotParams !=null && typeof chatbotParams.callingEntity !='undefined' && chatbotParams.callingEntity !=null)
    		{
    			userInfoCookie=chatbotParams.userInfo;		  
    		    ssoCookieIdIVR=chatbotParams.encId;
    		    if(!chatbotParams.hideChatBot){
    			  walletExists=true;
    		    }else{
					if(chatIVRAttempt<10){
						reCheckIVRParam();
						return;
						}else{
							walletExists=false;
						}
	
    			}
    		    IVRrestriction="false";
    		    if(null != userInfoCookie && ssoCookieIdIVR !=null && walletExists !=null && IVRrestriction !=null) 
    		    {
	    			 if(null != userInfoCookie) {
	    				 userInfoforASAPP=userInfoCookie; 
	    			 }
	    			 if(null != ssoCookieIdIVR) {
	    				 ssoCookieIdforASAPP=ssoCookieIdIVR; 
	    			 }
	                session["customer-cookie"] = userInfoCookie;
	                var log = {
	                         "log-message" : session,
	                         "log-level" : "warn",
	                         "log-action" : "RETRIEVE_CUST_INFO_IVR",
	                         "LOG-TO-DB" : "true",
	                         "log-time-stamp" : new Date().getTime()
	                      };
	                IVRrestriction="true";
	                //uniquerandomId=retrieveSequence();
	                getASAPPLogStatus("log="+JSON.stringify(log),'IVR');               
               }else
               {
            	   triggerASAPP();
    	       }      
    		}else if(typeof isSpeedTestFlow!='undefined'&&isSpeedTestFlow==true)
            {
         	   triggerASAPP_SP();
 	       	}else{
 	       		triggerASAPP();
 	       	}   
        }		                         
	} //try ends
    catch(e)
    {    
     	triggerASAPP();
    }                 
}  //function ends
/*		
function retrieveSequence()
{
var url = getHost() + clientLogServletPath + clientLogServletName;
var randomId="";
var xmlhttp = null;			
			try{
				if (window.XMLHttpRequest){
					xmlhttp=new XMLHttpRequest();
				}else{
					xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
				}
				xmlhttp.onreadystatechange=function(){
					if (xmlhttp.readyState==4  ){
						if(xmlhttp.status ==200 && xmlhttp.responseText !=null){
							
							var resp=xmlhttp.responseText;
							console.log(resp);
							
							if( typeof randomId !='undefined' && randomId !=null && randomId !="")
							{
							randomId=resp;
							}
						}
				
					}
				}
				xmlhttp.open("GET",url,true);
				
					xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
					xmlhttp.send();
				}
			catch(e){			
			}
			console.log(randomId);
			return randomId;
}		*/
		
function getASAPPLogStatus(postParams, callback){
	try {
		var url = getHost() + clientLogServletPath + clientLogServletName; 
		makeASAPPAjaxRequest(url,postParams,callback);
	}			
	catch(e) {	}
}
		
function makeASAPPAjaxRequest(url, postParams, callback){
	var xmlhttp = null			
	try{
		if (window.XMLHttpRequest){/* code for IE7+, Firefox, Chrome, Opera, Safari */
			xmlhttp=new XMLHttpRequest();
		}else{/* code for IE6, IE5 */
			xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
		}
		xmlhttp.onreadystatechange=function(){
			if (xmlhttp.readyState==4  ){
				if(xmlhttp.status ==200 && xmlhttp.responseText !=null){
					//encrCustIdforASAPP=xmlhttp.responseText;
					var resp=xmlhttp.responseText;
					if(resp.indexOf("#&#") != -1){
						var respArr=resp.split("#&#");
						encrCustIdforASAPP=respArr[0];
						try{
							if(callback !=null && callback== 'IVR' &&  respArr[1] !=null){
								uniquerandomId=respArr[1];
							}else if(respArr[1] !=null && respArr[1]=='Y' ){								
								isSubAccount=true;
							}
						}catch(eex){}
					}else{
						encrCustIdforASAPP=resp;
					}
				}
				if(IVRrestriction !=null && IVRrestriction=="true"){
					
					triggerASAPP_IVR();
				}else if(typeof isSpeedTestFlow!='undefined'&&isSpeedTestFlow==true){
					triggerASAPP_SP();
				}else{
					triggerASAPP();
				}
			}
		}
		xmlhttp.open("POST",url,true);
		if(postParams!=null && typeof postParams!="undefined" ){				
			postParams += "&timestamp=" + new Date().getTime();
			xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			xmlhttp.send(postParams);
		}else{
		    xmlhttp.send();
		}
	}catch(e){			
	}
}
		
function sendASAPPDataPass(){			
	    if(loadASAPPComplete){
	    	setTimeout(function() {
	    	var aASAPPData=chatLib.getASAPPDataPass();					
			ASAPP('send', {
		        type: 'customer',
		        data: aASAPPData
		    });	
	    	},10);
	    }
}

var asappContactusTimer=0;

function initiateChat(){
	try{
		if(loadASAPPComplete==true && setChatLibIfEnabled()=="A" && typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true){
			launchASAPPContactusChat();
		}else if(loadASAPPDefault ==true){		
			if(asappContactusTimer <10){
				asappContactusTimer++;
				setTimeout("initiateChat()",1000);			
			}
		}else if(setChatLibIfEnabled()=="B"||(typeof chat_vendor!='undefined'&&chat_vendor.toUpperCase()=="B")){
			loadOneBotChatLib();
			if(document.getElementById('divhomebot') != null){
				document.getElementById('divhomebot').style.display='';
				setTimeout("homeBotProactive()",1000);
				
			}
		}
		else{
			LaunchChatbot();
		}
	}catch(e)
	{
		
	}
}

function  launchASAPPContactusChat(){			
	try{ 
		if(loadASAPPComplete){
			asapp_Chat_Auto_Opened = true;
			ASAPP('show');
			//  focusOnInput();
			try{
				if (typeof disableonloadAsappChatIcon != 'undefined' && disableonloadAsappChatIcon ==true) {
					document.getElementById('asapp-chat-sdk-badge').style.display = '';
					try{
							asappChatInProgress();
						}catch(ee){}
				}							
			}catch(e){}
		}else if(setChatLibIfEnabled()=="B"||(typeof home_ccai_chat_vendor!='undefined'&&home_ccai_chat_vendor.toUpperCase()=="B")){
			loadOneBotChatLib();
			if(document.getElementById('divhomebot') != null){
				document.getElementById('divhomebot').style.display='';
				setTimeout("homeBotProactive()",1000);
			}
		}
	}catch(e){

	}	
}

function callASAPPCompensationFlow(chatId,agentId, agentSalesCode){
	if(typeof setChatAgentInfo != 'undefined'){ 
		setChatAgentInfo(agentId, chatId, agentSalesCode);
	}else{
		updateSalesQualificationDetails(chatId, agentId, agentSalesCode, 'ASAPP');
	}
}
		
		function registerListenerEvents(){
			try{
				document.getElementById('asapp-chat-sdk-iframe').style.zIndex = "9999";
			}catch(e){}
			// onChatLaunched
			ASAPP('on', 'issue:new', function(event){				
				var customerId = event.detail.customerId;
				var issueId = event.detail.issueId;
			    onASAPPChatLaunched(customerId, issueId);
			    var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
			    if(aCky !=null && aCky == 'N'){
			    	createTCCookie("ASAPP_CHAT_IN_PROGRESS", "Y");
			    }
			    // focusOnInput();
			});
			
			// onBotInteractive
			ASAPP('on', 'message:received', function(event){
				//const { customerId, isFirstMessage, issueId, senderType } = event.detail;
				var customerId = event.detail.customerId;
				var issueId = event.detail.issueId;
				var isFirstMessage=event.detail.isFirstMessage;
				var senderType=event.detail.senderType;

			    if (senderType === 'srs' && isFirstMessage === true) {
			    	createTCCookie("ASAPP_CHAT_IN_PROGRESS", "Y");
			        onASAPPBotInteractive(customerId, issueId);
			    }
			    // focusOnInput();
			});
			
			//  onAgentAssigned
			ASAPP('on', 'agent:assigned', function(event){
			   // const { customerId, externalSenderId, issueId } = event.detail;		
			    var customerId = event.detail.customerId;
				var issueId = event.detail.issueId;
				var externalSenderId=event.detail.externalSenderId;
				onASAPPAgentAssigned(customerId, issueId, externalSenderId);
				// focusOnInput();
			});
			
			// onAgentInteractive
			ASAPP('on', 'message:received', function(event){
			    //const { customerId, externalSenderId, isFirstMessage, issueId, senderType } = event.detail;
			    var customerId = event.detail.customerId;
			    var externalSenderId=event.detail.externalSenderId;
				var issueId = event.detail.issueId;
				var isFirstMessage=event.detail.isFirstMessage;
				var senderType=event.detail.senderType;
			    if (senderType === 'agent' && isFirstMessage === true) {
			        // Call SiteCatalyst
			        onASAPPAgentInteractive(customerId, issueId, externalSenderId);
			        callASAPPCompensationFlow(issueId,externalSenderId,'VZID');
			    }
			    // focusOnInput();
			});			
			
			
			// onChatClosed
			ASAPP('on', 'issue:end', function(event){
			    //const { customerId, issueId } = event.detail;
				var customerId = event.detail.customerId;
				var issueId = event.detail.issueId;

			    // Call SiteCatalyst
			    onASAPPChatClosed(customerId, issueId);
			    createTCCookie("ASAPP_CHAT_IN_PROGRESS", "N");
			    // focusOnInput();
			});
		}
		
		function onASAPPChatLaunched(customerId, issueId){
			ASAPPcallSiteCatalyst("event123", "onChatLaunched","onASAPPChatLaunched", customerId, issueId)
			if (asapp_Chat_Auto_Opened){
				vzdlSiteCatalyst("event88", "ASAPPchatwindow", "onChatLaunched","onASAPPChatLaunched", customerId, issueId)
				asapp_Chat_Auto_Opened = false;
			}
			else { 
				vzdlSiteCatalyst("event87", "ASAPPchatwindow", "onChatLaunched","onASAPPChatLaunched", customerId, issueId)
			}	
		}
		
		function onASAPPBotInteractive(customerId, issueId){
			ASAPPcallSiteCatalyst("event125", "onBotInteractive","onASAPPBotInteractive", customerId, issueId)
			// vzdlSiteCatalyst("event125", "ASAPPchatwindow", "onBotInteractive","onASAPPBotInteractive", customerId, issueId)
		}
		
		function onASAPPAgentAssigned(customerId, issueId, agentId){
			ASAPPcallSiteCatalyst("event126", "onAgentAssigned","onASAPPAgentJoined", customerId, issueId, agentId)
			vzdlSiteCatalyst("event188", "ASAPPchatwindow", "onAgentAssigned","onASAPPAgentJoined", customerId, issueId, agentId)
		}
		
		
		function onASAPPAgentInteractive(customerId, issueId, agentId){
			ASAPPcallSiteCatalyst("event127", "onAgentInteractive","onASAPPAgentInteractiveChat", customerId, issueId, agentId)
			// vzdlSiteCatalyst("event188", "ASAPPchatwindow", "onAgentInteractive","onASAPPAgentInteractiveChat", customerId, issueId, agentId)
		}
		
		function onASAPPChatClosed(customerId, issueId){
			ASAPPcallSiteCatalyst("event128", "onChatClosed","onASAPPChatClosed", customerId, issueId)
			// vzdlSiteCatalyst("event128", "ASAPPchatwindow", "onChatClosed","onASAPPChatClosed", customerId, issueId)
		}
		
		function vzdlSiteCatalyst(aeventId, pageName, aeventName, aAction, customerId, issueId, agentId){
			try {
				if(agentId ==null ){
					agentId="";
				}
				if (typeof aeventId != 'undefined' && aeventId != null){
					if (aeventId == "event88" || aeventId == "event87"){
						issueId = "";
					}
				}
				if (typeof window.vzdl != 'undefined' && window.vzdl != null){
					try {
						var vzdl = window.vzdl || {};

						vzdl.event = vzdl.event || {};
						vzdl.event.value = aeventId;

						vzdl.txn = vzdl.txn || {};
						vzdl.txn.agent = agentId;

						vzdl.page = vzdl.page || {};
						if(typeof vzdl.page.detail != 'undefined' && vzdl.page.detail != null && vzdl.page.detail != "")
						{
							vzdl.page.detail = vzdl.page.detail.replace(/\|LPchatwindow|\|ASAPPchatwindow|\|askvzhomechatwindow|LPchatwindow|ASAPPchatwindow|askvzhomechatwindow/g,"");
							if (vzdl.page.detail != ""){
								vzdl.page.detail = vzdl.page.detail + "|" + pageName;
							}
							else {
								vzdl.page.detail = pageName;
							}
						}
						else {
							vzdl.page.detail = pageName;
						}

						vzdl.user = vzdl.user || {};
						vzdl.user.chatId = issueId;

						window.vzdl = vzdl;
						if (typeof sendCustomEvent !='undefined'){
							sendCustomEvent("pageViewOmni");
						}else{
							sendCustomEventChat("pageViewOmni");
						}
					}
					catch(e){}
				}
				else {
					try {
						var vzdl = new Object();
						vzdl.event = new Object();
						vzdl.txn = new Object();
						vzdl.page = new Object();
						vzdl.user = new Object();
						vzdl.event.value = aeventId;
						vzdl.txn.agent = agentId;
						vzdl.page.detail = pageName;
						vzdl.user.chatId = issueId;
						window.vzdl = vzdl;
						if (typeof sendCustomEvent !='undefined'){
							sendCustomEvent("pageViewOmni");
						}else{
							sendCustomEventChat("pageViewOmni");
						}
					}
					catch(e){}
				}
			}
			catch(e){
				// console.log(e, "VZDL error");
			}	
		}
		function ASAPPcallSiteCatalyst(aeventId, aeventName, aAction, customerId, issueId, agentId){
			if(agentId ==null ){
				agentId="";
			}
			
			if( typeof _satellite != 'undefined' && typeof digitalData != 'undefined' && digitalData !=null){
		    	
		    	//--------------------------------------------DTM Integration ----------------------------------------------
		    	
		    	try{

					var ctProp2="residential";
					var ctProp3="learn";	
					
					if (typeof digitalData.page.businessUnit != 'undefined'){
						ctProp2= digitalData.page.businessUnit;
					}
					if (typeof digitalData.page.pageType != 'undefined'){
						ctProp3= digitalData.page.pageType;
					}

			    	var chatUpdateEvent = { 
			    			 eventInfo: 
			    			 { 
			    			 eventName: "pageViewUpdate", 
			    			 type: aeventName, 
			    			 action: aAction, 
			    			 timeStamp: new Date(), 
			    			 processed: 
			    			 { 
			    			 adobeAnalytics: false //dtm will change this to true once processed 
			    			 } 
			    			 }, 
			    			 page: 
			    			 { 
			    			 pfxID:"cht",
			    			 pageName: "ASAPPchatwindow", //same value as #hdn_simplepageName 
			    			 detailPageName: aeventName+"| "+ctProp2+" _"+ctProp3, //same value as #hdn_detailpageName 
			    			 applicationName: "ASAPPchat",
			    		     chatRepID:agentId 
			    			 },
			    			 userProfile:
			    			 {
			    				 profileID:"Chat User "+issueId+"| EnterpriseID "+agentId
			    			 },	
							 scEvents: aeventId //String of events as in #hdn_events
			    			 }; 

			    			 //Push it onto the event array on digitalData object 
			    			 window.digitalData = window.digitalData || {};	 							 
			    			 window.digitalData.events = digitalData.events || []; 
			    			 window.digitalData.page.chatRepID= agentId;
			    			 window.digitalData.events.push(chatUpdateEvent); 


			    			 //Create and dispatch an event trigger 
			    			 if (typeof sendCustomEvent !='undefined'){
			    				 sendCustomEvent("pageViewUpdate");
			    			 }else{
			    				 sendCustomEventChat("pageViewUpdate");
			    			 }
			    	}catch(ee){
						//alert(ee.description);
					}
		    	
		    	//--------------------------------------DTM integration end--------------------------------------------------
		    	
		    }else{				
				try{
					//sitecatalyst calls
					var temp_pfxID = s_837.pfxID;
					var temp_simplepageName = s_837.simplepageName;
					var temp_prop5 = s_837.prop5;
					var temp_prop48 = s_837.prop48;
					var temp_detailpageName = s_837.detailpageName;
				    var temp_events=s_837.events;
					var temp_prop3 = s_837.prop3;
					
					s_837.pfxID="cht";
					s_837.simplepageName="ASAPPchatwindow";
					s_837.prop5="Chat User "+issueId;
					s_837.prop48="ASAPPchat";
					s_837.detailpageName= "ASAPP chat Launched"+"|"+s_837.prop2+" _"+s_837.prop3; 
					s_837.events="event48";
					if(typeof IsAccessoriesCompFlow != 'undefined' && IsAccessoriesCompFlow !=null && (IsAccessoriesCompFlow == true || IsAccessoriesCompFlow.toLowerCase() == 'true')){
							s_837.prop3 = "accessories";
					}
					var s_code=s_837.t();
					setTimeout("resetSiteCatParams('"+temp_pfxID+"','"+temp_simplepageName+"','"+temp_prop5+"','"+temp_prop48+"' ,'"+temp_detailpageName+"' ,'"+temp_prop3+"' ,'"+temp_events+"');",500);
				}catch(e){}
		    }
		
	
		}
		
		function oneBotSCOMNI(aeventId, aeventName, aAction, customerId, issueId, agentId) {
			try{
				var aeventIdOmni = '';
				if(agentId ==null ){
					agentId="";
				}
				if(aeventId == null) {
					aeventId = "";
				}
				oneBotSiteCatalyst(aeventId, aeventName, aAction, customerId, issueId, agentId)
				if(aeventId == 'event123'){
					aeventIdOmni = 'event87';
				} else if (aeventId == 'event126'){
					aeventIdOmni = 'event188';
				}
				if (aeventIdOmni == 'event87' || aeventIdOmni == 'event188'){
					pageName = "askvzhomechatwindow";
					vzdlSiteCatalyst(aeventIdOmni, pageName, aeventName, aAction, customerId, issueId, agentId)	
				}
				if (typeof aeventName != 'undefined' && aeventName != null && aeventName.toLowerCase() == "onagentinteractive" && typeof agentId != 'undefined' && agentId != null && agentId != ""){
					if (typeof issueId != 'undefined' && issueId != null && issueId != "") {
						updateSalesQualificationDetails(issueId, agentId, 'consumer', 'Homebot');
					}
				}
			}
			catch(e){

			}
		}

		function oneBotSiteCatalyst(aeventId, aeventName, aAction, customerId, issueId, agentId){
			if(agentId ==null ){
				agentId="";
			}
			// aAction = "onAskvzhomechatLaunched";
			if( typeof _satellite != 'undefined' && typeof digitalData != 'undefined' && digitalData !=null){
		    	
		    	//--------------------------------------------DTM Integration ----------------------------------------------
		    	
		    	try{

					var ctProp2="residential";
					var ctProp3="learn";	
					
					if (typeof digitalData.page.businessUnit != 'undefined'){
						ctProp2= digitalData.page.businessUnit;
					}
					if (typeof digitalData.page.pageType != 'undefined'){
						ctProp3= digitalData.page.pageType;
					}

			    	var chatUpdateEvent = { 
			    			 eventInfo: 
			    			 { 
			    			 eventName: "pageViewUpdate", 
			    			 type: aeventName, 
			    			 action: aAction, 
			    			 timeStamp: new Date(), 
			    			 processed: 
			    			 { 
			    			 adobeAnalytics: false //dtm will change this to true once processed 
			    			 } 
			    			 }, 
			    			 page: 
			    			 { 
			    			 pfxID:"cht",
			    			 pageName: "ghp| askvzhomechatwindow", //same value as #hdn_simplepageName 
			    			 detailPageName: aeventName+"| "+ctProp2+" _"+ctProp3, //same value as #hdn_detailpageName 
			    			 applicationName: "askvzhomechat",
			    		     chatRepID:agentId 
			    			 },
			    			 userProfile:
			    			 {
			    				 profileID:"Chat User "+issueId+"| EnterpriseID "+agentId
			    			 },	
							 scEvents: aeventId //String of events as in #hdn_events
			    			 }; 

			    			 //Push it onto the event array on digitalData object 
			    			 window.digitalData = window.digitalData || {};	 							 
			    			 window.digitalData.events = digitalData.events || []; 
			    			 window.digitalData.page.chatRepID= agentId;
			    			 window.digitalData.events.push(chatUpdateEvent); 


			    			 //Create and dispatch an event trigger 
			    			 if (typeof sendCustomEvent !='undefined'){
			    				 sendCustomEvent("pageViewUpdate");
			    			 }else{
			    				 sendCustomEventChat("pageViewUpdate");
			    			 }
			    	}catch(ee){
						//alert(ee.description);
					}
		    	
		    	//--------------------------------------DTM integration end--------------------------------------------------
		    	
		    }else{				
				try{
					//sitecatalyst calls
					var temp_pfxID = s_837.pfxID;
					var temp_simplepageName = s_837.simplepageName;
					var temp_prop5 = s_837.prop5;
					var temp_prop48 = s_837.prop48;
					var temp_detailpageName = s_837.detailpageName;
				    var temp_events=s_837.events;
					var temp_prop3 = s_837.prop3;
					
					s_837.pfxID="cht";
					s_837.simplepageName="ghp| askvzhomechatwindow";
					s_837.prop5="Chat User "+issueId;
					s_837.prop48="askvzhomechat";
					s_837.detailpageName= "onAskvzhomechatLaunched"+"|"+s_837.prop2+" _"+s_837.prop3; 
					s_837.events="event48";
					if(typeof IsAccessoriesCompFlow != 'undefined' && IsAccessoriesCompFlow !=null && (IsAccessoriesCompFlow == true || IsAccessoriesCompFlow.toLowerCase() == 'true')){
							s_837.prop3 = "accessories";
					}
					var s_code=s_837.t();
					setTimeout("resetSiteCatParams('"+temp_pfxID+"','"+temp_simplepageName+"','"+temp_prop5+"','"+temp_prop48+"' ,'"+temp_detailpageName+"' ,'"+temp_prop3+"' ,'"+temp_events+"');",500);
				}catch(e){}
		    }
		
	
		}

		//Speed test changes...
		var	launchChatForSpeedTestResults=function(intent, routerTestDownloadResult, routerTestUploadResult){
			downloadSpeed=routerTestDownloadResult;
			uploadSpeed=routerTestUploadResult;
			if(isChatInProgress()==false)
			{
				decideAndLoadChatVendor();
			}
			else if(isAgentChatInProgress()== true ){
				chatLib.setCustomerInfo("downloadSpeed",downloadSpeed);
				chatLib.setCustomerInfo("uploadSpeed",uploadSpeed);
				sendASAPPDataPass();
			}
		}

		/////////////////////////
		//accessibility//////
		// function focusOnInput() {
        //      var element = document.getElementById('asapp-chat-sdk-frame-el');
        //      element.focus();
        //      setTimeout(function () { element.focus(); }, 1);
        // }
        // function badge_onclick(){
		// 	console.log("badge click called")
		// 	 document.getElementById('asapp-chat-sdk-badge').onclick=function(){
 		// 	 	focusOnInput();
 		// 	 }
		// }
        ////////
	/*********************************************************************/
	/*						ASAPP ends here...								 */	
	/*********************************************************************/	
/*********************************************************************/
/*						LP starts here...								 */
/*********************************************************************/


var lp_visitor_id="";
var lp_conversation_id="";
var lp_agent_pid="";
var lp_agent_id="";
var lp_agent_assigned_flag = true;
var lp_gsessionId="";

 
function getHostLPURL(chatServerUrl)
{
	var lptag_resource_path="/comm/includes/scripts/";
	if(lpChatUrlConfig.prod==chatServerUrl)
	{
        lptag_resource_path=lptag_resource_path+lpLeMtagConfig.prod;
	}else if(lpChatUrlConfig.stg==chatServerUrl)
	{
        lptag_resource_path=lptag_resource_path+lpLeMtagConfig.stg;

	}else {
	    lptag_resource_path=lptag_resource_path+lpLeMtagConfig.sit;
	}
	return chatServerUrl+lptag_resource_path;
}

function loadLPChatLib(hostname,callback){
	try{
		if(readTCCookieInfo("lp_jwt_wln")!=null&&readTCCookieInfo("lp_jwt_wln")!="")
		{
			if(setChatLibIfEnabled()!="L"){
			return;
		}
	if((typeof readTCCookieInfo('LP_CHAT_IN_PROGRESS') == 'undefined' || readTCCookieInfo('LP_CHAT_IN_PROGRESS') == null || readTCCookieInfo('LP_CHAT_IN_PROGRESS') =='N') && readTCCookieInfo('VZ_CONNECTIONS_DISCOUNT') == 'Y') {
		return;
	}
	namespace = "lp";	
	script = document.createElement('script');
	script.async = 1;
	script.src = hostname;
	script.type = 'text/javascript';
	document.head.appendChild(script);
	if (script.readyState) {  //IE
		script.onreadystatechange = function () {
			if (script.readyState == "loaded" ||
				script.readyState == "complete") {
				script.onreadystatechange = null;
				callback();
			}
		};
	} else {  //Others
		script.onload = function () {
			callback();
		};
	}
		}
}
catch(e)
{

}	  
}
/*
		 *  @Author: nsh2wv4
		 *  @Date: Mar-13-2020
		 *  @Description: To initialize LP.
		 */
// function initLP(callback) {

// 	try {
// 		script = document.createElement('script');
// 		hostname = "https://collaborateextst.verizon.com/comm/includes/scripts/le-mtagconfig-dev.js";
// 		namespace = "lpTag";
// 		window[namespace] = window[namespace] || function () {
// 			(window[namespace]._ = window[namespace]._ || []).push(arguments)
// 		}
// 		window[namespace].Host = hostname;
// 		script.async = 0;
// 		script.src = 'https://collaborateextst.verizon.com/comm/includes/scripts/le-mtagconfig-dev.js';
// 		script.type = 'text/javascript';
// 		document.head.appendChild(script);
// 		if (script.readyState) {  //IE
// 			script.onreadystatechange = function () {
// 				if (script.readyState == "loaded" ||
// 					script.readyState == "complete") {
// 					script.onreadystatechange = null;
// 					callback();
// 				}
// 			};
// 		} else {  //Others
// 			script.onload = function () {
// 				callback();
// 			};
// 		}

// 	}
// 	catch (e) {
// 		console.log(e);
// 	}
// }
var skillId="";

function enableLP(jwt, postParams) {
	global_jwt=jwt;
	if(typeof global_jwt!='undefined'&&global_jwt!="")
	{
	    createTCCookie("lp_jwt_wln",global_jwt);
	    
	}

	if (readTCCookieInfo("updateJwtFlag")==null) {
	    createTCCookie("updateJwtFlag",true);
		updateJweFlow=setInterval(updateJWE, 86399000);
	}
	if(typeof lpTag=='undefined')
	{
		if (location.href.indexOf("//global//residential")!=-1 || location.href.indexOf("verizonglobalhome/ghp_landing")!=-1){
			if(readTCCookieInfo('LP_CHAT_IN_PROGRESS')!=null&&readTCCookieInfo('LP_CHAT_IN_PROGRESS')=='Y')
			 	{
			 		loadLPChatLib(getHostLPURL(getHost()),lpInitCallback);
			 	}
		}else{
		   loadLPChatLib(getHostLPURL(getHost()),lpInitCallback);
		}
	}
}
function reinitGSID(gsid)
{
			makeLpAjaxCall(auth_sde_array);
}

function getLpDotComreInitSessionId(initAfterLpgsidCallback) {
	if (readTCCookieInfo("lp_gsid") == null) {
		var log = {
			"log-message": "",
			"log-level": "warn",
			"log-action": "GET_GLOBAL_SESSIONID",
			"LOG-TO-DB": "true",
			"log-time-stamp": new Date().getTime()
		};
		var postParams = "log=" + JSON.stringify(log);
		var xmlhttp = null;
		var url = getHost() + clientLogServletPath + clientLogServletName; 
		try {
			if (window.XMLHttpRequest) {/* code for IE7+, Firefox, Chrome, Opera, Safari */
				xmlhttp = new XMLHttpRequest();
			} else {/* code for IE6, IE5 */
				xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
			}
			xmlhttp.onreadystatechange = function () {
			if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
				if (xmlhttp.responseText != null&&xmlhttp.responseText != '') {
					lp_gsessionId = xmlhttp.responseText;
					if (lp_gsessionId != null && lp_gsessionId != "") {
						createTCCookie("lp_gsid", lp_gsessionId);
					}else
					{
						// if(call_gsid_count<7)
						// {
						// 	call_gsid_count++;
						// 	setTimeout(getLpDotComreInitVisitorId(initAfterLpgsidCallback),2000);
						// }
					}
					initAfterLpgsidCallback(lp_gsessionId);
				} else {
					initAfterLpgsidCallback("");
				}
			}
			}
			xmlhttp.open("POST", url, true);
			if (postParams != null && typeof postParams != 'undefined') {
				postParams += "&timestamp=" + new Date().getTime();
				xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				xmlhttp.send(postParams);
			} else {
				xmlhttp.send();
			}
		} catch (e) {
			// console.log(e);
			initAfterLpgsidCallback("");
		}
	} else {
		initAfterLpgsidCallback("");
	}
}


var call_gsid_count=0;
function getLpDotComreInitVisitorId(initAfterLpgsidCallback) {
	if (readTCCookieInfo("lp_gsid") == null) {
		var xmlhttp = null;
		var url = getDotComHostTC(getHost())+"/inhome/getServerVisitIdAndVisitorId";
		try {
			if (window.XMLHttpRequest) {/* code for IE7+, Firefox, Chrome, Opera, Safari */
				xmlhttp = new XMLHttpRequest();
			} else {/* code for IE6, IE5 */
				xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
			}
			xmlhttp.onreadystatechange = function () {
				if (xmlhttp.readyState == 4){
					if(xmlhttp.status == 200) {
						if (xmlhttp.responseText != null) {
							var resp_obj = JSON.parse(xmlhttp.responseText);
							if (resp_obj.server_visitor_id != "") {
								lp_gsessionId = resp_obj.server_visitor_id;
							} else if (resp_obj.server_gsm_id != "") {
								lp_gsessionId = resp_obj.server_gsm_id;

							} else if (resp_obj.server_visit_id != "") {
								lp_gsessionId = resp_obj.server_visit_id;

							}
							if (lp_gsessionId != null && lp_gsessionId != "") {
								createTCCookie("lp_gsid", lp_gsessionId);
								initAfterLpgsidCallback(lp_gsessionId);
							}else
							{
								if(call_gsid_count<7)
								{
							   		call_gsid_count++;
									setTimeout(getLpDotComreInitVisitorId(initAfterLpgsidCallback),2000);
								} else {
									getLpDotComreInitSessionId(reinitGSID);
								}
							}
						} else {
							getLpDotComreInitSessionId(reinitGSID);
						}
					}else{
						getLpDotComreInitSessionId(reinitGSID);
					}
				}
			}
			xmlhttp.open("GET", url, true);
			xmlhttp.send();
		} catch (e) {
			// console.log(e);
			initAfterLpgsidCallback("");
		}
	} else {
		initAfterLpgsidCallback("");
	}
}



var qHealthApiParams = {};
var qHealthApiData = {};
var lpCallQueueHelpCount = 0;
var highestPriority = 0;
function lpInitCallback() {
	if (typeof lpTag != 'undefined') {
		
		if(typeof readTCCookieInfo('LP_AGENT_ID')!='undefined'&&readTCCookieInfo('LP_AGENT_ID')!="N"&&readTCCookieInfo('LP_AGENT_ID')!=null)
		{
				lp_agent_id=readTCCookieInfo('LP_AGENT_ID');
			}
		lpTag.identities = [];
		lpTag.identities.push(identityFn);
		function identityFn(callback) {
			callback({
				iss: "verizon.com",
				acr: "loa1",
				sub: new Date().getTime() + "" + parseInt(Math.random() * 100)
			});
		};
		window.lpTag = window.lpTag || {};
		lpTag.section = document.location.host.indexOf('verizonwireless') > -1 ? ['l1:wireless'] : ['l1:wireline'];
		// putting this stuff in lpTag.external.promoAdder so as not to pollute the global namespace
		try {
			lpTag.external = lpTag.external || {};
			lpTag.external.promoAdder = {
				// here you will define the regular expression that indicates that a promo adding agent message was sent
				activationRegex: /Add Promo: .+/,
				// this makes sure that the first burst of messages on a page load doesn't trigger the widget based on prior qualifying agent messages
				firstMessage: true,
				// function to process incoming conversation lines
				processLines: function processLines(lineData) {
					// console.log("firstMessage", lpTag.external.promoAdder.firstMessage)
					// console.log("lineData", lineData);
					var lines = lineData && lineData.data && lineData.data.lines;
					if (!lines) return false;
					// console.log("lines", lines)
					
					// is this data from the current conversation?
					var currentConversation = true;
					for (var i = 0, l = lines.length; i < l; i++) {
						if (lines[i].history) {
							currentConversation = false;
							break;
						}
					} 
					// console.log("currentConversation", currentConversation);
					
					// cycle through lines, hide those that match, and if this is a new agent message from the current conversation do the promo adding stuff
					lines.forEach(function (line) {
						if (line.source === "agent") {
							var match = lpTag.external.promoAdder.activationRegex.exec(line.text);
							// console.log("match", match);
							if (match) {
								var text = line.text;
								var textValue = text.substring(
									text.lastIndexOf("text:") + 5, 
									text.lastIndexOf(";")
								);
								var triggerEvent = text.substring(
									text.lastIndexOf("event:") + 6
								);
								var funcName = text.substring(
									text.lastIndexOf("event:") + 6,
									text.lastIndexOf("(")
								);
								line.text = textValue;
								if(!lpTag.external.promoAdder.firstMessage && currentConversation) {
									// console.log('run script here');
									// report this event here
									if (typeof window[funcName] != 'undefined'){
										eval(triggerEvent);
									}
									
								}
								
							}
								
						}

						}); 
					
					
					// if this was the first set of messages from the initial page load set that flag to false now
					if (lpTag.external.promoAdder.firstMessage && !lp_chatEnded) {
						lpTag.external.promoAdder.firstMessage = false;
					}
					// console.log("firstMessage", lpTag.external.promoAdder.firstMessage)
				}
			}; 

			// attach the hook
			lpTag.hooks = lpTag.hooks || [];
			lpTag.hooks.push({
				name: "AFTER_GET_LINES",
				callback: lpTag.external.promoAdder.processLines
			});
		}
		catch(e){
			
		}	
		section_array = document.location.pathname.split('/').filter(Boolean);
		section_array.forEach(transformLpSectionArray);
		if(location.hash!=""&&location.hash!="#enable-lp-dev-users")
		{
			// section_array.push("l"+(section_array.length+2)+":"+window.location.href.split('#')[1].replace(/["?\/"]/g,""));
			// section_array.push("l"+(section_array.length+2)+":"+window.location.href.split('#')[1].replace(/[^a-zA-Z ]/g, ""));

		}
		if(window.location.href.indexOf('specials') != -1){
			section_array.push("l2:verizonspecials");
		}else if (window.location.href.indexOf('AmznC2Chat') != -1 && section_array.indexOf("AmznC2Chat") == -1){
			section_array.push("AmznC2Chat");
		}
		section_array.push("lob:VZT");
		lpTag.sdes.push({
               "type": "lead",
               "lead": {
                     "topic": window.document.URL,
                     "value": -1,
                     "leadId": "Page View"
                }
		})
		if((null!=readTCCookieInfo("loggedIn")&&(readTCCookieInfo("loggedIn")==true||readTCCookieInfo("loggedIn")=='true'))||(null!=readTCCookieInfo("userinfo")&&readTCCookieInfo("userinfo")!=''))
        {
			var asKeywordsArray=[];
			var wlnssocookieId="";
			var userInfo="";
			section_array.push("Auth:true");
			try{
				if(readTCCookieInfo("wlnwmssoid")!=null){
					ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid");
					wlnssocookieId="token:"+ssoCookieIdforASAPP;
					asKeywordsArray.push(wlnssocookieId);
				}else if (readTCCookieInfo("wlnwmssoid_sit")!=null)
				{
					ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid_sit");
					wlnssocookieId="token:"+ssoCookieIdforASAPP;
					asKeywordsArray.push(wlnssocookieId);
				}else if (readTCCookieInfo("wlnwmssoid_pprd")!=null){
					ssoCookieIdforASAPP=readTCCookieInfo("wlnwmssoid_pprd");
					wlnssocookieId="token:"+ssoCookieIdforASAPP;
					asKeywordsArray.push(wlnssocookieId);
				}
			if(readTCCookieInfo("userinfo")!=null)
			{
				userInfo="userprofile:"+readTCCookieInfo("userinfo");
				asKeywordsArray.push(userInfo);
			}
			lpTag.sdes.push({
				type: "searchInfo",
				keywords: asKeywordsArray
			  });
			}catch(e){};
        }
		lpTag.section = lpTag.section.concat(section_array);
		if(lpNewPageFlag)
        {
			refreshChatHashTag();
		}
		try {
			document.body.addEventListener('mouseout', function (event) {
				// detect mouse leave at the top of the window, and only trigger this once
				// console.log(event.clientY, "event value");
				if (typeof readTCCookieInfo('VZ_CONNECTIONS_DISCOUNT') == 'undefined' || readTCCookieInfo('VZ_CONNECTIONS_DISCOUNT') == null){
					if (event.clientY <= 50 && lpTag && lpTag.section && lpTag.section.indexOf('preemptiveLeave') <= -1) {
						var section = (lpTag && lpTag.section) || [];
						section.push('preemptiveLeave');
						lpTag.newPage(document.URL, {
								section:section,
								taglets: {
									rendererStub: {
										divIdsToKeep: {
											LP_SALES_HOME_EMBEDDED: true // this should be whatever divid we use for your embedded button
										}
									}
								}
						})
					}
				}	
			})
		}
		catch(e){
			// console.log(e, "preemptive error");
		}
		lpTag.events.bind('RENDERER_STUB', 'AFTER_CREATE_ENGAGEMENT_INSTANCE', function (data) {  
			skillId=data;
			if (!lpAutoClickFlag && lpChatEnabled){
				lpAutoClicker(data);
			}
			var skillAliasName = "";
			var priority="";
			var skillName = skillId.conf.skillName;
			var skillNameParams={
				"RequestParams": {
						"skillAliasName": "",
						"priority":"",
						"UniqueId": "",
         				"section":  "",
        				"engagementName": ""
					}
			};
			if(typeof skillName!='undefined'&&skillName!=null&&skillName!="")
			{
				try {
					var engagementName = skillId.eng.engData.engagementName;
					
				skillName = skillName.replace(/ /g,'');
				if (skillName === "~HomePrioritySales:P1" || skillName === "~HomePrioritySales:P2" || skillName === "~HomePrioritySales:P3" || skillName === "~HomePrioritySales:P4" || skillName === "~HomePrioritySales:P5"){
					skillAliasName = "Home Priority Sales";
				}
				else if (skillName === "~HomeSales:P1" || skillName === "~HomeSales:P2" || skillName === "~HomeSales:P3" || skillName === "~HomeSales:P4" || skillName === "~HomeSales:P5"){
					skillAliasName = "Home Sales";		
				}
				else {
					skillAliasName = skillName;
				}
				var lpTagSection = ""
				if (lpTag.section.length > 2 && lpTag.section[2] !=null && typeof lpTag.section[2] !='undefined'){
					lpTagSection = lpTag.section[2].replace(/[^a-zA-Z0-9 ]/g, "");
					lpTagSection = lpTagSection.substring(lpTagSection.indexOf("l") + 2);
				}
				var lpUniqueID = "";
				if (readTCCookieInfo('lp_sub_wln') != null && typeof readTCCookieInfo('lp_sub_wln') != "undefined"&&readTCCookieInfo('lp_sub_wln') != ''){
					lpUniqueID = readTCCookieInfo('lp_sub_wln');
				}
				if(engagementName == null || typeof engagementName == "undefined") {
					engagementName = "";
				}
				if (data.conf.skillName.split(":").length > 1) {
					priority = data.conf.skillName.replace("~", "");
					skillNameParams = {
						"RequestParams": {
								"skillAliasName": skillAliasName,
								"priority":priority,
								"UniqueId": lpUniqueID,
         						"section":  lpTagSection,
         						"engagementName": engagementName
								}
						};
				}else{
					skillNameParams = {
						"RequestParams": {
								"skillAliasName": skillAliasName,
								"UniqueId": lpUniqueID,
         						"section": lpTagSection,
         						"engagementName": engagementName
									}
						};
				}
				// if (lpCallQueueHelpCount < 1) {
					// lpCallQueueHelpCount++;
					if (priority != null && typeof priority!="undefined"){
						var priorityNumber = parseInt(priority.substring(priority.lastIndexOf("P") + 1));
						if (!isNaN(priorityNumber)) {
							if (priorityNumber > highestPriority) {
								highestPriority = priorityNumber;
								// if (!lpChatEnabled){
									qHealthApiParams = skillNameParams;
									qHealthApiData = data;
								// }
							}
						}	
					}
					getSkillData(skillNameParams, data, false);
				// }
				}
				catch (e){

				} 	
			}
	})
	    lpTag.events.bind("lp_SMT", "MONITORING_STATE", lp_monitoring_state);
	    lpTag.events.bind("lpUnifiedWindow", "state", lp_state);
	    lpTag.events.bind("lpUnifiedWindow", "conversationInfo", lp_conv_info);
	    lpTag.events.bind("lpUnifiedWindow", "maximized", lp_maximized);
	    lpTag.events.bind("lpUnifiedWindow", "minimized", lp_minimized);
		lpTag.events.bind("lpUnifiedWindow", "engagementData", lp_engage_data);
		lpTag.events.bind('lpUnifiedWindow','windowClosed',lp_close_chat);
		convInfoInit();
	}
}
var qHealthCount = 0;
var lpprioritylevel="";
function getSkillData(postParams, data, callingFromSetInterval){
	try {
		if(lpChatEnabled || (readTCCookieInfo("LP_CHAT_IN_PROGRESS") != null && typeof readTCCookieInfo("LP_CHAT_IN_PROGRESS") != "undefined" && readTCCookieInfo("LP_CHAT_IN_PROGRESS") != "N") ){
			return;
		}
		if (callingFromSetInterval) {
			if (postParams.RequestParams.priority != null && typeof postParams.RequestParams.priority !="undefined"){
				var priorityNumber =  parseInt(postParams.RequestParams.priority.substring(
									postParams.RequestParams.priority.lastIndexOf("P") + 1));
				if (!isNaN(priorityNumber)) {
					if (priorityNumber != highestPriority) {
						postParams = qHealthApiParams;
						data = qHealthApiData;
					}
				}
			}	
		}
		if(data.conf.skillName.split(":").length > 1)
        {
            lpprioritylevel=data.conf.skillName.split(":")[1].trim()
        }
		// console.log(postParams, "Agent availability params");
		var xmlhttp = null
		var qhealthUrl = new Object();
		qhealthUrl.prod = "https://mobile.vzw.com/mfchatnode/rest/appasync/agentAvailability";
		qhealthUrl.sit = "https://mobile-ppd-west.vzw.com/mfchatnode/rest/appasync/agentAvailability";
		if (location.href.indexOf("www.verizon.com")!=-1) {
			var url = qhealthUrl.prod;
		}
		else {
			var url = qhealthUrl.sit;
		}
		if (window.XMLHttpRequest){/* code for IE7+, Firefox, Chrome, Opera, Safari */
			xmlhttp=new XMLHttpRequest();
		}else{/* code for IE6, IE5 */
			xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
		}
		xmlhttp.onreadystatechange=function(){
			if (xmlhttp.readyState==4 && xmlhttp.status ==200 ){
				var lpAvailable = true;
				try {
					var responseString = xmlhttp.response;
					var responseValue = JSON.parse(responseString);
					var lpAgentAssignment = 0;
					var lpUnassignedConversation = 0;
					if (responseValue != null && typeof responseValue != "undefined" && responseValue.metrics != null && typeof responseValue.metrics != "undefined" && responseValue.metrics.waitTimeForAgentAssignment_90thPercentile != null && typeof responseValue.metrics.waitTimeForAgentAssignment_90thPercentile != "undefined"){
						lpAgentAssignment = responseValue.metrics.waitTimeForAgentAssignment_90thPercentile;
					}
					if (responseValue != null && typeof responseValue != "undefined" && responseValue.metrics != null && typeof responseValue.metrics != "undefined" && responseValue.metrics.unassignedConversations != null && typeof responseValue.metrics.unassignedConversations != "undefined"){
						lpUnassignedConversation = responseValue.metrics.unassignedConversations;
					}
					lpAvailable = checkLPChatAvailability(lpprioritylevel, lpAgentAssignment, lpUnassignedConversation);
				}
				catch(e){
					// console.log(e, "Agent availability API callback error");
				}	
				// console.log(lpAvailable, "Agent availability API response")
				try {
					qHealthCount++;
					if (!lpAvailable) {
						lp_Hide_Count = 0;
						if (startQhealthInterval) {
							apiInterval = setInterval(getSkillData, 30000, qHealthApiParams, qHealthApiData, true);
						}
						startQhealthInterval = false;
						hideLPChatButton();
						lpChatHided = true;
					}
					else{
						clearInterval(apiInterval);
						lpChatEnabled = true;
						startQhealthInterval = false;
						if(lpChatHided){
							lpChatHided = false;
							displayLPChatButton()
						}
						if (!lpAutoClickFlag){
							lpAutoClicker(data);
						}
					}
				}
				catch(e){
					// console.log(e, "Agent availability API callback error");
				}
			}
		}
		xmlhttp.open("POST",url,true);
		if(postParams!=null && typeof postParams!="undefined" ){				
			xmlhttp.setRequestHeader("Content-Type", "application/json");
			xmlhttp.send(JSON.stringify(postParams));
		}else{
			xmlhttp.send();
		}
	}catch(e){			
	}
}
//P1 - 4, P2- 6, P3 -8, P4-10,P5-15
function checkLPChatAvailability(lppriority,lpwaittime,lpunassignedconv){
	var checkLPAvailable=true;
	try {
		if (lpwaittime > 900001 && lpunassignedconv < 50) {
			checkLPAvailable = true;
		}else if(lppriority=="P1"&&(lpwaittime>240000||lpunassignedconv>200)){
			checkLPAvailable=false;
		}else if(lppriority=="P2"&&(lpwaittime>360000||lpunassignedconv>200)){
			checkLPAvailable=false;
		}else if(lppriority=="P3"&&(lpwaittime>480000||lpunassignedconv>200)){
			checkLPAvailable=false;
		}else if(lppriority=="P4"&&(lpwaittime>600000||lpunassignedconv>200)){
			checkLPAvailable=false;
		}else if(lppriority=="P5"&&(lpwaittime>900000||lpunassignedconv>200)){
			checkLPAvailable=false;
		}else if(lppriority==""&&(lpwaittime>900000||lpunassignedconv>200)){
			checkLPAvailable=false;
		}
	}	
	catch(e){
		// console.log(e, "checkLPChatAvailability function error")
	}
	return checkLPAvailable
}

var lpAutoClickFlag=false;
function lpAutoClicker(data){
	try{
		// console.log("lpAutoClicker engagement "+data.eng.engData.engagementName+" displayed")
        //         console.log("lpAutoClicker engagmentId "+data.eng.engData.engagementId)
        //         console.log("skill "+data.conf.skillName)
                
            // is this a proactive engagement?
            if (!(data && data.eng && data.eng.engData && data.eng.engData.engagementType === 1)) return false;

			if (lpTag.device.familyName() !== "Desktop") {
				return false;
			  }
			
			var lpBlockProactiveChat = false;
			if (lpTag != null && typeof lpTag != 'undefined' && lpTag.section.length > 2 && lpTag.section[2] !=null && typeof lpTag.section[2] !='undefined'){
				var lpSection = lpTag.section[2].replace(/[^a-zA-Z0-9 ]/g, "");
				lpSection = lpSection.substring(lpSection.indexOf("l") + 2);
				if(lpSection === "fiostv" || lpSection === "fiosfastestinternet" || lpSection === "moving" || lpSection === "phone" || lpSection === "accessories"){
					lpBlockProactiveChat = lpReInviteBlocked("learn");
				}
				else {
					lpBlockProactiveChat = lpReInviteBlocked(lpSection);
				}
			}
			else {
				lpBlockProactiveChat = lpReInviteBlocked('thisSection');
			}
            // if (lpReInviteBlocked(lpSection)||lpReInviteBlocked('thisSection')||lpReInviteBlocked('learn')) return false;
			if (lpBlockProactiveChat) {
				return false;
			}
            // has this person already dismissed an invitation in this section in the past 24 hours?
            // check here for the cookie that indicates they have received a proactive of this sort in the past 24 hours
//             if (cookieExistsIndicatingVisitorHasReceivedThisProactiveRecently()) return false;

            // is there availability in the relevant skill?
            // Maybe you can add a callback to the getSkillData function, like getSkillData(postParams, callback)
            // and then if availability = true call the callback? Then you could pass in the rendererStub click as the callback

            // a short timeout is necessary because the engagement is not yet clickable when the event fires.
            // If you check availability or do something else that takes some time you won't need the callback
			window.setTimeout( function(){
            	// console.log("lpAutoClick data.eng.engData.engagementId "+data.eng.engData.engagementId);
	lpTag.taglets.rendererStub.click(data.eng.engData.engagementId);
	lpProactiveInvited=true;
	lp_Chat_Auto_Opened = true;
	// console.log("lpAutoClick lpProactiveInvited "+lpProactiveInvited);
				}, 100);
			}
			catch(e){

			}
			}


function lpReInviteBlocked(section) {
    // check cookie to see if this person is blocked from receiving a pop-up in this section
    // return bool (false = prevent the popUp)
    return document.cookie.indexOf("blockInvites_".concat(section)) > -1;
  }

  function lpBlockReInvite(section) {
    // set the cookie that will indicate that this visitor is excluded from pop-ups in this section
    document.cookie = "blockInvites_".concat(section, "=true;max-age=86400");
  }
  var lpProactiveInvited=false;
function lpDismissalDetector() {
	try{
	lpAutoClickFlag=true;
    // get window state events from this page visit
    var windowStateEvents = lpTag.events.hasFired('lpUnifiedWindow', 'state'); // has the window been in the "chatting" state during this page visit?

    var conv = windowStateEvents.find(function (event) {
      return event.data.state === 'chatting';
    }); // if the window was opened programmatically and closed without a conversation, prevent subsequent invites

    if (lpProactiveInvited && !conv) {
		if (lpTag != null && typeof lpTag != 'undefined' && lpTag.section.length > 2 && lpTag.section[2] !=null && typeof lpTag.section[2] !='undefined'){
			var lpSection = lpTag.section[2].replace(/[^a-zA-Z0-9 ]/g, "");
			lpSection = lpSection.substring(lpSection.indexOf("l") + 2);
			if(lpSection === "fiostv" || lpSection === "fiosfastestinternet" || lpSection === "moving" || lpSection === "phone" || lpSection === "accessories"){
				lpBlockReInvite("learn");
			}
			else {
				lpBlockReInvite(lpSection);
			}
		}
		else {
			lpBlockReInvite('thisSection');
		}
	}
}
catch(e){
	
}
  }

function transformLpSectionArray(item, index) {
	section_array[index] = "l" + (index + 2) + ":" + item;
}

function makeLpAjaxCall(lpCtmrInfo) {
	try {
		if(readTCCookieInfo("lp_gsid")!=null&&readTCCookieInfo("lp_gsid")!="")
		{
			var globalSessionId=readTCCookieInfo("lp_gsid");
		}
// 		var globalSessionId = getdotcomGlobalSessionId();
		var gid = "";
		if (globalSessionId != 'undefined' && null != globalSessionId && globalSessionId != '') {
			gid = globalSessionId;
		} else if(readTCCookieInfo('gulpid')!=null&&readTCCookieInfo('gulpid')!=""){
			gid=readTCCookieInfo('gulpid');
		}else{
			gid = new Date().getTime() + "" + parseInt(Math.random() * 100);
			createTCCookie('gulpid', gid);
		}
		var randomChatId="VZT"+new Date().getTime() + "" + parseInt(Math.random() * 1000);
		if(readTCCookieInfo('lp_sub_wln')==null||readTCCookieInfo('lp_sub_wln')=="")
		{
			createTCCookie('lp_sub_wln',randomChatId);
		}

		gid_cookie=readTCCookieInfo('lp_sub_wln');
		
		var chatData = {
			"customer-cookie": lpCtmrInfo,
			"globalSessionId": readTCCookieInfo("lp_gsid"),
			"sub":gid_cookie,
			"phone_number":lp_btn
		};
		var log = {
			"log-message": chatData,
			"log-level": "warn",
			"log-action": "LP_INITIALIZATION",
			"LOG-TO-DB": "true",
			"log-time-stamp": new Date().getTime()
		};
		var postParams = "log=" + JSON.stringify(log);
		saveUserInfoDataLP(postParams, enableLP);
	}
	catch (e) {
	}
}

var lpRetailChatAuth=function(callback){
	if(readTCCookieInfo("lp_jwt_wln")!=null&&readTCCookieInfo("lp_jwt_wln")!="")
	{
		
	 createTCCookie('LP_CHAT_IN_PROGRESS', 'Y');
	 global_jwt=readTCCookieInfo("lp_jwt_wln");
	 callback(global_jwt);
	}else{
		callback(global_jwt);
	}
};


var lpGetAuthenticationToken = function (callback) {
	if(readTCCookieInfo("lp_jwt_wln")!=null&&readTCCookieInfo("lp_jwt_wln")!="")
{
	
	createTCCookie('LP_CHAT_IN_PROGRESS', 'Y');
// 	if(global_jwt!="")
// 	{
// 	callback(global_jwt);
// 	}else{
// 		global_jwt=readTCCookieInfo("lp_jwt");
// 		if(global_jwt!=null)
// 		{
// 			callback(global_jwt);
// 		}else{
// 			global_jwt=readTCCookieInfo("lp_init_jwt");
// 			callback(global_jwt);
// 		}
// 	}

 global_jwt=readTCCookieInfo("lp_jwt_wln");
 callback(global_jwt);
}else{
	callback(global_jwt);
}
// 	lpTag.events.bind('RENDERER_STUB', 'AFTER_CREATE_ENGAGEMENT_INSTANCE', function (data) { console.log("skill_data "+data) })
// 	lpTag.events.bind("lp_SMT", "MONITORING_STATE", lp_monitoring_state);
// 	lpTag.events.bind("lpUnifiedWindow", "state", lp_state);
// 	lpTag.events.bind("lpUnifiedWindow", "conversationInfo", lp_conv_info);
// 	lpTag.events.bind("lpUnifiedWindow", "maximized", lp_maximized);
// 	lpTag.events.bind("lpUnifiedWindow", "minimized", lp_minimized);
// 	lpTag.events.bind("lpUnifiedWindow", "engagementData", lp_engage_data);
// 	lpTag.events.bind("lpUnifiedWindow", "windowClosed", lp_conv_info);
};

function saveUserInfoDataLP(postParams, enableLPCallback) {

	var xmlhttp = null;
	var url = getHost() + clientLogServletPath + clientLogServletName; 
	try {
		if (window.XMLHttpRequest) {/* code for IE7+, Firefox, Chrome, Opera, Safari */
			xmlhttp = new XMLHttpRequest();
		} else {/* code for IE6, IE5 */
			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
		}
		xmlhttp.onreadystatechange = function () {
			if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
				if (xmlhttp.responseText != null) {
					var jwt = xmlhttp.responseText;
					enableLPCallback(jwt, postParams);


				}
			}
		}
		xmlhttp.open("POST", url, true);
		if (postParams != null && typeof postParams != 'undefined') {
			postParams += "&timestamp=" + new Date().getTime();
			xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			xmlhttp.send(postParams);
		} else {
			xmlhttp.send();
		}
	} catch (e) {
	}
}


///////////////////Site catalyst LP calls///////////////////////////////////
////onChatLaunched,onAgentAssigned,onAgentInteractive,onChatClosed//////////

function lp_monitoring_state(data, eventInfo) {
	if (window.console && window.JSON) {
		// console.log(JSON.stringify(data) + " triggered by: " + JSON.stringify(eventInfo));
	}
}
var lp_chatEnded = false;
function lp_state(data, eventInfo) {
	try{
		var headers = document.querySelectorAll("[data-lp-point='headerText']");
		for(var k=0; k<headers.length; k++){
			headersData=headers[k];
			headerObserver.observe(headersData, { childList: true })
		
		}
		var inspicio = document.querySelectorAll("[data-lp-point='widget_sdk']");
		for(var l=0; l<inspicio.length; l++){
			inspicioData=inspicio[l];
			inspicioObserver.observe(inspicioData, { attributes: true })
		
		}
		var agentTyping = document.querySelectorAll("[data-lp-point='agent_is_typing']");
		for(var n=0; n<agentTyping.length; n++){
			agentTypingData=agentTyping[n];
			agentTypingObserver.observe(agentTypingData, { attributes: true })
		
		}
	}
	catch(err){}		
	if (window.console && window.JSON) {
		if (data.state == 'init') {
			lp_chatEnded = false;
			if (typeof lp_visitor_id != "" && typeof lp_conversation_id != "") {
				LPcallSiteCatalyst("event123", "onChatLaunched", "onLPChatLaunched", lp_visitor_id, lp_conversation_id);
				if (lp_Chat_Auto_Opened){
					vzdlSiteCatalyst("event88", "LPchatwindow", "onChatLaunched", "onLPChatLaunched", lp_visitor_id, lp_conversation_id);
					lp_Chat_Auto_Opened = false;
				}
				else {
					vzdlSiteCatalyst("event87", "LPchatwindow", "onChatLaunched", "onLPChatLaunched", lp_visitor_id, lp_conversation_id);
				}
			}
		} else if (data.state == 'interactive') {
			    // LPcallSiteCatalyst("event127", "onAgentInteractive", "onLPAgentInteractiveChat", lp_visitor_id, lp_conversation_id, lp_agent_id);
// 				if (lp_agent_id == "") {
// 					if (lp_agent_pid != "") {
// 					    getLPAgentId(lp_agent_pid, lp_conversation_id, true);	
// 					}
// 					else {
// 						callLPCompensationFlow(lp_conversation_id,lp_agent_id,"VZID");
// 					}
// 				}
// 				else {
// 					callLPCompensationFlow(lp_conversation_id,lp_agent_id,"VZID");
// 				}
		if(typeof lp_agent_pid!='undefined'&&lp_agent_pid!=null&&lp_agent_pid!='')
		{
				// console.log("lp_state interactive "+lp_agent_pid+" lp_conversation_id "+lp_conversation_id);
				getLPAgentId(lp_agent_pid, lp_conversation_id, true);
		}
		} else if (data.state == 'ended') {
			lp_chatEnded = true;
			lpTag.external.promoAdder.firstMessage = true;
			if (typeof lp_visitor_id != "" && typeof lp_conversation_id != "") {
				LPcallSiteCatalyst("event128", "onChatClosed", "onLPChatClosed", lp_visitor_id, lp_conversation_id);
				// vzdlSiteCatalyst("event128", "LPchatwindow", "onChatClosed", "onLPChatClosed", lp_visitor_id, lp_conversation_id);
			}
		} else if (data.state == 'chatting') {
			    if(readTCCookieInfo('LP_CHAT_IN_PROGRESS')=='N')
				{
			        createTCCookie('LP_CHAT_IN_PROGRESS', 'Y');
				}
			if (lp_agent_assigned_flag) {
				lp_agent_assigned_flag = false;
				if (typeof lp_visitor_id != "" && typeof lp_conversation_id != "" && typeof lp_agent_id != "") {
					LPcallSiteCatalyst("event126", "onAgentAssigned", "onLPAgentJoined", lp_visitor_id, lp_conversation_id, lp_agent_id);
				}
			}
		}
		// console.log(JSON.stringify(data) + " triggered by: " + JSON.stringify(eventInfo));
	}
}

function lp_conv_info(data, eventInfo) {
	if (window.console && window.JSON) {
		if (typeof data.visitorId != 'undefined'&&data.visitorId !=null&&data.visitorId !='') {
			lp_visitor_id = data.visitorId;
		}
		if (typeof data.agentId != 'undefined'&&data.agentId !=null&&data.agentId !='') {
			lp_agent_pid = data.agentId;
			// console.log("lp_conv_info "+lp_agent_pid);
// 			getLPAgentId(lp_agent_pid, lp_conversation_id, false);
		}
		if (typeof data.conversationId != 'undefined'&&data.conversationId !=null&&data.conversationId !='') {
			lp_conversation_id = data.conversationId;
		}
		// console.log(JSON.stringify(data) + " triggered by: " + JSON.stringify(eventInfo));
	}
}

function lp_maximized(data, eventInfo) {
	if (window.console && window.JSON) {
		
		// console.log(JSON.stringify(data) + " triggered by: " + JSON.stringify(eventInfo));
	}
}
function lp_minimized(data, eventInfo) {
	if (window.console && window.JSON) {
		// console.log(JSON.stringify(data) + " triggered by: " + JSON.stringify(eventInfo));
	}
}
function lp_engage_data(data, eventInfo) {
	if (window.console && window.JSON) {
		// console.log(JSON.stringify(data) + " triggered by: " + JSON.stringify(eventInfo));
	}
}
function lp_close_chat(){
	try{
		if(readTCCookieInfo("lp_sub_wln")!=null)
		{
			deleteLpCookie("lp_sub_wln");
		}		
		if(readTCCookieInfo("lp_jwt_wln")!=null)
		{
			deleteLpCookie("lp_jwt_wln");
		}
	makeLpAjaxCall(lpCtmrInfo);
	}
	catch(e)
	{

	}
	createTCCookie('LP_CHAT_IN_PROGRESS', 'N');
	createTCCookie('LP_AGENT_ID','N');
	lpDismissalDetector();
	try {
		if (lpConnectionsDiscountValue.toUpperCase() == "Y" || readTCCookieInfo('VZ_CONNECTIONS_DISCOUNT') == 'Y')
		{
			lp_Global_Hide_Count = 0;
			hideLPChatButtonForGlobal()
			var section = (lpTag && lpTag.section) || [];
			section.push("messagingExclude");
			lpTag.newPage(location.href, {
				section: section,
				sdes: [
				], taglets: {
				}
			});
		}
	}
	catch(e){
		// console.log(e, "error in close chat")
	}
}

function getLPAgentId(lp_agent_pid, lp_conversation_id) {
	// console.log("getLPAgentId "+lp_agent_pid+" lp_conversation_id "+lp_conversation_id);
	var xmlhttp = null;
	var agentData = {
		"lp_agent_pid": lp_agent_pid,
		"lp_conversation_id": lp_conversation_id
	};
	var log = {
		"log-message": agentData,
		"log-level": "warn",
		"log-action": "LP_GET_AGENT_ID",
		"LOG-TO-DB": "true",
		"log-time-stamp": new Date().getTime()
	};
	var postParams = "log=" + JSON.stringify(log);
	var url = getHost() + clientLogServletPath + clientLogServletName; 
	try {
		if (window.XMLHttpRequest) {/* code for IE7+, Firefox, Chrome, Opera, Safari */
			xmlhttp = new XMLHttpRequest();
		} else {/* code for IE6, IE5 */
			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
		}
		xmlhttp.onreadystatechange = function () {
			if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
				if (xmlhttp.responseText != null&&xmlhttp.responseText !='') {
					lp_agent_id = xmlhttp.responseText;
					// console.log(" getLPAgentId "+lp_agent_id+" lp_visitor_id "+lp_visitor_id+" lp_conversation_id "+lp_conversation_id);
					if(lp_agent_id  != null && lp_agent_id.toLowerCase().indexOf('liveperson') == -1 && lp_agent_id.toLowerCase().indexOf('survey') == -1 && lp_agent_id.toLowerCase().indexOf('prioritizer') == -1){
						createTCCookie('LP_AGENT_ID',lp_agent_id);
						callLPCompensationFlow(lp_conversation_id, lp_agent_id, "VZID");	
						LPcallSiteCatalyst("event127", "onAgentInteractive", "onLPAgentInteractiveChat", lp_visitor_id, lp_conversation_id, lp_agent_id);
						vzdlSiteCatalyst("event188", "LPchatwindow", "onAgentAssigned", "onAgentAssigned", lp_visitor_id, lp_conversation_id, lp_agent_id);
					}
					// 						enableLPCallback(jwt);	
				}
			}
		}
		xmlhttp.open("POST", url, true);
		if (postParams != null && typeof postParams != 'undefined') {
			postParams += "&timestamp=" + new Date().getTime();
			xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			xmlhttp.send(postParams);
		} else {
			xmlhttp.send();
		}
	} catch (e) {
	}
}

function LPcallSiteCatalyst(aeventId, aeventName, aAction, customerId, issueId, agentId) {
	if (agentId == null) {
		agentId = "";
	}

	if (typeof _satellite != 'undefined' && typeof digitalData != 'undefined' && digitalData != null) {

		//--------------------------------------------DTM Integration ----------------------------------------------

		try {

			var ctProp2 = "residential";
			var ctProp3 = "learn";

			if (typeof digitalData.page.businessUnit != 'undefined') {
				ctProp2 = digitalData.page.businessUnit;
			}
			if (typeof digitalData.page.pageType != 'undefined') {
				ctProp3 = digitalData.page.pageType;
			}

			var chatUpdateEvent = {
				eventInfo:
				{
					eventName: "pageViewUpdate",
					type: aeventName,
					action: aAction,
					timeStamp: new Date(),
					processed:
					{
						adobeAnalytics: false //dtm will change this to true once processed 
					}
				},
				page:
				{
					pfxID: "cht",
					pageName: "LPchatwindow", //same value as #hdn_simplepageName 
					detailPageName: aeventName + "| " + ctProp2 + " _" + ctProp3, //same value as #hdn_detailpageName 
					applicationName: "LPchat",
					chatRepID: lp_agent_id
				},
				userProfile:
				{
					profileID: "Chat User " + lp_conversation_id + "| EnterpriseID " + lp_agent_id
				},
				scEvents: aeventId //String of events as in #hdn_events
			};

			//Push it onto the event array on digitalData object 
			window.digitalData = window.digitalData || {};
			window.digitalData.events = digitalData.events || [];
			window.digitalData.page.chatRepID = lp_agent_id;
			window.digitalData.events.push(chatUpdateEvent);


			//Create and dispatch an event trigger 
			if (typeof sendCustomEvent != 'undefined') {
				sendCustomEvent("pageViewUpdate");
			} else {
				sendCustomEventChat("pageViewUpdate");
			}
		} catch (ee) {
			//alert(ee.description);
		}

		//--------------------------------------DTM integration end--------------------------------------------------

	} else {
		try {
			//sitecatalyst calls
			var temp_pfxID = s_837.pfxID;
			var temp_simplepageName = s_837.simplepageName;
			var temp_prop5 = s_837.prop5;
			var temp_prop48 = s_837.prop48;
			var temp_detailpageName = s_837.detailpageName;
			var temp_events = s_837.events;
			var temp_prop3 = s_837.prop3;

			s_837.pfxID = "cht";
			s_837.simplepageName = "LPchatwindow";
			s_837.prop5 = "Chat User " + lp_conversation_id;
			s_837.prop48 = "LPchat";
			s_837.detailpageName = "LP chat Launched" + "|" + s_837.prop2 + " _" + s_837.prop3;
			s_837.events = "event48";
			if (typeof IsAccessoriesCompFlow != 'undefined' && IsAccessoriesCompFlow != null && (IsAccessoriesCompFlow == true || IsAccessoriesCompFlow.toLowerCase() == 'true')) {
				s_837.prop3 = "accessories";
			}
			var s_code = s_837.t();
			setTimeout("resetSiteCatParams('" + temp_pfxID + "','" + temp_simplepageName + "','" + temp_prop5 + "','" + temp_prop48 + "' ,'" + temp_detailpageName + "' ,'" + temp_prop3 + "' ,'" + temp_events + "');", 500);
		} catch (e) { }
	}


}

function getLPParamName(paramName) {
	var lPParamName = "";
	if (typeof lpParamsMap == "undefined" || null == lpParamsMap) {
		lPParamName = paramName;
	} else {
		lPParamName = lpParamsMap[paramName];
	}
	if (null == lPParamName) {
		lPParamName = paramName;
	}
	return lPParamName;
}
var lpCtmrInfo = {
	"type": "ctmrinfo",
	"info": {
	}
};
var lpProductsInfo = {};
var lpParamsMappingConfig = {
	"ctmrinfo,loginStatus": ["LoginFlag", "Login_Flag", "LOGIN_FLAG"],
	//Need to check Subaccount flow 
	"ctmrinfo,role": ["SUB_ACCOUNT"],
	/////////////////
	"ctmrinfo,customerId,visionAccountId": ["VisionAccountId", "visionAccountId", "visionaccountid", "visionaccid"],
	"ctmrinfo,customerId,visionCustomerId": ["visioncustomerid", "VisioncustomerId", "VisionCustomerID", "VisionCustomerId", "visioncustid","visionCustomerId"],
	"ctmrinfo,username": ["VISIONID", "VisionID", "visionId"],
	"ctmrinfo,ctype": ["CustomerType", "customerType", "custType", "customerType", "custype"],
	"ctmrinfo,cstatus,quantumEligible": ["quantumEligible", "QuantumEligible", "Quantum Eligible", "quantumeligible", "quantumEligible"],
	"ctmrinfo,cstatus,fiosReady": ["FiOSReady", "FiOS Ready", "fiosReady", "fiosready"],
	"ctmrinfo,cstatus,fiosSelfInstall": ["FiOSSelfInstall", "selfinstall", "fiosSelfInstall", "FiOS Self install"],
	"ctmrinfo,socialId,guiSessionId": ["GUI_SESSION_ID", "GUISessionId", "GUI_SESSION_ID", "GuiSessionId", "guisessionid"],
	"ctmrinfo,socialId,globalSessionId": ["GlobalSessionID", "GlobalSessionId", "globalsessionid", "globalSessionID", "GlobalSessionid", "globalSessionId"],
	"ctmrinfo,customerId,BAN": ["BAN", "Customer_BAN", "CustomerBAN", "ban"],
	"ctmrinfo,customerId,BTN": ["Customer_BTN", "tn", "altbtn", "btn", "tnl", "CustomerBTN","BTN"],
	"ctmrinfo,customerId,CAN": ["Customer_CAN", "AccountNumber", "accountNumber", "accountnumber", "billingcan", "CustomerCAN","CAN"],
	"ctmrinfo,customerId,PCAN": ["Customer_PCAN", "pcan", "CustomerPCAN","PCAN"],


	"personal,lastName": ["CustName", "custname", "customerName", "NAME"],
	"personal,contacts,address,region,city": ["City", "CITY", "city"],
	"personal,contacts,email": ["email", "Email", "CustomerEmail", "E-mail"],
	"personal,contacts,address,region,primary": ["Address", "AddressLine1", "Customer_BillingAddress", "CustomerBillingAddress", "address"],
	"personal,contacts,address,region,service": ["Customer_ServiceAddress", "CustomerServiceAddress"],
	"personal,contacts,address,region,existing": ["EXISTING_CUST_ADDRESS"],
	"personal,contacts,address,region,move": ["MOVE_CUST_ADDRESS"],
	"personal,contacts,address,region,new": ["NEW_CUST_ADDRESS"],
	"personal,contacts,address,region,state": ["Customer_State", "state", "vzstate", "STATE", "SPECIAL STATE"],
	"personal,contacts,address,region,street": ["st", "street"],
	"personal,contacts,address,region,zipcode": ["ZIP_CODE", "zipCode", "Zipcode", "zipcode", "zip", "ZipCode"],
	"personal,contacts,address,region,pluscode": ["addressid", "AddressID", "addressId", "ADDRESS_ID"],
		"error,message": ["CRV_Number"],
	"error,code": ["Credit_Fail_Id"],
	"service_activity,status,loopqual":["LOOPQUAL"],
	"service_activity,status,customersaveorder":["CUSTOMERSAVEDORDER"],
	"service_activity,topic,restoreintent":["RESTOREINTENT"],
	"service_activity,status,winback":["WINBACK"],
	"service_activity,status,tech_scheduled":["TECH_SCHEDULED"],
	"mrktInfo":["VENDOR_NAME"],
    "lead,hbaflag":["HBA_FLAG"],
    "lead,SAVED_CART":["SAVED_CART"],
    "lead,leadId": ["DOTCOM_SESSIONID", "DOTCOMSESSIONID", "dotcomsid", "dotcomSessionId"],
	"cart":["PRODUCTS_IN_CART"]
};
var lpParamsMap = (function (config) {
	var paramsMap = {};
	try {
		if (null == config) {
			return paramsMap;
		}
		for (var configKey in config) {
			var configArr = config[configKey];
			if (null != configArr && configArr.length > 0) {
				var arraySize = configArr.length;
				for (var idx = 0; idx < arraySize; idx++) {
					paramsMap[configArr[idx]] = configKey;
				}
			}
		}
	}
	catch (e) {

	}
	return paramsMap;
})(lpParamsMappingConfig)

lpPersonalString = '{"type": "personal","personal": {"firstname": "","lastname": "","contacts": [{"email": "","phone": "","address":{"country": "","region": ""}}],"language": "en-US","company": ""}}';
var lpPersonalJson = JSON.parse(lpPersonalString);
var lpPersonalAddrObj = "";
var lpCustVal = "";
var lpSocVal = "";
var lpStatusVal = "";
var lpVisionId = "";
var lp_error={};
var lp_error = {error:{}};
var lp_service_activity_array=[];
var lp_lead_array=[];
var lp_btn="";


function setLPDataPass(lp_path, value) {
	//     var lp_path = getLPParamName(name);
	try {
		// console.log(lp_path+":"+value);
		if (null != lp_path && lp_path != 'undefined') {
			if (value == null || value == '' || value == 'na' || value == 'NA') {
				return;
			}
			var get_lp_value_path = lp_path.split(",");
			if ("APPLICABLE_SEVICES" == lp_path || "applicable_sevices" == lp_path.toLowerCase() || "applicableservices" == lp_path.toLowerCase()) {
				chtProdTypes_a = value;
				try {
					chtProdTypes = unescape(chtProdTypes);
					chtProdTypes = chtProdTypes.toUpperCase();
					chtProdTypes = chtProdTypes.replace(/ /g, '');
					chtProdTypes = chtProdTypes.replace(/\+/g, '');
					chtProdTypes = chtProdTypes.replace(/\|/g, ',');
					chtProdTypes = chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
					chtProdTypes = chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
					chtProdTypes = chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
					chtProdTypes = chtProdTypes.replace(/DTV/g, "DIRECTTV");
				} catch (eex) { }
				value = chtProdTypes_a;
				var lp_service_activity_obj = {};
				lp_service_activity_obj.topic = value;
				lp_service_activity_obj.category = "APPLICABLE";
				lp_service_activity_obj.status = 9;
				lp_service_activity_array.push(lp_service_activity_obj);

			}
			if ("EXISTING_SEVICES" == lp_path || "existing_services" == lp_path.toLowerCase()) {
				chtProdTypes_e = value;
				try {
					chtProdTypes = unescape(chtProdTypes);
					chtProdTypes = chtProdTypes.toUpperCase();
					chtProdTypes = chtProdTypes.replace(/ /g, '');
					chtProdTypes = chtProdTypes.replace(/\+/g, '');
					chtProdTypes = chtProdTypes.replace(/\|/g, ',');
					chtProdTypes = chtProdTypes.replace(/HSI/g, "HIGHSPEEDINTERNET");
					chtProdTypes = chtProdTypes.replace(/DSL/g, "HIGHSPEEDINTERNET");
					chtProdTypes = chtProdTypes.replace(/FIOSDATA/g, "FIOSINTERNET");
					chtProdTypes = chtProdTypes.replace(/DTV/g, "DIRECTTV");
				} catch (eex) { }
				value = chtProdTypes_e;
				var lp_service_activity_obj = {};
				lp_service_activity_obj.topic = value;
				lp_service_activity_obj.category = "EXISTING";
				lp_service_activity_obj.status = 2;
				lp_service_activity_array.push(lp_service_activity_obj);
			}
			switch (get_lp_value_path[0]) {
				case "personal":
					if (lp_path == "personal,lastName") {
						lpPersonalJson["personal"]["lastname"] = value.replace(/\+/g,'acepl');
					}
					else if (lp_path == "personal,contacts,email") {
						lpPersonalJson["personal"]["contacts"][0]["email"] = value;
					} else if (lp_path == "personal,contacts,address,region,primary") {
						lpPersonalJson["personal"]["contacts"][0]["address"]["region"] = "primary";
						lpPersonalJson["personal"]["contacts"][0]["address"]["country"] = value.replace(/\+/g,'acepl');
					} else if (lp_path == "personal,contacts,address,region,service") {
						createLPContactObj("service", value, lpPersonalJson);
					} else if (lp_path == "personal,contacts,address,region,existing") {
						createLPContactObj("existing", value, lpPersonalJson);
					} else if (lp_path == "personal,contacts,address,region,move") {
						createLPContactObj("move", value, lpPersonalJson);
					} else if (lp_path == "personal,contacts,address,region,new") {
						createLPContactObj("new", value, lpPersonalJson);
					} else if (lp_path == "personal,contacts,address,region,state" || lp_path == "personal,contacts,address,region,zipcode" || lp_path == "personal,contacts,address,region,street" || lp_path == "personal,contacts,address,region,city") {
						if (lpPersonalAddrObj == "") {
							lpPersonalAddrObj = value.replace(/\+/g,'acepl');
						} else {
							lpPersonalAddrObj = lpPersonalAddrObj + "," + value.replace(/\+/g,'acepl');
						}
					} else if (lp_path == "personal,contacts,address,region,pluscode") {
						createLPContactObj("pluscode", value, lpPersonalJson);
					}
					break;
				case "lead":
					// if (lp_path == "lead,leadId") {
					// 	var lp_lead_obj = {};

					// 	lp_lead_obj["leadId"] = value;
					// 	lp_lead_obj["topic"] = "dotcom session id";
					// 	lp_lead_array.push(lp_lead_obj);
					// }
					// if (lp_path == "lead,hbaflag") {
					// 	var lp_lead_obj = {};
					// 	lp_lead_obj["topic"] = "HBA";
					// 	lp_lead_obj["leadId"] = value;
					// 	lp_lead_array.push(lp_lead_obj);
					// }
					// if (lp_path == "lead,SAVED_CART") {
					// 	var lp_lead_obj = {};
					// 	lp_lead_obj["topic"] = "Saved cart";
					// 	lp_lead_obj["leadId"] = value;
					// 	lp_lead_array.push(lp_lead_obj);
					// }

					break;
				case "cart":
					lp_cart_update_products = [];
					var cart_obj = value;
					if (null != cart_obj.serviceHeaders && typeof cart_obj.serviceHeaders != 'undefined' && null != cart_obj.serviceHeaders.servicehead && typeof cart_obj.serviceHeaders.servicehead != 'undefined' && cart_obj.serviceHeaders.servicehead.length > 0) {
						var service_head_arr = cart_obj.serviceHeaders.servicehead;
						createAndPushCartUpdateObj(service_head_arr);
					}
					if (null != cart_obj.oneTimeCharge && typeof cart_obj.oneTimeCharge != 'undefined' && null != cart_obj.oneTimeCharge.onetimecharge && typeof cart_obj.oneTimeCharge.onetimecharge != 'undefined' && cart_obj.oneTimeCharge.onetimecharge.length > 0) {
						var one_time_charge = cart_obj.oneTimeCharge.onetimecharge;
						createAndPushCartUpdateObj(one_time_charge, "oneTimeCharge");
					}
					if (null != cart_obj.equipments && typeof cart_obj.equipments != 'undefined' && null != cart_obj.equipments.equipment && typeof cart_obj.equipments.equipment != 'undefined' && cart_obj.equipments.equipment.length > 0) {
						var equipment = cart_obj.equipments.equipment;
						createAndPushCartUpdateObj(equipment, "equipments");
					}
					if (null != cart_obj.listing && typeof cart_obj.listing != 'undefined' && null != cart_obj.listing.listingProds && typeof cart_obj.listing.listingProds != 'undefined' && cart_obj.listing.listingProds.length > 0) {
						var listing = cart_obj.listing.listingProds;
						createAndPushCartUpdateObj(listing, "listing");
					}
					if (null != cart_obj.channel && typeof cart_obj.channel != 'undefined' && null != cart_obj.channel.channelsProds && typeof cart_obj.channel.channelsProds != 'undefined' && cart_obj.channel.channelsProds.length > 0) {
						var channel = cart_obj.channel.channelsProds;
						createAndPushCartUpdateObj(channel, "channel");
					}
					if (null != cart_obj.internet && typeof cart_obj.internet != 'undefined' && null != cart_obj.internet.internetProds && typeof cart_obj.internet.internetProds != 'undefined' && cart_obj.internet.internetProds.length > 0) {
						var internet = cart_obj.internet.internetProds;
						createAndPushCartUpdateObj(internet, "internet");
					}
					if (null != cart_obj.Promotions && typeof cart_obj.Promotions != 'undefined' && null != cart_obj.Promotions.promotions && typeof cart_obj.Promotions.promotions != 'undefined' && cart_obj.Promotions.promotions.length > 0) {
						var promotions = cart_obj.Promotions.promotions;
						createAndPushCartUpdateDiscounts(promotions, "Promotions");

					}
					if (null != cart_obj.rewardOffers && typeof cart_obj.rewardOffers != 'undefined' && null != cart_obj.rewardOffers.rewardOffers && typeof cart_obj.rewardOffers.rewardOffers != 'undefined' && cart_obj.rewardOffers.rewardOffers.length > 0) {
						var rewardOffers = cart_obj.rewardOffers.rewardOffers;
						createAndPushCartUpdateDiscounts(rewardOffers, "rewardOffers");
					}
					if (null != cart_obj.StdSection && typeof cart_obj.StdSection != 'undefined' && null != cart_obj.StdSection.stdPackges && typeof cart_obj.StdSection.stdPackges != 'undefined' && cart_obj.StdSection.stdPackges.length > 0) {
						var stdData = cart_obj.StdSection.stdPackges;
                        createAndPushCartStdObj(stdData, "stdData");
					};
					if (null != cart_obj.Services && typeof cart_obj.Services != 'undefined' && cart_obj.Services.length > 0) {
						var serviceData = cart_obj.Services;
                        createAndPushCartServiceObj(serviceData, "serviceData");
					}
					if (null != cart_obj.RemovedServices && typeof cart_obj.RemovedServices != 'undefined' && cart_obj.RemovedServices.length > 0) {
						var removedServiceData = cart_obj.RemovedServices;
                        createAndPushCartServiceObj(removedServiceData, "removedServiceData");
					}
					break;
				case "ctmrinfo":
					if (lp_path == "ctmrinfo,loginStatus") {
						// if(value.toLowerCase()!='no')
						// {
						//     auth_ctmrInfo["info"]["loginStatus"] = 1;

						// }else
						// {
						// auth_ctmrInfo["info"]["loginStatus"] = 0;
						// }
					} else if (lp_path == "ctmrinfo,role") {
						lpCtmrInfo["info"]["role"] = value;
					} else if (lp_path == "ctmrinfo,ctype") {
						lpCtmrInfo["info"]["ctype"] = value;
					} else if (lp_path == "ctmrinfo,username") {
						auth_ctmrInfo["info"]["userName"] = value.replace(/\+/g,'acepl');
					} else if (lp_path == "ctmrinfo,customerId,visionAccountId" || lp_path == "ctmrinfo,customerId,visionCustomerId") {
						if (lpVisionId == "") {
							lpVisionId = value.replace(/\+/g,'acepl');
						} else {
							lpVisionId = lpVisionId + value.replace(/\+/g,'acepl');
						}
					} else if (lp_path == "ctmrinfo,customerId,CAN") {
						auth_ctmrInfo["info"]["accountName"] = value.replace(/\+/g,'acepl');
					} else if (lp_path == "ctmrinfo,customerId,PCAN") {
						auth_ctmrInfo["info"]["companyBranch"] = value.replace(/\+/g,'acepl');
					} else if (lp_path == "ctmrinfo,customerId,BTN") {
// 						lpCtmrInfo["info"]["customerid"] = value;
                        lp_btn=value.replace(/\+/g,'acepl');
					}
					else if (lp_path == "ctmrinfo,customerId,BAN") {
						auth_ctmrInfo["info"]["imei"] = value.replace(/\+/g,'acepl');
					} else if (lp_path == "ctmrinfo,socialId,globalSessionId") {
						lpCtmrInfo["info"]["socialId"] = value;
					} else if (lp_path == "ctmrinfo,cstatus,quantumEligible" || lp_path == "ctmrinfo,cstatus,fiosReady" || lp_path == "ctmrinfo,cstatus,fiosSelfInstall") {
						if (lpStatusVal == "") {
							lpStatusVal = get_lp_value_path[2] + ":" + value;
						} else {
							lpStatusVal = lpStatusVal + "," + get_lp_value_path[2] + ":" + value;
						}
					}
					break;
				case "error":
					lp_error.type = "error";
					
					if (lp_path == "error,code") {
						lp_error.error.code = value.toString();
					} else if (lp_path == "error,message") {
						lp_error.error.message = value.toString();
					}
					break;
				case "service_activity":
					if (lp_path == "service_activity,status,loopqual") {
						if (value) {
							createAndPushServiceActivityObj("LOOPQUAL", 2);
						} else {
							createAndPushServiceActivityObj("LOOPQUAL", 4);
						}
					} else if (lp_path == "service_activity,status,customersaveorder") {
						createAndPushServiceActivityObj("SAVEDORDER", 10, "");
					} else if (lp_path == "service_activity,topic,restoreintent") {
						createAndPushServiceActivityObj(value, 1, "RESTOREINTENT");
					} else if (lp_path == "service_activity,status,tech_scheduled") {
						createAndPushServiceActivityObj(value, "", "TECH_SCHEDULED");
					} else if (lp_path == "service_activity,status,winback") {
						createAndPushServiceActivityObj("WINBACK", 10, "");
					}
					break;
				// case "mrktInfo":
				// 	lp_mrktInfo = {};
				// 	lp_mrktInfo.type = "mrktInfo";
				// 	lp_mrktInfo.info = {};
				// 	lp_mrktInfo.info.affiliate = value;
				// 	break;


			}
		}

	} catch (e) {

	}
}

function createAndPushServiceActivityObj(lp_topic,lp_status,lp_category){
	                            var lp_service_activity_obj={};
								lp_service_activity_obj.topic=lp_topic;
								lp_service_activity_obj.category=lp_category;
								lp_service_activity_obj.status=lp_status;
								lp_service_activity_array.push(lp_service_activity_obj);
}

function createAndPushCartUpdateObj(service_head_arr, cartObjName) {
	for (i = 0; i < service_head_arr.length; i++) {
		var lp_cart_update_product = new Object();
		lp_cart_update_product.product = new Object();
		lp_cart_update_product.quantity = 1 ;
		if (null != service_head_arr[i].quantity && service_head_arr[i].quantity !== '') {
			lp_cart_update_product.quantity = parseInt(service_head_arr[i].quantity);
		}
		if (null != service_head_arr[i].prodId && service_head_arr[i].prodId !== '') {
			lp_cart_update_product.product.sku = service_head_arr[i].prodId;
		}
		if (null != service_head_arr[i].prodType && service_head_arr[i].prodType !=='') {
			if (typeof cartObjName != 'undefined') {
				lp_cart_update_product.product.category = cartObjName;
			} else {
				lp_cart_update_product.product.category = service_head_arr[i].prodType;
			}
		}
		if (null != service_head_arr[i].prodName && service_head_arr[i].prodName !== '') {
			lp_cart_update_product.product.name = service_head_arr[i].prodName;
		}
		if (null != service_head_arr[i].price) {
			var priceValue = parseFloat(service_head_arr[i].price.replace('$', ''));
			if (!isNaN(priceValue)){
				lp_cart_update_product.product.price = priceValue;
			}
		}
		lp_cart_update_products.push(lp_cart_update_product);
	}
}

function createAndPushCartStdObj(service_head_arr, cartObjName) {
	for (i = 0; i < service_head_arr.length; i++) {
		var lp_cart_update_product = new Object();
		lp_cart_update_product.product = new Object();
		lp_cart_update_product.quantity = 1 ;
        if (null != service_head_arr[i].PackageName && service_head_arr[i].PackageName !== '') {
			lp_cart_update_product.product.name = service_head_arr[i].PackageName;
		}
		if (null != service_head_arr[i].HCID && service_head_arr[i].HCID !== '') {
			lp_cart_update_product.product.sku = service_head_arr[i].HCID;
		}
		if (null != service_head_arr[i].HC_CATEGORY && service_head_arr[i].HC_CATEGORY !== '') {
				lp_cart_update_product.product.category = service_head_arr[i].HC_CATEGORY;
		}
        if (null != service_head_arr[i].Quantity && service_head_arr[i].Quantity !== '') {
			    lp_cart_update_product.product.quantity = parseInt(service_head_arr[i].Quantity);
 		    }
		if (null != service_head_arr[i].StdPrice) {
			var priceValue = parseFloat(service_head_arr[i].StdPrice.replace('$', ''));
			if (!isNaN(priceValue)){
				lp_cart_update_product.product.price = priceValue;
			}
		}
		lp_cart_update_products.push(lp_cart_update_product);
	}
}

function createAndPushCartServiceObj(service_head_arr, cartObjName) {
	for (i = 0; i < service_head_arr.length; i++) {
		if (null != service_head_arr[i].ServiceProducts && service_head_arr[i].ServiceProducts.length > 0) {
            for (j = 0; j < service_head_arr[i].ServiceProducts.length; j++) {
                var lp_cart_update_product = new Object();
		        lp_cart_update_product.product = new Object();
		        lp_cart_update_product.quantity = 1 ;
                var serviceProductData = service_head_arr[i].ServiceProducts[j];
				if (null != serviceProductData.ServicePrice) {
					var priceValue = parseFloat(serviceProductData.ServicePrice.replace('$', ''));
					if (!isNaN(priceValue)){
						lp_cart_update_product.product.price = priceValue;
					}
				}
				if (null != serviceProductData.ServiceProdctID && serviceProductData.ServiceProdctID !== '') {
					lp_cart_update_product.product.sku = serviceProductData.ServiceProdctID;
				}
				if (null != serviceProductData.ServiceProdctName && serviceProductData.ServiceProdctName !== '') {
					lp_cart_update_product.product.name = serviceProductData.ServiceProdctName;
				}
				if (null != serviceProductData.Quantity && serviceProductData.Quantity !== '') {
					lp_cart_update_product.quantity = parseInt(serviceProductData.Quantity);
				}
				if (null != service_head_arr[i].ServiceName && service_head_arr[i].ServiceName !== '') {
					lp_cart_update_product.product.category = service_head_arr[i].ServiceName;
				}	
				lp_cart_update_products.push(lp_cart_update_product);
		    }
		}
		// else {
        // 	var lp_cart_update_product = new Object();
		//     lp_cart_update_product.product = new Object();
		//     lp_cart_update_product.quantity = 1 ;
		//     if (null != service_head_arr[i].ServiceName && service_head_arr[i].ServiceName !== '') {
	    //         lp_cart_update_product.product.category = service_head_arr[i].ServiceName;
		// 	}	
		// 	lp_cart_update_products.push(lp_cart_update_product);
		// }
	}
}

function createAndPushCartUpdateDiscounts(promotions, cartObjName) {

	for (i = 0; i < promotions.length; i++) {
		var lp_cart_update_product = new Object();
		lp_cart_update_product.product = new Object();
		if (null != promotions[i].promoId && promotions[i].promoId !== '') {
			lp_cart_update_product.product.sku = promotions[i].promoId;
		}
		if (typeof cartObjName != 'undefined' && cartObjName !== '') {
			lp_cart_update_product.product.category = cartObjName;
		}
		if (null != promotions[i].promoText && promotions[i].promoText !== '') {
			lp_cart_update_product.product.name =promotions[i].promoText;
		}
		if (null != promotions[i].price) {
			var priceValue = parseFloat(promotions[i].price.replace('$', ''));
			if (!isNaN(priceValue)){
				lp_cart_update_product.product.price = priceValue;
			}
		}
		lp_cart_update_products.push(lp_cart_update_product);
	}

}
function createLPContactObj(region, value, lpPersonalJson) {
	var contact_object = {};
	var addr = {};
	addr.region = region;
	addr.country = value.replace(/\+/g,'acepl');
	contact_object.address = addr;
	lpPersonalJson["personal"]["contacts"].push(contact_object);

}

// function lpChatInfoinit() {
// 	lpTag.hooks.push({
// 		name: 'BEFORE_SEND_VISITOR_LINE',
// 		callback: setLpChatinfo(opts)
// 	})
// }
// function setLpChatinfo(opts) {
// 	if (opts && opts.data && opts.data.line && opts.data.line.text === '/convinfo') {
// 		let engagementEvents = lpTag.events.hasFired('LE_ENGAGER', '*');
// 		let convEvents = lpTag.events.hasFired('lpUnifiedWindow', '*');
// 		let renderEvents = lpTag.events.hasFired('RENDERER_STUB', 'AFTER_CREATE_ENGAGEMENT_INSTANCE');

// 		let engId = getLatest(engagementEvents, 'engagementId');
// 		let skillId = getLatest(convEvents, 'skill');
// 		let engagementConf = findRenderEventConf(renderEvents, engId) || {};

// 		let data = {
// 			siteId: lpTag.site,
// 			sections: lpTag.section,
// 			campaign: getLatest(engagementEvents, 'campaignId'),
// 			engagement: engagementConf.name || engId,
// 			window: getLatest(engagementEvents, 'windowId'),
// 			state: getLatest(convEvents, 'state'),
// 			agentName: getLatest(convEvents, 'agentName'),
// 			agentId: getLatest(convEvents, 'agentId'),
// 			convId: getLatest(convEvents, 'conversationId'),
// 			skill: engagementConf.skillName || skillId,
// 			visitorId: getLatest(convEvents, 'visitorId')
// 		};

// 		let div = document.createElement('div');
// 		div.id = 'lp_line_convinfo';
// 		div.innerText = JSON.stringify(data, null, '\t');
// 		document.getElementsByClassName('lpc_transcript')[0].appendChild(div);

// 		opts.data.line.text = '';
// 		let scrollable = document.getElementsByClassName('lp_location_center')[0];
// 		scrollable.scrollTop = scrollable.scrollHeight

// 	}
// }
// function getLatest(array, datum) {
// 	let event = array.reverse().find(function (item) {
// 		return item.data && item.data[datum]
// 	});
// 	if (event) return event.data[datum];
// 	else return undefined;
// }

// function findRenderEventConf(renderEvents, engagementId) {
// 	let event = renderEvents.find(function (ev) {
// 		return ev && ev.data && ev.data.conf && (ev.data.conf.id === engagementId)
// 	});
// 	return event.data.conf
// }

function lpChatOrderSubmissionDetails(chatTracVar, aimsOrderObject) {
	if (typeof aimsOrderObject != 'undefined' && null != aimsOrderObject) {
		try {
            var sales_base_details_array=[];
			if (typeof chatTracVar != 'undefined' && null != chatTracVar) {
				
				sales_base_details_array = chatTracVar.split("-");
			}
			var lp_pd_arr = [];
			var sales_products_list = aimsOrderObject.ca.split(",");
			for (i = 0; i < sales_products_list.length; i++) {
				var lp_pd_obj = {};
				lp_pd_obj.product = new Object;
				lp_pd_obj.quantity = aimsOrderObject.qn.split(",")[i];
				lp_pd_obj.product.name = sales_products_list[i].split("-")[1];
				lp_pd_obj.product.category = sales_products_list[i].split("-")[0];
				lp_pd_obj.product.price = aimsOrderObject.pc.split(",")[i];
				lp_pd_arr.push(lp_pd_obj);
			}
			var lp_transact_obj = {};
			lp_transact_obj.type = "purchase";
			lp_transact_obj.currency = "USD";
			lp_transact_obj.orderId="";
			for (i = 0; i < sales_base_details_array.length; i++) {
				if (sales_base_details_array[i].split("=")[0] == "MON") {
					if(lp_transact_obj.orderId=="")
					{
						lp_transact_obj.orderId = sales_base_details_array[i].split("=")[1];
					}
					// else{
					// 	lp_transact_obj.orderId=lp_transact_obj.orderId+"|"+sales_base_details_array[i].split("=")[1];
					// }
				}
			}

			lp_transact_obj.cart = new Object();
			lp_transact_obj.cart.products = lp_pd_arr;
			var lpSdeArray=new Array();
			lpSdeArray.push(lp_transact_obj);
			lpTag.sdes = lpTag.sdes || [];
            lpTag.sdes.push(lpSdeArray);
		}
		catch (e) {

		}
	}
}

function callLPCompensationFlow(chatId,agentId, agentSalesCode){
	// console.log(" callLPCompensationFlow "+chatId+" agentid "+agentId);
	if(typeof setChatAgentInfo != 'undefined'){ 
		setChatAgentInfo(agentId, chatId, agentSalesCode);
	}else{
		updateSalesQualificationDetails(chatId, agentId, agentSalesCode, 'LP');
	}
	var global_Session_Id = readTCCookieInfo("lp_gsid");
	var aDtURL=escape(top.location.href);
	if(aDtURL !=null){
		aDtURL=aDtURL.substring(0,100);
	}
	var aTCRef=escape(document.referrer);
	if(aTCRef !=null){
		aTCRef=aTCRef.substring(0,100);
	}
	var chatData = {
		"chat-session-id" : chatId,
		"agent-Id" : agentId,
		"agent-sales-code" : agentSalesCode,
		"global-session-id" : global_Session_Id,
		"global-session-id25" : '',
		"LOG-TO-DB" : "TRUE",
		"source-app" : "",
		"lob" : "consumer",
		"chatCompensationFlow":"false",
		"ERROR" : "",
		"EVENT" : "INTERACTIVE_CHAT",
		"dotcomURL" : aDtURL,
		"referrer" : aTCRef
		// "chatInitiatedPage": chatInitiatedPage
	};
	try {
		//Yet to save into DB.
		var log = {
		"log-message" : chatData,
		"log-level" : "warn",
		"log-action" : "INTERACTIVE_CHAT",
		"LOG-TO-DB" : "true",
		"log-time-stamp" : new Date().getTime()
		};
		logDetails(log);				
	}			
	catch(e) {}
}

function updateLiveChatevents(lcEvent){
	try{
		if(typeof lpTag!='undefined')
	  	{
			
			// console.log(lcEvent, "lcevent");
			if (lcEvent != undefined && lcEvent != null){
				lpTag.sdes.get().service=[];
				lpTag.sdes.push(lcEvent)
			}
		}
	}catch(e)
	{
		// console.log("updateLivechatevents error "+e);
	}
}

function refreshChatHashTagNC(){
	try {
		lpAutoClickFlag=false;
		qHealthCount = 0;
		lpCallQueueHelpCount = 0;
		lpChatHided = false;
		startQhealthInterval = true;
		highestPriority = 0;
		lpChatEnabled = false;
		lpprioritylevel = "";
		lp_Global_Hide_Count = 0;
		if (apiInterval != null && typeof apiInterval != "undefined"){
			clearInterval(apiInterval);
		}

		if (typeof lpTag != 'undefined' && lpTag != null) {
			if (location.hash != "" && location.hash != "#enable-lp-dev-users") {
				var sec_hash_arr = window.location.href.split('#');
				var urc_section_array = (window.lpTag && window.lpTag.section) || [];
				// 			var urc_section_array=[];
				for (i = 1; i < sec_hash_arr.length; i++) {
					urc_section_array.push(sec_hash_arr[i].replace(/["?\/"]/g, ""));
				}
			}
			else{
				var urc_section_array = (window.lpTag && window.lpTag.section) || [];
			}
			if (window.location.href.indexOf('AmznC2Chat') != -1 && urc_section_array.indexOf("AmznC2Chat") == -1){
				urc_section_array.push("AmznC2Chat");
			}
			try {
				// console.log(urc_section_array, "urc_section_array_NC")
				lpTag.newPage(location.href, {
					section: urc_section_array,
					sdes: [
					], taglets: {
					}
				});
			}
			catch (e) {

			}
		}
	}
	catch(e){}	
}

var consData = {
    NEW_AGENT_TYPING_INDICATOR: "Incoming message",
    OLD_AGENT_TYPING_INDICATOR: "Agent is typing...",
    CHAT_WITH_US: 'Chat with us',
    MESSAGE_US: 'Message us'
}
var  headerObserver = new MutationObserver(function (mutationsList) {
	for (var i=0;i<mutationsList.length;i++) {
		var mutation=mutationsList[i];
		for (var j=0;j<mutation.addedNodes.length;j++){
			var node=mutation.addedNodes[j];
			if (node.nodeType === 3 && node.textContent === consData.MESSAGE_US) {
				node.textContent = consData.CHAT_WITH_US;
			}
		}
	}
});
// hide inspicio button
var inspicioObserver = new MutationObserver(function (mutationsList) {
  for (var i=0;i<mutationsList.length;i++) {
      var mutation=mutationsList[i];
      // console.log(mutation.target);
      mutation.target.style.display = 'none';
  }
});
// change "agent is typing" message
var agentTypingObserver = new MutationObserver(function (mutationsList){
  for (var i=0;i<mutationsList.length;i++) {
      var mutation=mutationsList[i];
      if(mutation.target.textContent === consData.OLD_AGENT_TYPING_INDICATOR) {
          mutation.target.textContent = consData.NEW_AGENT_TYPING_INDICATOR;
      }
  }
});

var lpNewPageFlag=false;
function refreshChatHashTag()
{
	try {
	lpChatEnabled = false;	
	startQhealthInterval = true;
	highestPriority = 0;	
	if (apiInterval != null && typeof apiInterval != "undefined"){
		clearInterval(apiInterval);
	}	
	lpAutoClickFlag=false;
	lpNewPageFlag = true;
	qHealthCount = 0;
	lpCallQueueHelpCount = 0;
	lpChatHided = false;
	lpprioritylevel = "";
	lp_Global_Hide_Count = 0;
	if (typeof lpTag != 'undefined' && lpTag != null) {
		if (location.hash != "" && location.hash != "#enable-lp-dev-users") {
			var sec_hash_arr = window.location.href.split('#');
			var urc_section_array = (window.lpTag && window.lpTag.section) || [];
			// 			var urc_section_array=[];
			for (i = 1; i < sec_hash_arr.length; i++) {
				urc_section_array.push(sec_hash_arr[i].replace(/["?\/"]/g, ""));
			}
		}
		if (window.location.href.indexOf('AmznC2Chat') != -1 && urc_section_array.indexOf("AmznC2Chat") == -1){
			urc_section_array.push("AmznC2Chat");
		}
		try {
			lpTag.newPage(location.href, {
				section: urc_section_array,
				sdes: [
				], taglets: {
				}
			});
		}
		catch (e) {

		}
			lpNewPageFlag = false;
	}
}catch(e){

}
}

function updateJWE(){
	try
	{
	if (setChatLibIfEnabled() == "L") {
			makeLpAjaxCall(auth_sde_array);
	}else{
		clearInterval(updateJweFlow);
		createTCCookie("updateJwtFlag",null);
	}
	}
	catch(e)
	{
		
	}
}

var auth_sde_array=[];
var auth_ctmrInfo={};
auth_ctmrInfo.type="ctmrinfo";
auth_ctmrInfo.info={};
auth_ctmrInfo.info.imei="";
auth_ctmrInfo.info.userName="";
auth_ctmrInfo.info.companyBranch="";
auth_ctmrInfo.info.accountName="";
if((null!=readTCCookieInfo("loggedIn")&&(readTCCookieInfo("loggedIn")==true||readTCCookieInfo("loggedIn")=='true'))||(null!=readTCCookieInfo("userinfo")&&readTCCookieInfo("userinfo")!=''))
{
auth_ctmrInfo.info.loginStatus=1;
}else{
	auth_ctmrInfo.info.loginStatus=0;
}
auth_sde_array.push(auth_ctmrInfo);
auth_sde_array.push(lpPersonalJson);

var lp_Hide_Count = 0;
var lpChatEnabled = false;
var lpChatHided = false;
var startQhealthInterval = true;
var apiInterval;
function hideLPChatButton() {
	// var lp_ChatQuerySelector = document.querySelector('[id^="LPMcontainer"]');  	
	// if(lp_Hide_Count < 5 && (null != lp_ChatQuerySelector || lp_Hide_Count === 0)){
	try {
		if (lpChatEnabled === false) {
			// if(lp_Hide_Count === 0){
			// 	setTimeout(getSkillData, 30000, qHealthApiParams);
			// }
			if(lp_Hide_Count < 10){
				lp_Hide_Count++;
				window.lpTag.events.trigger('LP_OFFERS', 'HIDE');
				setTimeout("hideLPChatButton()", 2000);
			}
		}  	
	}
	catch(e){

	}
}


var lp_Global_Hide_Count = 0
function hideLPChatButtonForGlobal(){
	if(lp_Global_Hide_Count < 20){
		lp_Global_Hide_Count++;
		window.lpTag.events.trigger('LP_OFFERS', 'HIDE');
	 	setTimeout("hideLPChatButtonForGlobal()", 2000);
	}
}

function displayLPChatButton() {
  var section = (window.lpTag && window.lpTag.section) || [];
  window.lpTag.newPage(document.URL, {
    section: section,
    sdes: [],
    taglets: {
    },
  });
}

function convInfoInit() {
	try {
	lpTag.external = lpTag.external || {};
	lpTag.external.convInfo = {
		getData: function getData() {
		var convEvents = lpTag.events.hasFired("lpUnifiedWindow", "conversationInfo");
		var windowStateEvents = lpTag.events.hasFired("lpUnifiedWindow", "state");
		var renderEvents = lpTag.events.hasFired("RENDERER_STUB", "AFTER_CREATE_ENGAGEMENT_INSTANCE");
		var engagementClicks = lpTag.events.hasFired("LP_OFFERS", "OFFER_CLICK");
		var displayedEngagements = renderEvents.map(this._extractEngDetails) || [];
		var latestEngagementClick = this._getLatest(engagementClicks) || {};
		var clickedEngagementRender = this._findRenderEvent(renderEvents, latestEngagementClick.engagementId) || {};

		var clickedEngagement = this._extractEngDetails(clickedEngagementRender);

		var lpVidCookie = document.cookie.split("; ").find(function (row) {
			return row.startsWith("LPVID");
		});
		var lpSidCookie = document.cookie.split("; ").find(function (row) {
			return row.startsWith("LPSID-".concat(lpTag.site));
		});
		var lpVid = lpVidCookie ? lpVidCookie.split("=")[1] : undefined;
		var lpSid = lpSidCookie ? lpSidCookie.split("=")[1] : undefined;

		var ceVid = this._getLatest(convEvents, "visitorId");

		var pid = lpVid !== ceVid ? ceVid : undefined;
		return {
			clickedEngagement: clickedEngagement,
			latestSkillId: this._getLatest(convEvents, "skill"),
			latestAgentId: this._getLatest(convEvents, "agentId"),
			latestConvId: this._getLatest(convEvents, "conversationId"),
			latestAgentName: this._getLatest(convEvents, "agentName"),
			latestWindowState: this._getLatest(windowStateEvents, "state"),
			displayedEngagements: displayedEngagements,
			lpSid: lpSid,
			lpVid: lpVid,
			pid: pid,
			siteId: lpTag.site,
			sections: lpTag.section
		};
		},
		showData: function showData(opts) {
		if (opts && opts.data && opts.data.line && opts.data.line.text === "/convinfo") {
			var data = lpTag.external.convInfo.getData();
			var div = document.createElement("div");
			div.id = "lp_line_convinfo";
			div.innerText = JSON.stringify(data, null, "\t");
			document.getElementsByClassName("lpc_transcript")[0].appendChild(div);
			opts.data.line.text = "";
			var scrollable = document.getElementsByClassName("lp_location_center")[0];
			scrollable.scrollTop = scrollable.scrollHeight;
		}
		},
		_getLatest: function _getLatest(array, datum) {
		var event = undefined;

		if (datum) {
			for (var i = array.length - 1; i >= 0; i--) {
			if (array[i].data && array[i].data[datum]) {
				event = array[i];
				break;
			}
			}
		} else event = array[array.length - 1];

		if (event && event.data) return datum ? event.data[datum] : event.data;else return undefined;
		},
		_findRenderEvent: function _findRenderEventConf(renderEvents, engagementId) {
		return renderEvents.find(function (ev) {
			return ev && ev.data && ev.data.conf && ev.data.conf.id === engagementId;
		});
		},
		_extractEngDetails: function _returnEngDetails(renderEvent) {
		var eng = renderEvent.data && renderEvent.data.eng;

		if (eng && eng.conf) {
			var details = {
			campaignId: eng.conf.campaignId,
			engagementId: eng.conf.id,
			engagementName: eng.conf.name,
			skillId: eng.conf.skillId,
			skillName: eng.conf.skillName,
			container: eng.mainContainer,
			windowId: eng.conf.windowId
			};
		}

		return details;
		}
	};
		lpTag.hooks.push({
			name: "BEFORE_SEND_VISITOR_LINE",
			callback: lpTag.external.convInfo.showData
		});
	}
	catch(e){
		// console.log(e, "convinfo error");
	}	
}

function loadOneBotScript( url, callback ) {
	try {
		var script = document.createElement( "script" )
		script.type = "text/javascript";
		if(script.readyState) { // only required for IE <9
			script.onreadystatechange = function() {
				if ( script.readyState === "loaded" || script.readyState === "complete" ) {
					script.onreadystatechange = null;
					callback();
				}
			};
		} else { //Others
			script.onload = function() {
				callback();
			};
		}
		script.src = url;
		document.getElementsByTagName( "head" )[0].appendChild( script );
	}
	catch(e){

	}	
}
// function oneBotInitiated(conv_id){
// 	if(conv_id != null && typeof conv_id != 'undefined' && conv_id != ''){
// 		createTCCookie("one-bot-chat-inprogress", conv_id);
// 	}
// }
function hideHomeChatBot(isRefresh){
	try {
		if (loadASAPPComplete){
			if (typeof isRefresh != 'undefined' && isRefresh != null && isRefresh) {
				var aCky= readTCCookieInfo("ASAPP_CHAT_IN_PROGRESS");
				try{			
					if(aCky  !=null && aCky == 'Y'){
						return
					}
				}catch(e){}
			}
			if(document.getElementById('asapp-chat-sdk-badge') != null){
				window.ASAPP("hide"); 
				document.getElementById('asapp-chat-sdk-badge').style.display = "none";
			}
		}
		else {
			if (typeof isRefresh != 'undefined' && isRefresh != null && isRefresh) {
				var hbChat = window.sessionStorage.getItem("home_bot_sId");
				try{			
					if(hbChat != null && hbChat != ''){
						return;
					}
				}catch(e){}
			}
			if(document.getElementById('divhomebot') != null){
				document.getElementById('divhomebot').style.display='none';				
			}
		}
	}
	catch(e) {

	}
}
function getASAPPDataPass(){
	return asappChatData;
}

function loadOneBotChatLib(){
	try { 
	    if (setChatLibIfEnabled() != 'B'){
	    	return;
	    }
		if(document.body == null || document.readyState == "loading"){
			if(ccaiBotLoadLibCount > 10){
				return;
			}
			setTimeout("loadOneBotChatLib()",1000);
			ccaiBotLoadLibCount++;
			return;
		}
		oneBotDataPass=getASAPPDataPass();
		oneBotFlag=true;
		if (document.getElementById('divhomebot') != null){
			return
		}
		var btn = document.createElement("div");
		btn.id="divhomebot";
		document.body.appendChild(btn);
// 		script = document.createElement('script');
// 		script.async = 1;
		var scriptSource = 'https://www.verizon.com/vzbot/src/public/ccai/ccai.js';
		if (window.location.hostname.toLowerCase().indexOf("www98.verizon.com") > -1 || window.location.hostname.toLowerCase().indexOf("wwwawssit.ebiz.verizon.com") > -1 || window.location.hostname.toLowerCase().indexOf("vzwqa") > -1){
			scriptSource = 'https://www98.verizon.com/vzbot/src/public/ccai/ccai.js';
		}
        loadOneBotScript(scriptSource, function() {
			// alert('script ready!');
			// var oneBotConvId = readTCCookieInfo("one-bot-chat-inprogress");
			if(typeof chatbotParams !='undefined' && chatbotParams !=null && typeof chatbotParams.intent !='undefined' && chatbotParams.intent !=null&&typeof chatbotParams.callingEntity !='undefined'&&chatbotParams.callingEntity!=null&&chatbotParams.callingEntity.toLowerCase()=="ivr")
			{
				if(chatbotParams.intent.toLowerCase()!='vz_ivr_operator')
				{
					ivr_chat_intent=chatbotParams.intent;
				}else if(chatbotParams.intent.toLowerCase()=='vz_ivr_operator'){
					ivr_chat_intent='';
				}
				// chaturl = "https://www.verizon.com/vzbot/vzbotproxy/web?b=IVRMyFiosWeb&cx=" + ivr_chat_intent;
				// if (window.location.hostname.toLowerCase().indexOf("www98.verizon.com") > -1 || window.location.hostname.toLowerCase().indexOf("wwwawssit.ebiz.verizon.com") > -1) {
				enableChat('IVRMyFiosWeb',ivr_chat_intent);
					// chaturl= "https://wwwgmuv-vzchatbot-east-yz.ebiz.verizon.com/vzbot/vzbotproxy/web?b=home";
					// chaturl = "https://www98.verizon.com/vzbot/vzbotproxy/web?b=IVRMyFiosWeb&cx=" + ivr_chat_intent;
				// }
			}
			else {
				enableChat('GDFMyFiosWeb', '');
			}
		});
		
		try {
			// chaturl = "https://www.verizon.com/vzbot/vzbotproxy/web?b=home"
			// if (window.location.hostname.toLowerCase().indexOf("www98.verizon.com") > -1 || window.location.hostname.toLowerCase().indexOf("wwwawssit.ebiz.verizon.com") > -1) {
				// chaturl= "https://wwwgmuv-vzchatbot-east-yz.ebiz.verizon.com/vzbot/vzbotproxy/web?b=home";
				// chaturl = "https://www98.verizon.com/vzbot/vzbotproxy/web?b=home"
				// enableChat(channelName,intent);
			// }
// 			
		}
		catch(e){
			// chaturl = "https://www.verizon.com/vzbot/vzbotproxy/web?b=home";
		}
		// var btn = document.createElement("div"); 
		// 		btn.id="divchatbot";
		// 		document.body.appendChild(btn);
		// 		//inqSiteID=38442021;
		// 		//event listener registered
		// 		window.addEventListener("message", receiveMessageVZTC, false);
		// 		document.addEventListener('mousedown',function(e){
		// 			var iframeEl = document.querySelectorAll("iframe#chatBotFO")[0]; 
		// 			var ele = document.getElementById('chatBot')
					
		// 				   if(e.target && e.target.id== 'chatBot'){
		// 					   ele.style.cursor = 'all-scroll';
							   
		// 						 var offsetX = e.clientX - parseInt(window.getComputedStyle(ele).left);
		// 						 var offsetY = (e.clientY - parseInt(window.getComputedStyle(ele).top) ) || 0;
		// 						 function mouseMoveHandler(e) {
		// 						   ele.style.top = (e.clientY - offsetY) + 'px';
		// 						   ele.style.left = (e.clientX - offsetX) + 'px';
		// 						 }
							 
		// 						 function reset() {
		// 						   window.removeEventListener('mousemove', mouseMoveHandler);
		// 						   window.removeEventListener('mouseup', reset);
		// 						 }
							 
		// 						 window.addEventListener('mousemove', mouseMoveHandler);
		// 						 window.addEventListener('mouseup', reset);
		// 					}
		// 		});
		// 		enableChatVZTC();
			}
	catch(e){

	}		
}
	
function homeBotProactive(){
	try
	{
		if(document.getElementById('chatIcon')!=null)
		{
			document.getElementById('chatIcon').click();
		}
	}
	catch(e)
	{

		}
}
	
	///////////////////Site catalyst LP calls///////////////////////////////////
/*********************************************************************/
/*						LP ends here...								 */
/*********************************************************************/


